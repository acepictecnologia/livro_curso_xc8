

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Thu Apr 04 15:30:11 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    34                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    35                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    36                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    37  0000                     
    38                           ; Version 2.05
    39                           ; Generated 20/12/2018 GMT
    40                           ; 
    41                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    42                           ; All rights reserved.
    43                           ; 
    44                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    45                           ; 
    46                           ; Redistribution and use in source and binary forms, with or without modification, are
    47                           ; permitted provided that the following conditions are met:
    48                           ; 
    49                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    50                           ;        conditions and the following disclaimer.
    51                           ; 
    52                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    53                           ;        of conditions and the following disclaimer in the documentation and/or other
    54                           ;        materials provided with the distribution.
    55                           ; 
    56                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    57                           ;        software without specific prior written permission.
    58                           ; 
    59                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    60                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    61                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    62                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    63                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    64                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    65                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    66                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    67                           ; 
    68                           ; 
    69                           ; Code-generator required, PIC18F4520 Definitions
    70                           ; 
    71                           ; SFR Addresses
    72  0000                     _TMR0	set	4054
    73  0000                     _PORTDbits	set	3971
    74  0000                     _PORTEbits	set	3972
    75  0000                     _PORTD	set	3971
    76  0000                     _TRISEbits	set	3990
    77  0000                     _TRISD	set	3989
    78  0000                     _T0CON	set	4053
    79  0000                     _INTCON	set	4082
    80  0000                     _ADCON1	set	4033
    81  0000                     _PORTBbits	set	3969
    82  0000                     _TRISBbits	set	3987
    83  0000                     _TMR0IF	set	32658
    84                           
    85                           	psect	smallconst
    86  000600                     __psmallconst:
    87                           	opt callstack 0
    88  000600  00                 	db	0
    89  000601                     STR_1:
    90  000601  43                 	db	67	;'C'
    91  000602  4F                 	db	79	;'O'
    92  000603  4E                 	db	78	;'N'
    93  000604  54                 	db	84	;'T'
    94  000605  41                 	db	65	;'A'
    95  000606  20                 	db	32
    96  000607  35                 	db	53	;'5'
    97  000608  73                 	db	115	;'s'
    98  000609  20                 	db	32
    99  00060A  3A                 	db	58	;':'
   100  00060B  20                 	db	32
   101  00060C  30                 	db	48	;'0'
   102  00060D  30                 	db	48	;'0'
   103  00060E  00                 	db	0
   104  00060F                     STR_2:
   105  00060F  43                 	db	67	;'C'
   106  000610  4F                 	db	79	;'O'
   107  000611  4E                 	db	78	;'N'
   108  000612  54                 	db	84	;'T'
   109  000613  41                 	db	65	;'A'
   110  000614  20                 	db	32
   111  000615  31                 	db	49	;'1'
   112  000616  30                 	db	48	;'0'
   113  000617  73                 	db	115	;'s'
   114  000618  3A                 	db	58	;':'
   115  000619  20                 	db	32
   116  00061A  30                 	db	48	;'0'
   117  00061B  30                 	db	48	;'0'
   118  00061C  00                 	db	0
   119  00061D                     STR_3:
   120  00061D  25                 	db	37
   121  00061E  30                 	db	48	;'0'
   122  00061F  32                 	db	50	;'2'
   123  000620  64                 	db	100	;'d'
   124  000621  00                 	db	0
   125  0000                     
   126                           ; #config settings
   127  000622  00                 	db	0	; dummy byte at the end
   128  0000                     
   129                           	psect	cinit
   130  001482                     __pcinit:
   131                           	opt callstack 0
   132  001482                     start_initialization:
   133                           	opt callstack 0
   134  001482                     __initialization:
   135                           	opt callstack 0
   136                           
   137                           ; Clear objects allocated to BANK0 (50 bytes)
   138  001482  EE00  F080         	lfsr	0,__pbssBANK0
   139  001486  0E32               	movlw	50
   140  001488                     clear_0:
   141  001488  6AEE               	clrf	postinc0,c
   142  00148A  06E8               	decf	wreg,f,c
   143  00148C  E1FD               	bnz	clear_0
   144                           
   145                           ; Clear objects allocated to COMRAM (12 bytes)
   146  00148E  EE00  F069         	lfsr	0,__pbssCOMRAM
   147  001492  0E0C               	movlw	12
   148  001494                     clear_1:
   149  001494  6AEE               	clrf	postinc0,c
   150  001496  06E8               	decf	wreg,f,c
   151  001498  E1FD               	bnz	clear_1
   152  00149A                     end_of_initialization:
   153                           	opt callstack 0
   154  00149A                     __end_of__initialization:
   155                           	opt callstack 0
   156  00149A  9075               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   157  00149C  9275               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   158  00149E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   159  0014A0  6EF8               	movwf	tblptru,c
   160  0014A2  0100               	movlb	0
   161  0014A4  EFE5  F007         	goto	_main	;jump to C main() function
   162                           
   163                           	psect	bssCOMRAM
   164  000069                     __pbssCOMRAM:
   165                           	opt callstack 0
   166  000069                     _width:
   167                           	opt callstack 0
   168  000069                     	ds	2
   169  00006B                     _prec:
   170                           	opt callstack 0
   171  00006B                     	ds	2
   172  00006D                     _flags:
   173                           	opt callstack 0
   174  00006D                     	ds	2
   175  00006F                     _conta10s:
   176                           	opt callstack 0
   177  00006F                     	ds	2
   178  000071                     _conta5s:
   179                           	opt callstack 0
   180  000071                     	ds	2
   181  000073                     _T0_10s:
   182                           	opt callstack 0
   183  000073                     	ds	2
   184                           
   185                           	psect	bssBANK0
   186  000080                     __pbssBANK0:
   187                           	opt callstack 0
   188  000080                     _nout:
   189                           	opt callstack 0
   190  000080                     	ds	2
   191  000082                     _dbuf:
   192                           	opt callstack 0
   193  000082                     	ds	32
   194  0000A2                     _bufferLCD:
   195                           	opt callstack 0
   196  0000A2                     	ds	16
   197                           
   198                           	psect	cstackBANK0
   199  0000B2                     __pcstackBANK0:
   200                           	opt callstack 0
   201  0000B2                     	ds	2
   202  0000B4                     sprintf@ap:
   203                           	opt callstack 0
   204                           
   205                           ; 2 bytes @ 0x2
   206  0000B4                     	ds	2
   207  0000B6                     sprintf@f:
   208                           	opt callstack 0
   209                           
   210                           ; 6 bytes @ 0x4
   211  0000B6                     	ds	6
   212                           
   213                           	psect	cstackCOMRAM
   214  000001                     __pcstackCOMRAM:
   215                           	opt callstack 0
   216  000001                     ??_int_TMR0:
   217  000001                     
   218                           ; 1 bytes @ 0x0
   219  000001                     	ds	3
   220  000004                     ?_strlen:
   221                           	opt callstack 0
   222  000004                     ?_isdigit:
   223                           	opt callstack 0
   224  000004                     ?_isspace:
   225                           	opt callstack 0
   226  000004                     ?___wmul:
   227                           	opt callstack 0
   228  000004                     ?___aodiv:
   229                           	opt callstack 0
   230  000004                     ?___aomod:
   231                           	opt callstack 0
   232  000004                     set_bit@comp:
   233                           	opt callstack 0
   234  000004                     ___wmul@multiplier:
   235                           	opt callstack 0
   236  000004                     isdigit@c:
   237                           	opt callstack 0
   238  000004                     isspace@c:
   239                           	opt callstack 0
   240  000004                     fputc@c:
   241                           	opt callstack 0
   242  000004                     strlen@s:
   243                           	opt callstack 0
   244  000004                     ___aodiv@dividend:
   245                           	opt callstack 0
   246  000004                     ___aomod@dividend:
   247                           	opt callstack 0
   248                           
   249                           ; 8 bytes @ 0x3
   250  000004                     	ds	1
   251  000005                     set_bit@cmd:
   252                           	opt callstack 0
   253                           
   254                           ; 1 bytes @ 0x4
   255  000005                     	ds	1
   256  000006                     ??_lcd_cmd:
   257  000006                     ??_isdigit:
   258  000006                     ??_isspace:
   259  000006                     ___wmul@multiplicand:
   260                           	opt callstack 0
   261  000006                     fputc@fp:
   262                           	opt callstack 0
   263  000006                     strlen@a:
   264                           	opt callstack 0
   265                           
   266                           ; 2 bytes @ 0x5
   267  000006                     	ds	1
   268  000007                     lcd_cmd@cmd:
   269                           	opt callstack 0
   270                           
   271                           ; 1 bytes @ 0x6
   272  000007                     	ds	1
   273  000008                     ??_lcd_ini:
   274  000008                     ??_fputc:
   275  000008                     lcd_envia_byte@dado:
   276                           	opt callstack 0
   277  000008                     ___wmul@product:
   278                           	opt callstack 0
   279                           
   280                           ; 2 bytes @ 0x7
   281  000008                     	ds	1
   282  000009                     lcd_ini@i:
   283                           	opt callstack 0
   284  000009                     lcd_envia_byte@nivel:
   285                           	opt callstack 0
   286                           
   287                           ; 1 bytes @ 0x8
   288  000009                     	ds	1
   289  00000A                     lcd_escreve_bf@col:
   290                           	opt callstack 0
   291  00000A                     _isspace$974:
   292                           	opt callstack 0
   293                           
   294                           ; 1 bytes @ 0x9
   295  00000A                     	ds	1
   296  00000B                     ?_atoi:
   297                           	opt callstack 0
   298  00000B                     lcd_escreve_bf@str:
   299                           	opt callstack 0
   300  00000B                     atoi@s:
   301                           	opt callstack 0
   302                           
   303                           ; 2 bytes @ 0xA
   304  00000B                     	ds	1
   305  00000C                     ___aodiv@divisor:
   306                           	opt callstack 0
   307  00000C                     ___aomod@divisor:
   308                           	opt callstack 0
   309                           
   310                           ; 8 bytes @ 0xB
   311  00000C                     	ds	1
   312  00000D                     ??_atoi:
   313  00000D                     lcd_escreve_bf@end:
   314                           	opt callstack 0
   315  00000D                     fputs@s:
   316                           	opt callstack 0
   317                           
   318                           ; 2 bytes @ 0xC
   319  00000D                     	ds	1
   320  00000E                     lcd_escreve_bf@lin:
   321                           	opt callstack 0
   322                           
   323                           ; 1 bytes @ 0xD
   324  00000E                     	ds	1
   325  00000F                     fputs@fp:
   326                           	opt callstack 0
   327                           
   328                           ; 2 bytes @ 0xE
   329  00000F                     	ds	2
   330  000011                     fputs@c:
   331                           	opt callstack 0
   332  000011                     atoi@neg:
   333                           	opt callstack 0
   334                           
   335                           ; 2 bytes @ 0x10
   336  000011                     	ds	1
   337  000012                     fputs@i:
   338                           	opt callstack 0
   339                           
   340                           ; 2 bytes @ 0x11
   341  000012                     	ds	1
   342  000013                     _atoi$956:
   343                           	opt callstack 0
   344                           
   345                           ; 2 bytes @ 0x12
   346  000013                     	ds	1
   347  000014                     ?_pad:
   348                           	opt callstack 0
   349  000014                     ___aodiv@counter:
   350                           	opt callstack 0
   351  000014                     ___aomod@counter:
   352                           	opt callstack 0
   353  000014                     pad@fp:
   354                           	opt callstack 0
   355                           
   356                           ; 2 bytes @ 0x13
   357  000014                     	ds	1
   358  000015                     ___aodiv@sign:
   359                           	opt callstack 0
   360  000015                     ___aomod@sign:
   361                           	opt callstack 0
   362  000015                     _atoi$958:
   363                           	opt callstack 0
   364                           
   365                           ; 2 bytes @ 0x14
   366  000015                     	ds	1
   367  000016                     ?_abs:
   368                           	opt callstack 0
   369  000016                     pad@buf:
   370                           	opt callstack 0
   371  000016                     abs@a:
   372                           	opt callstack 0
   373  000016                     ___aodiv@quotient:
   374                           	opt callstack 0
   375                           
   376                           ; 8 bytes @ 0x15
   377  000016                     	ds	1
   378  000017                     _atoi$957:
   379                           	opt callstack 0
   380                           
   381                           ; 1 bytes @ 0x16
   382  000017                     	ds	1
   383  000018                     ??_abs:
   384  000018                     pad@p:
   385                           	opt callstack 0
   386  000018                     atoi@n:
   387                           	opt callstack 0
   388                           
   389                           ; 2 bytes @ 0x17
   390  000018                     	ds	2
   391  00001A                     ??_pad:
   392                           
   393                           ; 1 bytes @ 0x19
   394  00001A                     	ds	1
   395  00001B                     pad@i:
   396                           	opt callstack 0
   397                           
   398                           ; 2 bytes @ 0x1A
   399  00001B                     	ds	2
   400  00001D                     pad@w:
   401                           	opt callstack 0
   402                           
   403                           ; 2 bytes @ 0x1C
   404  00001D                     	ds	2
   405  00001F                     ?_dtoa:
   406                           	opt callstack 0
   407  00001F                     dtoa@fp:
   408                           	opt callstack 0
   409                           
   410                           ; 2 bytes @ 0x1E
   411  00001F                     	ds	2
   412  000021                     dtoa@d:
   413                           	opt callstack 0
   414                           
   415                           ; 8 bytes @ 0x20
   416  000021                     	ds	8
   417  000029                     ??_dtoa:
   418                           
   419                           ; 1 bytes @ 0x28
   420  000029                     	ds	8
   421  000031                     _dtoa$484:
   422                           	opt callstack 0
   423                           
   424                           ; 2 bytes @ 0x30
   425  000031                     	ds	2
   426  000033                     dtoa@p:
   427                           	opt callstack 0
   428                           
   429                           ; 2 bytes @ 0x32
   430  000033                     	ds	2
   431  000035                     dtoa@w:
   432                           	opt callstack 0
   433                           
   434                           ; 2 bytes @ 0x34
   435  000035                     	ds	2
   436  000037                     dtoa@s:
   437                           	opt callstack 0
   438                           
   439                           ; 2 bytes @ 0x36
   440  000037                     	ds	2
   441  000039                     dtoa@n:
   442                           	opt callstack 0
   443                           
   444                           ; 8 bytes @ 0x38
   445  000039                     	ds	8
   446  000041                     dtoa@i:
   447                           	opt callstack 0
   448                           
   449                           ; 2 bytes @ 0x40
   450  000041                     	ds	2
   451  000043                     ?_vfpfcnvrt:
   452                           	opt callstack 0
   453  000043                     vfpfcnvrt@fp:
   454                           	opt callstack 0
   455                           
   456                           ; 2 bytes @ 0x42
   457  000043                     	ds	2
   458  000045                     vfpfcnvrt@fmt:
   459                           	opt callstack 0
   460                           
   461                           ; 2 bytes @ 0x44
   462  000045                     	ds	2
   463  000047                     vfpfcnvrt@ap:
   464                           	opt callstack 0
   465                           
   466                           ; 2 bytes @ 0x46
   467  000047                     	ds	2
   468  000049                     ??_vfpfcnvrt:
   469                           
   470                           ; 1 bytes @ 0x48
   471  000049                     	ds	4
   472  00004D                     vfpfcnvrt@ll:
   473                           	opt callstack 0
   474                           
   475                           ; 8 bytes @ 0x4C
   476  00004D                     	ds	8
   477  000055                     vfpfcnvrt@done:
   478                           	opt callstack 0
   479                           
   480                           ; 2 bytes @ 0x54
   481  000055                     	ds	2
   482  000057                     _vfpfcnvrt$499:
   483                           	opt callstack 0
   484                           
   485                           ; 2 bytes @ 0x56
   486  000057                     	ds	2
   487  000059                     ?_vfprintf:
   488                           	opt callstack 0
   489  000059                     vfprintf@fp:
   490                           	opt callstack 0
   491                           
   492                           ; 2 bytes @ 0x58
   493  000059                     	ds	2
   494  00005B                     vfprintf@fmt:
   495                           	opt callstack 0
   496                           
   497                           ; 2 bytes @ 0x5A
   498  00005B                     	ds	2
   499  00005D                     vfprintf@ap:
   500                           	opt callstack 0
   501                           
   502                           ; 2 bytes @ 0x5C
   503  00005D                     	ds	2
   504  00005F                     vfprintf@cfmt:
   505                           	opt callstack 0
   506                           
   507                           ; 2 bytes @ 0x5E
   508  00005F                     	ds	2
   509  000061                     ?_sprintf:
   510                           	opt callstack 0
   511  000061                     sprintf@s:
   512                           	opt callstack 0
   513                           
   514                           ; 2 bytes @ 0x60
   515  000061                     	ds	2
   516  000063                     sprintf@fmt:
   517                           	opt callstack 0
   518                           
   519                           ; 2 bytes @ 0x62
   520  000063                     	ds	4
   521  000067                     ??_main:
   522                           
   523                           ; 1 bytes @ 0x66
   524  000067                     	ds	2
   525                           
   526 ;;
   527 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   528 ;;
   529 ;; *************** function _main *****************
   530 ;; Defined at:
   531 ;;		line 31 in file "EX15.c"
   532 ;; Parameters:    Size  Location     Type
   533 ;;		None
   534 ;; Auto vars:     Size  Location     Type
   535 ;;		None
   536 ;; Return value:  Size  Location     Type
   537 ;;                  1    wreg      void 
   538 ;; Registers used:
   539 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   540 ;; Tracked objects:
   541 ;;		On entry : 0/0
   542 ;;		On exit  : 0/0
   543 ;;		Unchanged: 0/0
   544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   545 ;;      Params:         0       0       0       0       0       0       0
   546 ;;      Locals:         0       0       0       0       0       0       0
   547 ;;      Temps:          2       0       0       0       0       0       0
   548 ;;      Totals:         2       0       0       0       0       0       0
   549 ;;Total ram usage:        2 bytes
   550 ;; Hardware stack levels required when called:    9
   551 ;; This function calls:
   552 ;;		_lcd_escreve_bf
   553 ;;		_lcd_ini
   554 ;;		_sprintf
   555 ;; This function is called by:
   556 ;;		Startup code after reset
   557 ;; This function uses a non-reentrant model
   558 ;;
   559                           
   560                           	psect	text0
   561  000FCA                     __ptext0:
   562                           	opt callstack 0
   563  000FCA                     _main:
   564                           	opt callstack 22
   565                           
   566                           ;EX15.c: 33:     TRISBbits.TRISB0 = 0;
   567                           
   568                           ;incstack = 0
   569  000FCA  9093               	bcf	3987,0,c	;volatile
   570                           
   571                           ;EX15.c: 34:     PORTBbits.RB0 = 0;
   572  000FCC  9081               	bcf	3969,0,c	;volatile
   573                           
   574                           ;EX15.c: 35:     ADCON1 = 0x0F;
   575  000FCE  0E0F               	movlw	15
   576  000FD0  6EC1               	movwf	4033,c	;volatile
   577                           
   578                           ;EX15.c: 37:     INTCON = 0b10100000;
   579  000FD2  0EA0               	movlw	160
   580  000FD4  6EF2               	movwf	4082,c	;volatile
   581                           
   582                           ;EX15.c: 46:     T0CON = 0b10000111;
   583  000FD6  0E87               	movlw	135
   584  000FD8  6ED5               	movwf	4053,c	;volatile
   585                           
   586                           ;EX15.c: 53:     TMR0 = 26474;
   587  000FDA  0E67               	movlw	103
   588  000FDC  6ED7               	movwf	4055,c	;volatile
   589  000FDE  0E6A               	movlw	106
   590  000FE0  6ED6               	movwf	4054,c	;volatile
   591                           
   592                           ;EX15.c: 55:     lcd_ini();
   593  000FE2  ECE6  F008         	call	_lcd_ini	;wreg free
   594                           
   595                           ;EX15.c: 58:     lcd_escreve_bf(1, 1, "CONTA 5s : 00");
   596  000FE6  0E01               	movlw	1
   597  000FE8  6E0A               	movwf	lcd_escreve_bf@col,c
   598  000FEA  0E01               	movlw	low STR_1
   599  000FEC  6E0B               	movwf	lcd_escreve_bf@str,c
   600  000FEE  0E06               	movlw	high STR_1
   601  000FF0  6E0C               	movwf	lcd_escreve_bf@str+1,c
   602  000FF2  0E01               	movlw	1
   603  000FF4  EC2E  F009         	call	_lcd_escreve_bf
   604                           
   605                           ;EX15.c: 61:     lcd_escreve_bf(2, 1, "CONTA 10s: 00");
   606  000FF8  0E01               	movlw	1
   607  000FFA  6E0A               	movwf	lcd_escreve_bf@col,c
   608  000FFC  0E0F               	movlw	low STR_2
   609  000FFE  6E0B               	movwf	lcd_escreve_bf@str,c
   610  001000  0E06               	movlw	high STR_2
   611  001002  6E0C               	movwf	lcd_escreve_bf@str+1,c
   612  001004  0E02               	movlw	2
   613  001006  EC2E  F009         	call	_lcd_escreve_bf
   614  00100A                     l2402:
   615                           
   616                           ;EX15.c: 64:     {;EX15.c: 65:         _delay((unsigned long)((500)*(8000000/4000.0)));
   617  00100A  0E06               	movlw	6
   618  00100C  6E68               	movwf	(??_main+1)& (0+255),c
   619  00100E  0E13               	movlw	19
   620  001010  6E67               	movwf	??_main& (0+255),c
   621  001012  0EAE               	movlw	174
   622  001014                     u2107:
   623  001014  2EE8               	decfsz	wreg,f,c
   624  001016  D7FE               	bra	u2107
   625  001018  2E67               	decfsz	??_main& (0+255),f,c
   626  00101A  D7FC               	bra	u2107
   627  00101C  2E68               	decfsz	(??_main+1)& (0+255),f,c
   628  00101E  D7FA               	bra	u2107
   629                           
   630                           ;EX15.c: 67:         PORTBbits.RB0 = ~PORTBbits.RB0;
   631  001020  A081               	btfss	3969,0,c	;volatile
   632  001022  D002               	goto	u2090
   633  001024  0E01               	movlw	1
   634  001026  D001               	goto	u2096
   635  001028                     u2090:
   636  001028  0E00               	movlw	0
   637  00102A                     u2096:
   638  00102A  0AFF               	xorlw	255
   639  00102C  6E67               	movwf	??_main& (0+255),c
   640  00102E  5081               	movf	3969,w,c	;volatile
   641  001030  1867               	xorwf	??_main,w,c
   642  001032  0BFE               	andlw	-2
   643  001034  1867               	xorwf	??_main,w,c
   644  001036  6E81               	movwf	3969,c	;volatile
   645                           
   646                           ;EX15.c: 70:         sprintf(bufferLCD, "%02d", conta5s);
   647  001038  0EA2               	movlw	low _bufferLCD
   648  00103A  6E61               	movwf	sprintf@s,c
   649  00103C  0E00               	movlw	high _bufferLCD
   650  00103E  6E62               	movwf	sprintf@s+1,c
   651  001040  0E1D               	movlw	low STR_3
   652  001042  6E63               	movwf	sprintf@fmt,c
   653  001044  0E06               	movlw	high STR_3
   654  001046  6E64               	movwf	sprintf@fmt+1,c
   655  001048  C071  F065         	movff	_conta5s,?_sprintf+4
   656  00104C  C072  F066         	movff	_conta5s+1,?_sprintf+5
   657  001050  EC97  F009         	call	_sprintf	;wreg free
   658                           
   659                           ;EX15.c: 73:         lcd_escreve_bf(1, 12, bufferLCD);
   660  001054  0E0C               	movlw	12
   661  001056  6E0A               	movwf	lcd_escreve_bf@col,c
   662  001058  0EA2               	movlw	low _bufferLCD
   663  00105A  6E0B               	movwf	lcd_escreve_bf@str,c
   664  00105C  0E00               	movlw	high _bufferLCD
   665  00105E  6E0C               	movwf	lcd_escreve_bf@str+1,c
   666  001060  0E01               	movlw	1
   667  001062  EC2E  F009         	call	_lcd_escreve_bf
   668                           
   669                           ;EX15.c: 76:         sprintf(bufferLCD, "%02d", conta10s);
   670  001066  0EA2               	movlw	low _bufferLCD
   671  001068  6E61               	movwf	sprintf@s,c
   672  00106A  0E00               	movlw	high _bufferLCD
   673  00106C  6E62               	movwf	sprintf@s+1,c
   674  00106E  0E1D               	movlw	low STR_3
   675  001070  6E63               	movwf	sprintf@fmt,c
   676  001072  0E06               	movlw	high STR_3
   677  001074  6E64               	movwf	sprintf@fmt+1,c
   678  001076  C06F  F065         	movff	_conta10s,?_sprintf+4
   679  00107A  C070  F066         	movff	_conta10s+1,?_sprintf+5
   680  00107E  EC97  F009         	call	_sprintf	;wreg free
   681                           
   682                           ;EX15.c: 79:         lcd_escreve_bf(2, 12, bufferLCD);
   683  001082  0E0C               	movlw	12
   684  001084  6E0A               	movwf	lcd_escreve_bf@col,c
   685  001086  0EA2               	movlw	low _bufferLCD
   686  001088  6E0B               	movwf	lcd_escreve_bf@str,c
   687  00108A  0E00               	movlw	high _bufferLCD
   688  00108C  6E0C               	movwf	lcd_escreve_bf@str+1,c
   689  00108E  0E02               	movlw	2
   690  001090  EC2E  F009         	call	_lcd_escreve_bf
   691  001094  D7BA               	goto	l2402
   692  001096                     __end_of_main:
   693                           	opt callstack 0
   694                           
   695 ;; *************** function _sprintf *****************
   696 ;; Defined at:
   697 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_sprintf.c"
   698 ;; Parameters:    Size  Location     Type
   699 ;;  s               2   96[COMRAM] PTR unsigned char 
   700 ;;		 -> bufferLCD(16), 
   701 ;;  fmt             2   98[COMRAM] PTR const unsigned char 
   702 ;;		 -> STR_4(5), STR_3(5), 
   703 ;; Auto vars:     Size  Location     Type
   704 ;;  f               6    4[BANK0 ] struct _IO_FILE
   705 ;;  ap              2    2[BANK0 ] PTR void [1]
   706 ;;		 -> ?_sprintf(2), 
   707 ;;  ret             2    0        int 
   708 ;; Return value:  Size  Location     Type
   709 ;;                  2   96[COMRAM] int 
   710 ;; Registers used:
   711 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   712 ;; Tracked objects:
   713 ;;		On entry : 0/0
   714 ;;		On exit  : 0/0
   715 ;;		Unchanged: 0/0
   716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   717 ;;      Params:         6       0       0       0       0       0       0
   718 ;;      Locals:         0      10       0       0       0       0       0
   719 ;;      Temps:          0       0       0       0       0       0       0
   720 ;;      Totals:         6      10       0       0       0       0       0
   721 ;;Total ram usage:       16 bytes
   722 ;; Hardware stack levels used:    1
   723 ;; Hardware stack levels required when called:    8
   724 ;; This function calls:
   725 ;;		_vfprintf
   726 ;; This function is called by:
   727 ;;		_main
   728 ;; This function uses a non-reentrant model
   729 ;;
   730                           
   731                           	psect	text1
   732  00132E                     __ptext1:
   733                           	opt callstack 0
   734  00132E                     _sprintf:
   735                           	opt callstack 22
   736                           
   737                           ;incstack = 0
   738  00132E  0E65               	movlw	low (?_sprintf+4)
   739  001330  0100               	movlb	0	; () banked
   740  001332  6FB4               	movwf	sprintf@ap& (0+255),b
   741  001334  0E00               	movlw	high (?_sprintf+4)
   742  001336  6FB5               	movwf	(sprintf@ap+1)& (0+255),b
   743  001338  C061  F0B6         	movff	sprintf@s,sprintf@f
   744  00133C  C062  F0B7         	movff	sprintf@s+1,sprintf@f+1
   745                           
   746                           ; BSR set to: 0
   747  001340  0E00               	movlw	0
   748  001342  6FB9               	movwf	(sprintf@f+3)& (0+255),b
   749  001344  0E00               	movlw	0
   750  001346  6FB8               	movwf	(sprintf@f+2)& (0+255),b
   751                           
   752                           ; BSR set to: 0
   753  001348  0E00               	movlw	0
   754  00134A  6FBB               	movwf	(sprintf@f+5)& (0+255),b
   755  00134C  0E00               	movlw	0
   756  00134E  6FBA               	movwf	(sprintf@f+4)& (0+255),b
   757                           
   758                           ; BSR set to: 0
   759  001350  0EB6               	movlw	low sprintf@f
   760  001352  6E59               	movwf	vfprintf@fp,c
   761  001354  0E00               	movlw	high sprintf@f
   762  001356  6E5A               	movwf	vfprintf@fp+1,c
   763  001358  C063  F05B         	movff	sprintf@fmt,vfprintf@fmt
   764  00135C  C064  F05C         	movff	sprintf@fmt+1,vfprintf@fmt+1
   765  001360  0EB4               	movlw	low sprintf@ap
   766  001362  6E5D               	movwf	vfprintf@ap,c
   767  001364  0E00               	movlw	high sprintf@ap
   768  001366  6E5E               	movwf	vfprintf@ap+1,c
   769  001368  EC6C  F009         	call	_vfprintf	;wreg free
   770  00136C  0100               	movlb	0	; () banked
   771  00136E  51B8               	movf	(sprintf@f+2)& (0+255),w,b
   772  001370  2461               	addwf	sprintf@s,w,c
   773  001372  6ED9               	movwf	fsr2l,c
   774  001374  51B9               	movf	(sprintf@f+3)& (0+255),w,b
   775  001376  2062               	addwfc	sprintf@s+1,w,c
   776  001378  6EDA               	movwf	fsr2h,c
   777  00137A  0E00               	movlw	0
   778  00137C  6EDF               	movwf	indf2,c
   779                           
   780                           ; BSR set to: 0
   781  00137E  0012               	return		;funcret
   782  001380                     __end_of_sprintf:
   783                           	opt callstack 0
   784                           
   785 ;; *************** function _vfprintf *****************
   786 ;; Defined at:
   787 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
   788 ;; Parameters:    Size  Location     Type
   789 ;;  fp              2   88[COMRAM] PTR struct _IO_FILE
   790 ;;		 -> sprintf@f(6), 
   791 ;;  fmt             2   90[COMRAM] PTR const unsigned char 
   792 ;;		 -> STR_4(5), STR_3(5), 
   793 ;;  ap              2   92[COMRAM] PTR PTR void 
   794 ;;		 -> sprintf@ap(2), 
   795 ;; Auto vars:     Size  Location     Type
   796 ;;  cfmt            2   94[COMRAM] PTR unsigned char 
   797 ;;		 -> STR_4(5), STR_3(5), 
   798 ;; Return value:  Size  Location     Type
   799 ;;                  2   88[COMRAM] int 
   800 ;; Registers used:
   801 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   802 ;; Tracked objects:
   803 ;;		On entry : 0/0
   804 ;;		On exit  : 0/0
   805 ;;		Unchanged: 0/0
   806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   807 ;;      Params:         6       0       0       0       0       0       0
   808 ;;      Locals:         2       0       0       0       0       0       0
   809 ;;      Temps:          0       0       0       0       0       0       0
   810 ;;      Totals:         8       0       0       0       0       0       0
   811 ;;Total ram usage:        8 bytes
   812 ;; Hardware stack levels used:    1
   813 ;; Hardware stack levels required when called:    7
   814 ;; This function calls:
   815 ;;		_vfpfcnvrt
   816 ;; This function is called by:
   817 ;;		_sprintf
   818 ;; This function uses a non-reentrant model
   819 ;;
   820                           
   821                           	psect	text2
   822  0012D8                     __ptext2:
   823                           	opt callstack 0
   824  0012D8                     _vfprintf:
   825                           	opt callstack 22
   826                           
   827                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.05\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
   828                           
   829                           ; BSR set to: 0
   830                           ;incstack = 0
   831  0012D8  C05B  F05F         	movff	vfprintf@fmt,vfprintf@cfmt
   832  0012DC  C05C  F060         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
   833                           
   834                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
   835  0012E0  0E00               	movlw	0
   836  0012E2  0100               	movlb	0	; () banked
   837  0012E4  6F81               	movwf	(_nout+1)& (0+255),b
   838  0012E6  0E00               	movlw	0
   839  0012E8  6F80               	movwf	_nout& (0+255),b
   840                           
   841                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
   842  0012EA  D013               	goto	l2378
   843  0012EC                     l2376:
   844                           
   845                           ; BSR set to: 0
   846                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
   847  0012EC  C059  F043         	movff	vfprintf@fp,vfpfcnvrt@fp
   848  0012F0  C05A  F044         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
   849  0012F4  0E5F               	movlw	low vfprintf@cfmt
   850  0012F6  6E45               	movwf	vfpfcnvrt@fmt,c
   851  0012F8  0E00               	movlw	high vfprintf@cfmt
   852  0012FA  6E46               	movwf	vfpfcnvrt@fmt+1,c
   853  0012FC  C05D  F047         	movff	vfprintf@ap,vfpfcnvrt@ap
   854  001300  C05E  F048         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
   855  001304  EC12  F003         	call	_vfpfcnvrt	;wreg free
   856  001308  5043               	movf	?_vfpfcnvrt,w,c
   857  00130A  0100               	movlb	0	; () banked
   858  00130C  2780               	addwf	_nout& (0+255),f,b
   859  00130E  5044               	movf	?_vfpfcnvrt+1,w,c
   860  001310  2381               	addwfc	(_nout+1)& (0+255),f,b
   861  001312                     l2378:
   862                           
   863                           ; BSR set to: 0
   864                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
   865  001312  C05F  FFF6         	movff	vfprintf@cfmt,tblptrl
   866  001316  C060  FFF7         	movff	vfprintf@cfmt+1,tblptrh
   867  00131A                     	if	0	;tblptru may be non-zero
   868  00131A                     	endif
   869  00131A                     	if	0	;tblptru may be non-zero
   870  00131A                     	endif
   871  00131A  0008               	tblrd		*
   872  00131C  50F5               	movf	tablat,w,c
   873  00131E  0900               	iorlw	0
   874  001320  A4D8               	btfss	status,2,c
   875  001322  D7E4               	goto	l2376
   876                           
   877                           ; BSR set to: 0
   878                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
   879  001324  C080  F059         	movff	_nout,?_vfprintf
   880  001328  C081  F05A         	movff	_nout+1,?_vfprintf+1
   881                           
   882                           ; BSR set to: 0
   883  00132C  0012               	return		;funcret
   884  00132E                     __end_of_vfprintf:
   885                           	opt callstack 0
   886                           
   887 ;; *************** function _vfpfcnvrt *****************
   888 ;; Defined at:
   889 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
   890 ;; Parameters:    Size  Location     Type
   891 ;;  fp              2   66[COMRAM] PTR struct _IO_FILE
   892 ;;		 -> sprintf@f(6), 
   893 ;;  fmt             2   68[COMRAM] PTR PTR unsigned char 
   894 ;;		 -> vfprintf@cfmt(2), 
   895 ;;  ap              2   70[COMRAM] PTR PTR void 
   896 ;;		 -> sprintf@ap(2), 
   897 ;; Auto vars:     Size  Location     Type
   898 ;;  ll              8   76[COMRAM] long long 
   899 ;;  llu             8    0        unsigned long long 
   900 ;;  f               4    0        unsigned long long 
   901 ;;  vp              3    0        PTR void 
   902 ;;  ct              3    0        unsigned char [3]
   903 ;;  cp              3    0        PTR unsigned char 
   904 ;;  done            2   84[COMRAM] int 
   905 ;;  i               2    0        int 
   906 ;;  c               1    0        unsigned char 
   907 ;; Return value:  Size  Location     Type
   908 ;;                  2   66[COMRAM] int 
   909 ;; Registers used:
   910 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   911 ;; Tracked objects:
   912 ;;		On entry : 0/0
   913 ;;		On exit  : 0/0
   914 ;;		Unchanged: 0/0
   915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   916 ;;      Params:         6       0       0       0       0       0       0
   917 ;;      Locals:        12       0       0       0       0       0       0
   918 ;;      Temps:          4       0       0       0       0       0       0
   919 ;;      Totals:        22       0       0       0       0       0       0
   920 ;;Total ram usage:       22 bytes
   921 ;; Hardware stack levels used:    1
   922 ;; Hardware stack levels required when called:    6
   923 ;; This function calls:
   924 ;;		_atoi
   925 ;;		_dtoa
   926 ;;		_fputc
   927 ;;		_isdigit
   928 ;; This function is called by:
   929 ;;		_vfprintf
   930 ;; This function uses a non-reentrant model
   931 ;;
   932                           
   933                           	psect	text3
   934  000624                     __ptext3:
   935                           	opt callstack 0
   936  000624                     _vfpfcnvrt:
   937                           	opt callstack 22
   938                           
   939                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 674:     long long ll;
   940                           
   941                           ; BSR set to: 0
   942                           ;incstack = 0
   943  000624  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   944  000628  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   945  00062C  CFDE FFF6          	movff	postinc2,tblptrl
   946  000630  CFDD FFF7          	movff	postdec2,tblptrh
   947  000634                     	if	0	;tblptru may be non-zero
   948  000634                     	endif
   949  000634                     	if	0	;tblptru may be non-zero
   950  000634                     	endif
   951  000634  0008               	tblrd		*
   952  000636  50F5               	movf	tablat,w,c
   953  000638  0A25               	xorlw	37
   954  00063A  A4D8               	btfss	status,2,c
   955  00063C  D143               	goto	l2360
   956                           
   957                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
   958  00063E  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   959  000642  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   960  000646  2ADE               	incf	postinc2,f,c
   961  000648  0E00               	movlw	0
   962  00064A  22DD               	addwfc	postdec2,f,c
   963                           
   964                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
   965  00064C  0E00               	movlw	0
   966  00064E  6E6A               	movwf	_width+1,c
   967  000650  0E00               	movlw	0
   968  000652  6E69               	movwf	_width,c
   969  000654  C069  F06D         	movff	_width,_flags
   970  000658  C06A  F06E         	movff	_width+1,_flags+1
   971                           
   972                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
   973  00065C  686B               	setf	_prec,c
   974  00065E  686C               	setf	_prec+1,c
   975                           
   976                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 688:       
      +                            done = 0;
   977  000660  0E00               	movlw	0
   978  000662  6E56               	movwf	vfpfcnvrt@done+1,c
   979  000664  0E00               	movlw	0
   980  000666  D014               	goto	L1
   981  000668                     l2286:
   982                           
   983                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 692:       
      +                                        flags |= (1 << 0);
   984  000668  806D               	bsf	_flags,0,c
   985  00066A                     l2288:
   986                           
   987                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 693:       
      +                                        ++*fmt;
   988  00066A  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   989  00066E  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   990  000672  2ADE               	incf	postinc2,f,c
   991  000674  0E00               	movlw	0
   992  000676  22DD               	addwfc	postdec2,f,c
   993                           
   994                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 694:       
      +                                        break;
   995  000678  D02E               	goto	l2312
   996  00067A                     l2290:
   997                           
   998                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 696:       
      +                                        flags |= (1 << 1);
   999  00067A  826D               	bsf	_flags,1,c
  1000  00067C  D7F6               	goto	l2288
  1001  00067E                     l2294:
  1002                           
  1003                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 700:       
      +                                        flags |= (1 << 2);
  1004  00067E  846D               	bsf	_flags,2,c
  1005  000680  D7F4               	goto	l2288
  1006  000682                     l2298:
  1007                           
  1008                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 704:       
      +                                        flags |= (1 << 3);
  1009  000682  866D               	bsf	_flags,3,c
  1010  000684  D7F2               	goto	l2288
  1011  000686                     l2302:
  1012                           
  1013                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 708:       
      +                                        flags |= (1 << 4);
  1014  000686  886D               	bsf	_flags,4,c
  1015  000688  D7F0               	goto	l2288
  1016  00068A                     l2306:
  1017                           
  1018                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 712:       
      +                                        done = 1;
  1019  00068A  0E00               	movlw	0
  1020  00068C  6E56               	movwf	vfpfcnvrt@done+1,c
  1021  00068E  0E01               	movlw	1
  1022  000690                     L1:
  1023  000690  6E55               	movwf	vfpfcnvrt@done,c
  1024                           
  1025                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 713:       
      +                                        break;
  1026  000692  D021               	goto	l2312
  1027  000694                     l2310:
  1028  000694  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1029  000698  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1030  00069C  CFDE FFF6          	movff	postinc2,tblptrl
  1031  0006A0  CFDD FFF7          	movff	postdec2,tblptrh
  1032  0006A4                     	if	0	;tblptru may be non-zero
  1033  0006A4                     	endif
  1034  0006A4                     	if	0	;tblptru may be non-zero
  1035  0006A4                     	endif
  1036  0006A4  0008               	tblrd		*
  1037  0006A6  50F5               	movf	tablat,w,c
  1038  0006A8  6E49               	movwf	??_vfpfcnvrt& (0+255),c
  1039  0006AA  6A4A               	clrf	(??_vfpfcnvrt+1)& (0+255),c
  1040                           
  1041                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1042                           ; Switch size 1, requested type "simple"
  1043                           ; Number of cases is 1, Range of values is 0 to 0
  1044                           ; switch strategies available:
  1045                           ; Name         Instructions Cycles
  1046                           ; simple_byte            4     3 (average)
  1047                           ;	Chosen strategy is simple_byte
  1048  0006AC  504A               	movf	??_vfpfcnvrt+1,w,c
  1049  0006AE  0A00               	xorlw	0	; case 0
  1050  0006B0  A4D8               	btfss	status,2,c
  1051  0006B2  D7EB               	goto	l2306
  1052                           
  1053                           ; Switch size 1, requested type "simple"
  1054                           ; Number of cases is 5, Range of values is 32 to 48
  1055                           ; switch strategies available:
  1056                           ; Name         Instructions Cycles
  1057                           ; simple_byte           16     9 (average)
  1058                           ;	Chosen strategy is simple_byte
  1059  0006B4  5049               	movf	??_vfpfcnvrt,w,c
  1060  0006B6  0A20               	xorlw	32	; case 32
  1061  0006B8  B4D8               	btfsc	status,2,c
  1062  0006BA  D7E3               	goto	l2298
  1063  0006BC  0A03               	xorlw	3	; case 35
  1064  0006BE  B4D8               	btfsc	status,2,c
  1065  0006C0  D7E2               	goto	l2302
  1066  0006C2  0A08               	xorlw	8	; case 43
  1067  0006C4  B4D8               	btfsc	status,2,c
  1068  0006C6  D7DB               	goto	l2294
  1069  0006C8  0A06               	xorlw	6	; case 45
  1070  0006CA  B4D8               	btfsc	status,2,c
  1071  0006CC  D7CD               	goto	l2286
  1072  0006CE  0A1D               	xorlw	29	; case 48
  1073  0006D0  B4D8               	btfsc	status,2,c
  1074  0006D2  D7D3               	goto	l2290
  1075  0006D4  D7DA               	goto	l2306
  1076  0006D6                     l2312:
  1077                           
  1078                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 689:       
      +                            while (!done) {
  1079  0006D6  5055               	movf	vfpfcnvrt@done,w,c
  1080  0006D8  1056               	iorwf	vfpfcnvrt@done+1,w,c
  1081  0006DA  B4D8               	btfsc	status,2,c
  1082  0006DC  D7DB               	goto	l2310
  1083                           
  1084                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 716:       
      +                            if (flags & (1 << 0)) {
  1085  0006DE  B06D               	btfsc	_flags,0,c
  1086                           
  1087                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 717:       
      +                                flags &= ~(1 << 1);
  1088  0006E0  926D               	bcf	_flags,1,c
  1089                           
  1090                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 723:       
      +                            if ((*fmt)[0] == '*') {
  1091  0006E2  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1092  0006E6  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1093  0006EA  CFDE FFF6          	movff	postinc2,tblptrl
  1094  0006EE  CFDD FFF7          	movff	postdec2,tblptrh
  1095  0006F2                     	if	0	;tblptru may be non-zero
  1096  0006F2                     	endif
  1097  0006F2                     	if	0	;tblptru may be non-zero
  1098  0006F2                     	endif
  1099  0006F2  0008               	tblrd		*
  1100  0006F4  50F5               	movf	tablat,w,c
  1101  0006F6  0A2A               	xorlw	42
  1102  0006F8  A4D8               	btfss	status,2,c
  1103  0006FA  D023               	goto	l2324
  1104                           
  1105                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 724:       
      +                                ++*fmt;
  1106  0006FC  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1107  000700  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1108  000704  2ADE               	incf	postinc2,f,c
  1109  000706  0E00               	movlw	0
  1110  000708  22DD               	addwfc	postdec2,f,c
  1111                           
  1112                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 725:       
      +                                width = (*(int *)__va_arg(*(int **)ap, (int)0));
  1113  00070A  C047  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1114  00070E  C048  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1115  000712  CFDF F049          	movff	indf2,??_vfpfcnvrt
  1116  000716  0E02               	movlw	2
  1117  000718  26DE               	addwf	postinc2,f,c
  1118  00071A  CFDF F04A          	movff	indf2,??_vfpfcnvrt+1
  1119  00071E  0E00               	movlw	0
  1120  000720  22DD               	addwfc	postdec2,f,c
  1121  000722  C049  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1122  000726  C04A  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1123  00072A  CFDE F069          	movff	postinc2,_width
  1124  00072E  CFDD F06A          	movff	postdec2,_width+1
  1125                           
  1126                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 726:       
      +                                if (width < 0) {
  1127  000732  AE6A               	btfss	_width+1,7,c
  1128  000734  D03F               	goto	u2040
  1129                           
  1130                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 727:       
      +                                    flags |= (1 << 0);
  1131  000736  806D               	bsf	_flags,0,c
  1132                           
  1133                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 728:       
      +                                    width = -width;
  1134  000738  6C69               	negf	_width,c
  1135  00073A  1E6A               	comf	_width+1,f,c
  1136  00073C  B0D8               	btfsc	status,0,c
  1137  00073E  2A6A               	incf	_width+1,f,c
  1138  000740  D039               	goto	u2040
  1139  000742                     l2324:
  1140                           
  1141                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 731:       
      +                                width = atoi(*fmt);
  1142  000742  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1143  000746  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1144  00074A  CFDE F00B          	movff	postinc2,atoi@s
  1145  00074E  CFDD F00C          	movff	postdec2,atoi@s+1
  1146  000752  EC41  F006         	call	_atoi	;wreg free
  1147  000756  C00B  F069         	movff	?_atoi,_width
  1148  00075A  C00C  F06A         	movff	?_atoi+1,_width+1
  1149                           
  1150                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 732:       
      +                                while ((0 ? isdigit((*fmt)[0]) : ((unsigned)((*fmt)[0])-'0') < 10)) {
  1151  00075E  D007               	goto	l2328
  1152  000760                     l2326:
  1153                           
  1154                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 733:       
      +                                    ++*fmt;
  1155  000760  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1156  000764  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1157  000768  2ADE               	incf	postinc2,f,c
  1158  00076A  0E00               	movlw	0
  1159  00076C  22DD               	addwfc	postdec2,f,c
  1160  00076E                     l2328:
  1161  00076E  0ED0               	movlw	208
  1162  000770  6E49               	movwf	??_vfpfcnvrt& (0+255),c
  1163  000772  0EFF               	movlw	255
  1164  000774  6E4A               	movwf	(??_vfpfcnvrt+1)& (0+255),c
  1165  000776  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1166  00077A  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1167  00077E  CFDE FFF6          	movff	postinc2,tblptrl
  1168  000782  CFDD FFF7          	movff	postdec2,tblptrh
  1169  000786                     	if	0	;tblptru may be non-zero
  1170  000786                     	endif
  1171  000786                     	if	0	;tblptru may be non-zero
  1172  000786                     	endif
  1173  000786  0008               	tblrd		*
  1174  000788  50F5               	movf	tablat,w,c
  1175  00078A  6E4B               	movwf	(??_vfpfcnvrt+2)& (0+255),c
  1176  00078C  6A4C               	clrf	(??_vfpfcnvrt+3)& (0+255),c
  1177  00078E  5049               	movf	??_vfpfcnvrt,w,c
  1178  000790  264B               	addwf	??_vfpfcnvrt+2,f,c
  1179  000792  504A               	movf	??_vfpfcnvrt+1,w,c
  1180  000794  224C               	addwfc	??_vfpfcnvrt+3,f,c
  1181  000796  504C               	movf	??_vfpfcnvrt+3,w,c
  1182  000798  E106               	bnz	u2020
  1183  00079A  0E0A               	movlw	10
  1184  00079C  5C4B               	subwf	??_vfpfcnvrt+2,w,c
  1185  00079E  B0D8               	btfsc	status,0,c
  1186  0007A0  D002               	goto	u2020
  1187  0007A2  0E01               	movlw	1
  1188  0007A4  D001               	goto	u2030
  1189  0007A6                     u2020:
  1190  0007A6  0E00               	movlw	0
  1191  0007A8                     u2030:
  1192  0007A8  6E57               	movwf	_vfpfcnvrt$499,c
  1193  0007AA  6A58               	clrf	_vfpfcnvrt$499+1,c
  1194  0007AC  5057               	movf	_vfpfcnvrt$499,w,c
  1195  0007AE  1058               	iorwf	_vfpfcnvrt$499+1,w,c
  1196  0007B0  A4D8               	btfss	status,2,c
  1197  0007B2  D7D6               	goto	l2326
  1198  0007B4                     u2040:
  1199                           
  1200                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 825:       
      +                            if ((*fmt[0] == 'd') || (*fmt[0] == 'i')) {
  1201  0007B4  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1202  0007B8  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1203  0007BC  CFDE FFF6          	movff	postinc2,tblptrl
  1204  0007C0  CFDD FFF7          	movff	postdec2,tblptrh
  1205  0007C4                     	if	0	;tblptru may be non-zero
  1206  0007C4                     	endif
  1207  0007C4                     	if	0	;tblptru may be non-zero
  1208  0007C4                     	endif
  1209  0007C4  0008               	tblrd		*
  1210  0007C6  50F5               	movf	tablat,w,c
  1211  0007C8  0A64               	xorlw	100
  1212  0007CA  B4D8               	btfsc	status,2,c
  1213  0007CC  D00D               	goto	u2060
  1214  0007CE  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1215  0007D2  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1216  0007D6  CFDE FFF6          	movff	postinc2,tblptrl
  1217  0007DA  CFDD FFF7          	movff	postdec2,tblptrh
  1218  0007DE                     	if	0	;tblptru may be non-zero
  1219  0007DE                     	endif
  1220  0007DE                     	if	0	;tblptru may be non-zero
  1221  0007DE                     	endif
  1222  0007DE  0008               	tblrd		*
  1223  0007E0  50F5               	movf	tablat,w,c
  1224  0007E2  0A69               	xorlw	105
  1225  0007E4  A4D8               	btfss	status,2,c
  1226  0007E6  D03F               	goto	l2344
  1227  0007E8                     u2060:
  1228                           
  1229                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 827:       
      +                                ++*fmt;
  1230  0007E8  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1231  0007EC  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1232  0007F0  2ADE               	incf	postinc2,f,c
  1233  0007F2  0E00               	movlw	0
  1234  0007F4  22DD               	addwfc	postdec2,f,c
  1235                           
  1236                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 828:       
      +                                ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  1237  0007F6  C047  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1238  0007FA  C048  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1239  0007FE  CFDF F049          	movff	indf2,??_vfpfcnvrt
  1240  000802  0E02               	movlw	2
  1241  000804  26DE               	addwf	postinc2,f,c
  1242  000806  CFDF F04A          	movff	indf2,??_vfpfcnvrt+1
  1243  00080A  0E00               	movlw	0
  1244  00080C  22DD               	addwfc	postdec2,f,c
  1245  00080E  C049  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1246  000812  C04A  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1247  000816  CFDE F04D          	movff	postinc2,vfpfcnvrt@ll
  1248  00081A  CFDD F04E          	movff	postdec2,vfpfcnvrt@ll+1
  1249  00081E  0E00               	movlw	0
  1250  000820  BE4E               	btfsc	vfpfcnvrt@ll+1,7,c
  1251  000822  0EFF               	movlw	-1
  1252  000824  6E4F               	movwf	vfpfcnvrt@ll+2,c
  1253  000826  6E50               	movwf	vfpfcnvrt@ll+3,c
  1254  000828  6E51               	movwf	vfpfcnvrt@ll+4,c
  1255  00082A  6E52               	movwf	vfpfcnvrt@ll+5,c
  1256  00082C  6E53               	movwf	vfpfcnvrt@ll+6,c
  1257  00082E  6E54               	movwf	vfpfcnvrt@ll+7,c
  1258                           
  1259                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 830:       
      +                                return dtoa(fp, ll);
  1260  000830  C043  F01F         	movff	vfpfcnvrt@fp,dtoa@fp
  1261  000834  C044  F020         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  1262  000838  C04D  F021         	movff	vfpfcnvrt@ll,dtoa@d
  1263  00083C  C04E  F022         	movff	vfpfcnvrt@ll+1,dtoa@d+1
  1264  000840  C04F  F023         	movff	vfpfcnvrt@ll+2,dtoa@d+2
  1265  000844  C050  F024         	movff	vfpfcnvrt@ll+3,dtoa@d+3
  1266  000848  C051  F025         	movff	vfpfcnvrt@ll+4,dtoa@d+4
  1267  00084C  C052  F026         	movff	vfpfcnvrt@ll+5,dtoa@d+5
  1268  000850  C053  F027         	movff	vfpfcnvrt@ll+6,dtoa@d+6
  1269  000854  C054  F028         	movff	vfpfcnvrt@ll+7,dtoa@d+7
  1270  000858  EC7C  F004         	call	_dtoa	;wreg free
  1271  00085C  C01F  F043         	movff	?_dtoa,?_vfpfcnvrt
  1272  000860  C020  F044         	movff	?_dtoa+1,?_vfpfcnvrt+1
  1273  000864  0012               	return	
  1274  000866                     l2344:
  1275                           
  1276                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
  1277  000866  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1278  00086A  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1279  00086E  CFDE FFF6          	movff	postinc2,tblptrl
  1280  000872  CFDD FFF7          	movff	postdec2,tblptrh
  1281  000876                     	if	0	;tblptru may be non-zero
  1282  000876                     	endif
  1283  000876                     	if	0	;tblptru may be non-zero
  1284  000876                     	endif
  1285  000876  0008               	tblrd		*
  1286  000878  50F5               	movf	tablat,w,c
  1287  00087A  0A25               	xorlw	37
  1288  00087C  A4D8               	btfss	status,2,c
  1289  00087E  D016               	goto	l2354
  1290                           
  1291                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
  1292  000880  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1293  000884  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1294  000888  2ADE               	incf	postinc2,f,c
  1295  00088A  0E00               	movlw	0
  1296  00088C  22DD               	addwfc	postdec2,f,c
  1297                           
  1298                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
  1299  00088E  0E00               	movlw	0
  1300  000890  6E05               	movwf	fputc@c+1,c
  1301  000892  0E25               	movlw	37
  1302  000894  6E04               	movwf	fputc@c,c
  1303  000896  C043  F006         	movff	vfpfcnvrt@fp,fputc@fp
  1304  00089A  C044  F007         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1305  00089E  EC4B  F008         	call	_fputc	;wreg free
  1306  0008A2                     l2350:
  1307                           
  1308                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
  1309  0008A2  0E00               	movlw	0
  1310  0008A4  6E44               	movwf	?_vfpfcnvrt+1,c
  1311  0008A6  0E01               	movlw	1
  1312  0008A8  6E43               	movwf	?_vfpfcnvrt,c
  1313  0008AA  0012               	return	
  1314  0008AC                     l2354:
  1315                           
  1316                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
  1317  0008AC  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1318  0008B0  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1319  0008B4  2ADE               	incf	postinc2,f,c
  1320  0008B6  0E00               	movlw	0
  1321  0008B8  22DD               	addwfc	postdec2,f,c
  1322                           
  1323                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
  1324  0008BA  0E00               	movlw	0
  1325  0008BC  6E44               	movwf	?_vfpfcnvrt+1,c
  1326  0008BE  0E00               	movlw	0
  1327  0008C0  6E43               	movwf	?_vfpfcnvrt,c
  1328  0008C2  0012               	return	
  1329  0008C4                     l2360:
  1330                           
  1331                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
  1332  0008C4  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1333  0008C8  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1334  0008CC  CFDE FFF6          	movff	postinc2,tblptrl
  1335  0008D0  CFDD FFF7          	movff	postdec2,tblptrh
  1336  0008D4                     	if	0	;tblptru may be non-zero
  1337  0008D4                     	endif
  1338  0008D4                     	if	0	;tblptru may be non-zero
  1339  0008D4                     	endif
  1340  0008D4  0008               	tblrd		*
  1341  0008D6  50F5               	movf	tablat,w,c
  1342  0008D8  6E04               	movwf	fputc@c,c
  1343  0008DA  6A05               	clrf	fputc@c+1,c
  1344  0008DC  C043  F006         	movff	vfpfcnvrt@fp,fputc@fp
  1345  0008E0  C044  F007         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1346  0008E4  EC4B  F008         	call	_fputc	;wreg free
  1347                           
  1348                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
  1349  0008E8  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1350  0008EC  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1351  0008F0  2ADE               	incf	postinc2,f,c
  1352  0008F2  0E00               	movlw	0
  1353  0008F4  22DD               	addwfc	postdec2,f,c
  1354  0008F6  D7D5               	goto	l2350
  1355  0008F8                     __end_of_vfpfcnvrt:
  1356                           	opt callstack 0
  1357                           
  1358 ;; *************** function _dtoa *****************
  1359 ;; Defined at:
  1360 ;;		line 274 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1361 ;; Parameters:    Size  Location     Type
  1362 ;;  fp              2   30[COMRAM] PTR struct _IO_FILE
  1363 ;;		 -> sprintf@f(6), 
  1364 ;;  d               8   32[COMRAM] long long 
  1365 ;; Auto vars:     Size  Location     Type
  1366 ;;  n               8   56[COMRAM] long long 
  1367 ;;  i               2   64[COMRAM] int 
  1368 ;;  s               2   54[COMRAM] int 
  1369 ;;  w               2   52[COMRAM] int 
  1370 ;;  p               2   50[COMRAM] int 
  1371 ;; Return value:  Size  Location     Type
  1372 ;;                  2   30[COMRAM] int 
  1373 ;; Registers used:
  1374 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1375 ;; Tracked objects:
  1376 ;;		On entry : 0/0
  1377 ;;		On exit  : 0/0
  1378 ;;		Unchanged: 0/0
  1379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1380 ;;      Params:        10       0       0       0       0       0       0
  1381 ;;      Locals:        18       0       0       0       0       0       0
  1382 ;;      Temps:          8       0       0       0       0       0       0
  1383 ;;      Totals:        36       0       0       0       0       0       0
  1384 ;;Total ram usage:       36 bytes
  1385 ;; Hardware stack levels used:    1
  1386 ;; Hardware stack levels required when called:    5
  1387 ;; This function calls:
  1388 ;;		___aodiv
  1389 ;;		___aomod
  1390 ;;		_abs
  1391 ;;		_pad
  1392 ;; This function is called by:
  1393 ;;		_vfpfcnvrt
  1394 ;; This function uses a non-reentrant model
  1395 ;;
  1396                           
  1397                           	psect	text4
  1398  0008F8                     __ptext4:
  1399                           	opt callstack 0
  1400  0008F8                     _dtoa:
  1401                           	opt callstack 22
  1402                           
  1403                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 274: static
      +                           int dtoa(FILE *fp, long long d);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\
      +                          c99\common\doprnt.c: 275: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\c
      +                          ommon\doprnt.c: 276:     int i, p, s, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\
      +                          sources\c99\common\doprnt.c: 277:     long long n;;C:\Program Files (x86)\Microchip\xc8\
      +                          v2.05\pic\sources\c99\common\doprnt.c: 280:     n = d;
  1404                           
  1405                           ;incstack = 0
  1406  0008F8  C021  F039         	movff	dtoa@d,dtoa@n
  1407  0008FC  C022  F03A         	movff	dtoa@d+1,dtoa@n+1
  1408  000900  C023  F03B         	movff	dtoa@d+2,dtoa@n+2
  1409  000904  C024  F03C         	movff	dtoa@d+3,dtoa@n+3
  1410  000908  C025  F03D         	movff	dtoa@d+4,dtoa@n+4
  1411  00090C  C026  F03E         	movff	dtoa@d+5,dtoa@n+5
  1412  000910  C027  F03F         	movff	dtoa@d+6,dtoa@n+6
  1413  000914  C028  F040         	movff	dtoa@d+7,dtoa@n+7
  1414                           
  1415                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 281:     s 
      +                          = n < 0 ? 1 : 0;
  1416  000918  AE40               	btfss	dtoa@n+7,7,c
  1417  00091A  D002               	goto	u1750
  1418  00091C  0E01               	movlw	1
  1419  00091E  D001               	goto	u1760
  1420  000920                     u1750:
  1421  000920  0E00               	movlw	0
  1422  000922                     u1760:
  1423  000922  6E37               	movwf	dtoa@s,c
  1424  000924  6A38               	clrf	dtoa@s+1,c
  1425                           
  1426                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 282:     if
      +                           (s) {
  1427  000926  5037               	movf	dtoa@s,w,c
  1428  000928  1038               	iorwf	dtoa@s+1,w,c
  1429  00092A  B4D8               	btfsc	status,2,c
  1430  00092C  D010               	goto	l2178
  1431                           
  1432                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 283:       
      +                            n = -n;
  1433  00092E  1E40               	comf	dtoa@n+7,f,c
  1434  000930  1E3F               	comf	dtoa@n+6,f,c
  1435  000932  1E3E               	comf	dtoa@n+5,f,c
  1436  000934  1E3D               	comf	dtoa@n+4,f,c
  1437  000936  1E3C               	comf	dtoa@n+3,f,c
  1438  000938  1E3B               	comf	dtoa@n+2,f,c
  1439  00093A  1E3A               	comf	dtoa@n+1,f,c
  1440  00093C  6C39               	negf	dtoa@n,c
  1441  00093E  0E00               	movlw	0
  1442  000940  223A               	addwfc	dtoa@n+1,f,c
  1443  000942  223B               	addwfc	dtoa@n+2,f,c
  1444  000944  223C               	addwfc	dtoa@n+3,f,c
  1445  000946  223D               	addwfc	dtoa@n+4,f,c
  1446  000948  223E               	addwfc	dtoa@n+5,f,c
  1447  00094A  223F               	addwfc	dtoa@n+6,f,c
  1448  00094C  2240               	addwfc	dtoa@n+7,f,c
  1449  00094E                     l2178:
  1450                           
  1451                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 287:     if
      +                           (!(prec < 0)) {
  1452  00094E  AE6C               	btfss	_prec+1,7,c
  1453                           
  1454                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 288:       
      +                            flags &= ~(1 << 1);
  1455  000950  926D               	bcf	_flags,1,c
  1456                           
  1457                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 290:     p 
      +                          = (0 < prec) ? prec : 1;
  1458  000952  BE6C               	btfsc	_prec+1,7,c
  1459  000954  D005               	goto	u1790
  1460  000956  506C               	movf	_prec+1,w,c
  1461  000958  E108               	bnz	l128
  1462  00095A  046B               	decf	_prec,w,c
  1463  00095C  B0D8               	btfsc	status,0,c
  1464  00095E  D005               	goto	l128
  1465  000960                     u1790:
  1466  000960  0E00               	movlw	0
  1467  000962  6E34               	movwf	dtoa@p+1,c
  1468  000964  0E01               	movlw	1
  1469  000966  6E33               	movwf	dtoa@p,c
  1470  000968  D004               	goto	l130
  1471  00096A                     l128:
  1472  00096A  C06B  F033         	movff	_prec,dtoa@p
  1473  00096E  C06C  F034         	movff	_prec+1,dtoa@p+1
  1474  000972                     l130:
  1475                           
  1476                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 291:     w 
      +                          = width;
  1477  000972  C069  F035         	movff	_width,dtoa@w
  1478  000976  C06A  F036         	movff	_width+1,dtoa@w+1
  1479                           
  1480                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 292:     if
      +                           (s || (flags & (1 << 2))) {
  1481  00097A  5037               	movf	dtoa@s,w,c
  1482  00097C  1038               	iorwf	dtoa@s+1,w,c
  1483  00097E  A4D8               	btfss	status,2,c
  1484  000980  D002               	goto	u1810
  1485  000982  A46D               	btfss	_flags,2,c
  1486  000984  D003               	goto	l2192
  1487  000986                     u1810:
  1488                           
  1489                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 293:       
      +                            --w;
  1490  000986  0635               	decf	dtoa@w,f,c
  1491  000988  A0D8               	btfss	status,0,c
  1492  00098A  0636               	decf	dtoa@w+1,f,c
  1493  00098C                     l2192:
  1494                           
  1495                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 297:     i 
      +                          = sizeof(dbuf) - 1;
  1496  00098C  0E00               	movlw	0
  1497  00098E  6E42               	movwf	dtoa@i+1,c
  1498  000990  0E1F               	movlw	31
  1499  000992  6E41               	movwf	dtoa@i,c
  1500                           
  1501                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 298:     db
      +                          uf[i] = '\0';
  1502  000994  0E00               	movlw	0
  1503  000996  0100               	movlb	0	; () banked
  1504  000998  6FA1               	movwf	(_dbuf+31)& (0+255),b
  1505                           
  1506                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1507  00099A  D07C               	goto	l2206
  1508  00099C                     l2196:
  1509                           
  1510                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 300:       
      +                            --i;
  1511  00099C  0641               	decf	dtoa@i,f,c
  1512  00099E  A0D8               	btfss	status,0,c
  1513  0009A0  0642               	decf	dtoa@i+1,f,c
  1514                           
  1515                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 301:       
      +                            dbuf[i] = '0' + abs(n % 10);
  1516  0009A2  0E82               	movlw	low _dbuf
  1517  0009A4  2441               	addwf	dtoa@i,w,c
  1518  0009A6  6ED9               	movwf	fsr2l,c
  1519  0009A8  0E00               	movlw	high _dbuf
  1520  0009AA  2042               	addwfc	dtoa@i+1,w,c
  1521  0009AC  6EDA               	movwf	fsr2h,c
  1522  0009AE  C039  F004         	movff	dtoa@n,___aomod@dividend
  1523  0009B2  C03A  F005         	movff	dtoa@n+1,___aomod@dividend+1
  1524  0009B6  C03B  F006         	movff	dtoa@n+2,___aomod@dividend+2
  1525  0009BA  C03C  F007         	movff	dtoa@n+3,___aomod@dividend+3
  1526  0009BE  C03D  F008         	movff	dtoa@n+4,___aomod@dividend+4
  1527  0009C2  C03E  F009         	movff	dtoa@n+5,___aomod@dividend+5
  1528  0009C6  C03F  F00A         	movff	dtoa@n+6,___aomod@dividend+6
  1529  0009CA  C040  F00B         	movff	dtoa@n+7,___aomod@dividend+7
  1530  0009CE  0E0A               	movlw	10
  1531  0009D0  6E0C               	movwf	___aomod@divisor,c
  1532  0009D2  0E00               	movlw	0
  1533  0009D4  6E0D               	movwf	___aomod@divisor+1,c
  1534  0009D6  0E00               	movlw	0
  1535  0009D8  6E0E               	movwf	___aomod@divisor+2,c
  1536  0009DA  0E00               	movlw	0
  1537  0009DC  6E0F               	movwf	___aomod@divisor+3,c
  1538  0009DE  0E00               	movlw	0
  1539  0009E0  6E10               	movwf	___aomod@divisor+4,c
  1540  0009E2  0E00               	movlw	0
  1541  0009E4  6E11               	movwf	___aomod@divisor+5,c
  1542  0009E6  0E00               	movlw	0
  1543  0009E8  6E12               	movwf	___aomod@divisor+6,c
  1544  0009EA  0E00               	movlw	0
  1545  0009EC  6E13               	movwf	___aomod@divisor+7,c
  1546  0009EE  ECE1  F006         	call	___aomod	;wreg free
  1547  0009F2  C004  F029         	movff	?___aomod,??_dtoa
  1548  0009F6  C005  F02A         	movff	?___aomod+1,??_dtoa+1
  1549  0009FA  C006  F02B         	movff	?___aomod+2,??_dtoa+2
  1550  0009FE  C007  F02C         	movff	?___aomod+3,??_dtoa+3
  1551  000A02  C008  F02D         	movff	?___aomod+4,??_dtoa+4
  1552  000A06  C009  F02E         	movff	?___aomod+5,??_dtoa+5
  1553  000A0A  C00A  F02F         	movff	?___aomod+6,??_dtoa+6
  1554  000A0E  C00B  F030         	movff	?___aomod+7,??_dtoa+7
  1555  000A12  C029  F016         	movff	??_dtoa,abs@a
  1556  000A16  C02B  F017         	movff	??_dtoa+2,abs@a+1
  1557  000A1A  ECFB  F009         	call	_abs	;wreg free
  1558  000A1E  5016               	movf	?_abs,w,c
  1559  000A20  0F30               	addlw	48
  1560  000A22  6EDF               	movwf	indf2,c
  1561                           
  1562                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 302:       
      +                            --p;
  1563  000A24  0633               	decf	dtoa@p,f,c
  1564  000A26  A0D8               	btfss	status,0,c
  1565  000A28  0634               	decf	dtoa@p+1,f,c
  1566                           
  1567                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 303:       
      +                            --w;
  1568  000A2A  0635               	decf	dtoa@w,f,c
  1569  000A2C  A0D8               	btfss	status,0,c
  1570  000A2E  0636               	decf	dtoa@w+1,f,c
  1571                           
  1572                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 304:       
      +                            n = n / 10;
  1573  000A30  C039  F004         	movff	dtoa@n,___aodiv@dividend
  1574  000A34  C03A  F005         	movff	dtoa@n+1,___aodiv@dividend+1
  1575  000A38  C03B  F006         	movff	dtoa@n+2,___aodiv@dividend+2
  1576  000A3C  C03C  F007         	movff	dtoa@n+3,___aodiv@dividend+3
  1577  000A40  C03D  F008         	movff	dtoa@n+4,___aodiv@dividend+4
  1578  000A44  C03E  F009         	movff	dtoa@n+5,___aodiv@dividend+5
  1579  000A48  C03F  F00A         	movff	dtoa@n+6,___aodiv@dividend+6
  1580  000A4C  C040  F00B         	movff	dtoa@n+7,___aodiv@dividend+7
  1581  000A50  0E0A               	movlw	10
  1582  000A52  6E0C               	movwf	___aodiv@divisor,c
  1583  000A54  0E00               	movlw	0
  1584  000A56  6E0D               	movwf	___aodiv@divisor+1,c
  1585  000A58  0E00               	movlw	0
  1586  000A5A  6E0E               	movwf	___aodiv@divisor+2,c
  1587  000A5C  0E00               	movlw	0
  1588  000A5E  6E0F               	movwf	___aodiv@divisor+3,c
  1589  000A60  0E00               	movlw	0
  1590  000A62  6E10               	movwf	___aodiv@divisor+4,c
  1591  000A64  0E00               	movlw	0
  1592  000A66  6E11               	movwf	___aodiv@divisor+5,c
  1593  000A68  0E00               	movlw	0
  1594  000A6A  6E12               	movwf	___aodiv@divisor+6,c
  1595  000A6C  0E00               	movlw	0
  1596  000A6E  6E13               	movwf	___aodiv@divisor+7,c
  1597  000A70  EC9D  F005         	call	___aodiv	;wreg free
  1598  000A74  C004  F039         	movff	?___aodiv,dtoa@n
  1599  000A78  C005  F03A         	movff	?___aodiv+1,dtoa@n+1
  1600  000A7C  C006  F03B         	movff	?___aodiv+2,dtoa@n+2
  1601  000A80  C007  F03C         	movff	?___aodiv+3,dtoa@n+3
  1602  000A84  C008  F03D         	movff	?___aodiv+4,dtoa@n+4
  1603  000A88  C009  F03E         	movff	?___aodiv+5,dtoa@n+5
  1604  000A8C  C00A  F03F         	movff	?___aodiv+6,dtoa@n+6
  1605  000A90  C00B  F040         	movff	?___aodiv+7,dtoa@n+7
  1606  000A94                     l2206:
  1607                           
  1608                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1609  000A94  BE42               	btfsc	dtoa@i+1,7,c
  1610  000A96  D01F               	goto	u1860
  1611  000A98  5042               	movf	dtoa@i+1,w,c
  1612  000A9A  E103               	bnz	u1820
  1613  000A9C  0441               	decf	dtoa@i,w,c
  1614  000A9E  A0D8               	btfss	status,0,c
  1615  000AA0  D01A               	goto	u1860
  1616  000AA2                     u1820:
  1617  000AA2  5039               	movf	dtoa@n,w,c
  1618  000AA4  103A               	iorwf	dtoa@n+1,w,c
  1619  000AA6  103B               	iorwf	dtoa@n+2,w,c
  1620  000AA8  103C               	iorwf	dtoa@n+3,w,c
  1621  000AAA  103D               	iorwf	dtoa@n+4,w,c
  1622  000AAC  103E               	iorwf	dtoa@n+5,w,c
  1623  000AAE  103F               	iorwf	dtoa@n+6,w,c
  1624  000AB0  1040               	iorwf	dtoa@n+7,w,c
  1625  000AB2  A4D8               	btfss	status,2,c
  1626  000AB4  D773               	goto	l2196
  1627  000AB6  BE34               	btfsc	dtoa@p+1,7,c
  1628  000AB8  D005               	goto	u1840
  1629  000ABA  5034               	movf	dtoa@p+1,w,c
  1630  000ABC  E102               	bnz	u1841
  1631  000ABE  0433               	decf	dtoa@p,w,c
  1632  000AC0  B0D8               	btfsc	status,0,c
  1633  000AC2                     u1841:
  1634  000AC2  D76C               	goto	l2196
  1635  000AC4                     u1840:
  1636  000AC4  BE36               	btfsc	dtoa@w+1,7,c
  1637  000AC6  D007               	goto	u1860
  1638  000AC8  5036               	movf	dtoa@w+1,w,c
  1639  000ACA  E103               	bnz	u1850
  1640  000ACC  0435               	decf	dtoa@w,w,c
  1641  000ACE  A0D8               	btfss	status,0,c
  1642  000AD0  D002               	goto	u1860
  1643  000AD2                     u1850:
  1644  000AD2  B26D               	btfsc	_flags,1,c
  1645  000AD4  D763               	goto	l2196
  1646  000AD6                     u1860:
  1647                           
  1648                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 308:     if
      +                           (s || (flags & (1 << 2))) {
  1649  000AD6  5037               	movf	dtoa@s,w,c
  1650  000AD8  1038               	iorwf	dtoa@s+1,w,c
  1651  000ADA  A4D8               	btfss	status,2,c
  1652  000ADC  D002               	goto	u1880
  1653  000ADE  A46D               	btfss	_flags,2,c
  1654  000AE0  D017               	goto	l2230
  1655  000AE2                     u1880:
  1656                           
  1657                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 309:       
      +                            --i;
  1658  000AE2  0641               	decf	dtoa@i,f,c
  1659  000AE4  A0D8               	btfss	status,0,c
  1660  000AE6  0642               	decf	dtoa@i+1,f,c
  1661                           
  1662                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 310:       
      +                            dbuf[i] = s ? '-' : '+';
  1663  000AE8  5037               	movf	dtoa@s,w,c
  1664  000AEA  1038               	iorwf	dtoa@s+1,w,c
  1665  000AEC  A4D8               	btfss	status,2,c
  1666  000AEE  D004               	goto	l2226
  1667  000AF0  0E00               	movlw	0
  1668  000AF2  6E32               	movwf	_dtoa$484+1,c
  1669  000AF4  0E2B               	movlw	43
  1670  000AF6  D003               	goto	L2
  1671  000AF8                     l2226:
  1672  000AF8  0E00               	movlw	0
  1673  000AFA  6E32               	movwf	_dtoa$484+1,c
  1674  000AFC  0E2D               	movlw	45
  1675  000AFE                     L2:
  1676  000AFE  6E31               	movwf	_dtoa$484,c
  1677  000B00  0E82               	movlw	low _dbuf
  1678  000B02  2441               	addwf	dtoa@i,w,c
  1679  000B04  6ED9               	movwf	fsr2l,c
  1680  000B06  0E00               	movlw	high _dbuf
  1681  000B08  2042               	addwfc	dtoa@i+1,w,c
  1682  000B0A  6EDA               	movwf	fsr2h,c
  1683  000B0C  C031  FFDF         	movff	_dtoa$484,indf2
  1684  000B10                     l2230:
  1685                           
  1686                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 314:     re
      +                          turn pad(fp, &dbuf[i], w);
  1687  000B10  C01F  F014         	movff	dtoa@fp,pad@fp
  1688  000B14  C020  F015         	movff	dtoa@fp+1,pad@fp+1
  1689  000B18  0E82               	movlw	low _dbuf
  1690  000B1A  2441               	addwf	dtoa@i,w,c
  1691  000B1C  6E16               	movwf	pad@buf,c
  1692  000B1E  0E00               	movlw	high _dbuf
  1693  000B20  2042               	addwfc	dtoa@i+1,w,c
  1694  000B22  6E17               	movwf	pad@buf+1,c
  1695  000B24  C035  F018         	movff	dtoa@w,pad@p
  1696  000B28  C036  F019         	movff	dtoa@w+1,pad@p+1
  1697  000B2C  EC9B  F008         	call	_pad	;wreg free
  1698  000B30  C014  F01F         	movff	?_pad,?_dtoa
  1699  000B34  C015  F020         	movff	?_pad+1,?_dtoa+1
  1700  000B38  0012               	return		;funcret
  1701  000B3A                     __end_of_dtoa:
  1702                           	opt callstack 0
  1703                           
  1704 ;; *************** function _pad *****************
  1705 ;; Defined at:
  1706 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1707 ;; Parameters:    Size  Location     Type
  1708 ;;  fp              2   19[COMRAM] PTR struct _IO_FILE
  1709 ;;		 -> sprintf@f(6), 
  1710 ;;  buf             2   21[COMRAM] PTR unsigned char 
  1711 ;;		 -> dbuf(32), 
  1712 ;;  p               2   23[COMRAM] int 
  1713 ;; Auto vars:     Size  Location     Type
  1714 ;;  w               2   28[COMRAM] int 
  1715 ;;  i               2   26[COMRAM] int 
  1716 ;; Return value:  Size  Location     Type
  1717 ;;                  2   19[COMRAM] int 
  1718 ;; Registers used:
  1719 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1720 ;; Tracked objects:
  1721 ;;		On entry : 0/0
  1722 ;;		On exit  : 0/0
  1723 ;;		Unchanged: 0/0
  1724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1725 ;;      Params:         6       0       0       0       0       0       0
  1726 ;;      Locals:         4       0       0       0       0       0       0
  1727 ;;      Temps:          1       0       0       0       0       0       0
  1728 ;;      Totals:        11       0       0       0       0       0       0
  1729 ;;Total ram usage:       11 bytes
  1730 ;; Hardware stack levels used:    1
  1731 ;; Hardware stack levels required when called:    4
  1732 ;; This function calls:
  1733 ;;		_fputc
  1734 ;;		_fputs
  1735 ;;		_strlen
  1736 ;; This function is called by:
  1737 ;;		_dtoa
  1738 ;; This function uses a non-reentrant model
  1739 ;;
  1740                           
  1741                           	psect	text5
  1742  001136                     __ptext5:
  1743                           	opt callstack 0
  1744  001136                     _pad:
  1745                           	opt callstack 22
  1746                           
  1747                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
  1748                           
  1749                           ;incstack = 0
  1750  001136  A06D               	btfss	_flags,0,c
  1751  001138  D00A               	goto	l2048
  1752                           
  1753                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
  1754  00113A  C016  F00D         	movff	pad@buf,fputs@s
  1755  00113E  C017  F00E         	movff	pad@buf+1,fputs@s+1
  1756  001142  C014  F00F         	movff	pad@fp,fputs@fp
  1757  001146  C015  F010         	movff	pad@fp+1,fputs@fp+1
  1758  00114A  ECDF  F009         	call	_fputs	;wreg free
  1759  00114E                     l2048:
  1760                           
  1761                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
  1762  00114E  BE19               	btfsc	pad@p+1,7,c
  1763  001150  D005               	goto	l2052
  1764  001152  C018  F01D         	movff	pad@p,pad@w
  1765  001156  C019  F01E         	movff	pad@p+1,pad@w+1
  1766  00115A  D004               	goto	l117
  1767  00115C                     l2052:
  1768  00115C  0E00               	movlw	0
  1769  00115E  6E1E               	movwf	pad@w+1,c
  1770  001160  0E00               	movlw	0
  1771  001162  6E1D               	movwf	pad@w,c
  1772  001164                     l117:
  1773                           
  1774                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
  1775  001164  0E00               	movlw	0
  1776  001166  6E1C               	movwf	pad@i+1,c
  1777  001168  0E00               	movlw	0
  1778  00116A  6E1B               	movwf	pad@i,c
  1779                           
  1780                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  1781  00116C  D00C               	goto	l2058
  1782  00116E                     l2054:
  1783                           
  1784                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
  1785  00116E  0E00               	movlw	0
  1786  001170  6E05               	movwf	fputc@c+1,c
  1787  001172  0E20               	movlw	32
  1788  001174  6E04               	movwf	fputc@c,c
  1789  001176  C014  F006         	movff	pad@fp,fputc@fp
  1790  00117A  C015  F007         	movff	pad@fp+1,fputc@fp+1
  1791  00117E  EC4B  F008         	call	_fputc	;wreg free
  1792                           
  1793                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
  1794  001182  4A1B               	infsnz	pad@i,f,c
  1795  001184  2A1C               	incf	pad@i+1,f,c
  1796  001186                     l2058:
  1797                           
  1798                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  1799  001186  501D               	movf	pad@w,w,c
  1800  001188  5C1B               	subwf	pad@i,w,c
  1801  00118A  501C               	movf	pad@i+1,w,c
  1802  00118C  0A80               	xorlw	128
  1803  00118E  6E1A               	movwf	??_pad& (0+255),c
  1804  001190  501E               	movf	pad@w+1,w,c
  1805  001192  0A80               	xorlw	128
  1806  001194  581A               	subwfb	??_pad& (0+255),w,c
  1807  001196  A0D8               	btfss	status,0,c
  1808  001198  D7EA               	goto	l2054
  1809                           
  1810                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
  1811  00119A  B06D               	btfsc	_flags,0,c
  1812  00119C  D00A               	goto	l2062
  1813                           
  1814                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
  1815  00119E  C016  F00D         	movff	pad@buf,fputs@s
  1816  0011A2  C017  F00E         	movff	pad@buf+1,fputs@s+1
  1817  0011A6  C014  F00F         	movff	pad@fp,fputs@fp
  1818  0011AA  C015  F010         	movff	pad@fp+1,fputs@fp+1
  1819  0011AE  ECDF  F009         	call	_fputs	;wreg free
  1820  0011B2                     l2062:
  1821                           
  1822                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
  1823  0011B2  C016  F004         	movff	pad@buf,strlen@s
  1824  0011B6  C017  F005         	movff	pad@buf+1,strlen@s+1
  1825  0011BA  EC2C  F00A         	call	_strlen	;wreg free
  1826  0011BE  501D               	movf	pad@w,w,c
  1827  0011C0  2404               	addwf	?_strlen,w,c
  1828  0011C2  6E14               	movwf	?_pad,c
  1829  0011C4  501E               	movf	pad@w+1,w,c
  1830  0011C6  2005               	addwfc	?_strlen+1,w,c
  1831  0011C8  6E15               	movwf	?_pad+1,c
  1832  0011CA  0012               	return		;funcret
  1833  0011CC                     __end_of_pad:
  1834                           	opt callstack 0
  1835                           
  1836 ;; *************** function _strlen *****************
  1837 ;; Defined at:
  1838 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
  1839 ;; Parameters:    Size  Location     Type
  1840 ;;  s               2    3[COMRAM] PTR const unsigned char 
  1841 ;;		 -> dbuf(32), 
  1842 ;; Auto vars:     Size  Location     Type
  1843 ;;  a               2    5[COMRAM] PTR const unsigned char 
  1844 ;;		 -> dbuf(32), 
  1845 ;; Return value:  Size  Location     Type
  1846 ;;                  2    3[COMRAM] unsigned int 
  1847 ;; Registers used:
  1848 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1849 ;; Tracked objects:
  1850 ;;		On entry : 0/0
  1851 ;;		On exit  : 0/0
  1852 ;;		Unchanged: 0/0
  1853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1854 ;;      Params:         2       0       0       0       0       0       0
  1855 ;;      Locals:         2       0       0       0       0       0       0
  1856 ;;      Temps:          0       0       0       0       0       0       0
  1857 ;;      Totals:         4       0       0       0       0       0       0
  1858 ;;Total ram usage:        4 bytes
  1859 ;; Hardware stack levels used:    1
  1860 ;; Hardware stack levels required when called:    1
  1861 ;; This function calls:
  1862 ;;		Nothing
  1863 ;; This function is called by:
  1864 ;;		_pad
  1865 ;; This function uses a non-reentrant model
  1866 ;;
  1867                           
  1868                           	psect	text6
  1869  001458                     __ptext6:
  1870                           	opt callstack 0
  1871  001458                     _strlen:
  1872                           	opt callstack 24
  1873                           
  1874                           ;incstack = 0
  1875  001458  C004  F006         	movff	strlen@s,strlen@a
  1876  00145C  C005  F007         	movff	strlen@s+1,strlen@a+1
  1877  001460  D002               	goto	l2038
  1878  001462                     l2036:
  1879  001462  4A04               	infsnz	strlen@s,f,c
  1880  001464  2A05               	incf	strlen@s+1,f,c
  1881  001466                     l2038:
  1882  001466  C004  FFD9         	movff	strlen@s,fsr2l
  1883  00146A  C005  FFDA         	movff	strlen@s+1,fsr2h
  1884  00146E  50DF               	movf	indf2,w,c
  1885  001470  A4D8               	btfss	status,2,c
  1886  001472  D7F7               	goto	l2036
  1887  001474  5006               	movf	strlen@a,w,c
  1888  001476  5C04               	subwf	strlen@s,w,c
  1889  001478  6E04               	movwf	?_strlen,c
  1890  00147A  5007               	movf	strlen@a+1,w,c
  1891  00147C  5805               	subwfb	strlen@s+1,w,c
  1892  00147E  6E05               	movwf	?_strlen+1,c
  1893  001480  0012               	return		;funcret
  1894  001482                     __end_of_strlen:
  1895                           	opt callstack 0
  1896                           
  1897 ;; *************** function _fputs *****************
  1898 ;; Defined at:
  1899 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputs.c"
  1900 ;; Parameters:    Size  Location     Type
  1901 ;;  s               2   12[COMRAM] PTR const unsigned char 
  1902 ;;		 -> dbuf(32), 
  1903 ;;  fp              2   14[COMRAM] PTR struct _IO_FILE
  1904 ;;		 -> sprintf@f(6), 
  1905 ;; Auto vars:     Size  Location     Type
  1906 ;;  i               2   17[COMRAM] int 
  1907 ;;  c               1   16[COMRAM] unsigned char 
  1908 ;; Return value:  Size  Location     Type
  1909 ;;                  2   12[COMRAM] int 
  1910 ;; Registers used:
  1911 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1912 ;; Tracked objects:
  1913 ;;		On entry : 0/0
  1914 ;;		On exit  : 0/0
  1915 ;;		Unchanged: 0/0
  1916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1917 ;;      Params:         4       0       0       0       0       0       0
  1918 ;;      Locals:         3       0       0       0       0       0       0
  1919 ;;      Temps:          0       0       0       0       0       0       0
  1920 ;;      Totals:         7       0       0       0       0       0       0
  1921 ;;Total ram usage:        7 bytes
  1922 ;; Hardware stack levels used:    1
  1923 ;; Hardware stack levels required when called:    3
  1924 ;; This function calls:
  1925 ;;		_fputc
  1926 ;; This function is called by:
  1927 ;;		_pad
  1928 ;; This function uses a non-reentrant model
  1929 ;;
  1930                           
  1931                           	psect	text7
  1932  0013BE                     __ptext7:
  1933                           	opt callstack 0
  1934  0013BE                     _fputs:
  1935                           	opt callstack 22
  1936                           
  1937                           ;incstack = 0
  1938  0013BE  0E00               	movlw	0
  1939  0013C0  6E13               	movwf	fputs@i+1,c
  1940  0013C2  0E00               	movlw	0
  1941  0013C4  6E12               	movwf	fputs@i,c
  1942  0013C6  D00B               	goto	l2032
  1943  0013C8                     l2028:
  1944  0013C8  C011  F004         	movff	fputs@c,fputc@c
  1945  0013CC  6A05               	clrf	fputc@c+1,c
  1946  0013CE  C00F  F006         	movff	fputs@fp,fputc@fp
  1947  0013D2  C010  F007         	movff	fputs@fp+1,fputc@fp+1
  1948  0013D6  EC4B  F008         	call	_fputc	;wreg free
  1949  0013DA  4A12               	infsnz	fputs@i,f,c
  1950  0013DC  2A13               	incf	fputs@i+1,f,c
  1951  0013DE                     l2032:
  1952  0013DE  5012               	movf	fputs@i,w,c
  1953  0013E0  240D               	addwf	fputs@s,w,c
  1954  0013E2  6ED9               	movwf	fsr2l,c
  1955  0013E4  5013               	movf	fputs@i+1,w,c
  1956  0013E6  200E               	addwfc	fputs@s+1,w,c
  1957  0013E8  6EDA               	movwf	fsr2h,c
  1958  0013EA  50DF               	movf	indf2,w,c
  1959  0013EC  6E11               	movwf	fputs@c,c
  1960  0013EE  5011               	movf	fputs@c,w,c
  1961  0013F0  B4D8               	btfsc	status,2,c
  1962  0013F2  0012               	return	
  1963  0013F4  D7E9               	goto	l2028
  1964  0013F6                     __end_of_fputs:
  1965                           	opt callstack 0
  1966                           
  1967 ;; *************** function _fputc *****************
  1968 ;; Defined at:
  1969 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputc.c"
  1970 ;; Parameters:    Size  Location     Type
  1971 ;;  c               2    3[COMRAM] int 
  1972 ;;  fp              2    5[COMRAM] PTR struct _IO_FILE
  1973 ;;		 -> sprintf@f(6), 
  1974 ;; Auto vars:     Size  Location     Type
  1975 ;;		None
  1976 ;; Return value:  Size  Location     Type
  1977 ;;                  2    3[COMRAM] int 
  1978 ;; Registers used:
  1979 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1980 ;; Tracked objects:
  1981 ;;		On entry : 0/0
  1982 ;;		On exit  : 0/0
  1983 ;;		Unchanged: 0/0
  1984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1985 ;;      Params:         4       0       0       0       0       0       0
  1986 ;;      Locals:         0       0       0       0       0       0       0
  1987 ;;      Temps:          5       0       0       0       0       0       0
  1988 ;;      Totals:         9       0       0       0       0       0       0
  1989 ;;Total ram usage:        9 bytes
  1990 ;; Hardware stack levels used:    1
  1991 ;; Hardware stack levels required when called:    2
  1992 ;; This function calls:
  1993 ;;		_putch
  1994 ;; This function is called by:
  1995 ;;		_pad
  1996 ;;		_vfpfcnvrt
  1997 ;;		_fputs
  1998 ;; This function uses a non-reentrant model
  1999 ;;
  2000                           
  2001                           	psect	text8
  2002  001096                     __ptext8:
  2003                           	opt callstack 0
  2004  001096                     _fputc:
  2005                           	opt callstack 25
  2006                           
  2007                           ;incstack = 0
  2008  001096  5006               	movf	fputc@fp,w,c
  2009  001098  1007               	iorwf	fputc@fp+1,w,c
  2010  00109A  B4D8               	btfsc	status,2,c
  2011  00109C  D004               	goto	u1480
  2012  00109E  5006               	movf	fputc@fp,w,c
  2013  0010A0  1007               	iorwf	fputc@fp+1,w,c
  2014  0010A2  A4D8               	btfss	status,2,c
  2015  0010A4  D004               	goto	l2018
  2016  0010A6                     u1480:
  2017  0010A6  5004               	movf	fputc@c,w,c
  2018  0010A8  EC80  F00A         	call	_putch
  2019  0010AC  0012               	return	
  2020  0010AE                     l2018:
  2021  0010AE  EE20 F004          	lfsr	2,4
  2022  0010B2  5006               	movf	fputc@fp,w,c
  2023  0010B4  26D9               	addwf	fsr2l,f,c
  2024  0010B6  5007               	movf	fputc@fp+1,w,c
  2025  0010B8  22DA               	addwfc	fsr2h,f,c
  2026  0010BA  50DE               	movf	postinc2,w,c
  2027  0010BC  10DE               	iorwf	postinc2,w,c
  2028  0010BE  B4D8               	btfsc	status,2,c
  2029  0010C0  D016               	goto	u1500
  2030  0010C2  EE20 F004          	lfsr	2,4
  2031  0010C6  5006               	movf	fputc@fp,w,c
  2032  0010C8  26D9               	addwf	fsr2l,f,c
  2033  0010CA  5007               	movf	fputc@fp+1,w,c
  2034  0010CC  22DA               	addwfc	fsr2h,f,c
  2035  0010CE  EE10 F002          	lfsr	1,2
  2036  0010D2  5006               	movf	fputc@fp,w,c
  2037  0010D4  26E1               	addwf	fsr1l,f,c
  2038  0010D6  5007               	movf	fputc@fp+1,w,c
  2039  0010D8  22E2               	addwfc	fsr1h,f,c
  2040  0010DA  50DE               	movf	postinc2,w,c
  2041  0010DC  5CE6               	subwf	postinc1,w,c
  2042  0010DE  50E6               	movf	postinc1,w,c
  2043  0010E0  0A80               	xorlw	128
  2044  0010E2  6E0C               	movwf	(??_fputc+4)& (0+255),c
  2045  0010E4  50DE               	movf	postinc2,w,c
  2046  0010E6  0A80               	xorlw	128
  2047  0010E8  580C               	subwfb	(??_fputc+4)& (0+255),w,c
  2048  0010EA  B0D8               	btfsc	status,0,c
  2049  0010EC  0012               	return	
  2050  0010EE                     u1500:
  2051  0010EE  EE20 F002          	lfsr	2,2
  2052  0010F2  5006               	movf	fputc@fp,w,c
  2053  0010F4  26D9               	addwf	fsr2l,f,c
  2054  0010F6  5007               	movf	fputc@fp+1,w,c
  2055  0010F8  22DA               	addwfc	fsr2h,f,c
  2056  0010FA  CFDE F008          	movff	postinc2,??_fputc
  2057  0010FE  CFDD F009          	movff	postdec2,??_fputc+1
  2058  001102  C006  FFD9         	movff	fputc@fp,fsr2l
  2059  001106  C007  FFDA         	movff	fputc@fp+1,fsr2h
  2060  00110A  CFDE F00A          	movff	postinc2,??_fputc+2
  2061  00110E  CFDD F00B          	movff	postdec2,??_fputc+3
  2062  001112  5008               	movf	??_fputc,w,c
  2063  001114  240A               	addwf	??_fputc+2,w,c
  2064  001116  6ED9               	movwf	fsr2l,c
  2065  001118  5009               	movf	??_fputc+1,w,c
  2066  00111A  200B               	addwfc	??_fputc+3,w,c
  2067  00111C  6EDA               	movwf	fsr2h,c
  2068  00111E  C004  FFDF         	movff	fputc@c,indf2
  2069  001122  EE20 F002          	lfsr	2,2
  2070  001126  5006               	movf	fputc@fp,w,c
  2071  001128  26D9               	addwf	fsr2l,f,c
  2072  00112A  5007               	movf	fputc@fp+1,w,c
  2073  00112C  22DA               	addwfc	fsr2h,f,c
  2074  00112E  2ADE               	incf	postinc2,f,c
  2075  001130  0E00               	movlw	0
  2076  001132  22DD               	addwfc	postdec2,f,c
  2077  001134  0012               	return		;funcret
  2078  001136                     __end_of_fputc:
  2079                           	opt callstack 0
  2080                           
  2081 ;; *************** function _putch *****************
  2082 ;; Defined at:
  2083 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\putch.c"
  2084 ;; Parameters:    Size  Location     Type
  2085 ;;  c               1    wreg     unsigned char 
  2086 ;; Auto vars:     Size  Location     Type
  2087 ;;  c               1    0[COMRAM] unsigned char 
  2088 ;; Return value:  Size  Location     Type
  2089 ;;                  1    wreg      void 
  2090 ;; Registers used:
  2091 ;;		wreg
  2092 ;; Tracked objects:
  2093 ;;		On entry : 0/0
  2094 ;;		On exit  : 0/0
  2095 ;;		Unchanged: 0/0
  2096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2097 ;;      Params:         0       0       0       0       0       0       0
  2098 ;;      Locals:         0       0       0       0       0       0       0
  2099 ;;      Temps:          0       0       0       0       0       0       0
  2100 ;;      Totals:         0       0       0       0       0       0       0
  2101 ;;Total ram usage:        0 bytes
  2102 ;; Hardware stack levels used:    1
  2103 ;; Hardware stack levels required when called:    1
  2104 ;; This function calls:
  2105 ;;		Nothing
  2106 ;; This function is called by:
  2107 ;;		_fputc
  2108 ;; This function uses a non-reentrant model
  2109 ;;
  2110                           
  2111                           	psect	text9
  2112  001500                     __ptext9:
  2113                           	opt callstack 0
  2114  001500                     _putch:
  2115                           	opt callstack 25
  2116                           
  2117                           ;incstack = 0
  2118  001500  0012               	return		;funcret
  2119  001502                     __end_of_putch:
  2120                           	opt callstack 0
  2121                           
  2122 ;; *************** function _abs *****************
  2123 ;; Defined at:
  2124 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\abs.c"
  2125 ;; Parameters:    Size  Location     Type
  2126 ;;  a               2   21[COMRAM] int 
  2127 ;; Auto vars:     Size  Location     Type
  2128 ;;		None
  2129 ;; Return value:  Size  Location     Type
  2130 ;;                  2   21[COMRAM] int 
  2131 ;; Registers used:
  2132 ;;		wreg, status,2, status,0
  2133 ;; Tracked objects:
  2134 ;;		On entry : 0/0
  2135 ;;		On exit  : 0/0
  2136 ;;		Unchanged: 0/0
  2137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2138 ;;      Params:         2       0       0       0       0       0       0
  2139 ;;      Locals:         0       0       0       0       0       0       0
  2140 ;;      Temps:          2       0       0       0       0       0       0
  2141 ;;      Totals:         4       0       0       0       0       0       0
  2142 ;;Total ram usage:        4 bytes
  2143 ;; Hardware stack levels used:    1
  2144 ;; Hardware stack levels required when called:    1
  2145 ;; This function calls:
  2146 ;;		Nothing
  2147 ;; This function is called by:
  2148 ;;		_dtoa
  2149 ;; This function uses a non-reentrant model
  2150 ;;
  2151                           
  2152                           	psect	text10
  2153  0013F6                     __ptext10:
  2154                           	opt callstack 0
  2155  0013F6                     _abs:
  2156                           	opt callstack 25
  2157                           
  2158                           ;incstack = 0
  2159  0013F6  BE17               	btfsc	abs@a+1,7,c
  2160  0013F8  D005               	goto	u1570
  2161  0013FA  5017               	movf	abs@a+1,w,c
  2162  0013FC  E110               	bnz	l862
  2163  0013FE  0416               	decf	abs@a,w,c
  2164  001400  B0D8               	btfsc	status,0,c
  2165  001402  D00D               	goto	l862
  2166  001404                     u1570:
  2167  001404  C016  F018         	movff	abs@a,??_abs
  2168  001408  C017  F019         	movff	abs@a+1,??_abs+1
  2169  00140C  1E18               	comf	??_abs,f,c
  2170  00140E  1E19               	comf	??_abs+1,f,c
  2171  001410  4A18               	infsnz	??_abs,f,c
  2172  001412  2A19               	incf	??_abs+1,f,c
  2173  001414  C018  F016         	movff	??_abs,?_abs
  2174  001418  C019  F017         	movff	??_abs+1,?_abs+1
  2175  00141C  0012               	return	
  2176  00141E                     l862:
  2177  00141E  C016  F016         	movff	abs@a,?_abs
  2178  001422  C017  F017         	movff	abs@a+1,?_abs+1
  2179  001426  0012               	return		;funcret
  2180  001428                     __end_of_abs:
  2181                           	opt callstack 0
  2182                           
  2183 ;; *************** function ___aomod *****************
  2184 ;; Defined at:
  2185 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aomod.c"
  2186 ;; Parameters:    Size  Location     Type
  2187 ;;  dividend        8    3[COMRAM] long long 
  2188 ;;  divisor         8   11[COMRAM] long long 
  2189 ;; Auto vars:     Size  Location     Type
  2190 ;;  sign            1   20[COMRAM] unsigned char 
  2191 ;;  counter         1   19[COMRAM] unsigned char 
  2192 ;; Return value:  Size  Location     Type
  2193 ;;                  8    3[COMRAM] long long 
  2194 ;; Registers used:
  2195 ;;		wreg, status,2, status,0
  2196 ;; Tracked objects:
  2197 ;;		On entry : 0/0
  2198 ;;		On exit  : 0/0
  2199 ;;		Unchanged: 0/0
  2200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2201 ;;      Params:        16       0       0       0       0       0       0
  2202 ;;      Locals:         2       0       0       0       0       0       0
  2203 ;;      Temps:          0       0       0       0       0       0       0
  2204 ;;      Totals:        18       0       0       0       0       0       0
  2205 ;;Total ram usage:       18 bytes
  2206 ;; Hardware stack levels used:    1
  2207 ;; Hardware stack levels required when called:    1
  2208 ;; This function calls:
  2209 ;;		Nothing
  2210 ;; This function is called by:
  2211 ;;		_dtoa
  2212 ;; This function uses a non-reentrant model
  2213 ;;
  2214                           
  2215                           	psect	text11
  2216  000DC2                     __ptext11:
  2217                           	opt callstack 0
  2218  000DC2                     ___aomod:
  2219                           	opt callstack 25
  2220                           
  2221                           ;incstack = 0
  2222  000DC2  0E00               	movlw	0
  2223  000DC4  6E15               	movwf	___aomod@sign,c
  2224  000DC6  AE0B               	btfss	___aomod@dividend+7,7,c
  2225  000DC8  D012               	goto	l2132
  2226  000DCA  1E0B               	comf	___aomod@dividend+7,f,c
  2227  000DCC  1E0A               	comf	___aomod@dividend+6,f,c
  2228  000DCE  1E09               	comf	___aomod@dividend+5,f,c
  2229  000DD0  1E08               	comf	___aomod@dividend+4,f,c
  2230  000DD2  1E07               	comf	___aomod@dividend+3,f,c
  2231  000DD4  1E06               	comf	___aomod@dividend+2,f,c
  2232  000DD6  1E05               	comf	___aomod@dividend+1,f,c
  2233  000DD8  6C04               	negf	___aomod@dividend,c
  2234  000DDA  0E00               	movlw	0
  2235  000DDC  2205               	addwfc	___aomod@dividend+1,f,c
  2236  000DDE  2206               	addwfc	___aomod@dividend+2,f,c
  2237  000DE0  2207               	addwfc	___aomod@dividend+3,f,c
  2238  000DE2  2208               	addwfc	___aomod@dividend+4,f,c
  2239  000DE4  2209               	addwfc	___aomod@dividend+5,f,c
  2240  000DE6  220A               	addwfc	___aomod@dividend+6,f,c
  2241  000DE8  220B               	addwfc	___aomod@dividend+7,f,c
  2242  000DEA  0E01               	movlw	1
  2243  000DEC  6E15               	movwf	___aomod@sign,c
  2244  000DEE                     l2132:
  2245  000DEE  AE13               	btfss	___aomod@divisor+7,7,c
  2246  000DF0  D010               	goto	l2136
  2247  000DF2  1E13               	comf	___aomod@divisor+7,f,c
  2248  000DF4  1E12               	comf	___aomod@divisor+6,f,c
  2249  000DF6  1E11               	comf	___aomod@divisor+5,f,c
  2250  000DF8  1E10               	comf	___aomod@divisor+4,f,c
  2251  000DFA  1E0F               	comf	___aomod@divisor+3,f,c
  2252  000DFC  1E0E               	comf	___aomod@divisor+2,f,c
  2253  000DFE  1E0D               	comf	___aomod@divisor+1,f,c
  2254  000E00  6C0C               	negf	___aomod@divisor,c
  2255  000E02  0E00               	movlw	0
  2256  000E04  220D               	addwfc	___aomod@divisor+1,f,c
  2257  000E06  220E               	addwfc	___aomod@divisor+2,f,c
  2258  000E08  220F               	addwfc	___aomod@divisor+3,f,c
  2259  000E0A  2210               	addwfc	___aomod@divisor+4,f,c
  2260  000E0C  2211               	addwfc	___aomod@divisor+5,f,c
  2261  000E0E  2212               	addwfc	___aomod@divisor+6,f,c
  2262  000E10  2213               	addwfc	___aomod@divisor+7,f,c
  2263  000E12                     l2136:
  2264  000E12  500C               	movf	___aomod@divisor,w,c
  2265  000E14  100D               	iorwf	___aomod@divisor+1,w,c
  2266  000E16  100E               	iorwf	___aomod@divisor+2,w,c
  2267  000E18  100F               	iorwf	___aomod@divisor+3,w,c
  2268  000E1A  1010               	iorwf	___aomod@divisor+4,w,c
  2269  000E1C  1011               	iorwf	___aomod@divisor+5,w,c
  2270  000E1E  1012               	iorwf	___aomod@divisor+6,w,c
  2271  000E20  1013               	iorwf	___aomod@divisor+7,w,c
  2272  000E22  B4D8               	btfsc	status,2,c
  2273  000E24  D03C               	goto	l2152
  2274  000E26  0E01               	movlw	1
  2275  000E28  6E14               	movwf	___aomod@counter,c
  2276  000E2A  D00A               	goto	l2142
  2277  000E2C                     l2140:
  2278  000E2C  90D8               	bcf	status,0,c
  2279  000E2E  360C               	rlcf	___aomod@divisor,f,c
  2280  000E30  360D               	rlcf	___aomod@divisor+1,f,c
  2281  000E32  360E               	rlcf	___aomod@divisor+2,f,c
  2282  000E34  360F               	rlcf	___aomod@divisor+3,f,c
  2283  000E36  3610               	rlcf	___aomod@divisor+4,f,c
  2284  000E38  3611               	rlcf	___aomod@divisor+5,f,c
  2285  000E3A  3612               	rlcf	___aomod@divisor+6,f,c
  2286  000E3C  3613               	rlcf	___aomod@divisor+7,f,c
  2287  000E3E  2A14               	incf	___aomod@counter,f,c
  2288  000E40                     l2142:
  2289  000E40  AE13               	btfss	___aomod@divisor+7,7,c
  2290  000E42  D7F4               	goto	l2140
  2291  000E44                     u1700:
  2292  000E44  500C               	movf	___aomod@divisor,w,c
  2293  000E46  5C04               	subwf	___aomod@dividend,w,c
  2294  000E48  500D               	movf	___aomod@divisor+1,w,c
  2295  000E4A  5805               	subwfb	___aomod@dividend+1,w,c
  2296  000E4C  500E               	movf	___aomod@divisor+2,w,c
  2297  000E4E  5806               	subwfb	___aomod@dividend+2,w,c
  2298  000E50  500F               	movf	___aomod@divisor+3,w,c
  2299  000E52  5807               	subwfb	___aomod@dividend+3,w,c
  2300  000E54  5010               	movf	___aomod@divisor+4,w,c
  2301  000E56  5808               	subwfb	___aomod@dividend+4,w,c
  2302  000E58  5011               	movf	___aomod@divisor+5,w,c
  2303  000E5A  5809               	subwfb	___aomod@dividend+5,w,c
  2304  000E5C  5012               	movf	___aomod@divisor+6,w,c
  2305  000E5E  580A               	subwfb	___aomod@dividend+6,w,c
  2306  000E60  5013               	movf	___aomod@divisor+7,w,c
  2307  000E62  580B               	subwfb	___aomod@dividend+7,w,c
  2308  000E64  A0D8               	btfss	status,0,c
  2309  000E66  D010               	goto	l2148
  2310  000E68  500C               	movf	___aomod@divisor,w,c
  2311  000E6A  5E04               	subwf	___aomod@dividend,f,c
  2312  000E6C  500D               	movf	___aomod@divisor+1,w,c
  2313  000E6E  5A05               	subwfb	___aomod@dividend+1,f,c
  2314  000E70  500E               	movf	___aomod@divisor+2,w,c
  2315  000E72  5A06               	subwfb	___aomod@dividend+2,f,c
  2316  000E74  500F               	movf	___aomod@divisor+3,w,c
  2317  000E76  5A07               	subwfb	___aomod@dividend+3,f,c
  2318  000E78  5010               	movf	___aomod@divisor+4,w,c
  2319  000E7A  5A08               	subwfb	___aomod@dividend+4,f,c
  2320  000E7C  5011               	movf	___aomod@divisor+5,w,c
  2321  000E7E  5A09               	subwfb	___aomod@dividend+5,f,c
  2322  000E80  5012               	movf	___aomod@divisor+6,w,c
  2323  000E82  5A0A               	subwfb	___aomod@dividend+6,f,c
  2324  000E84  5013               	movf	___aomod@divisor+7,w,c
  2325  000E86  5A0B               	subwfb	___aomod@dividend+7,f,c
  2326  000E88                     l2148:
  2327  000E88  90D8               	bcf	status,0,c
  2328  000E8A  3213               	rrcf	___aomod@divisor+7,f,c
  2329  000E8C  3212               	rrcf	___aomod@divisor+6,f,c
  2330  000E8E  3211               	rrcf	___aomod@divisor+5,f,c
  2331  000E90  3210               	rrcf	___aomod@divisor+4,f,c
  2332  000E92  320F               	rrcf	___aomod@divisor+3,f,c
  2333  000E94  320E               	rrcf	___aomod@divisor+2,f,c
  2334  000E96  320D               	rrcf	___aomod@divisor+1,f,c
  2335  000E98  320C               	rrcf	___aomod@divisor,f,c
  2336  000E9A  2E14               	decfsz	___aomod@counter,f,c
  2337  000E9C  D7D3               	goto	u1700
  2338  000E9E                     l2152:
  2339  000E9E  5015               	movf	___aomod@sign,w,c
  2340  000EA0  B4D8               	btfsc	status,2,c
  2341  000EA2  D010               	goto	l2156
  2342  000EA4  1E0B               	comf	___aomod@dividend+7,f,c
  2343  000EA6  1E0A               	comf	___aomod@dividend+6,f,c
  2344  000EA8  1E09               	comf	___aomod@dividend+5,f,c
  2345  000EAA  1E08               	comf	___aomod@dividend+4,f,c
  2346  000EAC  1E07               	comf	___aomod@dividend+3,f,c
  2347  000EAE  1E06               	comf	___aomod@dividend+2,f,c
  2348  000EB0  1E05               	comf	___aomod@dividend+1,f,c
  2349  000EB2  6C04               	negf	___aomod@dividend,c
  2350  000EB4  0E00               	movlw	0
  2351  000EB6  2205               	addwfc	___aomod@dividend+1,f,c
  2352  000EB8  2206               	addwfc	___aomod@dividend+2,f,c
  2353  000EBA  2207               	addwfc	___aomod@dividend+3,f,c
  2354  000EBC  2208               	addwfc	___aomod@dividend+4,f,c
  2355  000EBE  2209               	addwfc	___aomod@dividend+5,f,c
  2356  000EC0  220A               	addwfc	___aomod@dividend+6,f,c
  2357  000EC2  220B               	addwfc	___aomod@dividend+7,f,c
  2358  000EC4                     l2156:
  2359  000EC4  C004  F004         	movff	___aomod@dividend,?___aomod
  2360  000EC8  C005  F005         	movff	___aomod@dividend+1,?___aomod+1
  2361  000ECC  C006  F006         	movff	___aomod@dividend+2,?___aomod+2
  2362  000ED0  C007  F007         	movff	___aomod@dividend+3,?___aomod+3
  2363  000ED4  C008  F008         	movff	___aomod@dividend+4,?___aomod+4
  2364  000ED8  C009  F009         	movff	___aomod@dividend+5,?___aomod+5
  2365  000EDC  C00A  F00A         	movff	___aomod@dividend+6,?___aomod+6
  2366  000EE0  C00B  F00B         	movff	___aomod@dividend+7,?___aomod+7
  2367  000EE4  0012               	return		;funcret
  2368  000EE6                     __end_of___aomod:
  2369                           	opt callstack 0
  2370                           
  2371 ;; *************** function ___aodiv *****************
  2372 ;; Defined at:
  2373 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aodiv.c"
  2374 ;; Parameters:    Size  Location     Type
  2375 ;;  dividend        8    3[COMRAM] long long 
  2376 ;;  divisor         8   11[COMRAM] long long 
  2377 ;; Auto vars:     Size  Location     Type
  2378 ;;  quotient        8   21[COMRAM] long long 
  2379 ;;  sign            1   20[COMRAM] unsigned char 
  2380 ;;  counter         1   19[COMRAM] unsigned char 
  2381 ;; Return value:  Size  Location     Type
  2382 ;;                  8    3[COMRAM] long long 
  2383 ;; Registers used:
  2384 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2385 ;; Tracked objects:
  2386 ;;		On entry : 0/0
  2387 ;;		On exit  : 0/0
  2388 ;;		Unchanged: 0/0
  2389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2390 ;;      Params:        16       0       0       0       0       0       0
  2391 ;;      Locals:        10       0       0       0       0       0       0
  2392 ;;      Temps:          0       0       0       0       0       0       0
  2393 ;;      Totals:        26       0       0       0       0       0       0
  2394 ;;Total ram usage:       26 bytes
  2395 ;; Hardware stack levels used:    1
  2396 ;; Hardware stack levels required when called:    1
  2397 ;; This function calls:
  2398 ;;		Nothing
  2399 ;; This function is called by:
  2400 ;;		_dtoa
  2401 ;; This function uses a non-reentrant model
  2402 ;;
  2403                           
  2404                           	psect	text12
  2405  000B3A                     __ptext12:
  2406                           	opt callstack 0
  2407  000B3A                     ___aodiv:
  2408                           	opt callstack 25
  2409                           
  2410                           ;incstack = 0
  2411  000B3A  0E00               	movlw	0
  2412  000B3C  6E15               	movwf	___aodiv@sign,c
  2413  000B3E  AE13               	btfss	___aodiv@divisor+7,7,c
  2414  000B40  D012               	goto	l2088
  2415  000B42  1E13               	comf	___aodiv@divisor+7,f,c
  2416  000B44  1E12               	comf	___aodiv@divisor+6,f,c
  2417  000B46  1E11               	comf	___aodiv@divisor+5,f,c
  2418  000B48  1E10               	comf	___aodiv@divisor+4,f,c
  2419  000B4A  1E0F               	comf	___aodiv@divisor+3,f,c
  2420  000B4C  1E0E               	comf	___aodiv@divisor+2,f,c
  2421  000B4E  1E0D               	comf	___aodiv@divisor+1,f,c
  2422  000B50  6C0C               	negf	___aodiv@divisor,c
  2423  000B52  0E00               	movlw	0
  2424  000B54  220D               	addwfc	___aodiv@divisor+1,f,c
  2425  000B56  220E               	addwfc	___aodiv@divisor+2,f,c
  2426  000B58  220F               	addwfc	___aodiv@divisor+3,f,c
  2427  000B5A  2210               	addwfc	___aodiv@divisor+4,f,c
  2428  000B5C  2211               	addwfc	___aodiv@divisor+5,f,c
  2429  000B5E  2212               	addwfc	___aodiv@divisor+6,f,c
  2430  000B60  2213               	addwfc	___aodiv@divisor+7,f,c
  2431  000B62  0E01               	movlw	1
  2432  000B64  6E15               	movwf	___aodiv@sign,c
  2433  000B66                     l2088:
  2434  000B66  AE0B               	btfss	___aodiv@dividend+7,7,c
  2435  000B68  D012               	goto	l2094
  2436  000B6A  1E0B               	comf	___aodiv@dividend+7,f,c
  2437  000B6C  1E0A               	comf	___aodiv@dividend+6,f,c
  2438  000B6E  1E09               	comf	___aodiv@dividend+5,f,c
  2439  000B70  1E08               	comf	___aodiv@dividend+4,f,c
  2440  000B72  1E07               	comf	___aodiv@dividend+3,f,c
  2441  000B74  1E06               	comf	___aodiv@dividend+2,f,c
  2442  000B76  1E05               	comf	___aodiv@dividend+1,f,c
  2443  000B78  6C04               	negf	___aodiv@dividend,c
  2444  000B7A  0E00               	movlw	0
  2445  000B7C  2205               	addwfc	___aodiv@dividend+1,f,c
  2446  000B7E  2206               	addwfc	___aodiv@dividend+2,f,c
  2447  000B80  2207               	addwfc	___aodiv@dividend+3,f,c
  2448  000B82  2208               	addwfc	___aodiv@dividend+4,f,c
  2449  000B84  2209               	addwfc	___aodiv@dividend+5,f,c
  2450  000B86  220A               	addwfc	___aodiv@dividend+6,f,c
  2451  000B88  220B               	addwfc	___aodiv@dividend+7,f,c
  2452  000B8A  0E01               	movlw	1
  2453  000B8C  1A15               	xorwf	___aodiv@sign,f,c
  2454  000B8E                     l2094:
  2455  000B8E  EE20  F016         	lfsr	2,___aodiv@quotient
  2456  000B92  0E07               	movlw	7
  2457  000B94                     u1621:
  2458  000B94  6ADE               	clrf	postinc2,c
  2459  000B96  06E8               	decf	wreg,f,c
  2460  000B98  E2FD               	bc	u1621
  2461  000B9A  500C               	movf	___aodiv@divisor,w,c
  2462  000B9C  100D               	iorwf	___aodiv@divisor+1,w,c
  2463  000B9E  100E               	iorwf	___aodiv@divisor+2,w,c
  2464  000BA0  100F               	iorwf	___aodiv@divisor+3,w,c
  2465  000BA2  1010               	iorwf	___aodiv@divisor+4,w,c
  2466  000BA4  1011               	iorwf	___aodiv@divisor+5,w,c
  2467  000BA6  1012               	iorwf	___aodiv@divisor+6,w,c
  2468  000BA8  1013               	iorwf	___aodiv@divisor+7,w,c
  2469  000BAA  B4D8               	btfsc	status,2,c
  2470  000BAC  D046               	goto	l2116
  2471  000BAE  0E01               	movlw	1
  2472  000BB0  6E14               	movwf	___aodiv@counter,c
  2473  000BB2  D00A               	goto	l2102
  2474  000BB4                     l2100:
  2475  000BB4  90D8               	bcf	status,0,c
  2476  000BB6  360C               	rlcf	___aodiv@divisor,f,c
  2477  000BB8  360D               	rlcf	___aodiv@divisor+1,f,c
  2478  000BBA  360E               	rlcf	___aodiv@divisor+2,f,c
  2479  000BBC  360F               	rlcf	___aodiv@divisor+3,f,c
  2480  000BBE  3610               	rlcf	___aodiv@divisor+4,f,c
  2481  000BC0  3611               	rlcf	___aodiv@divisor+5,f,c
  2482  000BC2  3612               	rlcf	___aodiv@divisor+6,f,c
  2483  000BC4  3613               	rlcf	___aodiv@divisor+7,f,c
  2484  000BC6  2A14               	incf	___aodiv@counter,f,c
  2485  000BC8                     l2102:
  2486  000BC8  AE13               	btfss	___aodiv@divisor+7,7,c
  2487  000BCA  D7F4               	goto	l2100
  2488  000BCC                     u1640:
  2489  000BCC  90D8               	bcf	status,0,c
  2490  000BCE  3616               	rlcf	___aodiv@quotient,f,c
  2491  000BD0  3617               	rlcf	___aodiv@quotient+1,f,c
  2492  000BD2  3618               	rlcf	___aodiv@quotient+2,f,c
  2493  000BD4  3619               	rlcf	___aodiv@quotient+3,f,c
  2494  000BD6  361A               	rlcf	___aodiv@quotient+4,f,c
  2495  000BD8  361B               	rlcf	___aodiv@quotient+5,f,c
  2496  000BDA  361C               	rlcf	___aodiv@quotient+6,f,c
  2497  000BDC  361D               	rlcf	___aodiv@quotient+7,f,c
  2498  000BDE  500C               	movf	___aodiv@divisor,w,c
  2499  000BE0  5C04               	subwf	___aodiv@dividend,w,c
  2500  000BE2  500D               	movf	___aodiv@divisor+1,w,c
  2501  000BE4  5805               	subwfb	___aodiv@dividend+1,w,c
  2502  000BE6  500E               	movf	___aodiv@divisor+2,w,c
  2503  000BE8  5806               	subwfb	___aodiv@dividend+2,w,c
  2504  000BEA  500F               	movf	___aodiv@divisor+3,w,c
  2505  000BEC  5807               	subwfb	___aodiv@dividend+3,w,c
  2506  000BEE  5010               	movf	___aodiv@divisor+4,w,c
  2507  000BF0  5808               	subwfb	___aodiv@dividend+4,w,c
  2508  000BF2  5011               	movf	___aodiv@divisor+5,w,c
  2509  000BF4  5809               	subwfb	___aodiv@dividend+5,w,c
  2510  000BF6  5012               	movf	___aodiv@divisor+6,w,c
  2511  000BF8  580A               	subwfb	___aodiv@dividend+6,w,c
  2512  000BFA  5013               	movf	___aodiv@divisor+7,w,c
  2513  000BFC  580B               	subwfb	___aodiv@dividend+7,w,c
  2514  000BFE  A0D8               	btfss	status,0,c
  2515  000C00  D011               	goto	l2112
  2516  000C02  500C               	movf	___aodiv@divisor,w,c
  2517  000C04  5E04               	subwf	___aodiv@dividend,f,c
  2518  000C06  500D               	movf	___aodiv@divisor+1,w,c
  2519  000C08  5A05               	subwfb	___aodiv@dividend+1,f,c
  2520  000C0A  500E               	movf	___aodiv@divisor+2,w,c
  2521  000C0C  5A06               	subwfb	___aodiv@dividend+2,f,c
  2522  000C0E  500F               	movf	___aodiv@divisor+3,w,c
  2523  000C10  5A07               	subwfb	___aodiv@dividend+3,f,c
  2524  000C12  5010               	movf	___aodiv@divisor+4,w,c
  2525  000C14  5A08               	subwfb	___aodiv@dividend+4,f,c
  2526  000C16  5011               	movf	___aodiv@divisor+5,w,c
  2527  000C18  5A09               	subwfb	___aodiv@dividend+5,f,c
  2528  000C1A  5012               	movf	___aodiv@divisor+6,w,c
  2529  000C1C  5A0A               	subwfb	___aodiv@dividend+6,f,c
  2530  000C1E  5013               	movf	___aodiv@divisor+7,w,c
  2531  000C20  5A0B               	subwfb	___aodiv@dividend+7,f,c
  2532  000C22  8016               	bsf	___aodiv@quotient,0,c
  2533  000C24                     l2112:
  2534  000C24  90D8               	bcf	status,0,c
  2535  000C26  3213               	rrcf	___aodiv@divisor+7,f,c
  2536  000C28  3212               	rrcf	___aodiv@divisor+6,f,c
  2537  000C2A  3211               	rrcf	___aodiv@divisor+5,f,c
  2538  000C2C  3210               	rrcf	___aodiv@divisor+4,f,c
  2539  000C2E  320F               	rrcf	___aodiv@divisor+3,f,c
  2540  000C30  320E               	rrcf	___aodiv@divisor+2,f,c
  2541  000C32  320D               	rrcf	___aodiv@divisor+1,f,c
  2542  000C34  320C               	rrcf	___aodiv@divisor,f,c
  2543  000C36  2E14               	decfsz	___aodiv@counter,f,c
  2544  000C38  D7C9               	goto	u1640
  2545  000C3A                     l2116:
  2546  000C3A  5015               	movf	___aodiv@sign,w,c
  2547  000C3C  B4D8               	btfsc	status,2,c
  2548  000C3E  D010               	goto	l2120
  2549  000C40  1E1D               	comf	___aodiv@quotient+7,f,c
  2550  000C42  1E1C               	comf	___aodiv@quotient+6,f,c
  2551  000C44  1E1B               	comf	___aodiv@quotient+5,f,c
  2552  000C46  1E1A               	comf	___aodiv@quotient+4,f,c
  2553  000C48  1E19               	comf	___aodiv@quotient+3,f,c
  2554  000C4A  1E18               	comf	___aodiv@quotient+2,f,c
  2555  000C4C  1E17               	comf	___aodiv@quotient+1,f,c
  2556  000C4E  6C16               	negf	___aodiv@quotient,c
  2557  000C50  0E00               	movlw	0
  2558  000C52  2217               	addwfc	___aodiv@quotient+1,f,c
  2559  000C54  2218               	addwfc	___aodiv@quotient+2,f,c
  2560  000C56  2219               	addwfc	___aodiv@quotient+3,f,c
  2561  000C58  221A               	addwfc	___aodiv@quotient+4,f,c
  2562  000C5A  221B               	addwfc	___aodiv@quotient+5,f,c
  2563  000C5C  221C               	addwfc	___aodiv@quotient+6,f,c
  2564  000C5E  221D               	addwfc	___aodiv@quotient+7,f,c
  2565  000C60                     l2120:
  2566  000C60  C016  F004         	movff	___aodiv@quotient,?___aodiv
  2567  000C64  C017  F005         	movff	___aodiv@quotient+1,?___aodiv+1
  2568  000C68  C018  F006         	movff	___aodiv@quotient+2,?___aodiv+2
  2569  000C6C  C019  F007         	movff	___aodiv@quotient+3,?___aodiv+3
  2570  000C70  C01A  F008         	movff	___aodiv@quotient+4,?___aodiv+4
  2571  000C74  C01B  F009         	movff	___aodiv@quotient+5,?___aodiv+5
  2572  000C78  C01C  F00A         	movff	___aodiv@quotient+6,?___aodiv+6
  2573  000C7C  C01D  F00B         	movff	___aodiv@quotient+7,?___aodiv+7
  2574  000C80  0012               	return		;funcret
  2575  000C82                     __end_of___aodiv:
  2576                           	opt callstack 0
  2577                           
  2578 ;; *************** function _atoi *****************
  2579 ;; Defined at:
  2580 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\atoi.c"
  2581 ;; Parameters:    Size  Location     Type
  2582 ;;  s               2   10[COMRAM] PTR const unsigned char 
  2583 ;;		 -> STR_4(5), STR_3(5), 
  2584 ;; Auto vars:     Size  Location     Type
  2585 ;;  n               2   23[COMRAM] int 
  2586 ;;  neg             2   16[COMRAM] int 
  2587 ;; Return value:  Size  Location     Type
  2588 ;;                  2   10[COMRAM] int 
  2589 ;; Registers used:
  2590 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2591 ;; Tracked objects:
  2592 ;;		On entry : 0/0
  2593 ;;		On exit  : 0/0
  2594 ;;		Unchanged: 0/0
  2595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2596 ;;      Params:         2       0       0       0       0       0       0
  2597 ;;      Locals:         9       0       0       0       0       0       0
  2598 ;;      Temps:          4       0       0       0       0       0       0
  2599 ;;      Totals:        15       0       0       0       0       0       0
  2600 ;;Total ram usage:       15 bytes
  2601 ;; Hardware stack levels used:    1
  2602 ;; Hardware stack levels required when called:    2
  2603 ;; This function calls:
  2604 ;;		___wmul
  2605 ;;		_isdigit
  2606 ;;		_isspace
  2607 ;; This function is called by:
  2608 ;;		_vfpfcnvrt
  2609 ;; This function uses a non-reentrant model
  2610 ;;
  2611                           
  2612                           	psect	text13
  2613  000C82                     __ptext13:
  2614                           	opt callstack 0
  2615  000C82                     _atoi:
  2616                           	opt callstack 25
  2617                           
  2618                           ;incstack = 0
  2619  000C82  0E00               	movlw	0
  2620  000C84  6E19               	movwf	atoi@n+1,c
  2621  000C86  0E00               	movlw	0
  2622  000C88  6E18               	movwf	atoi@n,c
  2623  000C8A  0E00               	movlw	0
  2624  000C8C  6E12               	movwf	atoi@neg+1,c
  2625  000C8E  0E00               	movlw	0
  2626  000C90  6E11               	movwf	atoi@neg,c
  2627  000C92  D002               	goto	l2238
  2628  000C94                     l2236:
  2629  000C94  4A0B               	infsnz	atoi@s,f,c
  2630  000C96  2A0C               	incf	atoi@s+1,f,c
  2631  000C98                     l2238:
  2632  000C98  0E01               	movlw	1
  2633  000C9A  6E17               	movwf	_atoi$957,c
  2634  000C9C  C00B  FFF6         	movff	atoi@s,tblptrl
  2635  000CA0  C00C  FFF7         	movff	atoi@s+1,tblptrh
  2636  000CA4                     	if	0	;tblptru may be non-zero
  2637  000CA4                     	endif
  2638  000CA4                     	if	0	;tblptru may be non-zero
  2639  000CA4                     	endif
  2640  000CA4  0008               	tblrd		*
  2641  000CA6  50F5               	movf	tablat,w,c
  2642  000CA8  0A20               	xorlw	32
  2643  000CAA  B4D8               	btfsc	status,2,c
  2644  000CAC  D018               	goto	l2246
  2645  000CAE  0EF7               	movlw	247
  2646  000CB0  6E0D               	movwf	??_atoi& (0+255),c
  2647  000CB2  0EFF               	movlw	255
  2648  000CB4  6E0E               	movwf	(??_atoi+1)& (0+255),c
  2649  000CB6  C00B  FFF6         	movff	atoi@s,tblptrl
  2650  000CBA  C00C  FFF7         	movff	atoi@s+1,tblptrh
  2651  000CBE                     	if	0	;tblptru may be non-zero
  2652  000CBE                     	endif
  2653  000CBE                     	if	0	;tblptru may be non-zero
  2654  000CBE                     	endif
  2655  000CBE  0008               	tblrd		*
  2656  000CC0  50F5               	movf	tablat,w,c
  2657  000CC2  6E0F               	movwf	(??_atoi+2)& (0+255),c
  2658  000CC4  6A10               	clrf	(??_atoi+3)& (0+255),c
  2659  000CC6  500D               	movf	??_atoi,w,c
  2660  000CC8  260F               	addwf	??_atoi+2,f,c
  2661  000CCA  500E               	movf	??_atoi+1,w,c
  2662  000CCC  2210               	addwfc	??_atoi+3,f,c
  2663  000CCE  5010               	movf	??_atoi+3,w,c
  2664  000CD0  E104               	bnz	u1910
  2665  000CD2  0E05               	movlw	5
  2666  000CD4  5C0F               	subwf	??_atoi+2,w,c
  2667  000CD6  A0D8               	btfss	status,0,c
  2668  000CD8  D002               	goto	l2246
  2669  000CDA                     u1910:
  2670  000CDA  0E00               	movlw	0
  2671  000CDC  6E17               	movwf	_atoi$957,c
  2672  000CDE                     l2246:
  2673  000CDE  C017  F013         	movff	_atoi$957,_atoi$956
  2674  000CE2  6A14               	clrf	_atoi$956+1,c
  2675  000CE4  5013               	movf	_atoi$956,w,c
  2676  000CE6  1014               	iorwf	_atoi$956+1,w,c
  2677  000CE8  B4D8               	btfsc	status,2,c
  2678  000CEA  D008               	goto	l2256
  2679  000CEC  D7D3               	goto	l2236
  2680  000CEE                     l2252:
  2681  000CEE  0E00               	movlw	0
  2682  000CF0  6E12               	movwf	atoi@neg+1,c
  2683  000CF2  0E01               	movlw	1
  2684  000CF4  6E11               	movwf	atoi@neg,c
  2685  000CF6                     l2254:
  2686  000CF6  4A0B               	infsnz	atoi@s,f,c
  2687  000CF8  2A0C               	incf	atoi@s+1,f,c
  2688  000CFA  D02E               	goto	l2262
  2689  000CFC                     l2256:
  2690  000CFC  C00B  FFF6         	movff	atoi@s,tblptrl
  2691  000D00  C00C  FFF7         	movff	atoi@s+1,tblptrh
  2692  000D04                     	if	0	;tblptru may be non-zero
  2693  000D04                     	endif
  2694  000D04                     	if	0	;tblptru may be non-zero
  2695  000D04                     	endif
  2696  000D04  0008               	tblrd		*
  2697  000D06  50F5               	movf	tablat,w,c
  2698  000D08  6E0D               	movwf	??_atoi& (0+255),c
  2699  000D0A  6A0E               	clrf	(??_atoi+1)& (0+255),c
  2700                           
  2701                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2702                           ; Switch size 1, requested type "simple"
  2703                           ; Number of cases is 1, Range of values is 0 to 0
  2704                           ; switch strategies available:
  2705                           ; Name         Instructions Cycles
  2706                           ; simple_byte            4     3 (average)
  2707                           ;	Chosen strategy is simple_byte
  2708  000D0C  500E               	movf	??_atoi+1,w,c
  2709  000D0E  0A00               	xorlw	0	; case 0
  2710  000D10  A4D8               	btfss	status,2,c
  2711  000D12  D022               	goto	l2262
  2712                           
  2713                           ; Switch size 1, requested type "simple"
  2714                           ; Number of cases is 2, Range of values is 43 to 45
  2715                           ; switch strategies available:
  2716                           ; Name         Instructions Cycles
  2717                           ; simple_byte            7     4 (average)
  2718                           ;	Chosen strategy is simple_byte
  2719  000D14  500D               	movf	??_atoi,w,c
  2720  000D16  0A2B               	xorlw	43	; case 43
  2721  000D18  B4D8               	btfsc	status,2,c
  2722  000D1A  D7ED               	goto	l2254
  2723  000D1C  0A06               	xorlw	6	; case 45
  2724  000D1E  B4D8               	btfsc	status,2,c
  2725  000D20  D7E6               	goto	l2252
  2726  000D22  D01A               	goto	l2262
  2727  000D24                     l2258:
  2728  000D24  C018  F004         	movff	atoi@n,___wmul@multiplier
  2729  000D28  C019  F005         	movff	atoi@n+1,___wmul@multiplier+1
  2730  000D2C  0E00               	movlw	0
  2731  000D2E  6E07               	movwf	___wmul@multiplicand+1,c
  2732  000D30  0E0A               	movlw	10
  2733  000D32  6E06               	movwf	___wmul@multiplicand,c
  2734  000D34  EC54  F00A         	call	___wmul	;wreg free
  2735  000D38  C00B  FFF6         	movff	atoi@s,tblptrl
  2736  000D3C  C00C  FFF7         	movff	atoi@s+1,tblptrh
  2737  000D40                     	if	0	;tblptru may be non-zero
  2738  000D40                     	endif
  2739  000D40                     	if	0	;tblptru may be non-zero
  2740  000D40                     	endif
  2741  000D40  0008               	tblrd		*
  2742  000D42  50F5               	movf	tablat,w,c
  2743  000D44  5E04               	subwf	?___wmul,f,c
  2744  000D46  0E00               	movlw	0
  2745  000D48  5A05               	subwfb	?___wmul+1,f,c
  2746  000D4A  0E30               	movlw	48
  2747  000D4C  2404               	addwf	?___wmul,w,c
  2748  000D4E  6E18               	movwf	atoi@n,c
  2749  000D50  0E00               	movlw	0
  2750  000D52  2005               	addwfc	?___wmul+1,w,c
  2751  000D54  6E19               	movwf	atoi@n+1,c
  2752  000D56  D7CF               	goto	l2254
  2753  000D58                     l2262:
  2754  000D58  0ED0               	movlw	208
  2755  000D5A  6E0D               	movwf	??_atoi& (0+255),c
  2756  000D5C  0EFF               	movlw	255
  2757  000D5E  6E0E               	movwf	(??_atoi+1)& (0+255),c
  2758  000D60  C00B  FFF6         	movff	atoi@s,tblptrl
  2759  000D64  C00C  FFF7         	movff	atoi@s+1,tblptrh
  2760  000D68                     	if	0	;tblptru may be non-zero
  2761  000D68                     	endif
  2762  000D68                     	if	0	;tblptru may be non-zero
  2763  000D68                     	endif
  2764  000D68  0008               	tblrd		*
  2765  000D6A  50F5               	movf	tablat,w,c
  2766  000D6C  6E0F               	movwf	(??_atoi+2)& (0+255),c
  2767  000D6E  6A10               	clrf	(??_atoi+3)& (0+255),c
  2768  000D70  500D               	movf	??_atoi,w,c
  2769  000D72  260F               	addwf	??_atoi+2,f,c
  2770  000D74  500E               	movf	??_atoi+1,w,c
  2771  000D76  2210               	addwfc	??_atoi+3,f,c
  2772  000D78  5010               	movf	??_atoi+3,w,c
  2773  000D7A  E106               	bnz	u1930
  2774  000D7C  0E0A               	movlw	10
  2775  000D7E  5C0F               	subwf	??_atoi+2,w,c
  2776  000D80  B0D8               	btfsc	status,0,c
  2777  000D82  D002               	goto	u1930
  2778  000D84  0E01               	movlw	1
  2779  000D86  D001               	goto	u1940
  2780  000D88                     u1930:
  2781  000D88  0E00               	movlw	0
  2782  000D8A                     u1940:
  2783  000D8A  6E15               	movwf	_atoi$958,c
  2784  000D8C  6A16               	clrf	_atoi$958+1,c
  2785  000D8E  5015               	movf	_atoi$958,w,c
  2786  000D90  1016               	iorwf	_atoi$958+1,w,c
  2787  000D92  A4D8               	btfss	status,2,c
  2788  000D94  D7C7               	goto	l2258
  2789  000D96  5011               	movf	atoi@neg,w,c
  2790  000D98  1012               	iorwf	atoi@neg+1,w,c
  2791  000D9A  A4D8               	btfss	status,2,c
  2792  000D9C  D00D               	goto	l893
  2793  000D9E  C018  F00D         	movff	atoi@n,??_atoi
  2794  000DA2  C019  F00E         	movff	atoi@n+1,??_atoi+1
  2795  000DA6  1E0D               	comf	??_atoi,f,c
  2796  000DA8  1E0E               	comf	??_atoi+1,f,c
  2797  000DAA  4A0D               	infsnz	??_atoi,f,c
  2798  000DAC  2A0E               	incf	??_atoi+1,f,c
  2799  000DAE  C00D  F00B         	movff	??_atoi,?_atoi
  2800  000DB2  C00E  F00C         	movff	??_atoi+1,?_atoi+1
  2801  000DB6  0012               	return	
  2802  000DB8                     l893:
  2803  000DB8  C018  F00B         	movff	atoi@n,?_atoi
  2804  000DBC  C019  F00C         	movff	atoi@n+1,?_atoi+1
  2805  000DC0  0012               	return		;funcret
  2806  000DC2                     __end_of_atoi:
  2807                           	opt callstack 0
  2808                           
  2809 ;; *************** function _isspace *****************
  2810 ;; Defined at:
  2811 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\isspace.c"
  2812 ;; Parameters:    Size  Location     Type
  2813 ;;  c               2    3[COMRAM] int 
  2814 ;; Auto vars:     Size  Location     Type
  2815 ;;		None
  2816 ;; Return value:  Size  Location     Type
  2817 ;;                  2    3[COMRAM] int 
  2818 ;; Registers used:
  2819 ;;		wreg, status,2, status,0
  2820 ;; Tracked objects:
  2821 ;;		On entry : 0/0
  2822 ;;		On exit  : 0/0
  2823 ;;		Unchanged: 0/0
  2824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2825 ;;      Params:         2       0       0       0       0       0       0
  2826 ;;      Locals:         1       0       0       0       0       0       0
  2827 ;;      Temps:          4       0       0       0       0       0       0
  2828 ;;      Totals:         7       0       0       0       0       0       0
  2829 ;;Total ram usage:        7 bytes
  2830 ;; Hardware stack levels used:    1
  2831 ;; Hardware stack levels required when called:    1
  2832 ;; This function calls:
  2833 ;;		Nothing
  2834 ;; This function is called by:
  2835 ;;		_atoi
  2836 ;; This function uses a non-reentrant model
  2837 ;;
  2838                           
  2839                           	psect	text14
  2840  001380                     __ptext14:
  2841                           	opt callstack 0
  2842  001380                     _isspace:
  2843                           	opt callstack 25
  2844                           
  2845                           ;incstack = 0
  2846  001380  0E01               	movlw	1
  2847  001382  6E0A               	movwf	_isspace$974,c
  2848  001384  0E20               	movlw	32
  2849  001386  1804               	xorwf	isspace@c,w,c
  2850  001388  1005               	iorwf	isspace@c+1,w,c
  2851  00138A  B4D8               	btfsc	status,2,c
  2852  00138C  D014               	goto	l2168
  2853  00138E  0EF7               	movlw	247
  2854  001390  6E06               	movwf	??_isspace& (0+255),c
  2855  001392  0EFF               	movlw	255
  2856  001394  6E07               	movwf	(??_isspace+1)& (0+255),c
  2857  001396  C004  F008         	movff	isspace@c,??_isspace+2
  2858  00139A  C005  F009         	movff	isspace@c+1,??_isspace+3
  2859  00139E  5006               	movf	??_isspace,w,c
  2860  0013A0  2608               	addwf	??_isspace+2,f,c
  2861  0013A2  5007               	movf	??_isspace+1,w,c
  2862  0013A4  2209               	addwfc	??_isspace+3,f,c
  2863  0013A6  5009               	movf	??_isspace+3,w,c
  2864  0013A8  E104               	bnz	u1740
  2865  0013AA  0E05               	movlw	5
  2866  0013AC  5C08               	subwf	??_isspace+2,w,c
  2867  0013AE  A0D8               	btfss	status,0,c
  2868  0013B0  D002               	goto	l2168
  2869  0013B2                     u1740:
  2870  0013B2  0E00               	movlw	0
  2871  0013B4  6E0A               	movwf	_isspace$974,c
  2872  0013B6                     l2168:
  2873  0013B6  C00A  F004         	movff	_isspace$974,?_isspace
  2874  0013BA  6A05               	clrf	?_isspace+1,c
  2875  0013BC  0012               	return		;funcret
  2876  0013BE                     __end_of_isspace:
  2877                           	opt callstack 0
  2878                           
  2879 ;; *************** function _isdigit *****************
  2880 ;; Defined at:
  2881 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\isdigit.c"
  2882 ;; Parameters:    Size  Location     Type
  2883 ;;  c               2    3[COMRAM] int 
  2884 ;; Auto vars:     Size  Location     Type
  2885 ;;		None
  2886 ;; Return value:  Size  Location     Type
  2887 ;;                  2    3[COMRAM] int 
  2888 ;; Registers used:
  2889 ;;		wreg, status,2, status,0
  2890 ;; Tracked objects:
  2891 ;;		On entry : 0/0
  2892 ;;		On exit  : 0/0
  2893 ;;		Unchanged: 0/0
  2894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2895 ;;      Params:         2       0       0       0       0       0       0
  2896 ;;      Locals:         0       0       0       0       0       0       0
  2897 ;;      Temps:          4       0       0       0       0       0       0
  2898 ;;      Totals:         6       0       0       0       0       0       0
  2899 ;;Total ram usage:        6 bytes
  2900 ;; Hardware stack levels used:    1
  2901 ;; Hardware stack levels required when called:    1
  2902 ;; This function calls:
  2903 ;;		Nothing
  2904 ;; This function is called by:
  2905 ;;		_vfpfcnvrt
  2906 ;;		_atoi
  2907 ;; This function uses a non-reentrant model
  2908 ;;
  2909                           
  2910                           	psect	text15
  2911  001428                     __ptext15:
  2912                           	opt callstack 0
  2913  001428                     _isdigit:
  2914                           	opt callstack 26
  2915                           
  2916                           ;incstack = 0
  2917  001428  0ED0               	movlw	208
  2918  00142A  6E06               	movwf	??_isdigit& (0+255),c
  2919  00142C  0EFF               	movlw	255
  2920  00142E  6E07               	movwf	(??_isdigit+1)& (0+255),c
  2921  001430  C004  F008         	movff	isdigit@c,??_isdigit+2
  2922  001434  C005  F009         	movff	isdigit@c+1,??_isdigit+3
  2923  001438  5006               	movf	??_isdigit,w,c
  2924  00143A  2608               	addwf	??_isdigit+2,f,c
  2925  00143C  5007               	movf	??_isdigit+1,w,c
  2926  00143E  2209               	addwfc	??_isdigit+3,f,c
  2927  001440  5009               	movf	??_isdigit+3,w,c
  2928  001442  E106               	bnz	u1580
  2929  001444  0E0A               	movlw	10
  2930  001446  5C08               	subwf	??_isdigit+2,w,c
  2931  001448  B0D8               	btfsc	status,0,c
  2932  00144A  D002               	goto	u1580
  2933  00144C  0E01               	movlw	1
  2934  00144E  D001               	goto	u1590
  2935  001450                     u1580:
  2936  001450  0E00               	movlw	0
  2937  001452                     u1590:
  2938  001452  6E04               	movwf	?_isdigit,c
  2939  001454  6A05               	clrf	?_isdigit+1,c
  2940  001456  0012               	return		;funcret
  2941  001458                     __end_of_isdigit:
  2942                           	opt callstack 0
  2943                           
  2944 ;; *************** function ___wmul *****************
  2945 ;; Defined at:
  2946 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
  2947 ;; Parameters:    Size  Location     Type
  2948 ;;  multiplier      2    3[COMRAM] unsigned int 
  2949 ;;  multiplicand    2    5[COMRAM] unsigned int 
  2950 ;; Auto vars:     Size  Location     Type
  2951 ;;  product         2    7[COMRAM] unsigned int 
  2952 ;; Return value:  Size  Location     Type
  2953 ;;                  2    3[COMRAM] unsigned int 
  2954 ;; Registers used:
  2955 ;;		wreg, status,2, status,0, prodl, prodh
  2956 ;; Tracked objects:
  2957 ;;		On entry : 0/0
  2958 ;;		On exit  : 0/0
  2959 ;;		Unchanged: 0/0
  2960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2961 ;;      Params:         4       0       0       0       0       0       0
  2962 ;;      Locals:         2       0       0       0       0       0       0
  2963 ;;      Temps:          0       0       0       0       0       0       0
  2964 ;;      Totals:         6       0       0       0       0       0       0
  2965 ;;Total ram usage:        6 bytes
  2966 ;; Hardware stack levels used:    1
  2967 ;; Hardware stack levels required when called:    1
  2968 ;; This function calls:
  2969 ;;		Nothing
  2970 ;; This function is called by:
  2971 ;;		_atoi
  2972 ;; This function uses a non-reentrant model
  2973 ;;
  2974                           
  2975                           	psect	text16
  2976  0014A8                     __ptext16:
  2977                           	opt callstack 0
  2978  0014A8                     ___wmul:
  2979                           	opt callstack 25
  2980                           
  2981                           ;incstack = 0
  2982  0014A8  5004               	movf	___wmul@multiplier,w,c
  2983  0014AA  0206               	mulwf	___wmul@multiplicand,c
  2984  0014AC  CFF3 F008          	movff	prodl,___wmul@product
  2985  0014B0  CFF4 F009          	movff	prodh,___wmul@product+1
  2986  0014B4  5004               	movf	___wmul@multiplier,w,c
  2987  0014B6  0207               	mulwf	___wmul@multiplicand+1,c
  2988  0014B8  50F3               	movf	prodl,w,c
  2989  0014BA  2609               	addwf	___wmul@product+1,f,c
  2990  0014BC  5005               	movf	___wmul@multiplier+1,w,c
  2991  0014BE  0206               	mulwf	___wmul@multiplicand,c
  2992  0014C0  50F3               	movf	prodl,w,c
  2993  0014C2  2609               	addwf	___wmul@product+1,f,c
  2994  0014C4  C008  F004         	movff	___wmul@product,?___wmul
  2995  0014C8  C009  F005         	movff	___wmul@product+1,?___wmul+1
  2996  0014CC  0012               	return		;funcret
  2997  0014CE                     __end_of___wmul:
  2998                           	opt callstack 0
  2999                           
  3000 ;; *************** function _lcd_ini *****************
  3001 ;; Defined at:
  3002 ;;		line 3 in file "../Bibliotecas/LCD4b.c"
  3003 ;; Parameters:    Size  Location     Type
  3004 ;;		None
  3005 ;; Auto vars:     Size  Location     Type
  3006 ;;  i               1    8[COMRAM] unsigned char 
  3007 ;; Return value:  Size  Location     Type
  3008 ;;                  1    wreg      void 
  3009 ;; Registers used:
  3010 ;;		wreg, status,2, status,0, cstack
  3011 ;; Tracked objects:
  3012 ;;		On entry : 0/0
  3013 ;;		On exit  : 0/0
  3014 ;;		Unchanged: 0/0
  3015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3016 ;;      Params:         0       0       0       0       0       0       0
  3017 ;;      Locals:         1       0       0       0       0       0       0
  3018 ;;      Temps:          1       0       0       0       0       0       0
  3019 ;;      Totals:         2       0       0       0       0       0       0
  3020 ;;Total ram usage:        2 bytes
  3021 ;; Hardware stack levels used:    1
  3022 ;; Hardware stack levels required when called:    3
  3023 ;; This function calls:
  3024 ;;		_lcd_cmd
  3025 ;; This function is called by:
  3026 ;;		_main
  3027 ;; This function uses a non-reentrant model
  3028 ;;
  3029                           
  3030                           	psect	text17
  3031  0011CC                     __ptext17:
  3032                           	opt callstack 0
  3033  0011CC                     _lcd_ini:
  3034                           	opt callstack 27
  3035                           
  3036                           ;../Bibliotecas/LCD4b.c: 5: char i;;../Bibliotecas/LCD4b.c: 7: TRISD = 0b00000000;
  3037                           
  3038                           ;incstack = 0
  3039  0011CC  0E00               	movlw	0
  3040  0011CE  6E95               	movwf	3989,c	;volatile
  3041                           
  3042                           ;../Bibliotecas/LCD4b.c: 8: TRISEbits.TRISE1 = 0;
  3043  0011D0  9296               	bcf	3990,1,c	;volatile
  3044                           
  3045                           ;../Bibliotecas/LCD4b.c: 9: TRISEbits.TRISE0 = 0;
  3046  0011D2  9096               	bcf	3990,0,c	;volatile
  3047                           
  3048                           ;../Bibliotecas/LCD4b.c: 11: PORTD = 0b00000000;
  3049  0011D4  0E00               	movlw	0
  3050  0011D6  6E83               	movwf	3971,c	;volatile
  3051                           
  3052                           ;../Bibliotecas/LCD4b.c: 12: PORTEbits.RE0 = 0;
  3053  0011D8  9084               	bcf	3972,0,c	;volatile
  3054                           
  3055                           ;../Bibliotecas/LCD4b.c: 13: PORTEbits.RE1 = 0;
  3056  0011DA  9284               	bcf	3972,1,c	;volatile
  3057                           
  3058                           ;../Bibliotecas/LCD4b.c: 15: _delay((unsigned long)((15)*(8000000/4000.0)));
  3059  0011DC  0E27               	movlw	39
  3060  0011DE  6E08               	movwf	??_lcd_ini& (0+255),c
  3061  0011E0  0EF5               	movlw	245
  3062  0011E2                     u2117:
  3063  0011E2  2EE8               	decfsz	wreg,f,c
  3064  0011E4  D7FE               	bra	u2117
  3065  0011E6  2E08               	decfsz	??_lcd_ini& (0+255),f,c
  3066  0011E8  D7FC               	bra	u2117
  3067  0011EA  F000               	nop	
  3068                           
  3069                           ;../Bibliotecas/LCD4b.c: 18: for(i=0;i<=2;i++)
  3070  0011EC  0E00               	movlw	0
  3071  0011EE  6E09               	movwf	lcd_ini@i,c
  3072  0011F0                     l1900:
  3073                           
  3074                           ;../Bibliotecas/LCD4b.c: 19:    {;../Bibliotecas/LCD4b.c: 20:    lcd_cmd(0x30);
  3075  0011F0  0E30               	movlw	48
  3076  0011F2  EC73  F007         	call	_lcd_cmd
  3077                           
  3078                           ;../Bibliotecas/LCD4b.c: 21:    _delay((unsigned long)((5)*(8000000/4000.0)));
  3079  0011F6  0E0D               	movlw	13
  3080  0011F8  6E08               	movwf	??_lcd_ini& (0+255),c
  3081  0011FA  0EFC               	movlw	252
  3082  0011FC                     u2127:
  3083  0011FC  2EE8               	decfsz	wreg,f,c
  3084  0011FE  D7FE               	bra	u2127
  3085  001200  2E08               	decfsz	??_lcd_ini& (0+255),f,c
  3086  001202  D7FC               	bra	u2127
  3087                           
  3088                           ;../Bibliotecas/LCD4b.c: 22:    }
  3089  001204  2A09               	incf	lcd_ini@i,f,c
  3090  001206  0E02               	movlw	2
  3091  001208  6409               	cpfsgt	lcd_ini@i,c
  3092  00120A  D7F2               	goto	l1900
  3093                           
  3094                           ;../Bibliotecas/LCD4b.c: 24:    lcd_cmd(0x02);
  3095  00120C  0E02               	movlw	2
  3096  00120E  EC73  F007         	call	_lcd_cmd
  3097                           
  3098                           ;../Bibliotecas/LCD4b.c: 25:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3099  001212  0E1A               	movlw	26
  3100  001214                     u2137:
  3101  001214  2EE8               	decfsz	wreg,f,c
  3102  001216  D7FE               	bra	u2137
  3103  001218  D000               	nop2	
  3104                           
  3105                           ;../Bibliotecas/LCD4b.c: 26:    lcd_cmd(0x28);
  3106  00121A  0E28               	movlw	40
  3107  00121C  EC73  F007         	call	_lcd_cmd
  3108                           
  3109                           ;../Bibliotecas/LCD4b.c: 27:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3110  001220  0E1A               	movlw	26
  3111  001222                     u2147:
  3112  001222  2EE8               	decfsz	wreg,f,c
  3113  001224  D7FE               	bra	u2147
  3114  001226  D000               	nop2	
  3115                           
  3116                           ;../Bibliotecas/LCD4b.c: 28:    lcd_cmd(0x01);
  3117  001228  0E01               	movlw	1
  3118  00122A  EC73  F007         	call	_lcd_cmd
  3119                           
  3120                           ;../Bibliotecas/LCD4b.c: 29:    _delay((unsigned long)((2)*(8000000/4000.0)));
  3121  00122E  0E06               	movlw	6
  3122  001230  6E08               	movwf	??_lcd_ini& (0+255),c
  3123  001232  0E30               	movlw	48
  3124  001234                     u2157:
  3125  001234  2EE8               	decfsz	wreg,f,c
  3126  001236  D7FE               	bra	u2157
  3127  001238  2E08               	decfsz	??_lcd_ini& (0+255),f,c
  3128  00123A  D7FC               	bra	u2157
  3129  00123C  D000               	nop2	
  3130                           
  3131                           ;../Bibliotecas/LCD4b.c: 30:    lcd_cmd(0x0C);
  3132  00123E  0E0C               	movlw	12
  3133  001240  EC73  F007         	call	_lcd_cmd
  3134                           
  3135                           ;../Bibliotecas/LCD4b.c: 31:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3136  001244  0E1A               	movlw	26
  3137  001246                     u2167:
  3138  001246  2EE8               	decfsz	wreg,f,c
  3139  001248  D7FE               	bra	u2167
  3140  00124A  D000               	nop2	
  3141                           
  3142                           ;../Bibliotecas/LCD4b.c: 32:    lcd_cmd(0x06);
  3143  00124C  0E06               	movlw	6
  3144  00124E  EC73  F007         	call	_lcd_cmd
  3145                           
  3146                           ;../Bibliotecas/LCD4b.c: 33:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3147  001252  0E1A               	movlw	26
  3148  001254                     u2177:
  3149  001254  2EE8               	decfsz	wreg,f,c
  3150  001256  D7FE               	bra	u2177
  3151  001258  D000               	nop2	
  3152  00125A  0012               	return		;funcret
  3153  00125C                     __end_of_lcd_ini:
  3154                           	opt callstack 0
  3155                           
  3156 ;; *************** function _lcd_escreve_bf *****************
  3157 ;; Defined at:
  3158 ;;		line 82 in file "../Bibliotecas/LCD4b.c"
  3159 ;; Parameters:    Size  Location     Type
  3160 ;;  lin             1    wreg     unsigned char 
  3161 ;;  col             1    9[COMRAM] unsigned char 
  3162 ;;  str             2   10[COMRAM] PTR unsigned char 
  3163 ;;		 -> bufferLCD(16), STR_2(14), STR_1(14), 
  3164 ;; Auto vars:     Size  Location     Type
  3165 ;;  lin             1   13[COMRAM] unsigned char 
  3166 ;;  end             1   12[COMRAM] unsigned char 
  3167 ;; Return value:  Size  Location     Type
  3168 ;;                  1    wreg      void 
  3169 ;; Registers used:
  3170 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3171 ;; Tracked objects:
  3172 ;;		On entry : 0/0
  3173 ;;		On exit  : 0/0
  3174 ;;		Unchanged: 0/0
  3175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3176 ;;      Params:         3       0       0       0       0       0       0
  3177 ;;      Locals:         2       0       0       0       0       0       0
  3178 ;;      Temps:          0       0       0       0       0       0       0
  3179 ;;      Totals:         5       0       0       0       0       0       0
  3180 ;;Total ram usage:        5 bytes
  3181 ;; Hardware stack levels used:    1
  3182 ;; Hardware stack levels required when called:    4
  3183 ;; This function calls:
  3184 ;;		_lcd_envia_byte
  3185 ;; This function is called by:
  3186 ;;		_main
  3187 ;; This function uses a non-reentrant model
  3188 ;;
  3189                           
  3190                           	psect	text18
  3191  00125C                     __ptext18:
  3192                           	opt callstack 0
  3193  00125C                     _lcd_escreve_bf:
  3194                           	opt callstack 26
  3195                           
  3196                           ;incstack = 0
  3197                           ;lcd_escreve_bf@lin stored from wreg
  3198  00125C  6E0E               	movwf	lcd_escreve_bf@lin,c
  3199                           
  3200                           ;../Bibliotecas/LCD4b.c: 82: void lcd_escreve_bf(char lin, char col, char *str);../Bibli
      +                          otecas/LCD4b.c: 83: {;../Bibliotecas/LCD4b.c: 84:     char end;;../Bibliotecas/LCD4b.c: 
      +                          87:     if (lin == 1) {
  3201  00125E  040E               	decf	lcd_escreve_bf@lin,w,c
  3202  001260  A4D8               	btfss	status,2,c
  3203  001262  D003               	goto	l1926
  3204                           
  3205                           ;../Bibliotecas/LCD4b.c: 88:         end = col + 0x80 - 1;
  3206  001264  500A               	movf	lcd_escreve_bf@col,w,c
  3207  001266  0F7F               	addlw	127
  3208  001268  D006               	goto	L3
  3209  00126A                     l1926:
  3210  00126A  0E02               	movlw	2
  3211  00126C  180E               	xorwf	lcd_escreve_bf@lin,w,c
  3212  00126E  A4D8               	btfss	status,2,c
  3213  001270  D003               	goto	l1930
  3214                           
  3215                           ;../Bibliotecas/LCD4b.c: 91:         end = col + 0xC0 - 1;
  3216  001272  500A               	movf	lcd_escreve_bf@col,w,c
  3217  001274  0FBF               	addlw	191
  3218  001276                     L3:
  3219  001276  6E0D               	movwf	lcd_escreve_bf@end,c
  3220  001278                     l1930:
  3221                           
  3222                           ;../Bibliotecas/LCD4b.c: 94:     lcd_envia_byte(0,end);
  3223  001278  C00D  F008         	movff	lcd_escreve_bf@end,lcd_envia_byte@dado
  3224  00127C  0E00               	movlw	0
  3225  00127E  EC67  F00A         	call	_lcd_envia_byte
  3226                           
  3227                           ;../Bibliotecas/LCD4b.c: 98:     while (*str){
  3228  001282  D016               	goto	l1936
  3229  001284                     l1932:
  3230                           
  3231                           ;../Bibliotecas/LCD4b.c: 99:         lcd_envia_byte(1,*str);
  3232  001284  C00B  FFF6         	movff	lcd_escreve_bf@str,tblptrl
  3233  001288  C00C  FFF7         	movff	lcd_escreve_bf@str+1,tblptrh
  3234  00128C  6AF8               	clrf	tblptru,c
  3235  00128E  0E05               	movlw	(high __ramtop+-1)
  3236  001290  64F7               	cpfsgt	tblptrh,c
  3237  001292  D003               	bra	u1437
  3238  001294  0008               	tblrd		*
  3239  001296  50F5               	movf	tablat,w,c
  3240  001298  D005               	bra	u1430
  3241  00129A                     u1437:
  3242  00129A  CFF6 FFE1          	movff	tblptrl,fsr1l
  3243  00129E  CFF7 FFE2          	movff	tblptrh,fsr1h
  3244  0012A2  50E7               	movf	indf1,w,c
  3245  0012A4                     u1430:
  3246  0012A4  6E08               	movwf	lcd_envia_byte@dado,c
  3247  0012A6  0E01               	movlw	1
  3248  0012A8  EC67  F00A         	call	_lcd_envia_byte
  3249                           
  3250                           ;../Bibliotecas/LCD4b.c: 100:         str++;
  3251  0012AC  4A0B               	infsnz	lcd_escreve_bf@str,f,c
  3252  0012AE  2A0C               	incf	lcd_escreve_bf@str+1,f,c
  3253  0012B0                     l1936:
  3254                           
  3255                           ;../Bibliotecas/LCD4b.c: 98:     while (*str){
  3256  0012B0  C00B  FFF6         	movff	lcd_escreve_bf@str,tblptrl
  3257  0012B4  C00C  FFF7         	movff	lcd_escreve_bf@str+1,tblptrh
  3258  0012B8  6AF8               	clrf	tblptru,c
  3259  0012BA  0E05               	movlw	(high __ramtop+-1)
  3260  0012BC  64F7               	cpfsgt	tblptrh,c
  3261  0012BE  D003               	bra	u1447
  3262  0012C0  0008               	tblrd		*
  3263  0012C2  50F5               	movf	tablat,w,c
  3264  0012C4  D005               	bra	u1440
  3265  0012C6                     u1447:
  3266  0012C6  CFF6 FFE1          	movff	tblptrl,fsr1l
  3267  0012CA  CFF7 FFE2          	movff	tblptrh,fsr1h
  3268  0012CE  50E7               	movf	indf1,w,c
  3269  0012D0                     u1440:
  3270  0012D0  0900               	iorlw	0
  3271  0012D2  B4D8               	btfsc	status,2,c
  3272  0012D4  0012               	return	
  3273  0012D6  D7D6               	goto	l1932
  3274  0012D8                     __end_of_lcd_escreve_bf:
  3275                           	opt callstack 0
  3276                           
  3277 ;; *************** function _lcd_envia_byte *****************
  3278 ;; Defined at:
  3279 ;;		line 74 in file "../Bibliotecas/LCD4b.c"
  3280 ;; Parameters:    Size  Location     Type
  3281 ;;  nivel           1    wreg     unsigned char 
  3282 ;;  dado            1    7[COMRAM] unsigned char 
  3283 ;; Auto vars:     Size  Location     Type
  3284 ;;  nivel           1    8[COMRAM] unsigned char 
  3285 ;; Return value:  Size  Location     Type
  3286 ;;                  1    wreg      void 
  3287 ;; Registers used:
  3288 ;;		wreg, status,2, status,0, cstack
  3289 ;; Tracked objects:
  3290 ;;		On entry : 0/0
  3291 ;;		On exit  : 0/0
  3292 ;;		Unchanged: 0/0
  3293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3294 ;;      Params:         1       0       0       0       0       0       0
  3295 ;;      Locals:         1       0       0       0       0       0       0
  3296 ;;      Temps:          0       0       0       0       0       0       0
  3297 ;;      Totals:         2       0       0       0       0       0       0
  3298 ;;Total ram usage:        2 bytes
  3299 ;; Hardware stack levels used:    1
  3300 ;; Hardware stack levels required when called:    3
  3301 ;; This function calls:
  3302 ;;		_lcd_cmd
  3303 ;; This function is called by:
  3304 ;;		_lcd_escreve_bf
  3305 ;; This function uses a non-reentrant model
  3306 ;;
  3307                           
  3308                           	psect	text19
  3309  0014CE                     __ptext19:
  3310                           	opt callstack 0
  3311  0014CE                     _lcd_envia_byte:
  3312                           	opt callstack 26
  3313                           
  3314                           ;incstack = 0
  3315                           ;lcd_envia_byte@nivel stored from wreg
  3316  0014CE  6E09               	movwf	lcd_envia_byte@nivel,c
  3317                           
  3318                           ;../Bibliotecas/LCD4b.c: 74: void lcd_envia_byte(char nivel, char dado);../Bibliotecas/L
      +                          CD4b.c: 75: {;../Bibliotecas/LCD4b.c: 76:     PORTEbits.RE0 = nivel;
  3319  0014D0  B009               	btfsc	lcd_envia_byte@nivel,0,c
  3320  0014D2  D002               	bra	u1385
  3321  0014D4  9084               	bcf	3972,0,c	;volatile
  3322  0014D6  D001               	bra	u1386
  3323  0014D8                     u1385:
  3324  0014D8  8084               	bsf	3972,0,c	;volatile
  3325  0014DA                     u1386:
  3326                           
  3327                           ;../Bibliotecas/LCD4b.c: 77:     _delay((unsigned long)((100)*(8000000/4000000.0)));
  3328  0014DA  0E42               	movlw	66
  3329  0014DC                     u2187:
  3330  0014DC  2EE8               	decfsz	wreg,f,c
  3331  0014DE  D7FE               	bra	u2187
  3332  0014E0  D000               	nop2	
  3333                           
  3334                           ;../Bibliotecas/LCD4b.c: 78:     PORTEbits.RE1 = 0;
  3335  0014E2  9284               	bcf	3972,1,c	;volatile
  3336                           
  3337                           ;../Bibliotecas/LCD4b.c: 79:     lcd_cmd(dado);
  3338  0014E4  5008               	movf	lcd_envia_byte@dado,w,c
  3339  0014E6  EC73  F007         	call	_lcd_cmd
  3340  0014EA  0012               	return		;funcret
  3341  0014EC                     __end_of_lcd_envia_byte:
  3342                           	opt callstack 0
  3343                           
  3344 ;; *************** function _lcd_cmd *****************
  3345 ;; Defined at:
  3346 ;;		line 48 in file "../Bibliotecas/LCD4b.c"
  3347 ;; Parameters:    Size  Location     Type
  3348 ;;  cmd             1    wreg     unsigned char 
  3349 ;; Auto vars:     Size  Location     Type
  3350 ;;  cmd             1    6[COMRAM] unsigned char 
  3351 ;; Return value:  Size  Location     Type
  3352 ;;                  1    wreg      void 
  3353 ;; Registers used:
  3354 ;;		wreg, status,2, status,0, cstack
  3355 ;; Tracked objects:
  3356 ;;		On entry : 0/0
  3357 ;;		On exit  : 0/0
  3358 ;;		Unchanged: 0/0
  3359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3360 ;;      Params:         0       0       0       0       0       0       0
  3361 ;;      Locals:         1       0       0       0       0       0       0
  3362 ;;      Temps:          1       0       0       0       0       0       0
  3363 ;;      Totals:         2       0       0       0       0       0       0
  3364 ;;Total ram usage:        2 bytes
  3365 ;; Hardware stack levels used:    1
  3366 ;; Hardware stack levels required when called:    2
  3367 ;; This function calls:
  3368 ;;		_set_bit
  3369 ;; This function is called by:
  3370 ;;		_lcd_ini
  3371 ;;		_lcd_envia_byte
  3372 ;; This function uses a non-reentrant model
  3373 ;;
  3374                           
  3375                           	psect	text20
  3376  000EE6                     __ptext20:
  3377                           	opt callstack 0
  3378  000EE6                     _lcd_cmd:
  3379                           	opt callstack 27
  3380                           
  3381                           ;incstack = 0
  3382                           ;lcd_cmd@cmd stored from wreg
  3383  000EE6  6E07               	movwf	lcd_cmd@cmd,c
  3384                           
  3385                           ;../Bibliotecas/LCD4b.c: 48: void lcd_cmd(char cmd);../Bibliotecas/LCD4b.c: 49: {;../Bib
      +                          liotecas/LCD4b.c: 52:     PORTDbits.RD4 = set_bit(cmd,0b00010000);
  3386  000EE8  0E10               	movlw	16
  3387  000EEA  6E04               	movwf	set_bit@comp,c
  3388  000EEC  5007               	movf	lcd_cmd@cmd,w,c
  3389  000EEE  EC76  F00A         	call	_set_bit
  3390  000EF2  6E06               	movwf	??_lcd_cmd& (0+255),c
  3391  000EF4  3A06               	swapf	??_lcd_cmd,f,c
  3392  000EF6  5083               	movf	3971,w,c	;volatile
  3393  000EF8  1806               	xorwf	??_lcd_cmd,w,c
  3394  000EFA  0BEF               	andlw	-17
  3395  000EFC  1806               	xorwf	??_lcd_cmd,w,c
  3396  000EFE  6E83               	movwf	3971,c	;volatile
  3397                           
  3398                           ;../Bibliotecas/LCD4b.c: 53:     PORTDbits.RD5 = set_bit(cmd,0b00100000);
  3399  000F00  0E20               	movlw	32
  3400  000F02  6E04               	movwf	set_bit@comp,c
  3401  000F04  5007               	movf	lcd_cmd@cmd,w,c
  3402  000F06  EC76  F00A         	call	_set_bit
  3403  000F0A  6E06               	movwf	??_lcd_cmd& (0+255),c
  3404  000F0C  3A06               	swapf	??_lcd_cmd,f,c
  3405  000F0E  4606               	rlncf	??_lcd_cmd,f,c
  3406  000F10  5083               	movf	3971,w,c	;volatile
  3407  000F12  1806               	xorwf	??_lcd_cmd,w,c
  3408  000F14  0BDF               	andlw	-33
  3409  000F16  1806               	xorwf	??_lcd_cmd,w,c
  3410  000F18  6E83               	movwf	3971,c	;volatile
  3411                           
  3412                           ;../Bibliotecas/LCD4b.c: 54:     PORTDbits.RD6 = set_bit(cmd,0b01000000);
  3413  000F1A  0E40               	movlw	64
  3414  000F1C  6E04               	movwf	set_bit@comp,c
  3415  000F1E  5007               	movf	lcd_cmd@cmd,w,c
  3416  000F20  EC76  F00A         	call	_set_bit
  3417  000F24  6E06               	movwf	??_lcd_cmd& (0+255),c
  3418  000F26  3A06               	swapf	??_lcd_cmd,f,c
  3419  000F28  4606               	rlncf	??_lcd_cmd,f,c
  3420  000F2A  4606               	rlncf	??_lcd_cmd,f,c
  3421  000F2C  5083               	movf	3971,w,c	;volatile
  3422  000F2E  1806               	xorwf	??_lcd_cmd,w,c
  3423  000F30  0BBF               	andlw	-65
  3424  000F32  1806               	xorwf	??_lcd_cmd,w,c
  3425  000F34  6E83               	movwf	3971,c	;volatile
  3426                           
  3427                           ;../Bibliotecas/LCD4b.c: 55:     PORTDbits.RD7 = set_bit(cmd,0b10000000);
  3428  000F36  0E80               	movlw	128
  3429  000F38  6E04               	movwf	set_bit@comp,c
  3430  000F3A  5007               	movf	lcd_cmd@cmd,w,c
  3431  000F3C  EC76  F00A         	call	_set_bit
  3432  000F40  6E06               	movwf	??_lcd_cmd& (0+255),c
  3433  000F42  3206               	rrcf	??_lcd_cmd,f,c
  3434  000F44  3206               	rrcf	??_lcd_cmd,f,c
  3435  000F46  5083               	movf	3971,w,c	;volatile
  3436  000F48  1806               	xorwf	??_lcd_cmd,w,c
  3437  000F4A  0B7F               	andlw	-129
  3438  000F4C  1806               	xorwf	??_lcd_cmd,w,c
  3439  000F4E  6E83               	movwf	3971,c	;volatile
  3440                           
  3441                           ;../Bibliotecas/LCD4b.c: 57:     PORTEbits.RE1 = 1;
  3442  000F50  8284               	bsf	3972,1,c	;volatile
  3443                           
  3444                           ;../Bibliotecas/LCD4b.c: 58:     PORTEbits.RE1 = 0;
  3445  000F52  9284               	bcf	3972,1,c	;volatile
  3446                           
  3447                           ;../Bibliotecas/LCD4b.c: 60:     _delay((unsigned long)((100)*(8000000/4000000.0)));
  3448  000F54  0E42               	movlw	66
  3449  000F56                     u2197:
  3450  000F56  2EE8               	decfsz	wreg,f,c
  3451  000F58  D7FE               	bra	u2197
  3452  000F5A  D000               	nop2	
  3453                           
  3454                           ;../Bibliotecas/LCD4b.c: 64:     PORTDbits.RD4 = set_bit(cmd,0b00000001);
  3455  000F5C  0E01               	movlw	1
  3456  000F5E  6E04               	movwf	set_bit@comp,c
  3457  000F60  5007               	movf	lcd_cmd@cmd,w,c
  3458  000F62  EC76  F00A         	call	_set_bit
  3459  000F66  6E06               	movwf	??_lcd_cmd& (0+255),c
  3460  000F68  3A06               	swapf	??_lcd_cmd,f,c
  3461  000F6A  5083               	movf	3971,w,c	;volatile
  3462  000F6C  1806               	xorwf	??_lcd_cmd,w,c
  3463  000F6E  0BEF               	andlw	-17
  3464  000F70  1806               	xorwf	??_lcd_cmd,w,c
  3465  000F72  6E83               	movwf	3971,c	;volatile
  3466                           
  3467                           ;../Bibliotecas/LCD4b.c: 65:     PORTDbits.RD5 = set_bit(cmd,0b00000010);
  3468  000F74  0E02               	movlw	2
  3469  000F76  6E04               	movwf	set_bit@comp,c
  3470  000F78  5007               	movf	lcd_cmd@cmd,w,c
  3471  000F7A  EC76  F00A         	call	_set_bit
  3472  000F7E  6E06               	movwf	??_lcd_cmd& (0+255),c
  3473  000F80  3A06               	swapf	??_lcd_cmd,f,c
  3474  000F82  4606               	rlncf	??_lcd_cmd,f,c
  3475  000F84  5083               	movf	3971,w,c	;volatile
  3476  000F86  1806               	xorwf	??_lcd_cmd,w,c
  3477  000F88  0BDF               	andlw	-33
  3478  000F8A  1806               	xorwf	??_lcd_cmd,w,c
  3479  000F8C  6E83               	movwf	3971,c	;volatile
  3480                           
  3481                           ;../Bibliotecas/LCD4b.c: 66:     PORTDbits.RD6 = set_bit(cmd,0b00000100);
  3482  000F8E  0E04               	movlw	4
  3483  000F90  6E04               	movwf	set_bit@comp,c
  3484  000F92  5007               	movf	lcd_cmd@cmd,w,c
  3485  000F94  EC76  F00A         	call	_set_bit
  3486  000F98  6E06               	movwf	??_lcd_cmd& (0+255),c
  3487  000F9A  3A06               	swapf	??_lcd_cmd,f,c
  3488  000F9C  4606               	rlncf	??_lcd_cmd,f,c
  3489  000F9E  4606               	rlncf	??_lcd_cmd,f,c
  3490  000FA0  5083               	movf	3971,w,c	;volatile
  3491  000FA2  1806               	xorwf	??_lcd_cmd,w,c
  3492  000FA4  0BBF               	andlw	-65
  3493  000FA6  1806               	xorwf	??_lcd_cmd,w,c
  3494  000FA8  6E83               	movwf	3971,c	;volatile
  3495                           
  3496                           ;../Bibliotecas/LCD4b.c: 67:     PORTDbits.RD7 = set_bit(cmd,0b00001000);
  3497  000FAA  0E08               	movlw	8
  3498  000FAC  6E04               	movwf	set_bit@comp,c
  3499  000FAE  5007               	movf	lcd_cmd@cmd,w,c
  3500  000FB0  EC76  F00A         	call	_set_bit
  3501  000FB4  6E06               	movwf	??_lcd_cmd& (0+255),c
  3502  000FB6  3206               	rrcf	??_lcd_cmd,f,c
  3503  000FB8  3206               	rrcf	??_lcd_cmd,f,c
  3504  000FBA  5083               	movf	3971,w,c	;volatile
  3505  000FBC  1806               	xorwf	??_lcd_cmd,w,c
  3506  000FBE  0B7F               	andlw	-129
  3507  000FC0  1806               	xorwf	??_lcd_cmd,w,c
  3508  000FC2  6E83               	movwf	3971,c	;volatile
  3509                           
  3510                           ;../Bibliotecas/LCD4b.c: 69:     PORTEbits.RE1 = 1;
  3511  000FC4  8284               	bsf	3972,1,c	;volatile
  3512                           
  3513                           ;../Bibliotecas/LCD4b.c: 70:     PORTEbits.RE1 = 0;
  3514  000FC6  9284               	bcf	3972,1,c	;volatile
  3515  000FC8  0012               	return		;funcret
  3516  000FCA                     __end_of_lcd_cmd:
  3517                           	opt callstack 0
  3518                           
  3519 ;; *************** function _set_bit *****************
  3520 ;; Defined at:
  3521 ;;		line 38 in file "../Bibliotecas/LCD4b.c"
  3522 ;; Parameters:    Size  Location     Type
  3523 ;;  cmd             1    wreg     unsigned char 
  3524 ;;  comp            1    3[COMRAM] unsigned char 
  3525 ;; Auto vars:     Size  Location     Type
  3526 ;;  cmd             1    4[COMRAM] unsigned char 
  3527 ;; Return value:  Size  Location     Type
  3528 ;;                  1    wreg      unsigned char 
  3529 ;; Registers used:
  3530 ;;		wreg, status,2, status,0
  3531 ;; Tracked objects:
  3532 ;;		On entry : 0/0
  3533 ;;		On exit  : 0/0
  3534 ;;		Unchanged: 0/0
  3535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3536 ;;      Params:         1       0       0       0       0       0       0
  3537 ;;      Locals:         1       0       0       0       0       0       0
  3538 ;;      Temps:          0       0       0       0       0       0       0
  3539 ;;      Totals:         2       0       0       0       0       0       0
  3540 ;;Total ram usage:        2 bytes
  3541 ;; Hardware stack levels used:    1
  3542 ;; Hardware stack levels required when called:    1
  3543 ;; This function calls:
  3544 ;;		Nothing
  3545 ;; This function is called by:
  3546 ;;		_lcd_cmd
  3547 ;; This function uses a non-reentrant model
  3548 ;;
  3549                           
  3550                           	psect	text21
  3551  0014EC                     __ptext21:
  3552                           	opt callstack 0
  3553  0014EC                     _set_bit:
  3554                           	opt callstack 27
  3555                           
  3556                           ;incstack = 0
  3557                           ;set_bit@cmd stored from wreg
  3558  0014EC  6E05               	movwf	set_bit@cmd,c
  3559                           
  3560                           ;../Bibliotecas/LCD4b.c: 38: char set_bit(char cmd, char comp);../Bibliotecas/LCD4b.c: 3
      +                          9: {;../Bibliotecas/LCD4b.c: 41:     if ((cmd & comp) >= 1)
  3561  0014EE  5005               	movf	set_bit@cmd,w,c
  3562  0014F0  1404               	andwf	set_bit@comp,w,c
  3563  0014F2  0900               	iorlw	0
  3564  0014F4  B4D8               	btfsc	status,2,c
  3565  0014F6  D002               	goto	l1642
  3566                           
  3567                           ;../Bibliotecas/LCD4b.c: 42:         return 1;
  3568  0014F8  0E01               	movlw	1
  3569  0014FA  0012               	return	
  3570  0014FC                     l1642:
  3571                           
  3572                           ;../Bibliotecas/LCD4b.c: 44:         return 0;
  3573  0014FC  0E00               	movlw	0
  3574  0014FE  0012               	return		;funcret
  3575  001500                     __end_of_set_bit:
  3576                           	opt callstack 0
  3577                           
  3578 ;; *************** function _int_TMR0 *****************
  3579 ;; Defined at:
  3580 ;;		line 13 in file "EX15.c"
  3581 ;; Parameters:    Size  Location     Type
  3582 ;;		None
  3583 ;; Auto vars:     Size  Location     Type
  3584 ;;		None
  3585 ;; Return value:  Size  Location     Type
  3586 ;;                  1    wreg      void 
  3587 ;; Registers used:
  3588 ;;		wreg, status,2, status,0
  3589 ;; Tracked objects:
  3590 ;;		On entry : 0/0
  3591 ;;		On exit  : 0/0
  3592 ;;		Unchanged: 0/0
  3593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3594 ;;      Params:         0       0       0       0       0       0       0
  3595 ;;      Locals:         0       0       0       0       0       0       0
  3596 ;;      Temps:          3       0       0       0       0       0       0
  3597 ;;      Totals:         3       0       0       0       0       0       0
  3598 ;;Total ram usage:        3 bytes
  3599 ;; Hardware stack levels used:    1
  3600 ;; This function calls:
  3601 ;;		Nothing
  3602 ;; This function is called by:
  3603 ;;		Interrupt level 1
  3604 ;; This function uses a non-reentrant model
  3605 ;;
  3606                           
  3607                           	psect	intcodelo
  3608  000018                     __pintcodelo:
  3609                           	opt callstack 0
  3610  000018                     _int_TMR0:
  3611                           	opt callstack 22
  3612                           
  3613                           ;incstack = 0
  3614  000018  8075               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  3615  00001A  CFD8 F001          	movff	status,??_int_TMR0
  3616  00001E  CFE8 F002          	movff	wreg,??_int_TMR0+1
  3617  000022  CFE0 F003          	movff	bsr,??_int_TMR0+2
  3618                           
  3619                           ;EX15.c: 15:     if (TMR0IF)
  3620  000026  A4F2               	btfss	4082,2,c	;volatile
  3621  000028  D02A               	goto	i1l35
  3622                           
  3623                           ;EX15.c: 16:     {;EX15.c: 17:         conta5s++;
  3624  00002A  4A71               	infsnz	_conta5s,f,c
  3625  00002C  2A72               	incf	_conta5s+1,f,c
  3626                           
  3627                           ;EX15.c: 18:         T0_10s++;
  3628  00002E  4A73               	infsnz	_T0_10s,f,c
  3629  000030  2A74               	incf	_T0_10s+1,f,c
  3630                           
  3631                           ;EX15.c: 19:         if (T0_10s>=2)
  3632  000032  BE74               	btfsc	_T0_10s+1,7,c
  3633  000034  D00C               	goto	i1l1434
  3634  000036  5074               	movf	_T0_10s+1,w,c
  3635  000038  E104               	bnz	i1u72_20
  3636  00003A  0E02               	movlw	2
  3637  00003C  5C73               	subwf	_T0_10s,w,c
  3638  00003E  A0D8               	btfss	status,0,c
  3639  000040  D006               	goto	i1l1434
  3640  000042                     i1u72_20:
  3641                           
  3642                           ;EX15.c: 20:         {;EX15.c: 21:             T0_10s=0;
  3643  000042  0E00               	movlw	0
  3644  000044  6E74               	movwf	_T0_10s+1,c
  3645  000046  0E00               	movlw	0
  3646  000048  6E73               	movwf	_T0_10s,c
  3647                           
  3648                           ;EX15.c: 22:             conta10s++;
  3649  00004A  4A6F               	infsnz	_conta10s,f,c
  3650  00004C  2A70               	incf	_conta10s+1,f,c
  3651  00004E                     i1l1434:
  3652                           
  3653                           ;EX15.c: 24:         if (conta5s>=100) conta5s=0;
  3654  00004E  BE72               	btfsc	_conta5s+1,7,c
  3655  000050  D00A               	goto	i1l1438
  3656  000052  5072               	movf	_conta5s+1,w,c
  3657  000054  E104               	bnz	i1u73_20
  3658  000056  0E64               	movlw	100
  3659  000058  5C71               	subwf	_conta5s,w,c
  3660  00005A  A0D8               	btfss	status,0,c
  3661  00005C  D004               	goto	i1l1438
  3662  00005E                     i1u73_20:
  3663  00005E  0E00               	movlw	0
  3664  000060  6E72               	movwf	_conta5s+1,c
  3665  000062  0E00               	movlw	0
  3666  000064  6E71               	movwf	_conta5s,c
  3667  000066                     i1l1438:
  3668                           
  3669                           ;EX15.c: 25:         if (conta10s>=50) conta10s=0;
  3670  000066  BE70               	btfsc	_conta10s+1,7,c
  3671  000068  D00A               	goto	i1l35
  3672  00006A  5070               	movf	_conta10s+1,w,c
  3673  00006C  E104               	bnz	i1u74_20
  3674  00006E  0E32               	movlw	50
  3675  000070  5C6F               	subwf	_conta10s,w,c
  3676  000072  A0D8               	btfss	status,0,c
  3677  000074  D004               	goto	i1l35
  3678  000076                     i1u74_20:
  3679  000076  0E00               	movlw	0
  3680  000078  6E70               	movwf	_conta10s+1,c
  3681  00007A  0E00               	movlw	0
  3682  00007C  6E6F               	movwf	_conta10s,c
  3683  00007E                     i1l35:
  3684                           
  3685                           ;EX15.c: 27:      TMR0 = 26474;
  3686  00007E  0E67               	movlw	103
  3687  000080  6ED7               	movwf	4055,c	;volatile
  3688  000082  0E6A               	movlw	106
  3689  000084  6ED6               	movwf	4054,c	;volatile
  3690                           
  3691                           ;EX15.c: 28:      TMR0IF = 0;
  3692  000086  94F2               	bcf	4082,2,c	;volatile
  3693  000088  C003  FFE0         	movff	??_int_TMR0+2,bsr
  3694  00008C  C002  FFE8         	movff	??_int_TMR0+1,wreg
  3695  000090  C001  FFD8         	movff	??_int_TMR0,status
  3696  000094  9075               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  3697  000096  0010               	retfie	
  3698  000098                     __end_of_int_TMR0:
  3699                           	opt callstack 0
  3700                           
  3701                           	psect	rparam
  3702  0000                     
  3703                           	psect	temp
  3704  000075                     btemp:
  3705                           	opt callstack 0
  3706  000075                     	ds	1
  3707  0000                     int$flags	set	btemp
  3708  0000                     wtemp8	set	btemp+1
  3709  0000                     ttemp5	set	btemp+1
  3710  0000                     ttemp6	set	btemp+4
  3711  0000                     ttemp7	set	btemp+8
  3712                           tosu	equ	0xFFF
  3713                           tosh	equ	0xFFE
  3714                           tosl	equ	0xFFD
  3715                           stkptr	equ	0xFFC
  3716                           pclatu	equ	0xFFB
  3717                           pclath	equ	0xFFA
  3718                           pcl	equ	0xFF9
  3719                           tblptru	equ	0xFF8
  3720                           tblptrh	equ	0xFF7
  3721                           tblptrl	equ	0xFF6
  3722                           tablat	equ	0xFF5
  3723                           prodh	equ	0xFF4
  3724                           prodl	equ	0xFF3
  3725                           indf0	equ	0xFEF
  3726                           postinc0	equ	0xFEE
  3727                           postdec0	equ	0xFED
  3728                           preinc0	equ	0xFEC
  3729                           plusw0	equ	0xFEB
  3730                           fsr0h	equ	0xFEA
  3731                           fsr0l	equ	0xFE9
  3732                           wreg	equ	0xFE8
  3733                           indf1	equ	0xFE7
  3734                           postinc1	equ	0xFE6
  3735                           postdec1	equ	0xFE5
  3736                           preinc1	equ	0xFE4
  3737                           plusw1	equ	0xFE3
  3738                           fsr1h	equ	0xFE2
  3739                           fsr1l	equ	0xFE1
  3740                           bsr	equ	0xFE0
  3741                           indf2	equ	0xFDF
  3742                           postinc2	equ	0xFDE
  3743                           postdec2	equ	0xFDD
  3744                           preinc2	equ	0xFDC
  3745                           plusw2	equ	0xFDB
  3746                           fsr2h	equ	0xFDA
  3747                           fsr2l	equ	0xFD9
  3748                           status	equ	0xFD8


Data Sizes:
    Strings     33
    Constant    0
    Data        0
    BSS         62
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    104     116
    BANK0           128     10      60
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_4(CODE[5]), STR_3(CODE[5]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    S978_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_4(CODE[5]), STR_3(CODE[5]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_4(CODE[5]), STR_3(CODE[5]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 5
		 -> STR_4(CODE[5]), STR_3(CODE[5]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    lcd_escreve_bf@str	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), STR_2(CODE[14]), STR_1(CODE[14]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _atoi->_isspace
    _lcd_ini->_lcd_cmd
    _lcd_escreve_bf->_lcd_envia_byte
    _lcd_envia_byte->_lcd_cmd
    _lcd_cmd->_set_bit

Critical Paths under _int_TMR0 in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _int_TMR0 in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _int_TMR0 in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _int_TMR0 in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _int_TMR0 in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _int_TMR0 in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _int_TMR0 in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   13696
                                            102 COMRAM     2     2      0
                     _lcd_escreve_bf
                            _lcd_ini
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             16    10      6   11033
                                             96 COMRAM     6     0      6
                                              0 BANK0     10    10      0
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6   10361
                                             88 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           46    40      6    9831
                                             66 COMRAM    22    16      6
                               _atoi
                               _dtoa
                              _fputc
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                36    26     10    5683
                                             30 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    3417
                                             19 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     220
                                              3 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1537
                                             12 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4    1037
                                              3 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     183
                                             21 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     613
                                              3 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     625
                                              3 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (4) _atoi                                                15    13      2    1615
                                             10 COMRAM    15    13      2
                             ___wmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (5) _isspace                                              7     5      2     259
                                              3 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              6     4      2     281
                                              3 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     512
                                              3 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _lcd_ini                                              2     2      0     874
                                              7 COMRAM     2     2      0
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (1) _lcd_escreve_bf                                       5     2      3    1789
                                              9 COMRAM     5     2      3
                     _lcd_envia_byte
 ---------------------------------------------------------------------------------
 (2) _lcd_envia_byte                                       2     1      1    1024
                                              7 COMRAM     2     1      1
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (2) _lcd_cmd                                              2     2      0     828
                                              5 COMRAM     2     2      0
                            _set_bit
 ---------------------------------------------------------------------------------
 (3) _set_bit                                              2     1      1     652
                                              3 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _int_TMR0                                             3     3      0       0
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _lcd_escreve_bf
     _lcd_envia_byte
       _lcd_cmd
         _set_bit
   _lcd_ini
     _lcd_cmd
       _set_bit
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _atoi
           ___wmul
           _isdigit
           _isspace
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
                 _putch
             _strlen
         _fputc
           _putch
         _isdigit

 _int_TMR0 (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      A      3C       5       46.9%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     68      74       1       92.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      B0      15        0.0%
DATA                 0      0      B0       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Thu Apr 04 15:30:11 2019

                     bsr 000FE0      ___wmul@multiplicand 0006              __CFG_BORV$3 000000  
           __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000  
           __CFG_CP3$OFF 000000              __CFG_OSC$HS 000000                      l130 0972  
                    l117 1164                      l128 096A                      l862 141E  
                    l893 0DB8             __CFG_CPB$OFF 000000             __CFG_CPD$OFF 000000  
                    _abs 13F6                      _pad 1136                      wreg 000FE8  
           __CFG_LVP$OFF 000000             __CFG_WDT$OFF 000000                     ?_abs 0016  
                   l2100 0BB4                     l2102 0BC8                     l2120 0C60  
                   l2112 0C24                     l2032 13DE                     l2018 10AE  
                   l2116 0C3A                     l2140 0E2C                     l2132 0DEE  
                   l2028 13C8                     l2036 1462                     l2052 115C  
                   l2142 0E40                     l2038 1466                     l2062 11B2  
                   l2054 116E                     l2230 0B10                     l2206 0A94  
                   l2310 0694                     l2302 0686                     l2152 0E9E  
                   l2136 0E12                     l2048 114E                     l2312 06D6  
                   l2058 1186                     l2226 0AF8                     l2306 068A  
                   l2402 100A                     l2252 0CEE                     l2236 0C94  
                   l2156 0EC4                     l2148 0E88                     l2324 0742  
                   l2262 0D58                     l2254 0CF6                     l2246 0CDE  
                   l2238 0C98                     l2094 0B8E                     l2350 08A2  
                   l2326 0760                     l2168 13B6                     l2256 0CFC  
                   l2088 0B66                     l2192 098C                     l2344 0866  
                   l2328 076E                     l2360 08C4                     l1642 14FC  
                   l2258 0D24                     l2178 094E                     l2354 08AC  
                   l2290 067A                     l1900 11F0                     l2196 099C  
                   l2294 067E                     l2286 0668                     l2288 066A  
                   l2376 12EC                     l1930 1278                     l2298 0682  
                   l2378 1312                     l1932 1284                     l1926 126A  
                   l1936 12B0                     ?_pad 0014                     STR_1 0601  
                   STR_2 060F                     STR_3 061D                     STR_4 061D  
                   u2020 07A6                     u2030 07A8                     u2040 07B4  
                   u2107 1014                     u1500 10EE                     u2060 07E8  
                   u2117 11E2                     u1430 12A4                     u2127 11FC  
                   u1440 12D0                     u2137 1214                     u2090 1028  
                   u2147 1222                     u1700 0E44                     u1437 129A  
                   u2157 1234                     u1621 0B94                     u1447 12C6  
                   u2167 1246                     u1640 0BCC                     u1480 10A6  
                   u2096 102A                     u1385 14D8                     u2177 1254  
                   u1386 14DA                     u1570 1404                     u1810 0986  
                   u2187 14DC                     u1580 1450                     u1740 13B2  
                   u1820 0AA2                     u2197 0F56                     u1590 1452  
                   u1910 0CDA                     u1750 0920                     u1840 0AC4  
                   u1760 0922                     u1841 0AC2                     u1930 0D88  
                   u1850 0AD2                     u1940 0D8A                     u1860 0AD6  
                   u1790 0960                     u1880 0AE2                     i1l35 007E  
                   _TMR0 000FD6             __CFG_PWRT$ON 000000                     abs@a 0016  
                   _dbuf 0082                     _atoi 0C82                     _main 0FCA  
                   _dtoa 08F8                     _prec 006B                     _nout 0080  
                   pad@i 001B                     pad@p 0018                     fsr1h 000FE2  
                   fsr2h 000FDA                     indf1 000FE7                     indf2 000FDF  
                   fsr1l 000FE1                     pad@w 001D                     fsr2l 000FD9  
                   btemp 0075                     prodh 000FF4                     prodl 000FF3  
                   start 0098            __CFG_IESO$OFF 000000            __CFG_MCLRE$ON 000000  
           ___param_bank 000000                    ??_abs 0018                    ??_pad 001A  
        __end_of___aodiv 0C82                    ?_atoi 000B                    ?_main 0001  
                  ?_dtoa 001F          __end_of___aomod 0EE6                    _T0CON 000FD5  
           vfpfcnvrt@fmt 0045                    _PORTD 000F83                    _TRISD 000F95  
          __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000  
          __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000  
         __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000  
        __end_of_lcd_cmd 0FCA          __end_of_lcd_ini 125C            __CFG_WRTB$OFF 000000  
          __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000  
                  _flags 006D                    _fputc 1096                    _fputs 13BE  
        __end_of_isdigit 1458                    atoi@n 0018                    pad@fp 0014  
                  atoi@s 000B                    _width 0069                    _putch 1500  
                  dtoa@d 0021                    dtoa@i 0041                    dtoa@n 0039  
                  dtoa@p 0033                    dtoa@s 0037                    dtoa@w 0035  
        __end_of_isspace 13BE           __CFG_BOREN$OFF 000000          __end_of_set_bit 1500  
                  tablat 000FF5                    ttemp5 0076                    ttemp6 0079  
                  ttemp7 007D                    status 000FD8                    wtemp8 0076  
        __end_of_sprintf 1380          __initialization 1482             __end_of_atoi 0DC2  
           __end_of_main 1096             __end_of_dtoa 0B3A                   ??_atoi 000D  
                 ??_main 0067                   ??_dtoa 0029            __activetblptr 000002  
                 _ADCON1 000FC1                   ?_fputc 0004                   ?_fputs 000D  
                 ?_putch 0001                   _T0_10s 0073                   i1l1434 004E  
                 i1l1438 0066                   _INTCON 000FF2            vfpfcnvrt@done 0055  
                 _TMR0IF 007F92           __CFG_XINST$OFF 000000             vfprintf@cfmt 005F  
              ??___aodiv 0014                ??___aomod 0014                   ___wmul 14A8  
         __CFG_STVREN$ON 000000         __end_of_int_TMR0 0098         ??_lcd_escreve_bf 000D  
                 clear_0 1488                   clear_1 1494         ??_lcd_envia_byte 0009  
                 pad@buf 0016                ??_lcd_cmd 0006                   dtoa@fp 001F  
              ??_lcd_ini 0008                   _strlen 1458                   fputc@c 0004  
                 fputs@c 0011                   fputs@i 0012                   fputs@s 000D  
              ??_isdigit 0006             __mediumconst 0000                ??_isspace 0006  
              ??_set_bit 0005                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8                   putch@c 0001         __end_of_vfprintf 132E  
              ??_sprintf 0067               __accesstop 0080  __end_of__initialization 149A  
        __CFG_PBADEN$OFF 000000            ___rparam_used 000001           __pcstackCOMRAM 0001  
          __end_of_fputc 1136            __end_of_fputs 13F6            __end_of_putch 1502  
                ??_fputc 0008                  ??_fputs 0011                  ??_putch 0004  
             __pbssBANK0 0080                  ?___wmul 0004                  ?_strlen 0004  
     __size_of_vfpfcnvrt 02D4                  i1u72_20 0042                  i1u73_20 005E  
                i1u74_20 0076                ?_int_TMR0 0001                  __Hparam 0000  
                __Lparam 0000                  ___aodiv 0B3A                  ___aomod 0DC2  
        __size_of___wmul 0026                ?_vfprintf 0059              set_bit@comp 0004  
           __psmallconst 0600                  __pcinit 1482                  __ramtop 0600  
                __ptext0 0FCA                  __ptext1 132E                  __ptext2 12D8  
                __ptext3 0624                  __ptext4 08F8                  __ptext5 1136  
                __ptext6 1458                  __ptext7 13BE                  __ptext8 1096  
                __ptext9 1500                  _lcd_cmd 0EE6                  _conta5s 0071  
                _lcd_ini 11CC          __size_of_strlen 002A             __size_of_abs 0032  
           __size_of_pad 0096                  _isdigit 1428                  _isspace 1380  
                _set_bit 14EC                  atoi@neg 0011                  _sprintf 132E  
   end_of_initialization 149A               ??_int_TMR0 0001       lcd_envia_byte@dado 0008  
                fputc@fp 0006            __Lmediumconst 0000                  fputs@fp 000F  
      __end_of_vfpfcnvrt 08F8                  postdec2 000FDD                  postinc0 000FEE  
                postinc1 000FE6                  postinc2 000FDE               ??_vfprintf 005F  
                strlen@a 0006                  strlen@s 0004                _PORTBbits 000F81  
              _PORTDbits 000F83                _PORTEbits 000F84                _TRISBbits 000F93  
              _TRISEbits 000F96               lcd_cmd@cmd 0007              vfpfcnvrt@ap 0047  
            vfpfcnvrt@fp 0043              vfpfcnvrt@ll 004D           __end_of___wmul 14CE  
         __end_of_strlen 1482      start_initialization 1482              __end_of_abs 1428  
            __end_of_pad 11CC              vfprintf@fmt 005B                 ??___wmul 0008  
       __CFG_LPT1OSC$OFF 000000                 ??_strlen 0006              __pbssCOMRAM 0069  
          __pcstackBANK0 00B2         ___aodiv@dividend 0004  __size_of_lcd_escreve_bf 007C  
__size_of_lcd_envia_byte 001E        __size_of_int_TMR0 0080        __CFG_CCP2MX$PORTC 000000  
               ?___aodiv 0004                 ?___aomod 0004        lcd_escreve_bf@end 000D  
      lcd_escreve_bf@col 000A        lcd_escreve_bf@lin 000E         ___aodiv@quotient 0016  
      lcd_escreve_bf@str 000B                _bufferLCD 00A2              __pintcodelo 0018  
               ?_lcd_cmd 0001        __size_of_vfprintf 0056                 ?_lcd_ini 0001  
            __smallconst 0600                 ?_isdigit 0004                 ?_isspace 0004  
               ?_set_bit 0004               set_bit@cmd 0005                 ?_sprintf 0061  
         __size_of_fputc 00A0           __size_of_fputs 0038           __size_of_putch 0002  
         ___wmul@product 0008         __CFG_WDTPS$32768 000000                _vfpfcnvrt 0624  
      ___wmul@multiplier 0004                 __Hrparam 0000               vfprintf@ap 005D  
               __Lrparam 0000               vfprintf@fp 0059         __size_of___aodiv 0148  
       __size_of___aomod 0124               ?_vfpfcnvrt 0043          ___aodiv@divisor 000C  
        ___aodiv@counter 0014         __size_of_lcd_cmd 00E4         __size_of_lcd_ini 0090  
             sprintf@fmt 0063                 _atoi$956 0013                 _atoi$957 0017  
               _atoi$958 0015         __size_of_isdigit 0030                 _dtoa$484 0031  
         _lcd_escreve_bf 125C         __size_of_isspace 003E                 __ptext10 13F6  
               __ptext11 0DC2                 __ptext20 0EE6                 __ptext12 0B3A  
               __ptext21 14EC                 __ptext13 0C82                 __ptext14 1380  
               __ptext15 1428                 __ptext16 14A8                 __ptext17 11CC  
               __ptext18 125C                 __ptext19 14CE         __size_of_set_bit 0014  
         _lcd_envia_byte 14CE                 _conta10s 006F         __size_of_sprintf 0052  
               _int_TMR0 0018            __size_of_atoi 0140            __size_of_main 00CC  
          __size_of_dtoa 0242                 int$flags 0075                 lcd_ini@i 0009  
               _vfprintf 12D8              _isspace$974 000A         ___aomod@dividend 0004  
 __end_of_lcd_escreve_bf 12D8   __end_of_lcd_envia_byte 14EC      lcd_envia_byte@nivel 0009  
               isdigit@c 0004                 intlevel1 0000                sprintf@ap 00B4  
               isspace@c 0004          ___aomod@divisor 000C              ??_vfpfcnvrt 0049  
        ___aomod@counter 0014            _vfpfcnvrt$499 0057                 sprintf@f 00B6  
               sprintf@s 0061          ?_lcd_escreve_bf 000A          ?_lcd_envia_byte 0008  
           ___aodiv@sign 0015             ___aomod@sign 0015  
