

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Mon Apr 08 08:23:04 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    33                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    34                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    35                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    36                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    37  0000                     
    38                           ; Version 2.05
    39                           ; Generated 20/12/2018 GMT
    40                           ; 
    41                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    42                           ; All rights reserved.
    43                           ; 
    44                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    45                           ; 
    46                           ; Redistribution and use in source and binary forms, with or without modification, are
    47                           ; permitted provided that the following conditions are met:
    48                           ; 
    49                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    50                           ;        conditions and the following disclaimer.
    51                           ; 
    52                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    53                           ;        of conditions and the following disclaimer in the documentation and/or other
    54                           ;        materials provided with the distribution.
    55                           ; 
    56                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    57                           ;        software without specific prior written permission.
    58                           ; 
    59                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    60                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    61                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    62                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    63                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    64                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    65                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    66                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    67                           ; 
    68                           ; 
    69                           ; Code-generator required, PIC18F4520 Definitions
    70                           ; 
    71                           ; SFR Addresses
    72  0000                     _PORTDbits	set	3971
    73  0000                     _PORTEbits	set	3972
    74  0000                     _PORTD	set	3971
    75  0000                     _TRISEbits	set	3990
    76  0000                     _TRISD	set	3989
    77  0000                     _PIE1bits	set	3997
    78  0000                     _PR2	set	4043
    79  0000                     _T2CON	set	4042
    80  0000                     _INTCON	set	4082
    81  0000                     _ADCON1	set	4033
    82  0000                     _TMR2	set	4044
    83  0000                     _TMR2IF	set	31985
    84                           
    85                           	psect	smallconst
    86  000600                     __psmallconst:
    87                           	opt callstack 0
    88  000600  00                 	db	0
    89  000601                     STR_1:
    90  000601  54                 	db	84	;'T'
    91  000602  49                 	db	73	;'I'
    92  000603  4D                 	db	77	;'M'
    93  000604  45                 	db	69	;'E'
    94  000605  52                 	db	82	;'R'
    95  000606  32                 	db	50	;'2'
    96  000607  00                 	db	0
    97  000608                     STR_3:
    98  000608  25                 	db	37
    99  000609  30                 	db	48	;'0'
   100  00060A  32                 	db	50	;'2'
   101  00060B  64                 	db	100	;'d'
   102  00060C  00                 	db	0
   103  00060D                     STR_2:
   104  00060D  30                 	db	48	;'0'
   105  00060E  30                 	db	48	;'0'
   106  00060F  00                 	db	0
   107                           
   108                           ; #config settings
   109  000610  00                 	db	0	; dummy byte at the end
   110  0000                     
   111                           	psect	cinit
   112  001468                     __pcinit:
   113                           	opt callstack 0
   114  001468                     start_initialization:
   115                           	opt callstack 0
   116  001468                     __initialization:
   117                           	opt callstack 0
   118                           
   119                           ; Clear objects allocated to BANK0 (48 bytes)
   120  001468  EE00  F080         	lfsr	0,__pbssBANK0
   121  00146C  0E30               	movlw	48
   122  00146E                     clear_0:
   123  00146E  6AEE               	clrf	postinc0,c
   124  001470  06E8               	decf	wreg,f,c
   125  001472  E1FD               	bnz	clear_0
   126                           
   127                           ; Clear objects allocated to COMRAM (12 bytes)
   128  001474  EE00  F070         	lfsr	0,__pbssCOMRAM
   129  001478  0E0C               	movlw	12
   130  00147A                     clear_1:
   131  00147A  6AEE               	clrf	postinc0,c
   132  00147C  06E8               	decf	wreg,f,c
   133  00147E  E1FD               	bnz	clear_1
   134  001480                     end_of_initialization:
   135                           	opt callstack 0
   136  001480                     __end_of__initialization:
   137                           	opt callstack 0
   138  001480  907C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   139  001482  927C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   140  001484  0E00               	movlw	low (__Lmediumconst shr (0+16))
   141  001486  6EF8               	movwf	tblptru,c
   142  001488  0100               	movlb	0
   143  00148A  EFBF  F008         	goto	_main	;jump to C main() function
   144                           
   145                           	psect	bssCOMRAM
   146  000070                     __pbssCOMRAM:
   147                           	opt callstack 0
   148  000070                     _nout:
   149                           	opt callstack 0
   150  000070                     	ds	2
   151  000072                     _width:
   152                           	opt callstack 0
   153  000072                     	ds	2
   154  000074                     _prec:
   155                           	opt callstack 0
   156  000074                     	ds	2
   157  000076                     _flags:
   158                           	opt callstack 0
   159  000076                     	ds	2
   160  000078                     _conta:
   161                           	opt callstack 0
   162  000078                     	ds	2
   163  00007A                     _T2_1s:
   164                           	opt callstack 0
   165  00007A                     	ds	2
   166                           
   167                           	psect	bssBANK0
   168  000080                     __pbssBANK0:
   169                           	opt callstack 0
   170  000080                     _dbuf:
   171                           	opt callstack 0
   172  000080                     	ds	32
   173  0000A0                     _bufferLCD:
   174                           	opt callstack 0
   175  0000A0                     	ds	16
   176                           
   177                           	psect	cstackCOMRAM
   178  000001                     __pcstackCOMRAM:
   179                           	opt callstack 0
   180  000001                     ?_strlen:
   181                           	opt callstack 0
   182  000001                     ?_isdigit:
   183                           	opt callstack 0
   184  000001                     ?_isspace:
   185                           	opt callstack 0
   186  000001                     ?___wmul:
   187                           	opt callstack 0
   188  000001                     ?___aodiv:
   189                           	opt callstack 0
   190  000001                     ?___aomod:
   191                           	opt callstack 0
   192  000001                     set_bit@comp:
   193                           	opt callstack 0
   194  000001                     ___wmul@multiplier:
   195                           	opt callstack 0
   196  000001                     isdigit@c:
   197                           	opt callstack 0
   198  000001                     isspace@c:
   199                           	opt callstack 0
   200  000001                     fputc@c:
   201                           	opt callstack 0
   202  000001                     strlen@s:
   203                           	opt callstack 0
   204  000001                     ___aodiv@dividend:
   205                           	opt callstack 0
   206  000001                     ___aomod@dividend:
   207                           	opt callstack 0
   208                           
   209                           ; 8 bytes @ 0x0
   210  000001                     	ds	1
   211  000002                     set_bit@cmd:
   212                           	opt callstack 0
   213                           
   214                           ; 1 bytes @ 0x1
   215  000002                     	ds	1
   216  000003                     ??_lcd_cmd:
   217  000003                     ??_isdigit:
   218  000003                     ??_isspace:
   219  000003                     ___wmul@multiplicand:
   220                           	opt callstack 0
   221  000003                     fputc@fp:
   222                           	opt callstack 0
   223  000003                     strlen@a:
   224                           	opt callstack 0
   225                           
   226                           ; 2 bytes @ 0x2
   227  000003                     	ds	1
   228  000004                     lcd_cmd@cmd:
   229                           	opt callstack 0
   230                           
   231                           ; 1 bytes @ 0x3
   232  000004                     	ds	1
   233  000005                     ??_lcd_ini:
   234  000005                     ??_fputc:
   235  000005                     lcd_envia_byte@dado:
   236                           	opt callstack 0
   237  000005                     ___wmul@product:
   238                           	opt callstack 0
   239                           
   240                           ; 2 bytes @ 0x4
   241  000005                     	ds	1
   242  000006                     lcd_ini@i:
   243                           	opt callstack 0
   244  000006                     lcd_envia_byte@nivel:
   245                           	opt callstack 0
   246                           
   247                           ; 1 bytes @ 0x5
   248  000006                     	ds	1
   249  000007                     lcd_escreve_bf@col:
   250                           	opt callstack 0
   251  000007                     _isspace$884:
   252                           	opt callstack 0
   253                           
   254                           ; 1 bytes @ 0x6
   255  000007                     	ds	1
   256  000008                     ?_atoi:
   257                           	opt callstack 0
   258  000008                     lcd_escreve_bf@str:
   259                           	opt callstack 0
   260  000008                     atoi@s:
   261                           	opt callstack 0
   262                           
   263                           ; 2 bytes @ 0x7
   264  000008                     	ds	1
   265  000009                     ___aodiv@divisor:
   266                           	opt callstack 0
   267  000009                     ___aomod@divisor:
   268                           	opt callstack 0
   269                           
   270                           ; 8 bytes @ 0x8
   271  000009                     	ds	1
   272  00000A                     ??_atoi:
   273  00000A                     lcd_escreve_bf@end:
   274                           	opt callstack 0
   275  00000A                     fputs@s:
   276                           	opt callstack 0
   277                           
   278                           ; 2 bytes @ 0x9
   279  00000A                     	ds	1
   280  00000B                     lcd_escreve_bf@lin:
   281                           	opt callstack 0
   282                           
   283                           ; 1 bytes @ 0xA
   284  00000B                     	ds	1
   285  00000C                     fputs@fp:
   286                           	opt callstack 0
   287                           
   288                           ; 2 bytes @ 0xB
   289  00000C                     	ds	2
   290  00000E                     fputs@c:
   291                           	opt callstack 0
   292  00000E                     atoi@neg:
   293                           	opt callstack 0
   294                           
   295                           ; 2 bytes @ 0xD
   296  00000E                     	ds	1
   297  00000F                     fputs@i:
   298                           	opt callstack 0
   299                           
   300                           ; 2 bytes @ 0xE
   301  00000F                     	ds	1
   302  000010                     _atoi$866:
   303                           	opt callstack 0
   304                           
   305                           ; 2 bytes @ 0xF
   306  000010                     	ds	1
   307  000011                     ?_pad:
   308                           	opt callstack 0
   309  000011                     ___aodiv@counter:
   310                           	opt callstack 0
   311  000011                     ___aomod@counter:
   312                           	opt callstack 0
   313  000011                     pad@fp:
   314                           	opt callstack 0
   315                           
   316                           ; 2 bytes @ 0x10
   317  000011                     	ds	1
   318  000012                     ___aodiv@sign:
   319                           	opt callstack 0
   320  000012                     ___aomod@sign:
   321                           	opt callstack 0
   322  000012                     _atoi$868:
   323                           	opt callstack 0
   324                           
   325                           ; 2 bytes @ 0x11
   326  000012                     	ds	1
   327  000013                     ?_abs:
   328                           	opt callstack 0
   329  000013                     pad@buf:
   330                           	opt callstack 0
   331  000013                     abs@a:
   332                           	opt callstack 0
   333  000013                     ___aodiv@quotient:
   334                           	opt callstack 0
   335                           
   336                           ; 8 bytes @ 0x12
   337  000013                     	ds	1
   338  000014                     _atoi$867:
   339                           	opt callstack 0
   340                           
   341                           ; 1 bytes @ 0x13
   342  000014                     	ds	1
   343  000015                     ??_abs:
   344  000015                     pad@p:
   345                           	opt callstack 0
   346  000015                     atoi@n:
   347                           	opt callstack 0
   348                           
   349                           ; 2 bytes @ 0x14
   350  000015                     	ds	2
   351  000017                     ??_pad:
   352                           
   353                           ; 1 bytes @ 0x16
   354  000017                     	ds	1
   355  000018                     pad@i:
   356                           	opt callstack 0
   357                           
   358                           ; 2 bytes @ 0x17
   359  000018                     	ds	2
   360  00001A                     pad@w:
   361                           	opt callstack 0
   362                           
   363                           ; 2 bytes @ 0x19
   364  00001A                     	ds	2
   365  00001C                     ?_dtoa:
   366                           	opt callstack 0
   367  00001C                     dtoa@fp:
   368                           	opt callstack 0
   369                           
   370                           ; 2 bytes @ 0x1B
   371  00001C                     	ds	2
   372  00001E                     dtoa@d:
   373                           	opt callstack 0
   374                           
   375                           ; 8 bytes @ 0x1D
   376  00001E                     	ds	8
   377  000026                     ??_dtoa:
   378                           
   379                           ; 1 bytes @ 0x25
   380  000026                     	ds	8
   381  00002E                     _dtoa$394:
   382                           	opt callstack 0
   383                           
   384                           ; 2 bytes @ 0x2D
   385  00002E                     	ds	2
   386  000030                     dtoa@p:
   387                           	opt callstack 0
   388                           
   389                           ; 2 bytes @ 0x2F
   390  000030                     	ds	2
   391  000032                     dtoa@w:
   392                           	opt callstack 0
   393                           
   394                           ; 2 bytes @ 0x31
   395  000032                     	ds	2
   396  000034                     dtoa@s:
   397                           	opt callstack 0
   398                           
   399                           ; 2 bytes @ 0x33
   400  000034                     	ds	2
   401  000036                     dtoa@n:
   402                           	opt callstack 0
   403                           
   404                           ; 8 bytes @ 0x35
   405  000036                     	ds	8
   406  00003E                     dtoa@i:
   407                           	opt callstack 0
   408                           
   409                           ; 2 bytes @ 0x3D
   410  00003E                     	ds	2
   411  000040                     ?_vfpfcnvrt:
   412                           	opt callstack 0
   413  000040                     vfpfcnvrt@fp:
   414                           	opt callstack 0
   415                           
   416                           ; 2 bytes @ 0x3F
   417  000040                     	ds	2
   418  000042                     vfpfcnvrt@fmt:
   419                           	opt callstack 0
   420                           
   421                           ; 2 bytes @ 0x41
   422  000042                     	ds	2
   423  000044                     vfpfcnvrt@ap:
   424                           	opt callstack 0
   425                           
   426                           ; 2 bytes @ 0x43
   427  000044                     	ds	2
   428  000046                     ??_vfpfcnvrt:
   429                           
   430                           ; 1 bytes @ 0x45
   431  000046                     	ds	4
   432  00004A                     vfpfcnvrt@ll:
   433                           	opt callstack 0
   434                           
   435                           ; 8 bytes @ 0x49
   436  00004A                     	ds	8
   437  000052                     vfpfcnvrt@done:
   438                           	opt callstack 0
   439                           
   440                           ; 2 bytes @ 0x51
   441  000052                     	ds	2
   442  000054                     _vfpfcnvrt$409:
   443                           	opt callstack 0
   444                           
   445                           ; 2 bytes @ 0x53
   446  000054                     	ds	2
   447  000056                     ?_vfprintf:
   448                           	opt callstack 0
   449  000056                     vfprintf@fp:
   450                           	opt callstack 0
   451                           
   452                           ; 2 bytes @ 0x55
   453  000056                     	ds	2
   454  000058                     vfprintf@fmt:
   455                           	opt callstack 0
   456                           
   457                           ; 2 bytes @ 0x57
   458  000058                     	ds	2
   459  00005A                     vfprintf@ap:
   460                           	opt callstack 0
   461                           
   462                           ; 2 bytes @ 0x59
   463  00005A                     	ds	2
   464  00005C                     vfprintf@cfmt:
   465                           	opt callstack 0
   466                           
   467                           ; 2 bytes @ 0x5B
   468  00005C                     	ds	2
   469  00005E                     ?_sprintf:
   470                           	opt callstack 0
   471  00005E                     sprintf@s:
   472                           	opt callstack 0
   473                           
   474                           ; 2 bytes @ 0x5D
   475  00005E                     	ds	2
   476  000060                     sprintf@fmt:
   477                           	opt callstack 0
   478                           
   479                           ; 2 bytes @ 0x5F
   480  000060                     	ds	4
   481  000064                     
   482                           ; 1 bytes @ 0x63
   483  000064                     	ds	2
   484  000066                     sprintf@ap:
   485                           	opt callstack 0
   486                           
   487                           ; 2 bytes @ 0x65
   488  000066                     	ds	2
   489  000068                     sprintf@f:
   490                           	opt callstack 0
   491                           
   492                           ; 6 bytes @ 0x67
   493  000068                     	ds	6
   494  00006E                     ??_main:
   495                           
   496                           ; 1 bytes @ 0x6D
   497  00006E                     	ds	2
   498                           
   499 ;;
   500 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   501 ;;
   502 ;; *************** function _main *****************
   503 ;; Defined at:
   504 ;;		line 31 in file "EX19.c"
   505 ;; Parameters:    Size  Location     Type
   506 ;;		None
   507 ;; Auto vars:     Size  Location     Type
   508 ;;		None
   509 ;; Return value:  Size  Location     Type
   510 ;;                  1    wreg      void 
   511 ;; Registers used:
   512 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   513 ;; Tracked objects:
   514 ;;		On entry : 0/0
   515 ;;		On exit  : 0/0
   516 ;;		Unchanged: 0/0
   517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   518 ;;      Params:         0       0       0       0       0       0       0
   519 ;;      Locals:         0       0       0       0       0       0       0
   520 ;;      Temps:          2       0       0       0       0       0       0
   521 ;;      Totals:         2       0       0       0       0       0       0
   522 ;;Total ram usage:        2 bytes
   523 ;; Hardware stack levels required when called:    9
   524 ;; This function calls:
   525 ;;		_lcd_escreve_bf
   526 ;;		_lcd_ini
   527 ;;		_sprintf
   528 ;; This function is called by:
   529 ;;		Startup code after reset
   530 ;; This function uses a non-reentrant model
   531 ;;
   532                           
   533                           	psect	text0
   534  00117E                     __ptext0:
   535                           	opt callstack 0
   536  00117E                     _main:
   537                           	opt callstack 22
   538                           
   539                           ;EX19.c: 33:     ADCON1 = 0x0F;
   540                           
   541                           ;incstack = 0
   542  00117E  0E0F               	movlw	15
   543  001180  6EC1               	movwf	4033,c	;volatile
   544                           
   545                           ;EX19.c: 35:     INTCON = 0b11000000;
   546  001182  0EC0               	movlw	192
   547  001184  6EF2               	movwf	4082,c	;volatile
   548                           
   549                           ;EX19.c: 46:     T2CON = 0b01100111;
   550  001186  0E67               	movlw	103
   551  001188  6ECA               	movwf	4042,c	;volatile
   552                           
   553                           ;EX19.c: 52:     PR2 = 240;
   554  00118A  0EF0               	movlw	240
   555  00118C  6ECB               	movwf	4043,c	;volatile
   556                           
   557                           ;EX19.c: 54:     PIE1bits.TMR2IE = 1;
   558  00118E  829D               	bsf	3997,1,c	;volatile
   559                           
   560                           ;EX19.c: 56:     TMR2 = 0;
   561  001190  0E00               	movlw	0
   562  001192  6ECC               	movwf	4044,c	;volatile
   563                           
   564                           ;EX19.c: 58:     lcd_ini();
   565  001194  EC77  F008         	call	_lcd_ini	;wreg free
   566                           
   567                           ;EX19.c: 61:     lcd_escreve_bf(1, 6, "TIMER2");
   568  001198  0E06               	movlw	6
   569  00119A  6E07               	movwf	lcd_escreve_bf@col,c
   570  00119C  0E01               	movlw	low STR_1
   571  00119E  6E08               	movwf	lcd_escreve_bf@str,c
   572  0011A0  0E06               	movlw	high STR_1
   573  0011A2  6E09               	movwf	lcd_escreve_bf@str+1,c
   574  0011A4  0E01               	movlw	1
   575  0011A6  EC01  F009         	call	_lcd_escreve_bf
   576                           
   577                           ;EX19.c: 64:     lcd_escreve_bf(2, 8, "00");
   578  0011AA  0E08               	movlw	8
   579  0011AC  6E07               	movwf	lcd_escreve_bf@col,c
   580  0011AE  0E0D               	movlw	low STR_2
   581  0011B0  6E08               	movwf	lcd_escreve_bf@str,c
   582  0011B2  0E06               	movlw	high STR_2
   583  0011B4  6E09               	movwf	lcd_escreve_bf@str+1,c
   584  0011B6  0E02               	movlw	2
   585  0011B8  EC01  F009         	call	_lcd_escreve_bf
   586  0011BC                     l1947:
   587                           
   588                           ;EX19.c: 67:     {;EX19.c: 68:         _delay((unsigned long)((300)*(8000000/4000.0)));
   589  0011BC  0E04               	movlw	4
   590  0011BE  6E6F               	movwf	(??_main+1)& (0+255),c
   591  0011C0  0E0C               	movlw	12
   592  0011C2  6E6E               	movwf	??_main& (0+255),c
   593  0011C4  0E34               	movlw	52
   594  0011C6                     u1447:
   595  0011C6  2EE8               	decfsz	wreg,f,c
   596  0011C8  D7FE               	bra	u1447
   597  0011CA  2E6E               	decfsz	??_main& (0+255),f,c
   598  0011CC  D7FC               	bra	u1447
   599  0011CE  2E6F               	decfsz	(??_main+1)& (0+255),f,c
   600  0011D0  D7FA               	bra	u1447
   601                           
   602                           ;EX19.c: 71:         sprintf(bufferLCD, "%02d", conta);
   603  0011D2  0EA0               	movlw	low _bufferLCD
   604  0011D4  6E5E               	movwf	sprintf@s,c
   605  0011D6  0E00               	movlw	high _bufferLCD
   606  0011D8  6E5F               	movwf	sprintf@s+1,c
   607  0011DA  0E08               	movlw	low STR_3
   608  0011DC  6E60               	movwf	sprintf@fmt,c
   609  0011DE  0E06               	movlw	high STR_3
   610  0011E0  6E61               	movwf	sprintf@fmt+1,c
   611  0011E2  C078  F062         	movff	_conta,?_sprintf+4
   612  0011E6  C079  F063         	movff	_conta+1,?_sprintf+5
   613  0011EA  EC68  F009         	call	_sprintf	;wreg free
   614                           
   615                           ;EX19.c: 74:         lcd_escreve_bf(2, 8, bufferLCD);
   616  0011EE  0E08               	movlw	8
   617  0011F0  6E07               	movwf	lcd_escreve_bf@col,c
   618  0011F2  0EA0               	movlw	low _bufferLCD
   619  0011F4  6E08               	movwf	lcd_escreve_bf@str,c
   620  0011F6  0E00               	movlw	high _bufferLCD
   621  0011F8  6E09               	movwf	lcd_escreve_bf@str+1,c
   622  0011FA  0E02               	movlw	2
   623  0011FC  EC01  F009         	call	_lcd_escreve_bf
   624  001200  D7DD               	goto	l1947
   625  001202                     __end_of_main:
   626                           	opt callstack 0
   627                           
   628 ;; *************** function _sprintf *****************
   629 ;; Defined at:
   630 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_sprintf.c"
   631 ;; Parameters:    Size  Location     Type
   632 ;;  s               2   93[COMRAM] PTR unsigned char 
   633 ;;		 -> bufferLCD(16), 
   634 ;;  fmt             2   95[COMRAM] PTR const unsigned char 
   635 ;;		 -> STR_3(5), 
   636 ;; Auto vars:     Size  Location     Type
   637 ;;  f               6  103[COMRAM] struct _IO_FILE
   638 ;;  ap              2  101[COMRAM] PTR void [1]
   639 ;;		 -> ?_sprintf(2), 
   640 ;;  ret             2    0        int 
   641 ;; Return value:  Size  Location     Type
   642 ;;                  2   93[COMRAM] int 
   643 ;; Registers used:
   644 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   645 ;; Tracked objects:
   646 ;;		On entry : 0/0
   647 ;;		On exit  : 0/0
   648 ;;		Unchanged: 0/0
   649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   650 ;;      Params:         6       0       0       0       0       0       0
   651 ;;      Locals:        10       0       0       0       0       0       0
   652 ;;      Temps:          0       0       0       0       0       0       0
   653 ;;      Totals:        16       0       0       0       0       0       0
   654 ;;Total ram usage:       16 bytes
   655 ;; Hardware stack levels used:    1
   656 ;; Hardware stack levels required when called:    8
   657 ;; This function calls:
   658 ;;		_vfprintf
   659 ;; This function is called by:
   660 ;;		_main
   661 ;; This function uses a non-reentrant model
   662 ;;
   663                           
   664                           	psect	text1
   665  0012D0                     __ptext1:
   666                           	opt callstack 0
   667  0012D0                     _sprintf:
   668                           	opt callstack 22
   669                           
   670                           ;incstack = 0
   671  0012D0  0E62               	movlw	low (?_sprintf+4)
   672  0012D2  6E66               	movwf	sprintf@ap,c
   673  0012D4  0E00               	movlw	high (?_sprintf+4)
   674  0012D6  6E67               	movwf	sprintf@ap+1,c
   675  0012D8  C05E  F068         	movff	sprintf@s,sprintf@f
   676  0012DC  C05F  F069         	movff	sprintf@s+1,sprintf@f+1
   677  0012E0  0E00               	movlw	0
   678  0012E2  6E6B               	movwf	sprintf@f+3,c
   679  0012E4  0E00               	movlw	0
   680  0012E6  6E6A               	movwf	sprintf@f+2,c
   681  0012E8  0E00               	movlw	0
   682  0012EA  6E6D               	movwf	sprintf@f+5,c
   683  0012EC  0E00               	movlw	0
   684  0012EE  6E6C               	movwf	sprintf@f+4,c
   685  0012F0  0E68               	movlw	low sprintf@f
   686  0012F2  6E56               	movwf	vfprintf@fp,c
   687  0012F4  0E00               	movlw	high sprintf@f
   688  0012F6  6E57               	movwf	vfprintf@fp+1,c
   689  0012F8  C060  F058         	movff	sprintf@fmt,vfprintf@fmt
   690  0012FC  C061  F059         	movff	sprintf@fmt+1,vfprintf@fmt+1
   691  001300  0E66               	movlw	low sprintf@ap
   692  001302  6E5A               	movwf	vfprintf@ap,c
   693  001304  0E00               	movlw	high sprintf@ap
   694  001306  6E5B               	movwf	vfprintf@ap+1,c
   695  001308  EC3F  F009         	call	_vfprintf	;wreg free
   696  00130C  506A               	movf	sprintf@f+2,w,c
   697  00130E  245E               	addwf	sprintf@s,w,c
   698  001310  6ED9               	movwf	fsr2l,c
   699  001312  506B               	movf	sprintf@f+3,w,c
   700  001314  205F               	addwfc	sprintf@s+1,w,c
   701  001316  6EDA               	movwf	fsr2h,c
   702  001318  0E00               	movlw	0
   703  00131A  6EDF               	movwf	indf2,c
   704  00131C  0012               	return		;funcret
   705  00131E                     __end_of_sprintf:
   706                           	opt callstack 0
   707                           
   708 ;; *************** function _vfprintf *****************
   709 ;; Defined at:
   710 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
   711 ;; Parameters:    Size  Location     Type
   712 ;;  fp              2   85[COMRAM] PTR struct _IO_FILE
   713 ;;		 -> sprintf@f(6), 
   714 ;;  fmt             2   87[COMRAM] PTR const unsigned char 
   715 ;;		 -> STR_3(5), 
   716 ;;  ap              2   89[COMRAM] PTR PTR void 
   717 ;;		 -> sprintf@ap(2), 
   718 ;; Auto vars:     Size  Location     Type
   719 ;;  cfmt            2   91[COMRAM] PTR unsigned char 
   720 ;;		 -> STR_3(5), 
   721 ;; Return value:  Size  Location     Type
   722 ;;                  2   85[COMRAM] int 
   723 ;; Registers used:
   724 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   725 ;; Tracked objects:
   726 ;;		On entry : 0/0
   727 ;;		On exit  : 0/0
   728 ;;		Unchanged: 0/0
   729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   730 ;;      Params:         6       0       0       0       0       0       0
   731 ;;      Locals:         2       0       0       0       0       0       0
   732 ;;      Temps:          0       0       0       0       0       0       0
   733 ;;      Totals:         8       0       0       0       0       0       0
   734 ;;Total ram usage:        8 bytes
   735 ;; Hardware stack levels used:    1
   736 ;; Hardware stack levels required when called:    7
   737 ;; This function calls:
   738 ;;		_vfpfcnvrt
   739 ;; This function is called by:
   740 ;;		_sprintf
   741 ;; This function uses a non-reentrant model
   742 ;;
   743                           
   744                           	psect	text2
   745  00127E                     __ptext2:
   746                           	opt callstack 0
   747  00127E                     _vfprintf:
   748                           	opt callstack 22
   749                           
   750                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.05\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
   751                           
   752                           ;incstack = 0
   753  00127E  C058  F05C         	movff	vfprintf@fmt,vfprintf@cfmt
   754  001282  C059  F05D         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
   755                           
   756                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
   757  001286  0E00               	movlw	0
   758  001288  6E71               	movwf	_nout+1,c
   759  00128A  0E00               	movlw	0
   760  00128C  6E70               	movwf	_nout,c
   761                           
   762                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
   763  00128E  D012               	goto	l1867
   764  001290                     l1865:
   765                           
   766                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
   767  001290  C056  F040         	movff	vfprintf@fp,vfpfcnvrt@fp
   768  001294  C057  F041         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
   769  001298  0E5C               	movlw	low vfprintf@cfmt
   770  00129A  6E42               	movwf	vfpfcnvrt@fmt,c
   771  00129C  0E00               	movlw	high vfprintf@cfmt
   772  00129E  6E43               	movwf	vfpfcnvrt@fmt+1,c
   773  0012A0  C05A  F044         	movff	vfprintf@ap,vfpfcnvrt@ap
   774  0012A4  C05B  F045         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
   775  0012A8  EC09  F003         	call	_vfpfcnvrt	;wreg free
   776  0012AC  5040               	movf	?_vfpfcnvrt,w,c
   777  0012AE  2670               	addwf	_nout,f,c
   778  0012B0  5041               	movf	?_vfpfcnvrt+1,w,c
   779  0012B2  2271               	addwfc	_nout+1,f,c
   780  0012B4                     l1867:
   781                           
   782                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
   783  0012B4  C05C  FFF6         	movff	vfprintf@cfmt,tblptrl
   784  0012B8  C05D  FFF7         	movff	vfprintf@cfmt+1,tblptrh
   785  0012BC                     	if	0	;tblptru may be non-zero
   786  0012BC                     	endif
   787  0012BC                     	if	0	;tblptru may be non-zero
   788  0012BC                     	endif
   789  0012BC  0008               	tblrd		*
   790  0012BE  50F5               	movf	tablat,w,c
   791  0012C0  0900               	iorlw	0
   792  0012C2  A4D8               	btfss	status,2,c
   793  0012C4  D7E5               	goto	l1865
   794                           
   795                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
   796  0012C6  C070  F056         	movff	_nout,?_vfprintf
   797  0012CA  C071  F057         	movff	_nout+1,?_vfprintf+1
   798  0012CE  0012               	return		;funcret
   799  0012D0                     __end_of_vfprintf:
   800                           	opt callstack 0
   801                           
   802 ;; *************** function _vfpfcnvrt *****************
   803 ;; Defined at:
   804 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
   805 ;; Parameters:    Size  Location     Type
   806 ;;  fp              2   63[COMRAM] PTR struct _IO_FILE
   807 ;;		 -> sprintf@f(6), 
   808 ;;  fmt             2   65[COMRAM] PTR PTR unsigned char 
   809 ;;		 -> vfprintf@cfmt(2), 
   810 ;;  ap              2   67[COMRAM] PTR PTR void 
   811 ;;		 -> sprintf@ap(2), 
   812 ;; Auto vars:     Size  Location     Type
   813 ;;  ll              8   73[COMRAM] long long 
   814 ;;  llu             8    0        unsigned long long 
   815 ;;  f               4    0        unsigned long long 
   816 ;;  vp              3    0        PTR void 
   817 ;;  ct              3    0        unsigned char [3]
   818 ;;  cp              3    0        PTR unsigned char 
   819 ;;  done            2   81[COMRAM] int 
   820 ;;  i               2    0        int 
   821 ;;  c               1    0        unsigned char 
   822 ;; Return value:  Size  Location     Type
   823 ;;                  2   63[COMRAM] int 
   824 ;; Registers used:
   825 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   826 ;; Tracked objects:
   827 ;;		On entry : 0/0
   828 ;;		On exit  : 0/0
   829 ;;		Unchanged: 0/0
   830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   831 ;;      Params:         6       0       0       0       0       0       0
   832 ;;      Locals:        12       0       0       0       0       0       0
   833 ;;      Temps:          4       0       0       0       0       0       0
   834 ;;      Totals:        22       0       0       0       0       0       0
   835 ;;Total ram usage:       22 bytes
   836 ;; Hardware stack levels used:    1
   837 ;; Hardware stack levels required when called:    6
   838 ;; This function calls:
   839 ;;		_atoi
   840 ;;		_dtoa
   841 ;;		_fputc
   842 ;;		_isdigit
   843 ;; This function is called by:
   844 ;;		_vfprintf
   845 ;; This function uses a non-reentrant model
   846 ;;
   847                           
   848                           	psect	text3
   849  000612                     __ptext3:
   850                           	opt callstack 0
   851  000612                     _vfpfcnvrt:
   852                           	opt callstack 22
   853                           
   854                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 674:     long long ll;
   855                           
   856                           ;incstack = 0
   857  000612  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   858  000616  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   859  00061A  CFDE FFF6          	movff	postinc2,tblptrl
   860  00061E  CFDD FFF7          	movff	postdec2,tblptrh
   861  000622                     	if	0	;tblptru may be non-zero
   862  000622                     	endif
   863  000622                     	if	0	;tblptru may be non-zero
   864  000622                     	endif
   865  000622  0008               	tblrd		*
   866  000624  50F5               	movf	tablat,w,c
   867  000626  0A25               	xorlw	37
   868  000628  A4D8               	btfss	status,2,c
   869  00062A  D143               	goto	l1841
   870                           
   871                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
   872  00062C  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   873  000630  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   874  000634  2ADE               	incf	postinc2,f,c
   875  000636  0E00               	movlw	0
   876  000638  22DD               	addwfc	postdec2,f,c
   877                           
   878                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
   879  00063A  0E00               	movlw	0
   880  00063C  6E73               	movwf	_width+1,c
   881  00063E  0E00               	movlw	0
   882  000640  6E72               	movwf	_width,c
   883  000642  C072  F076         	movff	_width,_flags
   884  000646  C073  F077         	movff	_width+1,_flags+1
   885                           
   886                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
   887  00064A  6874               	setf	_prec,c
   888  00064C  6875               	setf	_prec+1,c
   889                           
   890                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 688:       
      +                            done = 0;
   891  00064E  0E00               	movlw	0
   892  000650  6E53               	movwf	vfpfcnvrt@done+1,c
   893  000652  0E00               	movlw	0
   894  000654  D014               	goto	L1
   895  000656                     l1767:
   896                           
   897                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 692:       
      +                                        flags |= (1 << 0);
   898  000656  8076               	bsf	_flags,0,c
   899  000658                     l1769:
   900                           
   901                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 693:       
      +                                        ++*fmt;
   902  000658  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   903  00065C  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   904  000660  2ADE               	incf	postinc2,f,c
   905  000662  0E00               	movlw	0
   906  000664  22DD               	addwfc	postdec2,f,c
   907                           
   908                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 694:       
      +                                        break;
   909  000666  D02E               	goto	l1793
   910  000668                     l1771:
   911                           
   912                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 696:       
      +                                        flags |= (1 << 1);
   913  000668  8276               	bsf	_flags,1,c
   914  00066A  D7F6               	goto	l1769
   915  00066C                     l1775:
   916                           
   917                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 700:       
      +                                        flags |= (1 << 2);
   918  00066C  8476               	bsf	_flags,2,c
   919  00066E  D7F4               	goto	l1769
   920  000670                     l1779:
   921                           
   922                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 704:       
      +                                        flags |= (1 << 3);
   923  000670  8676               	bsf	_flags,3,c
   924  000672  D7F2               	goto	l1769
   925  000674                     l1783:
   926                           
   927                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 708:       
      +                                        flags |= (1 << 4);
   928  000674  8876               	bsf	_flags,4,c
   929  000676  D7F0               	goto	l1769
   930  000678                     l1787:
   931                           
   932                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 712:       
      +                                        done = 1;
   933  000678  0E00               	movlw	0
   934  00067A  6E53               	movwf	vfpfcnvrt@done+1,c
   935  00067C  0E01               	movlw	1
   936  00067E                     L1:
   937  00067E  6E52               	movwf	vfpfcnvrt@done,c
   938                           
   939                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 713:       
      +                                        break;
   940  000680  D021               	goto	l1793
   941  000682                     l1791:
   942  000682  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   943  000686  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   944  00068A  CFDE FFF6          	movff	postinc2,tblptrl
   945  00068E  CFDD FFF7          	movff	postdec2,tblptrh
   946  000692                     	if	0	;tblptru may be non-zero
   947  000692                     	endif
   948  000692                     	if	0	;tblptru may be non-zero
   949  000692                     	endif
   950  000692  0008               	tblrd		*
   951  000694  50F5               	movf	tablat,w,c
   952  000696  6E46               	movwf	??_vfpfcnvrt& (0+255),c
   953  000698  6A47               	clrf	(??_vfpfcnvrt+1)& (0+255),c
   954                           
   955                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   956                           ; Switch size 1, requested type "simple"
   957                           ; Number of cases is 1, Range of values is 0 to 0
   958                           ; switch strategies available:
   959                           ; Name         Instructions Cycles
   960                           ; simple_byte            4     3 (average)
   961                           ;	Chosen strategy is simple_byte
   962  00069A  5047               	movf	??_vfpfcnvrt+1,w,c
   963  00069C  0A00               	xorlw	0	; case 0
   964  00069E  A4D8               	btfss	status,2,c
   965  0006A0  D7EB               	goto	l1787
   966                           
   967                           ; Switch size 1, requested type "simple"
   968                           ; Number of cases is 5, Range of values is 32 to 48
   969                           ; switch strategies available:
   970                           ; Name         Instructions Cycles
   971                           ; simple_byte           16     9 (average)
   972                           ;	Chosen strategy is simple_byte
   973  0006A2  5046               	movf	??_vfpfcnvrt,w,c
   974  0006A4  0A20               	xorlw	32	; case 32
   975  0006A6  B4D8               	btfsc	status,2,c
   976  0006A8  D7E3               	goto	l1779
   977  0006AA  0A03               	xorlw	3	; case 35
   978  0006AC  B4D8               	btfsc	status,2,c
   979  0006AE  D7E2               	goto	l1783
   980  0006B0  0A08               	xorlw	8	; case 43
   981  0006B2  B4D8               	btfsc	status,2,c
   982  0006B4  D7DB               	goto	l1775
   983  0006B6  0A06               	xorlw	6	; case 45
   984  0006B8  B4D8               	btfsc	status,2,c
   985  0006BA  D7CD               	goto	l1767
   986  0006BC  0A1D               	xorlw	29	; case 48
   987  0006BE  B4D8               	btfsc	status,2,c
   988  0006C0  D7D3               	goto	l1771
   989  0006C2  D7DA               	goto	l1787
   990  0006C4                     l1793:
   991                           
   992                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 689:       
      +                            while (!done) {
   993  0006C4  5052               	movf	vfpfcnvrt@done,w,c
   994  0006C6  1053               	iorwf	vfpfcnvrt@done+1,w,c
   995  0006C8  B4D8               	btfsc	status,2,c
   996  0006CA  D7DB               	goto	l1791
   997                           
   998                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 716:       
      +                            if (flags & (1 << 0)) {
   999  0006CC  B076               	btfsc	_flags,0,c
  1000                           
  1001                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 717:       
      +                                flags &= ~(1 << 1);
  1002  0006CE  9276               	bcf	_flags,1,c
  1003                           
  1004                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 723:       
      +                            if ((*fmt)[0] == '*') {
  1005  0006D0  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1006  0006D4  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1007  0006D8  CFDE FFF6          	movff	postinc2,tblptrl
  1008  0006DC  CFDD FFF7          	movff	postdec2,tblptrh
  1009  0006E0                     	if	0	;tblptru may be non-zero
  1010  0006E0                     	endif
  1011  0006E0                     	if	0	;tblptru may be non-zero
  1012  0006E0                     	endif
  1013  0006E0  0008               	tblrd		*
  1014  0006E2  50F5               	movf	tablat,w,c
  1015  0006E4  0A2A               	xorlw	42
  1016  0006E6  A4D8               	btfss	status,2,c
  1017  0006E8  D023               	goto	l1805
  1018                           
  1019                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 724:       
      +                                ++*fmt;
  1020  0006EA  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1021  0006EE  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1022  0006F2  2ADE               	incf	postinc2,f,c
  1023  0006F4  0E00               	movlw	0
  1024  0006F6  22DD               	addwfc	postdec2,f,c
  1025                           
  1026                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 725:       
      +                                width = (*(int *)__va_arg(*(int **)ap, (int)0));
  1027  0006F8  C044  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1028  0006FC  C045  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1029  000700  CFDF F046          	movff	indf2,??_vfpfcnvrt
  1030  000704  0E02               	movlw	2
  1031  000706  26DE               	addwf	postinc2,f,c
  1032  000708  CFDF F047          	movff	indf2,??_vfpfcnvrt+1
  1033  00070C  0E00               	movlw	0
  1034  00070E  22DD               	addwfc	postdec2,f,c
  1035  000710  C046  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1036  000714  C047  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1037  000718  CFDE F072          	movff	postinc2,_width
  1038  00071C  CFDD F073          	movff	postdec2,_width+1
  1039                           
  1040                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 726:       
      +                                if (width < 0) {
  1041  000720  AE73               	btfss	_width+1,7,c
  1042  000722  D03F               	goto	u1320
  1043                           
  1044                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 727:       
      +                                    flags |= (1 << 0);
  1045  000724  8076               	bsf	_flags,0,c
  1046                           
  1047                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 728:       
      +                                    width = -width;
  1048  000726  6C72               	negf	_width,c
  1049  000728  1E73               	comf	_width+1,f,c
  1050  00072A  B0D8               	btfsc	status,0,c
  1051  00072C  2A73               	incf	_width+1,f,c
  1052  00072E  D039               	goto	u1320
  1053  000730                     l1805:
  1054                           
  1055                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 731:       
      +                                width = atoi(*fmt);
  1056  000730  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1057  000734  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1058  000738  CFDE F008          	movff	postinc2,atoi@s
  1059  00073C  CFDD F009          	movff	postdec2,atoi@s+1
  1060  000740  EC38  F006         	call	_atoi	;wreg free
  1061  000744  C008  F072         	movff	?_atoi,_width
  1062  000748  C009  F073         	movff	?_atoi+1,_width+1
  1063                           
  1064                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 732:       
      +                                while ((0 ? isdigit((*fmt)[0]) : ((unsigned)((*fmt)[0])-'0') < 10)) {
  1065  00074C  D007               	goto	l1809
  1066  00074E                     l1807:
  1067                           
  1068                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 733:       
      +                                    ++*fmt;
  1069  00074E  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1070  000752  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1071  000756  2ADE               	incf	postinc2,f,c
  1072  000758  0E00               	movlw	0
  1073  00075A  22DD               	addwfc	postdec2,f,c
  1074  00075C                     l1809:
  1075  00075C  0ED0               	movlw	208
  1076  00075E  6E46               	movwf	??_vfpfcnvrt& (0+255),c
  1077  000760  0EFF               	movlw	255
  1078  000762  6E47               	movwf	(??_vfpfcnvrt+1)& (0+255),c
  1079  000764  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1080  000768  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1081  00076C  CFDE FFF6          	movff	postinc2,tblptrl
  1082  000770  CFDD FFF7          	movff	postdec2,tblptrh
  1083  000774                     	if	0	;tblptru may be non-zero
  1084  000774                     	endif
  1085  000774                     	if	0	;tblptru may be non-zero
  1086  000774                     	endif
  1087  000774  0008               	tblrd		*
  1088  000776  50F5               	movf	tablat,w,c
  1089  000778  6E48               	movwf	(??_vfpfcnvrt+2)& (0+255),c
  1090  00077A  6A49               	clrf	(??_vfpfcnvrt+3)& (0+255),c
  1091  00077C  5046               	movf	??_vfpfcnvrt,w,c
  1092  00077E  2648               	addwf	??_vfpfcnvrt+2,f,c
  1093  000780  5047               	movf	??_vfpfcnvrt+1,w,c
  1094  000782  2249               	addwfc	??_vfpfcnvrt+3,f,c
  1095  000784  5049               	movf	??_vfpfcnvrt+3,w,c
  1096  000786  E106               	bnz	u1300
  1097  000788  0E0A               	movlw	10
  1098  00078A  5C48               	subwf	??_vfpfcnvrt+2,w,c
  1099  00078C  B0D8               	btfsc	status,0,c
  1100  00078E  D002               	goto	u1300
  1101  000790  0E01               	movlw	1
  1102  000792  D001               	goto	u1310
  1103  000794                     u1300:
  1104  000794  0E00               	movlw	0
  1105  000796                     u1310:
  1106  000796  6E54               	movwf	_vfpfcnvrt$409,c
  1107  000798  6A55               	clrf	_vfpfcnvrt$409+1,c
  1108  00079A  5054               	movf	_vfpfcnvrt$409,w,c
  1109  00079C  1055               	iorwf	_vfpfcnvrt$409+1,w,c
  1110  00079E  A4D8               	btfss	status,2,c
  1111  0007A0  D7D6               	goto	l1807
  1112  0007A2                     u1320:
  1113                           
  1114                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 825:       
      +                            if ((*fmt[0] == 'd') || (*fmt[0] == 'i')) {
  1115  0007A2  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1116  0007A6  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1117  0007AA  CFDE FFF6          	movff	postinc2,tblptrl
  1118  0007AE  CFDD FFF7          	movff	postdec2,tblptrh
  1119  0007B2                     	if	0	;tblptru may be non-zero
  1120  0007B2                     	endif
  1121  0007B2                     	if	0	;tblptru may be non-zero
  1122  0007B2                     	endif
  1123  0007B2  0008               	tblrd		*
  1124  0007B4  50F5               	movf	tablat,w,c
  1125  0007B6  0A64               	xorlw	100
  1126  0007B8  B4D8               	btfsc	status,2,c
  1127  0007BA  D00D               	goto	u1340
  1128  0007BC  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1129  0007C0  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1130  0007C4  CFDE FFF6          	movff	postinc2,tblptrl
  1131  0007C8  CFDD FFF7          	movff	postdec2,tblptrh
  1132  0007CC                     	if	0	;tblptru may be non-zero
  1133  0007CC                     	endif
  1134  0007CC                     	if	0	;tblptru may be non-zero
  1135  0007CC                     	endif
  1136  0007CC  0008               	tblrd		*
  1137  0007CE  50F5               	movf	tablat,w,c
  1138  0007D0  0A69               	xorlw	105
  1139  0007D2  A4D8               	btfss	status,2,c
  1140  0007D4  D03F               	goto	l1825
  1141  0007D6                     u1340:
  1142                           
  1143                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 827:       
      +                                ++*fmt;
  1144  0007D6  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1145  0007DA  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1146  0007DE  2ADE               	incf	postinc2,f,c
  1147  0007E0  0E00               	movlw	0
  1148  0007E2  22DD               	addwfc	postdec2,f,c
  1149                           
  1150                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 828:       
      +                                ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  1151  0007E4  C044  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1152  0007E8  C045  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1153  0007EC  CFDF F046          	movff	indf2,??_vfpfcnvrt
  1154  0007F0  0E02               	movlw	2
  1155  0007F2  26DE               	addwf	postinc2,f,c
  1156  0007F4  CFDF F047          	movff	indf2,??_vfpfcnvrt+1
  1157  0007F8  0E00               	movlw	0
  1158  0007FA  22DD               	addwfc	postdec2,f,c
  1159  0007FC  C046  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1160  000800  C047  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1161  000804  CFDE F04A          	movff	postinc2,vfpfcnvrt@ll
  1162  000808  CFDD F04B          	movff	postdec2,vfpfcnvrt@ll+1
  1163  00080C  0E00               	movlw	0
  1164  00080E  BE4B               	btfsc	vfpfcnvrt@ll+1,7,c
  1165  000810  0EFF               	movlw	-1
  1166  000812  6E4C               	movwf	vfpfcnvrt@ll+2,c
  1167  000814  6E4D               	movwf	vfpfcnvrt@ll+3,c
  1168  000816  6E4E               	movwf	vfpfcnvrt@ll+4,c
  1169  000818  6E4F               	movwf	vfpfcnvrt@ll+5,c
  1170  00081A  6E50               	movwf	vfpfcnvrt@ll+6,c
  1171  00081C  6E51               	movwf	vfpfcnvrt@ll+7,c
  1172                           
  1173                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 830:       
      +                                return dtoa(fp, ll);
  1174  00081E  C040  F01C         	movff	vfpfcnvrt@fp,dtoa@fp
  1175  000822  C041  F01D         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  1176  000826  C04A  F01E         	movff	vfpfcnvrt@ll,dtoa@d
  1177  00082A  C04B  F01F         	movff	vfpfcnvrt@ll+1,dtoa@d+1
  1178  00082E  C04C  F020         	movff	vfpfcnvrt@ll+2,dtoa@d+2
  1179  000832  C04D  F021         	movff	vfpfcnvrt@ll+3,dtoa@d+3
  1180  000836  C04E  F022         	movff	vfpfcnvrt@ll+4,dtoa@d+4
  1181  00083A  C04F  F023         	movff	vfpfcnvrt@ll+5,dtoa@d+5
  1182  00083E  C050  F024         	movff	vfpfcnvrt@ll+6,dtoa@d+6
  1183  000842  C051  F025         	movff	vfpfcnvrt@ll+7,dtoa@d+7
  1184  000846  EC73  F004         	call	_dtoa	;wreg free
  1185  00084A  C01C  F040         	movff	?_dtoa,?_vfpfcnvrt
  1186  00084E  C01D  F041         	movff	?_dtoa+1,?_vfpfcnvrt+1
  1187  000852  0012               	return	
  1188  000854                     l1825:
  1189                           
  1190                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
  1191  000854  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1192  000858  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1193  00085C  CFDE FFF6          	movff	postinc2,tblptrl
  1194  000860  CFDD FFF7          	movff	postdec2,tblptrh
  1195  000864                     	if	0	;tblptru may be non-zero
  1196  000864                     	endif
  1197  000864                     	if	0	;tblptru may be non-zero
  1198  000864                     	endif
  1199  000864  0008               	tblrd		*
  1200  000866  50F5               	movf	tablat,w,c
  1201  000868  0A25               	xorlw	37
  1202  00086A  A4D8               	btfss	status,2,c
  1203  00086C  D016               	goto	l1835
  1204                           
  1205                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
  1206  00086E  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1207  000872  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1208  000876  2ADE               	incf	postinc2,f,c
  1209  000878  0E00               	movlw	0
  1210  00087A  22DD               	addwfc	postdec2,f,c
  1211                           
  1212                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
  1213  00087C  0E00               	movlw	0
  1214  00087E  6E02               	movwf	fputc@c+1,c
  1215  000880  0E25               	movlw	37
  1216  000882  6E01               	movwf	fputc@c,c
  1217  000884  C040  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1218  000888  C041  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1219  00088C  ECDC  F007         	call	_fputc	;wreg free
  1220  000890                     l1831:
  1221                           
  1222                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
  1223  000890  0E00               	movlw	0
  1224  000892  6E41               	movwf	?_vfpfcnvrt+1,c
  1225  000894  0E01               	movlw	1
  1226  000896  6E40               	movwf	?_vfpfcnvrt,c
  1227  000898  0012               	return	
  1228  00089A                     l1835:
  1229                           
  1230                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
  1231  00089A  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1232  00089E  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1233  0008A2  2ADE               	incf	postinc2,f,c
  1234  0008A4  0E00               	movlw	0
  1235  0008A6  22DD               	addwfc	postdec2,f,c
  1236                           
  1237                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
  1238  0008A8  0E00               	movlw	0
  1239  0008AA  6E41               	movwf	?_vfpfcnvrt+1,c
  1240  0008AC  0E00               	movlw	0
  1241  0008AE  6E40               	movwf	?_vfpfcnvrt,c
  1242  0008B0  0012               	return	
  1243  0008B2                     l1841:
  1244                           
  1245                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
  1246  0008B2  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1247  0008B6  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1248  0008BA  CFDE FFF6          	movff	postinc2,tblptrl
  1249  0008BE  CFDD FFF7          	movff	postdec2,tblptrh
  1250  0008C2                     	if	0	;tblptru may be non-zero
  1251  0008C2                     	endif
  1252  0008C2                     	if	0	;tblptru may be non-zero
  1253  0008C2                     	endif
  1254  0008C2  0008               	tblrd		*
  1255  0008C4  50F5               	movf	tablat,w,c
  1256  0008C6  6E01               	movwf	fputc@c,c
  1257  0008C8  6A02               	clrf	fputc@c+1,c
  1258  0008CA  C040  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1259  0008CE  C041  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1260  0008D2  ECDC  F007         	call	_fputc	;wreg free
  1261                           
  1262                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
  1263  0008D6  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1264  0008DA  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1265  0008DE  2ADE               	incf	postinc2,f,c
  1266  0008E0  0E00               	movlw	0
  1267  0008E2  22DD               	addwfc	postdec2,f,c
  1268  0008E4  D7D5               	goto	l1831
  1269  0008E6                     __end_of_vfpfcnvrt:
  1270                           	opt callstack 0
  1271                           
  1272 ;; *************** function _dtoa *****************
  1273 ;; Defined at:
  1274 ;;		line 274 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1275 ;; Parameters:    Size  Location     Type
  1276 ;;  fp              2   27[COMRAM] PTR struct _IO_FILE
  1277 ;;		 -> sprintf@f(6), 
  1278 ;;  d               8   29[COMRAM] long long 
  1279 ;; Auto vars:     Size  Location     Type
  1280 ;;  n               8   53[COMRAM] long long 
  1281 ;;  i               2   61[COMRAM] int 
  1282 ;;  s               2   51[COMRAM] int 
  1283 ;;  w               2   49[COMRAM] int 
  1284 ;;  p               2   47[COMRAM] int 
  1285 ;; Return value:  Size  Location     Type
  1286 ;;                  2   27[COMRAM] int 
  1287 ;; Registers used:
  1288 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1289 ;; Tracked objects:
  1290 ;;		On entry : 0/0
  1291 ;;		On exit  : 0/0
  1292 ;;		Unchanged: 0/0
  1293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1294 ;;      Params:        10       0       0       0       0       0       0
  1295 ;;      Locals:        18       0       0       0       0       0       0
  1296 ;;      Temps:          8       0       0       0       0       0       0
  1297 ;;      Totals:        36       0       0       0       0       0       0
  1298 ;;Total ram usage:       36 bytes
  1299 ;; Hardware stack levels used:    1
  1300 ;; Hardware stack levels required when called:    5
  1301 ;; This function calls:
  1302 ;;		___aodiv
  1303 ;;		___aomod
  1304 ;;		_abs
  1305 ;;		_pad
  1306 ;; This function is called by:
  1307 ;;		_vfpfcnvrt
  1308 ;; This function uses a non-reentrant model
  1309 ;;
  1310                           
  1311                           	psect	text4
  1312  0008E6                     __ptext4:
  1313                           	opt callstack 0
  1314  0008E6                     _dtoa:
  1315                           	opt callstack 22
  1316                           
  1317                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 274: static
      +                           int dtoa(FILE *fp, long long d);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\
      +                          c99\common\doprnt.c: 275: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\c
      +                          ommon\doprnt.c: 276:     int i, p, s, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\
      +                          sources\c99\common\doprnt.c: 277:     long long n;;C:\Program Files (x86)\Microchip\xc8\
      +                          v2.05\pic\sources\c99\common\doprnt.c: 280:     n = d;
  1318                           
  1319                           ;incstack = 0
  1320  0008E6  C01E  F036         	movff	dtoa@d,dtoa@n
  1321  0008EA  C01F  F037         	movff	dtoa@d+1,dtoa@n+1
  1322  0008EE  C020  F038         	movff	dtoa@d+2,dtoa@n+2
  1323  0008F2  C021  F039         	movff	dtoa@d+3,dtoa@n+3
  1324  0008F6  C022  F03A         	movff	dtoa@d+4,dtoa@n+4
  1325  0008FA  C023  F03B         	movff	dtoa@d+5,dtoa@n+5
  1326  0008FE  C024  F03C         	movff	dtoa@d+6,dtoa@n+6
  1327  000902  C025  F03D         	movff	dtoa@d+7,dtoa@n+7
  1328                           
  1329                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 281:     s 
      +                          = n < 0 ? 1 : 0;
  1330  000906  AE3D               	btfss	dtoa@n+7,7,c
  1331  000908  D002               	goto	u1030
  1332  00090A  0E01               	movlw	1
  1333  00090C  D001               	goto	u1040
  1334  00090E                     u1030:
  1335  00090E  0E00               	movlw	0
  1336  000910                     u1040:
  1337  000910  6E34               	movwf	dtoa@s,c
  1338  000912  6A35               	clrf	dtoa@s+1,c
  1339                           
  1340                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 282:     if
      +                           (s) {
  1341  000914  5034               	movf	dtoa@s,w,c
  1342  000916  1035               	iorwf	dtoa@s+1,w,c
  1343  000918  B4D8               	btfsc	status,2,c
  1344  00091A  D010               	goto	l1639
  1345                           
  1346                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 283:       
      +                            n = -n;
  1347  00091C  1E3D               	comf	dtoa@n+7,f,c
  1348  00091E  1E3C               	comf	dtoa@n+6,f,c
  1349  000920  1E3B               	comf	dtoa@n+5,f,c
  1350  000922  1E3A               	comf	dtoa@n+4,f,c
  1351  000924  1E39               	comf	dtoa@n+3,f,c
  1352  000926  1E38               	comf	dtoa@n+2,f,c
  1353  000928  1E37               	comf	dtoa@n+1,f,c
  1354  00092A  6C36               	negf	dtoa@n,c
  1355  00092C  0E00               	movlw	0
  1356  00092E  2237               	addwfc	dtoa@n+1,f,c
  1357  000930  2238               	addwfc	dtoa@n+2,f,c
  1358  000932  2239               	addwfc	dtoa@n+3,f,c
  1359  000934  223A               	addwfc	dtoa@n+4,f,c
  1360  000936  223B               	addwfc	dtoa@n+5,f,c
  1361  000938  223C               	addwfc	dtoa@n+6,f,c
  1362  00093A  223D               	addwfc	dtoa@n+7,f,c
  1363  00093C                     l1639:
  1364                           
  1365                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 287:     if
      +                           (!(prec < 0)) {
  1366  00093C  AE75               	btfss	_prec+1,7,c
  1367                           
  1368                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 288:       
      +                            flags &= ~(1 << 1);
  1369  00093E  9276               	bcf	_flags,1,c
  1370                           
  1371                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 290:     p 
      +                          = (0 < prec) ? prec : 1;
  1372  000940  BE75               	btfsc	_prec+1,7,c
  1373  000942  D005               	goto	u1070
  1374  000944  5075               	movf	_prec+1,w,c
  1375  000946  E108               	bnz	l125
  1376  000948  0474               	decf	_prec,w,c
  1377  00094A  B0D8               	btfsc	status,0,c
  1378  00094C  D005               	goto	l125
  1379  00094E                     u1070:
  1380  00094E  0E00               	movlw	0
  1381  000950  6E31               	movwf	dtoa@p+1,c
  1382  000952  0E01               	movlw	1
  1383  000954  6E30               	movwf	dtoa@p,c
  1384  000956  D004               	goto	l127
  1385  000958                     l125:
  1386  000958  C074  F030         	movff	_prec,dtoa@p
  1387  00095C  C075  F031         	movff	_prec+1,dtoa@p+1
  1388  000960                     l127:
  1389                           
  1390                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 291:     w 
      +                          = width;
  1391  000960  C072  F032         	movff	_width,dtoa@w
  1392  000964  C073  F033         	movff	_width+1,dtoa@w+1
  1393                           
  1394                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 292:     if
      +                           (s || (flags & (1 << 2))) {
  1395  000968  5034               	movf	dtoa@s,w,c
  1396  00096A  1035               	iorwf	dtoa@s+1,w,c
  1397  00096C  A4D8               	btfss	status,2,c
  1398  00096E  D002               	goto	u1090
  1399  000970  A476               	btfss	_flags,2,c
  1400  000972  D003               	goto	l1653
  1401  000974                     u1090:
  1402                           
  1403                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 293:       
      +                            --w;
  1404  000974  0632               	decf	dtoa@w,f,c
  1405  000976  A0D8               	btfss	status,0,c
  1406  000978  0633               	decf	dtoa@w+1,f,c
  1407  00097A                     l1653:
  1408                           
  1409                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 297:     i 
      +                          = sizeof(dbuf) - 1;
  1410  00097A  0E00               	movlw	0
  1411  00097C  6E3F               	movwf	dtoa@i+1,c
  1412  00097E  0E1F               	movlw	31
  1413  000980  6E3E               	movwf	dtoa@i,c
  1414                           
  1415                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 298:     db
      +                          uf[i] = '\0';
  1416  000982  0E00               	movlw	0
  1417  000984  0100               	movlb	0	; () banked
  1418  000986  6F9F               	movwf	(_dbuf+31)& (0+255),b
  1419                           
  1420                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1421  000988  D07C               	goto	l1667
  1422  00098A                     l1657:
  1423                           
  1424                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 300:       
      +                            --i;
  1425  00098A  063E               	decf	dtoa@i,f,c
  1426  00098C  A0D8               	btfss	status,0,c
  1427  00098E  063F               	decf	dtoa@i+1,f,c
  1428                           
  1429                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 301:       
      +                            dbuf[i] = '0' + abs(n % 10);
  1430  000990  0E80               	movlw	low _dbuf
  1431  000992  243E               	addwf	dtoa@i,w,c
  1432  000994  6ED9               	movwf	fsr2l,c
  1433  000996  0E00               	movlw	high _dbuf
  1434  000998  203F               	addwfc	dtoa@i+1,w,c
  1435  00099A  6EDA               	movwf	fsr2h,c
  1436  00099C  C036  F001         	movff	dtoa@n,___aomod@dividend
  1437  0009A0  C037  F002         	movff	dtoa@n+1,___aomod@dividend+1
  1438  0009A4  C038  F003         	movff	dtoa@n+2,___aomod@dividend+2
  1439  0009A8  C039  F004         	movff	dtoa@n+3,___aomod@dividend+3
  1440  0009AC  C03A  F005         	movff	dtoa@n+4,___aomod@dividend+4
  1441  0009B0  C03B  F006         	movff	dtoa@n+5,___aomod@dividend+5
  1442  0009B4  C03C  F007         	movff	dtoa@n+6,___aomod@dividend+6
  1443  0009B8  C03D  F008         	movff	dtoa@n+7,___aomod@dividend+7
  1444  0009BC  0E0A               	movlw	10
  1445  0009BE  6E09               	movwf	___aomod@divisor,c
  1446  0009C0  0E00               	movlw	0
  1447  0009C2  6E0A               	movwf	___aomod@divisor+1,c
  1448  0009C4  0E00               	movlw	0
  1449  0009C6  6E0B               	movwf	___aomod@divisor+2,c
  1450  0009C8  0E00               	movlw	0
  1451  0009CA  6E0C               	movwf	___aomod@divisor+3,c
  1452  0009CC  0E00               	movlw	0
  1453  0009CE  6E0D               	movwf	___aomod@divisor+4,c
  1454  0009D0  0E00               	movlw	0
  1455  0009D2  6E0E               	movwf	___aomod@divisor+5,c
  1456  0009D4  0E00               	movlw	0
  1457  0009D6  6E0F               	movwf	___aomod@divisor+6,c
  1458  0009D8  0E00               	movlw	0
  1459  0009DA  6E10               	movwf	___aomod@divisor+7,c
  1460  0009DC  ECD8  F006         	call	___aomod	;wreg free
  1461  0009E0  C001  F026         	movff	?___aomod,??_dtoa
  1462  0009E4  C002  F027         	movff	?___aomod+1,??_dtoa+1
  1463  0009E8  C003  F028         	movff	?___aomod+2,??_dtoa+2
  1464  0009EC  C004  F029         	movff	?___aomod+3,??_dtoa+3
  1465  0009F0  C005  F02A         	movff	?___aomod+4,??_dtoa+4
  1466  0009F4  C006  F02B         	movff	?___aomod+5,??_dtoa+5
  1467  0009F8  C007  F02C         	movff	?___aomod+6,??_dtoa+6
  1468  0009FC  C008  F02D         	movff	?___aomod+7,??_dtoa+7
  1469  000A00  C026  F013         	movff	??_dtoa,abs@a
  1470  000A04  C028  F014         	movff	??_dtoa+2,abs@a+1
  1471  000A08  ECEE  F009         	call	_abs	;wreg free
  1472  000A0C  5013               	movf	?_abs,w,c
  1473  000A0E  0F30               	addlw	48
  1474  000A10  6EDF               	movwf	indf2,c
  1475                           
  1476                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 302:       
      +                            --p;
  1477  000A12  0630               	decf	dtoa@p,f,c
  1478  000A14  A0D8               	btfss	status,0,c
  1479  000A16  0631               	decf	dtoa@p+1,f,c
  1480                           
  1481                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 303:       
      +                            --w;
  1482  000A18  0632               	decf	dtoa@w,f,c
  1483  000A1A  A0D8               	btfss	status,0,c
  1484  000A1C  0633               	decf	dtoa@w+1,f,c
  1485                           
  1486                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 304:       
      +                            n = n / 10;
  1487  000A1E  C036  F001         	movff	dtoa@n,___aodiv@dividend
  1488  000A22  C037  F002         	movff	dtoa@n+1,___aodiv@dividend+1
  1489  000A26  C038  F003         	movff	dtoa@n+2,___aodiv@dividend+2
  1490  000A2A  C039  F004         	movff	dtoa@n+3,___aodiv@dividend+3
  1491  000A2E  C03A  F005         	movff	dtoa@n+4,___aodiv@dividend+4
  1492  000A32  C03B  F006         	movff	dtoa@n+5,___aodiv@dividend+5
  1493  000A36  C03C  F007         	movff	dtoa@n+6,___aodiv@dividend+6
  1494  000A3A  C03D  F008         	movff	dtoa@n+7,___aodiv@dividend+7
  1495  000A3E  0E0A               	movlw	10
  1496  000A40  6E09               	movwf	___aodiv@divisor,c
  1497  000A42  0E00               	movlw	0
  1498  000A44  6E0A               	movwf	___aodiv@divisor+1,c
  1499  000A46  0E00               	movlw	0
  1500  000A48  6E0B               	movwf	___aodiv@divisor+2,c
  1501  000A4A  0E00               	movlw	0
  1502  000A4C  6E0C               	movwf	___aodiv@divisor+3,c
  1503  000A4E  0E00               	movlw	0
  1504  000A50  6E0D               	movwf	___aodiv@divisor+4,c
  1505  000A52  0E00               	movlw	0
  1506  000A54  6E0E               	movwf	___aodiv@divisor+5,c
  1507  000A56  0E00               	movlw	0
  1508  000A58  6E0F               	movwf	___aodiv@divisor+6,c
  1509  000A5A  0E00               	movlw	0
  1510  000A5C  6E10               	movwf	___aodiv@divisor+7,c
  1511  000A5E  EC94  F005         	call	___aodiv	;wreg free
  1512  000A62  C001  F036         	movff	?___aodiv,dtoa@n
  1513  000A66  C002  F037         	movff	?___aodiv+1,dtoa@n+1
  1514  000A6A  C003  F038         	movff	?___aodiv+2,dtoa@n+2
  1515  000A6E  C004  F039         	movff	?___aodiv+3,dtoa@n+3
  1516  000A72  C005  F03A         	movff	?___aodiv+4,dtoa@n+4
  1517  000A76  C006  F03B         	movff	?___aodiv+5,dtoa@n+5
  1518  000A7A  C007  F03C         	movff	?___aodiv+6,dtoa@n+6
  1519  000A7E  C008  F03D         	movff	?___aodiv+7,dtoa@n+7
  1520  000A82                     l1667:
  1521                           
  1522                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1523  000A82  BE3F               	btfsc	dtoa@i+1,7,c
  1524  000A84  D01F               	goto	u1140
  1525  000A86  503F               	movf	dtoa@i+1,w,c
  1526  000A88  E103               	bnz	u1100
  1527  000A8A  043E               	decf	dtoa@i,w,c
  1528  000A8C  A0D8               	btfss	status,0,c
  1529  000A8E  D01A               	goto	u1140
  1530  000A90                     u1100:
  1531  000A90  5036               	movf	dtoa@n,w,c
  1532  000A92  1037               	iorwf	dtoa@n+1,w,c
  1533  000A94  1038               	iorwf	dtoa@n+2,w,c
  1534  000A96  1039               	iorwf	dtoa@n+3,w,c
  1535  000A98  103A               	iorwf	dtoa@n+4,w,c
  1536  000A9A  103B               	iorwf	dtoa@n+5,w,c
  1537  000A9C  103C               	iorwf	dtoa@n+6,w,c
  1538  000A9E  103D               	iorwf	dtoa@n+7,w,c
  1539  000AA0  A4D8               	btfss	status,2,c
  1540  000AA2  D773               	goto	l1657
  1541  000AA4  BE31               	btfsc	dtoa@p+1,7,c
  1542  000AA6  D005               	goto	u1120
  1543  000AA8  5031               	movf	dtoa@p+1,w,c
  1544  000AAA  E102               	bnz	u1121
  1545  000AAC  0430               	decf	dtoa@p,w,c
  1546  000AAE  B0D8               	btfsc	status,0,c
  1547  000AB0                     u1121:
  1548  000AB0  D76C               	goto	l1657
  1549  000AB2                     u1120:
  1550  000AB2  BE33               	btfsc	dtoa@w+1,7,c
  1551  000AB4  D007               	goto	u1140
  1552  000AB6  5033               	movf	dtoa@w+1,w,c
  1553  000AB8  E103               	bnz	u1130
  1554  000ABA  0432               	decf	dtoa@w,w,c
  1555  000ABC  A0D8               	btfss	status,0,c
  1556  000ABE  D002               	goto	u1140
  1557  000AC0                     u1130:
  1558  000AC0  B276               	btfsc	_flags,1,c
  1559  000AC2  D763               	goto	l1657
  1560  000AC4                     u1140:
  1561                           
  1562                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 308:     if
      +                           (s || (flags & (1 << 2))) {
  1563  000AC4  5034               	movf	dtoa@s,w,c
  1564  000AC6  1035               	iorwf	dtoa@s+1,w,c
  1565  000AC8  A4D8               	btfss	status,2,c
  1566  000ACA  D002               	goto	u1160
  1567  000ACC  A476               	btfss	_flags,2,c
  1568  000ACE  D017               	goto	l1691
  1569  000AD0                     u1160:
  1570                           
  1571                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 309:       
      +                            --i;
  1572  000AD0  063E               	decf	dtoa@i,f,c
  1573  000AD2  A0D8               	btfss	status,0,c
  1574  000AD4  063F               	decf	dtoa@i+1,f,c
  1575                           
  1576                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 310:       
      +                            dbuf[i] = s ? '-' : '+';
  1577  000AD6  5034               	movf	dtoa@s,w,c
  1578  000AD8  1035               	iorwf	dtoa@s+1,w,c
  1579  000ADA  A4D8               	btfss	status,2,c
  1580  000ADC  D004               	goto	l1687
  1581  000ADE  0E00               	movlw	0
  1582  000AE0  6E2F               	movwf	_dtoa$394+1,c
  1583  000AE2  0E2B               	movlw	43
  1584  000AE4  D003               	goto	L2
  1585  000AE6                     l1687:
  1586  000AE6  0E00               	movlw	0
  1587  000AE8  6E2F               	movwf	_dtoa$394+1,c
  1588  000AEA  0E2D               	movlw	45
  1589  000AEC                     L2:
  1590  000AEC  6E2E               	movwf	_dtoa$394,c
  1591  000AEE  0E80               	movlw	low _dbuf
  1592  000AF0  243E               	addwf	dtoa@i,w,c
  1593  000AF2  6ED9               	movwf	fsr2l,c
  1594  000AF4  0E00               	movlw	high _dbuf
  1595  000AF6  203F               	addwfc	dtoa@i+1,w,c
  1596  000AF8  6EDA               	movwf	fsr2h,c
  1597  000AFA  C02E  FFDF         	movff	_dtoa$394,indf2
  1598  000AFE                     l1691:
  1599                           
  1600                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 314:     re
      +                          turn pad(fp, &dbuf[i], w);
  1601  000AFE  C01C  F011         	movff	dtoa@fp,pad@fp
  1602  000B02  C01D  F012         	movff	dtoa@fp+1,pad@fp+1
  1603  000B06  0E80               	movlw	low _dbuf
  1604  000B08  243E               	addwf	dtoa@i,w,c
  1605  000B0A  6E13               	movwf	pad@buf,c
  1606  000B0C  0E00               	movlw	high _dbuf
  1607  000B0E  203F               	addwfc	dtoa@i+1,w,c
  1608  000B10  6E14               	movwf	pad@buf+1,c
  1609  000B12  C032  F015         	movff	dtoa@w,pad@p
  1610  000B16  C033  F016         	movff	dtoa@w+1,pad@p+1
  1611  000B1A  EC2C  F008         	call	_pad	;wreg free
  1612  000B1E  C011  F01C         	movff	?_pad,?_dtoa
  1613  000B22  C012  F01D         	movff	?_pad+1,?_dtoa+1
  1614  000B26  0012               	return		;funcret
  1615  000B28                     __end_of_dtoa:
  1616                           	opt callstack 0
  1617                           
  1618 ;; *************** function _pad *****************
  1619 ;; Defined at:
  1620 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1621 ;; Parameters:    Size  Location     Type
  1622 ;;  fp              2   16[COMRAM] PTR struct _IO_FILE
  1623 ;;		 -> sprintf@f(6), 
  1624 ;;  buf             2   18[COMRAM] PTR unsigned char 
  1625 ;;		 -> dbuf(32), 
  1626 ;;  p               2   20[COMRAM] int 
  1627 ;; Auto vars:     Size  Location     Type
  1628 ;;  w               2   25[COMRAM] int 
  1629 ;;  i               2   23[COMRAM] int 
  1630 ;; Return value:  Size  Location     Type
  1631 ;;                  2   16[COMRAM] int 
  1632 ;; Registers used:
  1633 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1634 ;; Tracked objects:
  1635 ;;		On entry : 0/0
  1636 ;;		On exit  : 0/0
  1637 ;;		Unchanged: 0/0
  1638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1639 ;;      Params:         6       0       0       0       0       0       0
  1640 ;;      Locals:         4       0       0       0       0       0       0
  1641 ;;      Temps:          1       0       0       0       0       0       0
  1642 ;;      Totals:        11       0       0       0       0       0       0
  1643 ;;Total ram usage:       11 bytes
  1644 ;; Hardware stack levels used:    1
  1645 ;; Hardware stack levels required when called:    4
  1646 ;; This function calls:
  1647 ;;		_fputc
  1648 ;;		_fputs
  1649 ;;		_strlen
  1650 ;; This function is called by:
  1651 ;;		_dtoa
  1652 ;; This function uses a non-reentrant model
  1653 ;;
  1654                           
  1655                           	psect	text5
  1656  001058                     __ptext5:
  1657                           	opt callstack 0
  1658  001058                     _pad:
  1659                           	opt callstack 22
  1660                           
  1661                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
  1662                           
  1663                           ;incstack = 0
  1664  001058  A076               	btfss	_flags,0,c
  1665  00105A  D00A               	goto	l1497
  1666                           
  1667                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
  1668  00105C  C013  F00A         	movff	pad@buf,fputs@s
  1669  001060  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1670  001064  C011  F00C         	movff	pad@fp,fputs@fp
  1671  001068  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1672  00106C  ECD2  F009         	call	_fputs	;wreg free
  1673  001070                     l1497:
  1674                           
  1675                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
  1676  001070  BE16               	btfsc	pad@p+1,7,c
  1677  001072  D005               	goto	l1501
  1678  001074  C015  F01A         	movff	pad@p,pad@w
  1679  001078  C016  F01B         	movff	pad@p+1,pad@w+1
  1680  00107C  D004               	goto	l114
  1681  00107E                     l1501:
  1682  00107E  0E00               	movlw	0
  1683  001080  6E1B               	movwf	pad@w+1,c
  1684  001082  0E00               	movlw	0
  1685  001084  6E1A               	movwf	pad@w,c
  1686  001086                     l114:
  1687                           
  1688                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
  1689  001086  0E00               	movlw	0
  1690  001088  6E19               	movwf	pad@i+1,c
  1691  00108A  0E00               	movlw	0
  1692  00108C  6E18               	movwf	pad@i,c
  1693                           
  1694                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  1695  00108E  D00C               	goto	l1507
  1696  001090                     l1503:
  1697                           
  1698                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
  1699  001090  0E00               	movlw	0
  1700  001092  6E02               	movwf	fputc@c+1,c
  1701  001094  0E20               	movlw	32
  1702  001096  6E01               	movwf	fputc@c,c
  1703  001098  C011  F003         	movff	pad@fp,fputc@fp
  1704  00109C  C012  F004         	movff	pad@fp+1,fputc@fp+1
  1705  0010A0  ECDC  F007         	call	_fputc	;wreg free
  1706                           
  1707                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
  1708  0010A4  4A18               	infsnz	pad@i,f,c
  1709  0010A6  2A19               	incf	pad@i+1,f,c
  1710  0010A8                     l1507:
  1711                           
  1712                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  1713  0010A8  501A               	movf	pad@w,w,c
  1714  0010AA  5C18               	subwf	pad@i,w,c
  1715  0010AC  5019               	movf	pad@i+1,w,c
  1716  0010AE  0A80               	xorlw	128
  1717  0010B0  6E17               	movwf	??_pad& (0+255),c
  1718  0010B2  501B               	movf	pad@w+1,w,c
  1719  0010B4  0A80               	xorlw	128
  1720  0010B6  5817               	subwfb	??_pad& (0+255),w,c
  1721  0010B8  A0D8               	btfss	status,0,c
  1722  0010BA  D7EA               	goto	l1503
  1723                           
  1724                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
  1725  0010BC  B076               	btfsc	_flags,0,c
  1726  0010BE  D00A               	goto	l1511
  1727                           
  1728                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
  1729  0010C0  C013  F00A         	movff	pad@buf,fputs@s
  1730  0010C4  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1731  0010C8  C011  F00C         	movff	pad@fp,fputs@fp
  1732  0010CC  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1733  0010D0  ECD2  F009         	call	_fputs	;wreg free
  1734  0010D4                     l1511:
  1735                           
  1736                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
  1737  0010D4  C013  F001         	movff	pad@buf,strlen@s
  1738  0010D8  C014  F002         	movff	pad@buf+1,strlen@s+1
  1739  0010DC  EC1F  F00A         	call	_strlen	;wreg free
  1740  0010E0  501A               	movf	pad@w,w,c
  1741  0010E2  2401               	addwf	?_strlen,w,c
  1742  0010E4  6E11               	movwf	?_pad,c
  1743  0010E6  501B               	movf	pad@w+1,w,c
  1744  0010E8  2002               	addwfc	?_strlen+1,w,c
  1745  0010EA  6E12               	movwf	?_pad+1,c
  1746  0010EC  0012               	return		;funcret
  1747  0010EE                     __end_of_pad:
  1748                           	opt callstack 0
  1749                           
  1750 ;; *************** function _strlen *****************
  1751 ;; Defined at:
  1752 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
  1753 ;; Parameters:    Size  Location     Type
  1754 ;;  s               2    0[COMRAM] PTR const unsigned char 
  1755 ;;		 -> dbuf(32), 
  1756 ;; Auto vars:     Size  Location     Type
  1757 ;;  a               2    2[COMRAM] PTR const unsigned char 
  1758 ;;		 -> dbuf(32), 
  1759 ;; Return value:  Size  Location     Type
  1760 ;;                  2    0[COMRAM] unsigned int 
  1761 ;; Registers used:
  1762 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1763 ;; Tracked objects:
  1764 ;;		On entry : 0/0
  1765 ;;		On exit  : 0/0
  1766 ;;		Unchanged: 0/0
  1767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1768 ;;      Params:         2       0       0       0       0       0       0
  1769 ;;      Locals:         2       0       0       0       0       0       0
  1770 ;;      Temps:          0       0       0       0       0       0       0
  1771 ;;      Totals:         4       0       0       0       0       0       0
  1772 ;;Total ram usage:        4 bytes
  1773 ;; Hardware stack levels used:    1
  1774 ;; Hardware stack levels required when called:    1
  1775 ;; This function calls:
  1776 ;;		Nothing
  1777 ;; This function is called by:
  1778 ;;		_pad
  1779 ;; This function uses a non-reentrant model
  1780 ;;
  1781                           
  1782                           	psect	text6
  1783  00143E                     __ptext6:
  1784                           	opt callstack 0
  1785  00143E                     _strlen:
  1786                           	opt callstack 24
  1787                           
  1788                           ;incstack = 0
  1789  00143E  C001  F003         	movff	strlen@s,strlen@a
  1790  001442  C002  F004         	movff	strlen@s+1,strlen@a+1
  1791  001446  D002               	goto	l1487
  1792  001448                     l1485:
  1793  001448  4A01               	infsnz	strlen@s,f,c
  1794  00144A  2A02               	incf	strlen@s+1,f,c
  1795  00144C                     l1487:
  1796  00144C  C001  FFD9         	movff	strlen@s,fsr2l
  1797  001450  C002  FFDA         	movff	strlen@s+1,fsr2h
  1798  001454  50DF               	movf	indf2,w,c
  1799  001456  A4D8               	btfss	status,2,c
  1800  001458  D7F7               	goto	l1485
  1801  00145A  5003               	movf	strlen@a,w,c
  1802  00145C  5C01               	subwf	strlen@s,w,c
  1803  00145E  6E01               	movwf	?_strlen,c
  1804  001460  5004               	movf	strlen@a+1,w,c
  1805  001462  5802               	subwfb	strlen@s+1,w,c
  1806  001464  6E02               	movwf	?_strlen+1,c
  1807  001466  0012               	return		;funcret
  1808  001468                     __end_of_strlen:
  1809                           	opt callstack 0
  1810                           
  1811 ;; *************** function _fputs *****************
  1812 ;; Defined at:
  1813 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputs.c"
  1814 ;; Parameters:    Size  Location     Type
  1815 ;;  s               2    9[COMRAM] PTR const unsigned char 
  1816 ;;		 -> dbuf(32), 
  1817 ;;  fp              2   11[COMRAM] PTR struct _IO_FILE
  1818 ;;		 -> sprintf@f(6), 
  1819 ;; Auto vars:     Size  Location     Type
  1820 ;;  i               2   14[COMRAM] int 
  1821 ;;  c               1   13[COMRAM] unsigned char 
  1822 ;; Return value:  Size  Location     Type
  1823 ;;                  2    9[COMRAM] int 
  1824 ;; Registers used:
  1825 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1826 ;; Tracked objects:
  1827 ;;		On entry : 0/0
  1828 ;;		On exit  : 0/0
  1829 ;;		Unchanged: 0/0
  1830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1831 ;;      Params:         4       0       0       0       0       0       0
  1832 ;;      Locals:         3       0       0       0       0       0       0
  1833 ;;      Temps:          0       0       0       0       0       0       0
  1834 ;;      Totals:         7       0       0       0       0       0       0
  1835 ;;Total ram usage:        7 bytes
  1836 ;; Hardware stack levels used:    1
  1837 ;; Hardware stack levels required when called:    3
  1838 ;; This function calls:
  1839 ;;		_fputc
  1840 ;; This function is called by:
  1841 ;;		_pad
  1842 ;; This function uses a non-reentrant model
  1843 ;;
  1844                           
  1845                           	psect	text7
  1846  0013A4                     __ptext7:
  1847                           	opt callstack 0
  1848  0013A4                     _fputs:
  1849                           	opt callstack 22
  1850                           
  1851                           ;incstack = 0
  1852  0013A4  0E00               	movlw	0
  1853  0013A6  6E10               	movwf	fputs@i+1,c
  1854  0013A8  0E00               	movlw	0
  1855  0013AA  6E0F               	movwf	fputs@i,c
  1856  0013AC  D00B               	goto	l1481
  1857  0013AE                     l1477:
  1858  0013AE  C00E  F001         	movff	fputs@c,fputc@c
  1859  0013B2  6A02               	clrf	fputc@c+1,c
  1860  0013B4  C00C  F003         	movff	fputs@fp,fputc@fp
  1861  0013B8  C00D  F004         	movff	fputs@fp+1,fputc@fp+1
  1862  0013BC  ECDC  F007         	call	_fputc	;wreg free
  1863  0013C0  4A0F               	infsnz	fputs@i,f,c
  1864  0013C2  2A10               	incf	fputs@i+1,f,c
  1865  0013C4                     l1481:
  1866  0013C4  500F               	movf	fputs@i,w,c
  1867  0013C6  240A               	addwf	fputs@s,w,c
  1868  0013C8  6ED9               	movwf	fsr2l,c
  1869  0013CA  5010               	movf	fputs@i+1,w,c
  1870  0013CC  200B               	addwfc	fputs@s+1,w,c
  1871  0013CE  6EDA               	movwf	fsr2h,c
  1872  0013D0  50DF               	movf	indf2,w,c
  1873  0013D2  6E0E               	movwf	fputs@c,c
  1874  0013D4  500E               	movf	fputs@c,w,c
  1875  0013D6  B4D8               	btfsc	status,2,c
  1876  0013D8  0012               	return	
  1877  0013DA  D7E9               	goto	l1477
  1878  0013DC                     __end_of_fputs:
  1879                           	opt callstack 0
  1880                           
  1881 ;; *************** function _fputc *****************
  1882 ;; Defined at:
  1883 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputc.c"
  1884 ;; Parameters:    Size  Location     Type
  1885 ;;  c               2    0[COMRAM] int 
  1886 ;;  fp              2    2[COMRAM] PTR struct _IO_FILE
  1887 ;;		 -> sprintf@f(6), 
  1888 ;; Auto vars:     Size  Location     Type
  1889 ;;		None
  1890 ;; Return value:  Size  Location     Type
  1891 ;;                  2    0[COMRAM] int 
  1892 ;; Registers used:
  1893 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1894 ;; Tracked objects:
  1895 ;;		On entry : 0/0
  1896 ;;		On exit  : 0/0
  1897 ;;		Unchanged: 0/0
  1898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1899 ;;      Params:         4       0       0       0       0       0       0
  1900 ;;      Locals:         0       0       0       0       0       0       0
  1901 ;;      Temps:          5       0       0       0       0       0       0
  1902 ;;      Totals:         9       0       0       0       0       0       0
  1903 ;;Total ram usage:        9 bytes
  1904 ;; Hardware stack levels used:    1
  1905 ;; Hardware stack levels required when called:    2
  1906 ;; This function calls:
  1907 ;;		_putch
  1908 ;; This function is called by:
  1909 ;;		_pad
  1910 ;;		_vfpfcnvrt
  1911 ;;		_fputs
  1912 ;; This function uses a non-reentrant model
  1913 ;;
  1914                           
  1915                           	psect	text8
  1916  000FB8                     __ptext8:
  1917                           	opt callstack 0
  1918  000FB8                     _fputc:
  1919                           	opt callstack 25
  1920                           
  1921                           ;incstack = 0
  1922  000FB8  5003               	movf	fputc@fp,w,c
  1923  000FBA  1004               	iorwf	fputc@fp+1,w,c
  1924  000FBC  B4D8               	btfsc	status,2,c
  1925  000FBE  D004               	goto	u750
  1926  000FC0  5003               	movf	fputc@fp,w,c
  1927  000FC2  1004               	iorwf	fputc@fp+1,w,c
  1928  000FC4  A4D8               	btfss	status,2,c
  1929  000FC6  D004               	goto	l1467
  1930  000FC8                     u750:
  1931  000FC8  5001               	movf	fputc@c,w,c
  1932  000FCA  EC73  F00A         	call	_putch
  1933  000FCE  0012               	return	
  1934  000FD0                     l1467:
  1935  000FD0  EE20 F004          	lfsr	2,4
  1936  000FD4  5003               	movf	fputc@fp,w,c
  1937  000FD6  26D9               	addwf	fsr2l,f,c
  1938  000FD8  5004               	movf	fputc@fp+1,w,c
  1939  000FDA  22DA               	addwfc	fsr2h,f,c
  1940  000FDC  50DE               	movf	postinc2,w,c
  1941  000FDE  10DE               	iorwf	postinc2,w,c
  1942  000FE0  B4D8               	btfsc	status,2,c
  1943  000FE2  D016               	goto	u770
  1944  000FE4  EE20 F004          	lfsr	2,4
  1945  000FE8  5003               	movf	fputc@fp,w,c
  1946  000FEA  26D9               	addwf	fsr2l,f,c
  1947  000FEC  5004               	movf	fputc@fp+1,w,c
  1948  000FEE  22DA               	addwfc	fsr2h,f,c
  1949  000FF0  EE10 F002          	lfsr	1,2
  1950  000FF4  5003               	movf	fputc@fp,w,c
  1951  000FF6  26E1               	addwf	fsr1l,f,c
  1952  000FF8  5004               	movf	fputc@fp+1,w,c
  1953  000FFA  22E2               	addwfc	fsr1h,f,c
  1954  000FFC  50DE               	movf	postinc2,w,c
  1955  000FFE  5CE6               	subwf	postinc1,w,c
  1956  001000  50E6               	movf	postinc1,w,c
  1957  001002  0A80               	xorlw	128
  1958  001004  6E09               	movwf	(??_fputc+4)& (0+255),c
  1959  001006  50DE               	movf	postinc2,w,c
  1960  001008  0A80               	xorlw	128
  1961  00100A  5809               	subwfb	(??_fputc+4)& (0+255),w,c
  1962  00100C  B0D8               	btfsc	status,0,c
  1963  00100E  0012               	return	
  1964  001010                     u770:
  1965  001010  EE20 F002          	lfsr	2,2
  1966  001014  5003               	movf	fputc@fp,w,c
  1967  001016  26D9               	addwf	fsr2l,f,c
  1968  001018  5004               	movf	fputc@fp+1,w,c
  1969  00101A  22DA               	addwfc	fsr2h,f,c
  1970  00101C  CFDE F005          	movff	postinc2,??_fputc
  1971  001020  CFDD F006          	movff	postdec2,??_fputc+1
  1972  001024  C003  FFD9         	movff	fputc@fp,fsr2l
  1973  001028  C004  FFDA         	movff	fputc@fp+1,fsr2h
  1974  00102C  CFDE F007          	movff	postinc2,??_fputc+2
  1975  001030  CFDD F008          	movff	postdec2,??_fputc+3
  1976  001034  5005               	movf	??_fputc,w,c
  1977  001036  2407               	addwf	??_fputc+2,w,c
  1978  001038  6ED9               	movwf	fsr2l,c
  1979  00103A  5006               	movf	??_fputc+1,w,c
  1980  00103C  2008               	addwfc	??_fputc+3,w,c
  1981  00103E  6EDA               	movwf	fsr2h,c
  1982  001040  C001  FFDF         	movff	fputc@c,indf2
  1983  001044  EE20 F002          	lfsr	2,2
  1984  001048  5003               	movf	fputc@fp,w,c
  1985  00104A  26D9               	addwf	fsr2l,f,c
  1986  00104C  5004               	movf	fputc@fp+1,w,c
  1987  00104E  22DA               	addwfc	fsr2h,f,c
  1988  001050  2ADE               	incf	postinc2,f,c
  1989  001052  0E00               	movlw	0
  1990  001054  22DD               	addwfc	postdec2,f,c
  1991  001056  0012               	return		;funcret
  1992  001058                     __end_of_fputc:
  1993                           	opt callstack 0
  1994                           
  1995 ;; *************** function _putch *****************
  1996 ;; Defined at:
  1997 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\putch.c"
  1998 ;; Parameters:    Size  Location     Type
  1999 ;;  c               1    wreg     unsigned char 
  2000 ;; Auto vars:     Size  Location     Type
  2001 ;;  c               1    0[COMRAM] unsigned char 
  2002 ;; Return value:  Size  Location     Type
  2003 ;;                  1    wreg      void 
  2004 ;; Registers used:
  2005 ;;		wreg
  2006 ;; Tracked objects:
  2007 ;;		On entry : 0/0
  2008 ;;		On exit  : 0/0
  2009 ;;		Unchanged: 0/0
  2010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2011 ;;      Params:         0       0       0       0       0       0       0
  2012 ;;      Locals:         0       0       0       0       0       0       0
  2013 ;;      Temps:          0       0       0       0       0       0       0
  2014 ;;      Totals:         0       0       0       0       0       0       0
  2015 ;;Total ram usage:        0 bytes
  2016 ;; Hardware stack levels used:    1
  2017 ;; Hardware stack levels required when called:    1
  2018 ;; This function calls:
  2019 ;;		Nothing
  2020 ;; This function is called by:
  2021 ;;		_fputc
  2022 ;; This function uses a non-reentrant model
  2023 ;;
  2024                           
  2025                           	psect	text9
  2026  0014E6                     __ptext9:
  2027                           	opt callstack 0
  2028  0014E6                     _putch:
  2029                           	opt callstack 25
  2030                           
  2031                           ;incstack = 0
  2032  0014E6  0012               	return		;funcret
  2033  0014E8                     __end_of_putch:
  2034                           	opt callstack 0
  2035                           
  2036 ;; *************** function _abs *****************
  2037 ;; Defined at:
  2038 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\abs.c"
  2039 ;; Parameters:    Size  Location     Type
  2040 ;;  a               2   18[COMRAM] int 
  2041 ;; Auto vars:     Size  Location     Type
  2042 ;;		None
  2043 ;; Return value:  Size  Location     Type
  2044 ;;                  2   18[COMRAM] int 
  2045 ;; Registers used:
  2046 ;;		wreg, status,2, status,0
  2047 ;; Tracked objects:
  2048 ;;		On entry : 0/0
  2049 ;;		On exit  : 0/0
  2050 ;;		Unchanged: 0/0
  2051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2052 ;;      Params:         2       0       0       0       0       0       0
  2053 ;;      Locals:         0       0       0       0       0       0       0
  2054 ;;      Temps:          2       0       0       0       0       0       0
  2055 ;;      Totals:         4       0       0       0       0       0       0
  2056 ;;Total ram usage:        4 bytes
  2057 ;; Hardware stack levels used:    1
  2058 ;; Hardware stack levels required when called:    1
  2059 ;; This function calls:
  2060 ;;		Nothing
  2061 ;; This function is called by:
  2062 ;;		_dtoa
  2063 ;; This function uses a non-reentrant model
  2064 ;;
  2065                           
  2066                           	psect	text10
  2067  0013DC                     __ptext10:
  2068                           	opt callstack 0
  2069  0013DC                     _abs:
  2070                           	opt callstack 25
  2071                           
  2072                           ;incstack = 0
  2073  0013DC  BE14               	btfsc	abs@a+1,7,c
  2074  0013DE  D005               	goto	u840
  2075  0013E0  5014               	movf	abs@a+1,w,c
  2076  0013E2  E110               	bnz	l859
  2077  0013E4  0413               	decf	abs@a,w,c
  2078  0013E6  B0D8               	btfsc	status,0,c
  2079  0013E8  D00D               	goto	l859
  2080  0013EA                     u840:
  2081  0013EA  C013  F015         	movff	abs@a,??_abs
  2082  0013EE  C014  F016         	movff	abs@a+1,??_abs+1
  2083  0013F2  1E15               	comf	??_abs,f,c
  2084  0013F4  1E16               	comf	??_abs+1,f,c
  2085  0013F6  4A15               	infsnz	??_abs,f,c
  2086  0013F8  2A16               	incf	??_abs+1,f,c
  2087  0013FA  C015  F013         	movff	??_abs,?_abs
  2088  0013FE  C016  F014         	movff	??_abs+1,?_abs+1
  2089  001402  0012               	return	
  2090  001404                     l859:
  2091  001404  C013  F013         	movff	abs@a,?_abs
  2092  001408  C014  F014         	movff	abs@a+1,?_abs+1
  2093  00140C  0012               	return		;funcret
  2094  00140E                     __end_of_abs:
  2095                           	opt callstack 0
  2096                           
  2097 ;; *************** function ___aomod *****************
  2098 ;; Defined at:
  2099 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aomod.c"
  2100 ;; Parameters:    Size  Location     Type
  2101 ;;  dividend        8    0[COMRAM] long long 
  2102 ;;  divisor         8    8[COMRAM] long long 
  2103 ;; Auto vars:     Size  Location     Type
  2104 ;;  sign            1   17[COMRAM] unsigned char 
  2105 ;;  counter         1   16[COMRAM] unsigned char 
  2106 ;; Return value:  Size  Location     Type
  2107 ;;                  8    0[COMRAM] long long 
  2108 ;; Registers used:
  2109 ;;		wreg, status,2, status,0
  2110 ;; Tracked objects:
  2111 ;;		On entry : 0/0
  2112 ;;		On exit  : 0/0
  2113 ;;		Unchanged: 0/0
  2114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2115 ;;      Params:        16       0       0       0       0       0       0
  2116 ;;      Locals:         2       0       0       0       0       0       0
  2117 ;;      Temps:          0       0       0       0       0       0       0
  2118 ;;      Totals:        18       0       0       0       0       0       0
  2119 ;;Total ram usage:       18 bytes
  2120 ;; Hardware stack levels used:    1
  2121 ;; Hardware stack levels required when called:    1
  2122 ;; This function calls:
  2123 ;;		Nothing
  2124 ;; This function is called by:
  2125 ;;		_dtoa
  2126 ;; This function uses a non-reentrant model
  2127 ;;
  2128                           
  2129                           	psect	text11
  2130  000DB0                     __ptext11:
  2131                           	opt callstack 0
  2132  000DB0                     ___aomod:
  2133                           	opt callstack 25
  2134                           
  2135                           ;incstack = 0
  2136  000DB0  0E00               	movlw	0
  2137  000DB2  6E12               	movwf	___aomod@sign,c
  2138  000DB4  AE08               	btfss	___aomod@dividend+7,7,c
  2139  000DB6  D012               	goto	l1581
  2140  000DB8  1E08               	comf	___aomod@dividend+7,f,c
  2141  000DBA  1E07               	comf	___aomod@dividend+6,f,c
  2142  000DBC  1E06               	comf	___aomod@dividend+5,f,c
  2143  000DBE  1E05               	comf	___aomod@dividend+4,f,c
  2144  000DC0  1E04               	comf	___aomod@dividend+3,f,c
  2145  000DC2  1E03               	comf	___aomod@dividend+2,f,c
  2146  000DC4  1E02               	comf	___aomod@dividend+1,f,c
  2147  000DC6  6C01               	negf	___aomod@dividend,c
  2148  000DC8  0E00               	movlw	0
  2149  000DCA  2202               	addwfc	___aomod@dividend+1,f,c
  2150  000DCC  2203               	addwfc	___aomod@dividend+2,f,c
  2151  000DCE  2204               	addwfc	___aomod@dividend+3,f,c
  2152  000DD0  2205               	addwfc	___aomod@dividend+4,f,c
  2153  000DD2  2206               	addwfc	___aomod@dividend+5,f,c
  2154  000DD4  2207               	addwfc	___aomod@dividend+6,f,c
  2155  000DD6  2208               	addwfc	___aomod@dividend+7,f,c
  2156  000DD8  0E01               	movlw	1
  2157  000DDA  6E12               	movwf	___aomod@sign,c
  2158  000DDC                     l1581:
  2159  000DDC  AE10               	btfss	___aomod@divisor+7,7,c
  2160  000DDE  D010               	goto	l1585
  2161  000DE0  1E10               	comf	___aomod@divisor+7,f,c
  2162  000DE2  1E0F               	comf	___aomod@divisor+6,f,c
  2163  000DE4  1E0E               	comf	___aomod@divisor+5,f,c
  2164  000DE6  1E0D               	comf	___aomod@divisor+4,f,c
  2165  000DE8  1E0C               	comf	___aomod@divisor+3,f,c
  2166  000DEA  1E0B               	comf	___aomod@divisor+2,f,c
  2167  000DEC  1E0A               	comf	___aomod@divisor+1,f,c
  2168  000DEE  6C09               	negf	___aomod@divisor,c
  2169  000DF0  0E00               	movlw	0
  2170  000DF2  220A               	addwfc	___aomod@divisor+1,f,c
  2171  000DF4  220B               	addwfc	___aomod@divisor+2,f,c
  2172  000DF6  220C               	addwfc	___aomod@divisor+3,f,c
  2173  000DF8  220D               	addwfc	___aomod@divisor+4,f,c
  2174  000DFA  220E               	addwfc	___aomod@divisor+5,f,c
  2175  000DFC  220F               	addwfc	___aomod@divisor+6,f,c
  2176  000DFE  2210               	addwfc	___aomod@divisor+7,f,c
  2177  000E00                     l1585:
  2178  000E00  5009               	movf	___aomod@divisor,w,c
  2179  000E02  100A               	iorwf	___aomod@divisor+1,w,c
  2180  000E04  100B               	iorwf	___aomod@divisor+2,w,c
  2181  000E06  100C               	iorwf	___aomod@divisor+3,w,c
  2182  000E08  100D               	iorwf	___aomod@divisor+4,w,c
  2183  000E0A  100E               	iorwf	___aomod@divisor+5,w,c
  2184  000E0C  100F               	iorwf	___aomod@divisor+6,w,c
  2185  000E0E  1010               	iorwf	___aomod@divisor+7,w,c
  2186  000E10  B4D8               	btfsc	status,2,c
  2187  000E12  D03C               	goto	l1601
  2188  000E14  0E01               	movlw	1
  2189  000E16  6E11               	movwf	___aomod@counter,c
  2190  000E18  D00A               	goto	l1591
  2191  000E1A                     l1589:
  2192  000E1A  90D8               	bcf	status,0,c
  2193  000E1C  3609               	rlcf	___aomod@divisor,f,c
  2194  000E1E  360A               	rlcf	___aomod@divisor+1,f,c
  2195  000E20  360B               	rlcf	___aomod@divisor+2,f,c
  2196  000E22  360C               	rlcf	___aomod@divisor+3,f,c
  2197  000E24  360D               	rlcf	___aomod@divisor+4,f,c
  2198  000E26  360E               	rlcf	___aomod@divisor+5,f,c
  2199  000E28  360F               	rlcf	___aomod@divisor+6,f,c
  2200  000E2A  3610               	rlcf	___aomod@divisor+7,f,c
  2201  000E2C  2A11               	incf	___aomod@counter,f,c
  2202  000E2E                     l1591:
  2203  000E2E  AE10               	btfss	___aomod@divisor+7,7,c
  2204  000E30  D7F4               	goto	l1589
  2205  000E32                     u970:
  2206  000E32  5009               	movf	___aomod@divisor,w,c
  2207  000E34  5C01               	subwf	___aomod@dividend,w,c
  2208  000E36  500A               	movf	___aomod@divisor+1,w,c
  2209  000E38  5802               	subwfb	___aomod@dividend+1,w,c
  2210  000E3A  500B               	movf	___aomod@divisor+2,w,c
  2211  000E3C  5803               	subwfb	___aomod@dividend+2,w,c
  2212  000E3E  500C               	movf	___aomod@divisor+3,w,c
  2213  000E40  5804               	subwfb	___aomod@dividend+3,w,c
  2214  000E42  500D               	movf	___aomod@divisor+4,w,c
  2215  000E44  5805               	subwfb	___aomod@dividend+4,w,c
  2216  000E46  500E               	movf	___aomod@divisor+5,w,c
  2217  000E48  5806               	subwfb	___aomod@dividend+5,w,c
  2218  000E4A  500F               	movf	___aomod@divisor+6,w,c
  2219  000E4C  5807               	subwfb	___aomod@dividend+6,w,c
  2220  000E4E  5010               	movf	___aomod@divisor+7,w,c
  2221  000E50  5808               	subwfb	___aomod@dividend+7,w,c
  2222  000E52  A0D8               	btfss	status,0,c
  2223  000E54  D010               	goto	l1597
  2224  000E56  5009               	movf	___aomod@divisor,w,c
  2225  000E58  5E01               	subwf	___aomod@dividend,f,c
  2226  000E5A  500A               	movf	___aomod@divisor+1,w,c
  2227  000E5C  5A02               	subwfb	___aomod@dividend+1,f,c
  2228  000E5E  500B               	movf	___aomod@divisor+2,w,c
  2229  000E60  5A03               	subwfb	___aomod@dividend+2,f,c
  2230  000E62  500C               	movf	___aomod@divisor+3,w,c
  2231  000E64  5A04               	subwfb	___aomod@dividend+3,f,c
  2232  000E66  500D               	movf	___aomod@divisor+4,w,c
  2233  000E68  5A05               	subwfb	___aomod@dividend+4,f,c
  2234  000E6A  500E               	movf	___aomod@divisor+5,w,c
  2235  000E6C  5A06               	subwfb	___aomod@dividend+5,f,c
  2236  000E6E  500F               	movf	___aomod@divisor+6,w,c
  2237  000E70  5A07               	subwfb	___aomod@dividend+6,f,c
  2238  000E72  5010               	movf	___aomod@divisor+7,w,c
  2239  000E74  5A08               	subwfb	___aomod@dividend+7,f,c
  2240  000E76                     l1597:
  2241  000E76  90D8               	bcf	status,0,c
  2242  000E78  3210               	rrcf	___aomod@divisor+7,f,c
  2243  000E7A  320F               	rrcf	___aomod@divisor+6,f,c
  2244  000E7C  320E               	rrcf	___aomod@divisor+5,f,c
  2245  000E7E  320D               	rrcf	___aomod@divisor+4,f,c
  2246  000E80  320C               	rrcf	___aomod@divisor+3,f,c
  2247  000E82  320B               	rrcf	___aomod@divisor+2,f,c
  2248  000E84  320A               	rrcf	___aomod@divisor+1,f,c
  2249  000E86  3209               	rrcf	___aomod@divisor,f,c
  2250  000E88  2E11               	decfsz	___aomod@counter,f,c
  2251  000E8A  D7D3               	goto	u970
  2252  000E8C                     l1601:
  2253  000E8C  5012               	movf	___aomod@sign,w,c
  2254  000E8E  B4D8               	btfsc	status,2,c
  2255  000E90  D010               	goto	l1605
  2256  000E92  1E08               	comf	___aomod@dividend+7,f,c
  2257  000E94  1E07               	comf	___aomod@dividend+6,f,c
  2258  000E96  1E06               	comf	___aomod@dividend+5,f,c
  2259  000E98  1E05               	comf	___aomod@dividend+4,f,c
  2260  000E9A  1E04               	comf	___aomod@dividend+3,f,c
  2261  000E9C  1E03               	comf	___aomod@dividend+2,f,c
  2262  000E9E  1E02               	comf	___aomod@dividend+1,f,c
  2263  000EA0  6C01               	negf	___aomod@dividend,c
  2264  000EA2  0E00               	movlw	0
  2265  000EA4  2202               	addwfc	___aomod@dividend+1,f,c
  2266  000EA6  2203               	addwfc	___aomod@dividend+2,f,c
  2267  000EA8  2204               	addwfc	___aomod@dividend+3,f,c
  2268  000EAA  2205               	addwfc	___aomod@dividend+4,f,c
  2269  000EAC  2206               	addwfc	___aomod@dividend+5,f,c
  2270  000EAE  2207               	addwfc	___aomod@dividend+6,f,c
  2271  000EB0  2208               	addwfc	___aomod@dividend+7,f,c
  2272  000EB2                     l1605:
  2273  000EB2  C001  F001         	movff	___aomod@dividend,?___aomod
  2274  000EB6  C002  F002         	movff	___aomod@dividend+1,?___aomod+1
  2275  000EBA  C003  F003         	movff	___aomod@dividend+2,?___aomod+2
  2276  000EBE  C004  F004         	movff	___aomod@dividend+3,?___aomod+3
  2277  000EC2  C005  F005         	movff	___aomod@dividend+4,?___aomod+4
  2278  000EC6  C006  F006         	movff	___aomod@dividend+5,?___aomod+5
  2279  000ECA  C007  F007         	movff	___aomod@dividend+6,?___aomod+6
  2280  000ECE  C008  F008         	movff	___aomod@dividend+7,?___aomod+7
  2281  000ED2  0012               	return		;funcret
  2282  000ED4                     __end_of___aomod:
  2283                           	opt callstack 0
  2284                           
  2285 ;; *************** function ___aodiv *****************
  2286 ;; Defined at:
  2287 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aodiv.c"
  2288 ;; Parameters:    Size  Location     Type
  2289 ;;  dividend        8    0[COMRAM] long long 
  2290 ;;  divisor         8    8[COMRAM] long long 
  2291 ;; Auto vars:     Size  Location     Type
  2292 ;;  quotient        8   18[COMRAM] long long 
  2293 ;;  sign            1   17[COMRAM] unsigned char 
  2294 ;;  counter         1   16[COMRAM] unsigned char 
  2295 ;; Return value:  Size  Location     Type
  2296 ;;                  8    0[COMRAM] long long 
  2297 ;; Registers used:
  2298 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2299 ;; Tracked objects:
  2300 ;;		On entry : 0/0
  2301 ;;		On exit  : 0/0
  2302 ;;		Unchanged: 0/0
  2303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2304 ;;      Params:        16       0       0       0       0       0       0
  2305 ;;      Locals:        10       0       0       0       0       0       0
  2306 ;;      Temps:          0       0       0       0       0       0       0
  2307 ;;      Totals:        26       0       0       0       0       0       0
  2308 ;;Total ram usage:       26 bytes
  2309 ;; Hardware stack levels used:    1
  2310 ;; Hardware stack levels required when called:    1
  2311 ;; This function calls:
  2312 ;;		Nothing
  2313 ;; This function is called by:
  2314 ;;		_dtoa
  2315 ;; This function uses a non-reentrant model
  2316 ;;
  2317                           
  2318                           	psect	text12
  2319  000B28                     __ptext12:
  2320                           	opt callstack 0
  2321  000B28                     ___aodiv:
  2322                           	opt callstack 25
  2323                           
  2324                           ;incstack = 0
  2325  000B28  0E00               	movlw	0
  2326  000B2A  6E12               	movwf	___aodiv@sign,c
  2327  000B2C  AE10               	btfss	___aodiv@divisor+7,7,c
  2328  000B2E  D012               	goto	l1537
  2329  000B30  1E10               	comf	___aodiv@divisor+7,f,c
  2330  000B32  1E0F               	comf	___aodiv@divisor+6,f,c
  2331  000B34  1E0E               	comf	___aodiv@divisor+5,f,c
  2332  000B36  1E0D               	comf	___aodiv@divisor+4,f,c
  2333  000B38  1E0C               	comf	___aodiv@divisor+3,f,c
  2334  000B3A  1E0B               	comf	___aodiv@divisor+2,f,c
  2335  000B3C  1E0A               	comf	___aodiv@divisor+1,f,c
  2336  000B3E  6C09               	negf	___aodiv@divisor,c
  2337  000B40  0E00               	movlw	0
  2338  000B42  220A               	addwfc	___aodiv@divisor+1,f,c
  2339  000B44  220B               	addwfc	___aodiv@divisor+2,f,c
  2340  000B46  220C               	addwfc	___aodiv@divisor+3,f,c
  2341  000B48  220D               	addwfc	___aodiv@divisor+4,f,c
  2342  000B4A  220E               	addwfc	___aodiv@divisor+5,f,c
  2343  000B4C  220F               	addwfc	___aodiv@divisor+6,f,c
  2344  000B4E  2210               	addwfc	___aodiv@divisor+7,f,c
  2345  000B50  0E01               	movlw	1
  2346  000B52  6E12               	movwf	___aodiv@sign,c
  2347  000B54                     l1537:
  2348  000B54  AE08               	btfss	___aodiv@dividend+7,7,c
  2349  000B56  D012               	goto	l1543
  2350  000B58  1E08               	comf	___aodiv@dividend+7,f,c
  2351  000B5A  1E07               	comf	___aodiv@dividend+6,f,c
  2352  000B5C  1E06               	comf	___aodiv@dividend+5,f,c
  2353  000B5E  1E05               	comf	___aodiv@dividend+4,f,c
  2354  000B60  1E04               	comf	___aodiv@dividend+3,f,c
  2355  000B62  1E03               	comf	___aodiv@dividend+2,f,c
  2356  000B64  1E02               	comf	___aodiv@dividend+1,f,c
  2357  000B66  6C01               	negf	___aodiv@dividend,c
  2358  000B68  0E00               	movlw	0
  2359  000B6A  2202               	addwfc	___aodiv@dividend+1,f,c
  2360  000B6C  2203               	addwfc	___aodiv@dividend+2,f,c
  2361  000B6E  2204               	addwfc	___aodiv@dividend+3,f,c
  2362  000B70  2205               	addwfc	___aodiv@dividend+4,f,c
  2363  000B72  2206               	addwfc	___aodiv@dividend+5,f,c
  2364  000B74  2207               	addwfc	___aodiv@dividend+6,f,c
  2365  000B76  2208               	addwfc	___aodiv@dividend+7,f,c
  2366  000B78  0E01               	movlw	1
  2367  000B7A  1A12               	xorwf	___aodiv@sign,f,c
  2368  000B7C                     l1543:
  2369  000B7C  EE20  F013         	lfsr	2,___aodiv@quotient
  2370  000B80  0E07               	movlw	7
  2371  000B82                     u891:
  2372  000B82  6ADE               	clrf	postinc2,c
  2373  000B84  06E8               	decf	wreg,f,c
  2374  000B86  E2FD               	bc	u891
  2375  000B88  5009               	movf	___aodiv@divisor,w,c
  2376  000B8A  100A               	iorwf	___aodiv@divisor+1,w,c
  2377  000B8C  100B               	iorwf	___aodiv@divisor+2,w,c
  2378  000B8E  100C               	iorwf	___aodiv@divisor+3,w,c
  2379  000B90  100D               	iorwf	___aodiv@divisor+4,w,c
  2380  000B92  100E               	iorwf	___aodiv@divisor+5,w,c
  2381  000B94  100F               	iorwf	___aodiv@divisor+6,w,c
  2382  000B96  1010               	iorwf	___aodiv@divisor+7,w,c
  2383  000B98  B4D8               	btfsc	status,2,c
  2384  000B9A  D046               	goto	l1565
  2385  000B9C  0E01               	movlw	1
  2386  000B9E  6E11               	movwf	___aodiv@counter,c
  2387  000BA0  D00A               	goto	l1551
  2388  000BA2                     l1549:
  2389  000BA2  90D8               	bcf	status,0,c
  2390  000BA4  3609               	rlcf	___aodiv@divisor,f,c
  2391  000BA6  360A               	rlcf	___aodiv@divisor+1,f,c
  2392  000BA8  360B               	rlcf	___aodiv@divisor+2,f,c
  2393  000BAA  360C               	rlcf	___aodiv@divisor+3,f,c
  2394  000BAC  360D               	rlcf	___aodiv@divisor+4,f,c
  2395  000BAE  360E               	rlcf	___aodiv@divisor+5,f,c
  2396  000BB0  360F               	rlcf	___aodiv@divisor+6,f,c
  2397  000BB2  3610               	rlcf	___aodiv@divisor+7,f,c
  2398  000BB4  2A11               	incf	___aodiv@counter,f,c
  2399  000BB6                     l1551:
  2400  000BB6  AE10               	btfss	___aodiv@divisor+7,7,c
  2401  000BB8  D7F4               	goto	l1549
  2402  000BBA                     u910:
  2403  000BBA  90D8               	bcf	status,0,c
  2404  000BBC  3613               	rlcf	___aodiv@quotient,f,c
  2405  000BBE  3614               	rlcf	___aodiv@quotient+1,f,c
  2406  000BC0  3615               	rlcf	___aodiv@quotient+2,f,c
  2407  000BC2  3616               	rlcf	___aodiv@quotient+3,f,c
  2408  000BC4  3617               	rlcf	___aodiv@quotient+4,f,c
  2409  000BC6  3618               	rlcf	___aodiv@quotient+5,f,c
  2410  000BC8  3619               	rlcf	___aodiv@quotient+6,f,c
  2411  000BCA  361A               	rlcf	___aodiv@quotient+7,f,c
  2412  000BCC  5009               	movf	___aodiv@divisor,w,c
  2413  000BCE  5C01               	subwf	___aodiv@dividend,w,c
  2414  000BD0  500A               	movf	___aodiv@divisor+1,w,c
  2415  000BD2  5802               	subwfb	___aodiv@dividend+1,w,c
  2416  000BD4  500B               	movf	___aodiv@divisor+2,w,c
  2417  000BD6  5803               	subwfb	___aodiv@dividend+2,w,c
  2418  000BD8  500C               	movf	___aodiv@divisor+3,w,c
  2419  000BDA  5804               	subwfb	___aodiv@dividend+3,w,c
  2420  000BDC  500D               	movf	___aodiv@divisor+4,w,c
  2421  000BDE  5805               	subwfb	___aodiv@dividend+4,w,c
  2422  000BE0  500E               	movf	___aodiv@divisor+5,w,c
  2423  000BE2  5806               	subwfb	___aodiv@dividend+5,w,c
  2424  000BE4  500F               	movf	___aodiv@divisor+6,w,c
  2425  000BE6  5807               	subwfb	___aodiv@dividend+6,w,c
  2426  000BE8  5010               	movf	___aodiv@divisor+7,w,c
  2427  000BEA  5808               	subwfb	___aodiv@dividend+7,w,c
  2428  000BEC  A0D8               	btfss	status,0,c
  2429  000BEE  D011               	goto	l1561
  2430  000BF0  5009               	movf	___aodiv@divisor,w,c
  2431  000BF2  5E01               	subwf	___aodiv@dividend,f,c
  2432  000BF4  500A               	movf	___aodiv@divisor+1,w,c
  2433  000BF6  5A02               	subwfb	___aodiv@dividend+1,f,c
  2434  000BF8  500B               	movf	___aodiv@divisor+2,w,c
  2435  000BFA  5A03               	subwfb	___aodiv@dividend+2,f,c
  2436  000BFC  500C               	movf	___aodiv@divisor+3,w,c
  2437  000BFE  5A04               	subwfb	___aodiv@dividend+3,f,c
  2438  000C00  500D               	movf	___aodiv@divisor+4,w,c
  2439  000C02  5A05               	subwfb	___aodiv@dividend+4,f,c
  2440  000C04  500E               	movf	___aodiv@divisor+5,w,c
  2441  000C06  5A06               	subwfb	___aodiv@dividend+5,f,c
  2442  000C08  500F               	movf	___aodiv@divisor+6,w,c
  2443  000C0A  5A07               	subwfb	___aodiv@dividend+6,f,c
  2444  000C0C  5010               	movf	___aodiv@divisor+7,w,c
  2445  000C0E  5A08               	subwfb	___aodiv@dividend+7,f,c
  2446  000C10  8013               	bsf	___aodiv@quotient,0,c
  2447  000C12                     l1561:
  2448  000C12  90D8               	bcf	status,0,c
  2449  000C14  3210               	rrcf	___aodiv@divisor+7,f,c
  2450  000C16  320F               	rrcf	___aodiv@divisor+6,f,c
  2451  000C18  320E               	rrcf	___aodiv@divisor+5,f,c
  2452  000C1A  320D               	rrcf	___aodiv@divisor+4,f,c
  2453  000C1C  320C               	rrcf	___aodiv@divisor+3,f,c
  2454  000C1E  320B               	rrcf	___aodiv@divisor+2,f,c
  2455  000C20  320A               	rrcf	___aodiv@divisor+1,f,c
  2456  000C22  3209               	rrcf	___aodiv@divisor,f,c
  2457  000C24  2E11               	decfsz	___aodiv@counter,f,c
  2458  000C26  D7C9               	goto	u910
  2459  000C28                     l1565:
  2460  000C28  5012               	movf	___aodiv@sign,w,c
  2461  000C2A  B4D8               	btfsc	status,2,c
  2462  000C2C  D010               	goto	l1569
  2463  000C2E  1E1A               	comf	___aodiv@quotient+7,f,c
  2464  000C30  1E19               	comf	___aodiv@quotient+6,f,c
  2465  000C32  1E18               	comf	___aodiv@quotient+5,f,c
  2466  000C34  1E17               	comf	___aodiv@quotient+4,f,c
  2467  000C36  1E16               	comf	___aodiv@quotient+3,f,c
  2468  000C38  1E15               	comf	___aodiv@quotient+2,f,c
  2469  000C3A  1E14               	comf	___aodiv@quotient+1,f,c
  2470  000C3C  6C13               	negf	___aodiv@quotient,c
  2471  000C3E  0E00               	movlw	0
  2472  000C40  2214               	addwfc	___aodiv@quotient+1,f,c
  2473  000C42  2215               	addwfc	___aodiv@quotient+2,f,c
  2474  000C44  2216               	addwfc	___aodiv@quotient+3,f,c
  2475  000C46  2217               	addwfc	___aodiv@quotient+4,f,c
  2476  000C48  2218               	addwfc	___aodiv@quotient+5,f,c
  2477  000C4A  2219               	addwfc	___aodiv@quotient+6,f,c
  2478  000C4C  221A               	addwfc	___aodiv@quotient+7,f,c
  2479  000C4E                     l1569:
  2480  000C4E  C013  F001         	movff	___aodiv@quotient,?___aodiv
  2481  000C52  C014  F002         	movff	___aodiv@quotient+1,?___aodiv+1
  2482  000C56  C015  F003         	movff	___aodiv@quotient+2,?___aodiv+2
  2483  000C5A  C016  F004         	movff	___aodiv@quotient+3,?___aodiv+3
  2484  000C5E  C017  F005         	movff	___aodiv@quotient+4,?___aodiv+4
  2485  000C62  C018  F006         	movff	___aodiv@quotient+5,?___aodiv+5
  2486  000C66  C019  F007         	movff	___aodiv@quotient+6,?___aodiv+6
  2487  000C6A  C01A  F008         	movff	___aodiv@quotient+7,?___aodiv+7
  2488  000C6E  0012               	return		;funcret
  2489  000C70                     __end_of___aodiv:
  2490                           	opt callstack 0
  2491                           
  2492 ;; *************** function _atoi *****************
  2493 ;; Defined at:
  2494 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\atoi.c"
  2495 ;; Parameters:    Size  Location     Type
  2496 ;;  s               2    7[COMRAM] PTR const unsigned char 
  2497 ;;		 -> STR_3(5), 
  2498 ;; Auto vars:     Size  Location     Type
  2499 ;;  n               2   20[COMRAM] int 
  2500 ;;  neg             2   13[COMRAM] int 
  2501 ;; Return value:  Size  Location     Type
  2502 ;;                  2    7[COMRAM] int 
  2503 ;; Registers used:
  2504 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2505 ;; Tracked objects:
  2506 ;;		On entry : 0/0
  2507 ;;		On exit  : 0/0
  2508 ;;		Unchanged: 0/0
  2509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2510 ;;      Params:         2       0       0       0       0       0       0
  2511 ;;      Locals:         9       0       0       0       0       0       0
  2512 ;;      Temps:          4       0       0       0       0       0       0
  2513 ;;      Totals:        15       0       0       0       0       0       0
  2514 ;;Total ram usage:       15 bytes
  2515 ;; Hardware stack levels used:    1
  2516 ;; Hardware stack levels required when called:    2
  2517 ;; This function calls:
  2518 ;;		___wmul
  2519 ;;		_isdigit
  2520 ;;		_isspace
  2521 ;; This function is called by:
  2522 ;;		_vfpfcnvrt
  2523 ;; This function uses a non-reentrant model
  2524 ;;
  2525                           
  2526                           	psect	text13
  2527  000C70                     __ptext13:
  2528                           	opt callstack 0
  2529  000C70                     _atoi:
  2530                           	opt callstack 25
  2531                           
  2532                           ;incstack = 0
  2533  000C70  0E00               	movlw	0
  2534  000C72  6E16               	movwf	atoi@n+1,c
  2535  000C74  0E00               	movlw	0
  2536  000C76  6E15               	movwf	atoi@n,c
  2537  000C78  0E00               	movlw	0
  2538  000C7A  6E0F               	movwf	atoi@neg+1,c
  2539  000C7C  0E00               	movlw	0
  2540  000C7E  6E0E               	movwf	atoi@neg,c
  2541  000C80  D002               	goto	l1699
  2542  000C82                     l1697:
  2543  000C82  4A08               	infsnz	atoi@s,f,c
  2544  000C84  2A09               	incf	atoi@s+1,f,c
  2545  000C86                     l1699:
  2546  000C86  0E01               	movlw	1
  2547  000C88  6E14               	movwf	_atoi$867,c
  2548  000C8A  C008  FFF6         	movff	atoi@s,tblptrl
  2549  000C8E  C009  FFF7         	movff	atoi@s+1,tblptrh
  2550  000C92                     	if	0	;tblptru may be non-zero
  2551  000C92                     	endif
  2552  000C92                     	if	0	;tblptru may be non-zero
  2553  000C92                     	endif
  2554  000C92  0008               	tblrd		*
  2555  000C94  50F5               	movf	tablat,w,c
  2556  000C96  0A20               	xorlw	32
  2557  000C98  B4D8               	btfsc	status,2,c
  2558  000C9A  D018               	goto	l1707
  2559  000C9C  0EF7               	movlw	247
  2560  000C9E  6E0A               	movwf	??_atoi& (0+255),c
  2561  000CA0  0EFF               	movlw	255
  2562  000CA2  6E0B               	movwf	(??_atoi+1)& (0+255),c
  2563  000CA4  C008  FFF6         	movff	atoi@s,tblptrl
  2564  000CA8  C009  FFF7         	movff	atoi@s+1,tblptrh
  2565  000CAC                     	if	0	;tblptru may be non-zero
  2566  000CAC                     	endif
  2567  000CAC                     	if	0	;tblptru may be non-zero
  2568  000CAC                     	endif
  2569  000CAC  0008               	tblrd		*
  2570  000CAE  50F5               	movf	tablat,w,c
  2571  000CB0  6E0C               	movwf	(??_atoi+2)& (0+255),c
  2572  000CB2  6A0D               	clrf	(??_atoi+3)& (0+255),c
  2573  000CB4  500A               	movf	??_atoi,w,c
  2574  000CB6  260C               	addwf	??_atoi+2,f,c
  2575  000CB8  500B               	movf	??_atoi+1,w,c
  2576  000CBA  220D               	addwfc	??_atoi+3,f,c
  2577  000CBC  500D               	movf	??_atoi+3,w,c
  2578  000CBE  E104               	bnz	u1190
  2579  000CC0  0E05               	movlw	5
  2580  000CC2  5C0C               	subwf	??_atoi+2,w,c
  2581  000CC4  A0D8               	btfss	status,0,c
  2582  000CC6  D002               	goto	l1707
  2583  000CC8                     u1190:
  2584  000CC8  0E00               	movlw	0
  2585  000CCA  6E14               	movwf	_atoi$867,c
  2586  000CCC                     l1707:
  2587  000CCC  C014  F010         	movff	_atoi$867,_atoi$866
  2588  000CD0  6A11               	clrf	_atoi$866+1,c
  2589  000CD2  5010               	movf	_atoi$866,w,c
  2590  000CD4  1011               	iorwf	_atoi$866+1,w,c
  2591  000CD6  B4D8               	btfsc	status,2,c
  2592  000CD8  D008               	goto	l1717
  2593  000CDA  D7D3               	goto	l1697
  2594  000CDC                     l1713:
  2595  000CDC  0E00               	movlw	0
  2596  000CDE  6E0F               	movwf	atoi@neg+1,c
  2597  000CE0  0E01               	movlw	1
  2598  000CE2  6E0E               	movwf	atoi@neg,c
  2599  000CE4                     l1715:
  2600  000CE4  4A08               	infsnz	atoi@s,f,c
  2601  000CE6  2A09               	incf	atoi@s+1,f,c
  2602  000CE8  D02E               	goto	l1723
  2603  000CEA                     l1717:
  2604  000CEA  C008  FFF6         	movff	atoi@s,tblptrl
  2605  000CEE  C009  FFF7         	movff	atoi@s+1,tblptrh
  2606  000CF2                     	if	0	;tblptru may be non-zero
  2607  000CF2                     	endif
  2608  000CF2                     	if	0	;tblptru may be non-zero
  2609  000CF2                     	endif
  2610  000CF2  0008               	tblrd		*
  2611  000CF4  50F5               	movf	tablat,w,c
  2612  000CF6  6E0A               	movwf	??_atoi& (0+255),c
  2613  000CF8  6A0B               	clrf	(??_atoi+1)& (0+255),c
  2614                           
  2615                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2616                           ; Switch size 1, requested type "simple"
  2617                           ; Number of cases is 1, Range of values is 0 to 0
  2618                           ; switch strategies available:
  2619                           ; Name         Instructions Cycles
  2620                           ; simple_byte            4     3 (average)
  2621                           ;	Chosen strategy is simple_byte
  2622  000CFA  500B               	movf	??_atoi+1,w,c
  2623  000CFC  0A00               	xorlw	0	; case 0
  2624  000CFE  A4D8               	btfss	status,2,c
  2625  000D00  D022               	goto	l1723
  2626                           
  2627                           ; Switch size 1, requested type "simple"
  2628                           ; Number of cases is 2, Range of values is 43 to 45
  2629                           ; switch strategies available:
  2630                           ; Name         Instructions Cycles
  2631                           ; simple_byte            7     4 (average)
  2632                           ;	Chosen strategy is simple_byte
  2633  000D02  500A               	movf	??_atoi,w,c
  2634  000D04  0A2B               	xorlw	43	; case 43
  2635  000D06  B4D8               	btfsc	status,2,c
  2636  000D08  D7ED               	goto	l1715
  2637  000D0A  0A06               	xorlw	6	; case 45
  2638  000D0C  B4D8               	btfsc	status,2,c
  2639  000D0E  D7E6               	goto	l1713
  2640  000D10  D01A               	goto	l1723
  2641  000D12                     l1719:
  2642  000D12  C015  F001         	movff	atoi@n,___wmul@multiplier
  2643  000D16  C016  F002         	movff	atoi@n+1,___wmul@multiplier+1
  2644  000D1A  0E00               	movlw	0
  2645  000D1C  6E04               	movwf	___wmul@multiplicand+1,c
  2646  000D1E  0E0A               	movlw	10
  2647  000D20  6E03               	movwf	___wmul@multiplicand,c
  2648  000D22  EC47  F00A         	call	___wmul	;wreg free
  2649  000D26  C008  FFF6         	movff	atoi@s,tblptrl
  2650  000D2A  C009  FFF7         	movff	atoi@s+1,tblptrh
  2651  000D2E                     	if	0	;tblptru may be non-zero
  2652  000D2E                     	endif
  2653  000D2E                     	if	0	;tblptru may be non-zero
  2654  000D2E                     	endif
  2655  000D2E  0008               	tblrd		*
  2656  000D30  50F5               	movf	tablat,w,c
  2657  000D32  5E01               	subwf	?___wmul,f,c
  2658  000D34  0E00               	movlw	0
  2659  000D36  5A02               	subwfb	?___wmul+1,f,c
  2660  000D38  0E30               	movlw	48
  2661  000D3A  2401               	addwf	?___wmul,w,c
  2662  000D3C  6E15               	movwf	atoi@n,c
  2663  000D3E  0E00               	movlw	0
  2664  000D40  2002               	addwfc	?___wmul+1,w,c
  2665  000D42  6E16               	movwf	atoi@n+1,c
  2666  000D44  D7CF               	goto	l1715
  2667  000D46                     l1723:
  2668  000D46  0ED0               	movlw	208
  2669  000D48  6E0A               	movwf	??_atoi& (0+255),c
  2670  000D4A  0EFF               	movlw	255
  2671  000D4C  6E0B               	movwf	(??_atoi+1)& (0+255),c
  2672  000D4E  C008  FFF6         	movff	atoi@s,tblptrl
  2673  000D52  C009  FFF7         	movff	atoi@s+1,tblptrh
  2674  000D56                     	if	0	;tblptru may be non-zero
  2675  000D56                     	endif
  2676  000D56                     	if	0	;tblptru may be non-zero
  2677  000D56                     	endif
  2678  000D56  0008               	tblrd		*
  2679  000D58  50F5               	movf	tablat,w,c
  2680  000D5A  6E0C               	movwf	(??_atoi+2)& (0+255),c
  2681  000D5C  6A0D               	clrf	(??_atoi+3)& (0+255),c
  2682  000D5E  500A               	movf	??_atoi,w,c
  2683  000D60  260C               	addwf	??_atoi+2,f,c
  2684  000D62  500B               	movf	??_atoi+1,w,c
  2685  000D64  220D               	addwfc	??_atoi+3,f,c
  2686  000D66  500D               	movf	??_atoi+3,w,c
  2687  000D68  E106               	bnz	u1210
  2688  000D6A  0E0A               	movlw	10
  2689  000D6C  5C0C               	subwf	??_atoi+2,w,c
  2690  000D6E  B0D8               	btfsc	status,0,c
  2691  000D70  D002               	goto	u1210
  2692  000D72  0E01               	movlw	1
  2693  000D74  D001               	goto	u1220
  2694  000D76                     u1210:
  2695  000D76  0E00               	movlw	0
  2696  000D78                     u1220:
  2697  000D78  6E12               	movwf	_atoi$868,c
  2698  000D7A  6A13               	clrf	_atoi$868+1,c
  2699  000D7C  5012               	movf	_atoi$868,w,c
  2700  000D7E  1013               	iorwf	_atoi$868+1,w,c
  2701  000D80  A4D8               	btfss	status,2,c
  2702  000D82  D7C7               	goto	l1719
  2703  000D84  500E               	movf	atoi@neg,w,c
  2704  000D86  100F               	iorwf	atoi@neg+1,w,c
  2705  000D88  A4D8               	btfss	status,2,c
  2706  000D8A  D00D               	goto	l890
  2707  000D8C  C015  F00A         	movff	atoi@n,??_atoi
  2708  000D90  C016  F00B         	movff	atoi@n+1,??_atoi+1
  2709  000D94  1E0A               	comf	??_atoi,f,c
  2710  000D96  1E0B               	comf	??_atoi+1,f,c
  2711  000D98  4A0A               	infsnz	??_atoi,f,c
  2712  000D9A  2A0B               	incf	??_atoi+1,f,c
  2713  000D9C  C00A  F008         	movff	??_atoi,?_atoi
  2714  000DA0  C00B  F009         	movff	??_atoi+1,?_atoi+1
  2715  000DA4  0012               	return	
  2716  000DA6                     l890:
  2717  000DA6  C015  F008         	movff	atoi@n,?_atoi
  2718  000DAA  C016  F009         	movff	atoi@n+1,?_atoi+1
  2719  000DAE  0012               	return		;funcret
  2720  000DB0                     __end_of_atoi:
  2721                           	opt callstack 0
  2722                           
  2723 ;; *************** function _isspace *****************
  2724 ;; Defined at:
  2725 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\isspace.c"
  2726 ;; Parameters:    Size  Location     Type
  2727 ;;  c               2    0[COMRAM] int 
  2728 ;; Auto vars:     Size  Location     Type
  2729 ;;		None
  2730 ;; Return value:  Size  Location     Type
  2731 ;;                  2    0[COMRAM] int 
  2732 ;; Registers used:
  2733 ;;		wreg, status,2, status,0
  2734 ;; Tracked objects:
  2735 ;;		On entry : 0/0
  2736 ;;		On exit  : 0/0
  2737 ;;		Unchanged: 0/0
  2738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2739 ;;      Params:         2       0       0       0       0       0       0
  2740 ;;      Locals:         1       0       0       0       0       0       0
  2741 ;;      Temps:          4       0       0       0       0       0       0
  2742 ;;      Totals:         7       0       0       0       0       0       0
  2743 ;;Total ram usage:        7 bytes
  2744 ;; Hardware stack levels used:    1
  2745 ;; Hardware stack levels required when called:    1
  2746 ;; This function calls:
  2747 ;;		Nothing
  2748 ;; This function is called by:
  2749 ;;		_atoi
  2750 ;; This function uses a non-reentrant model
  2751 ;;
  2752                           
  2753                           	psect	text14
  2754  001366                     __ptext14:
  2755                           	opt callstack 0
  2756  001366                     _isspace:
  2757                           	opt callstack 25
  2758                           
  2759                           ;incstack = 0
  2760  001366  0E01               	movlw	1
  2761  001368  6E07               	movwf	_isspace$884,c
  2762  00136A  0E20               	movlw	32
  2763  00136C  1801               	xorwf	isspace@c,w,c
  2764  00136E  1002               	iorwf	isspace@c+1,w,c
  2765  001370  B4D8               	btfsc	status,2,c
  2766  001372  D014               	goto	l1617
  2767  001374  0EF7               	movlw	247
  2768  001376  6E03               	movwf	??_isspace& (0+255),c
  2769  001378  0EFF               	movlw	255
  2770  00137A  6E04               	movwf	(??_isspace+1)& (0+255),c
  2771  00137C  C001  F005         	movff	isspace@c,??_isspace+2
  2772  001380  C002  F006         	movff	isspace@c+1,??_isspace+3
  2773  001384  5003               	movf	??_isspace,w,c
  2774  001386  2605               	addwf	??_isspace+2,f,c
  2775  001388  5004               	movf	??_isspace+1,w,c
  2776  00138A  2206               	addwfc	??_isspace+3,f,c
  2777  00138C  5006               	movf	??_isspace+3,w,c
  2778  00138E  E104               	bnz	u1010
  2779  001390  0E05               	movlw	5
  2780  001392  5C05               	subwf	??_isspace+2,w,c
  2781  001394  A0D8               	btfss	status,0,c
  2782  001396  D002               	goto	l1617
  2783  001398                     u1010:
  2784  001398  0E00               	movlw	0
  2785  00139A  6E07               	movwf	_isspace$884,c
  2786  00139C                     l1617:
  2787  00139C  C007  F001         	movff	_isspace$884,?_isspace
  2788  0013A0  6A02               	clrf	?_isspace+1,c
  2789  0013A2  0012               	return		;funcret
  2790  0013A4                     __end_of_isspace:
  2791                           	opt callstack 0
  2792                           
  2793 ;; *************** function _isdigit *****************
  2794 ;; Defined at:
  2795 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\isdigit.c"
  2796 ;; Parameters:    Size  Location     Type
  2797 ;;  c               2    0[COMRAM] int 
  2798 ;; Auto vars:     Size  Location     Type
  2799 ;;		None
  2800 ;; Return value:  Size  Location     Type
  2801 ;;                  2    0[COMRAM] int 
  2802 ;; Registers used:
  2803 ;;		wreg, status,2, status,0
  2804 ;; Tracked objects:
  2805 ;;		On entry : 0/0
  2806 ;;		On exit  : 0/0
  2807 ;;		Unchanged: 0/0
  2808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2809 ;;      Params:         2       0       0       0       0       0       0
  2810 ;;      Locals:         0       0       0       0       0       0       0
  2811 ;;      Temps:          4       0       0       0       0       0       0
  2812 ;;      Totals:         6       0       0       0       0       0       0
  2813 ;;Total ram usage:        6 bytes
  2814 ;; Hardware stack levels used:    1
  2815 ;; Hardware stack levels required when called:    1
  2816 ;; This function calls:
  2817 ;;		Nothing
  2818 ;; This function is called by:
  2819 ;;		_vfpfcnvrt
  2820 ;;		_atoi
  2821 ;; This function uses a non-reentrant model
  2822 ;;
  2823                           
  2824                           	psect	text15
  2825  00140E                     __ptext15:
  2826                           	opt callstack 0
  2827  00140E                     _isdigit:
  2828                           	opt callstack 26
  2829                           
  2830                           ;incstack = 0
  2831  00140E  0ED0               	movlw	208
  2832  001410  6E03               	movwf	??_isdigit& (0+255),c
  2833  001412  0EFF               	movlw	255
  2834  001414  6E04               	movwf	(??_isdigit+1)& (0+255),c
  2835  001416  C001  F005         	movff	isdigit@c,??_isdigit+2
  2836  00141A  C002  F006         	movff	isdigit@c+1,??_isdigit+3
  2837  00141E  5003               	movf	??_isdigit,w,c
  2838  001420  2605               	addwf	??_isdigit+2,f,c
  2839  001422  5004               	movf	??_isdigit+1,w,c
  2840  001424  2206               	addwfc	??_isdigit+3,f,c
  2841  001426  5006               	movf	??_isdigit+3,w,c
  2842  001428  E106               	bnz	u850
  2843  00142A  0E0A               	movlw	10
  2844  00142C  5C05               	subwf	??_isdigit+2,w,c
  2845  00142E  B0D8               	btfsc	status,0,c
  2846  001430  D002               	goto	u850
  2847  001432  0E01               	movlw	1
  2848  001434  D001               	goto	u860
  2849  001436                     u850:
  2850  001436  0E00               	movlw	0
  2851  001438                     u860:
  2852  001438  6E01               	movwf	?_isdigit,c
  2853  00143A  6A02               	clrf	?_isdigit+1,c
  2854  00143C  0012               	return		;funcret
  2855  00143E                     __end_of_isdigit:
  2856                           	opt callstack 0
  2857                           
  2858 ;; *************** function ___wmul *****************
  2859 ;; Defined at:
  2860 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
  2861 ;; Parameters:    Size  Location     Type
  2862 ;;  multiplier      2    0[COMRAM] unsigned int 
  2863 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2864 ;; Auto vars:     Size  Location     Type
  2865 ;;  product         2    4[COMRAM] unsigned int 
  2866 ;; Return value:  Size  Location     Type
  2867 ;;                  2    0[COMRAM] unsigned int 
  2868 ;; Registers used:
  2869 ;;		wreg, status,2, status,0, prodl, prodh
  2870 ;; Tracked objects:
  2871 ;;		On entry : 0/0
  2872 ;;		On exit  : 0/0
  2873 ;;		Unchanged: 0/0
  2874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2875 ;;      Params:         4       0       0       0       0       0       0
  2876 ;;      Locals:         2       0       0       0       0       0       0
  2877 ;;      Temps:          0       0       0       0       0       0       0
  2878 ;;      Totals:         6       0       0       0       0       0       0
  2879 ;;Total ram usage:        6 bytes
  2880 ;; Hardware stack levels used:    1
  2881 ;; Hardware stack levels required when called:    1
  2882 ;; This function calls:
  2883 ;;		Nothing
  2884 ;; This function is called by:
  2885 ;;		_atoi
  2886 ;; This function uses a non-reentrant model
  2887 ;;
  2888                           
  2889                           	psect	text16
  2890  00148E                     __ptext16:
  2891                           	opt callstack 0
  2892  00148E                     ___wmul:
  2893                           	opt callstack 25
  2894                           
  2895                           ;incstack = 0
  2896  00148E  5001               	movf	___wmul@multiplier,w,c
  2897  001490  0203               	mulwf	___wmul@multiplicand,c
  2898  001492  CFF3 F005          	movff	prodl,___wmul@product
  2899  001496  CFF4 F006          	movff	prodh,___wmul@product+1
  2900  00149A  5001               	movf	___wmul@multiplier,w,c
  2901  00149C  0204               	mulwf	___wmul@multiplicand+1,c
  2902  00149E  50F3               	movf	prodl,w,c
  2903  0014A0  2606               	addwf	___wmul@product+1,f,c
  2904  0014A2  5002               	movf	___wmul@multiplier+1,w,c
  2905  0014A4  0203               	mulwf	___wmul@multiplicand,c
  2906  0014A6  50F3               	movf	prodl,w,c
  2907  0014A8  2606               	addwf	___wmul@product+1,f,c
  2908  0014AA  C005  F001         	movff	___wmul@product,?___wmul
  2909  0014AE  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2910  0014B2  0012               	return		;funcret
  2911  0014B4                     __end_of___wmul:
  2912                           	opt callstack 0
  2913                           
  2914 ;; *************** function _lcd_ini *****************
  2915 ;; Defined at:
  2916 ;;		line 3 in file "../Bibliotecas/LCD4b.c"
  2917 ;; Parameters:    Size  Location     Type
  2918 ;;		None
  2919 ;; Auto vars:     Size  Location     Type
  2920 ;;  i               1    5[COMRAM] unsigned char 
  2921 ;; Return value:  Size  Location     Type
  2922 ;;                  1    wreg      void 
  2923 ;; Registers used:
  2924 ;;		wreg, status,2, status,0, cstack
  2925 ;; Tracked objects:
  2926 ;;		On entry : 0/0
  2927 ;;		On exit  : 0/0
  2928 ;;		Unchanged: 0/0
  2929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2930 ;;      Params:         0       0       0       0       0       0       0
  2931 ;;      Locals:         1       0       0       0       0       0       0
  2932 ;;      Temps:          1       0       0       0       0       0       0
  2933 ;;      Totals:         2       0       0       0       0       0       0
  2934 ;;Total ram usage:        2 bytes
  2935 ;; Hardware stack levels used:    1
  2936 ;; Hardware stack levels required when called:    3
  2937 ;; This function calls:
  2938 ;;		_lcd_cmd
  2939 ;; This function is called by:
  2940 ;;		_main
  2941 ;; This function uses a non-reentrant model
  2942 ;;
  2943                           
  2944                           	psect	text17
  2945  0010EE                     __ptext17:
  2946                           	opt callstack 0
  2947  0010EE                     _lcd_ini:
  2948                           	opt callstack 27
  2949                           
  2950                           ;../Bibliotecas/LCD4b.c: 5: char i;;../Bibliotecas/LCD4b.c: 7: TRISD = 0b00000000;
  2951                           
  2952                           ;incstack = 0
  2953  0010EE  0E00               	movlw	0
  2954  0010F0  6E95               	movwf	3989,c	;volatile
  2955                           
  2956                           ;../Bibliotecas/LCD4b.c: 8: TRISEbits.TRISE1 = 0;
  2957  0010F2  9296               	bcf	3990,1,c	;volatile
  2958                           
  2959                           ;../Bibliotecas/LCD4b.c: 9: TRISEbits.TRISE0 = 0;
  2960  0010F4  9096               	bcf	3990,0,c	;volatile
  2961                           
  2962                           ;../Bibliotecas/LCD4b.c: 11: PORTD = 0b00000000;
  2963  0010F6  0E00               	movlw	0
  2964  0010F8  6E83               	movwf	3971,c	;volatile
  2965                           
  2966                           ;../Bibliotecas/LCD4b.c: 12: PORTEbits.RE0 = 0;
  2967  0010FA  9084               	bcf	3972,0,c	;volatile
  2968                           
  2969                           ;../Bibliotecas/LCD4b.c: 13: PORTEbits.RE1 = 0;
  2970  0010FC  9284               	bcf	3972,1,c	;volatile
  2971                           
  2972                           ;../Bibliotecas/LCD4b.c: 15: _delay((unsigned long)((15)*(8000000/4000.0)));
  2973  0010FE  0E27               	movlw	39
  2974  001100  6E05               	movwf	??_lcd_ini& (0+255),c
  2975  001102  0EF5               	movlw	245
  2976  001104                     u1457:
  2977  001104  2EE8               	decfsz	wreg,f,c
  2978  001106  D7FE               	bra	u1457
  2979  001108  2E05               	decfsz	??_lcd_ini& (0+255),f,c
  2980  00110A  D7FC               	bra	u1457
  2981  00110C  F000               	nop	
  2982                           
  2983                           ;../Bibliotecas/LCD4b.c: 18: for(i=0;i<=2;i++)
  2984  00110E  0E00               	movlw	0
  2985  001110  6E06               	movwf	lcd_ini@i,c
  2986  001112                     l1887:
  2987                           
  2988                           ;../Bibliotecas/LCD4b.c: 19:    {;../Bibliotecas/LCD4b.c: 20:    lcd_cmd(0x30);
  2989  001112  0E30               	movlw	48
  2990  001114  EC6A  F007         	call	_lcd_cmd
  2991                           
  2992                           ;../Bibliotecas/LCD4b.c: 21:    _delay((unsigned long)((5)*(8000000/4000.0)));
  2993  001118  0E0D               	movlw	13
  2994  00111A  6E05               	movwf	??_lcd_ini& (0+255),c
  2995  00111C  0EFC               	movlw	252
  2996  00111E                     u1467:
  2997  00111E  2EE8               	decfsz	wreg,f,c
  2998  001120  D7FE               	bra	u1467
  2999  001122  2E05               	decfsz	??_lcd_ini& (0+255),f,c
  3000  001124  D7FC               	bra	u1467
  3001                           
  3002                           ;../Bibliotecas/LCD4b.c: 22:    }
  3003  001126  2A06               	incf	lcd_ini@i,f,c
  3004  001128  0E02               	movlw	2
  3005  00112A  6406               	cpfsgt	lcd_ini@i,c
  3006  00112C  D7F2               	goto	l1887
  3007                           
  3008                           ;../Bibliotecas/LCD4b.c: 24:    lcd_cmd(0x02);
  3009  00112E  0E02               	movlw	2
  3010  001130  EC6A  F007         	call	_lcd_cmd
  3011                           
  3012                           ;../Bibliotecas/LCD4b.c: 25:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3013  001134  0E1A               	movlw	26
  3014  001136                     u1477:
  3015  001136  2EE8               	decfsz	wreg,f,c
  3016  001138  D7FE               	bra	u1477
  3017  00113A  D000               	nop2	
  3018                           
  3019                           ;../Bibliotecas/LCD4b.c: 26:    lcd_cmd(0x28);
  3020  00113C  0E28               	movlw	40
  3021  00113E  EC6A  F007         	call	_lcd_cmd
  3022                           
  3023                           ;../Bibliotecas/LCD4b.c: 27:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3024  001142  0E1A               	movlw	26
  3025  001144                     u1487:
  3026  001144  2EE8               	decfsz	wreg,f,c
  3027  001146  D7FE               	bra	u1487
  3028  001148  D000               	nop2	
  3029                           
  3030                           ;../Bibliotecas/LCD4b.c: 28:    lcd_cmd(0x01);
  3031  00114A  0E01               	movlw	1
  3032  00114C  EC6A  F007         	call	_lcd_cmd
  3033                           
  3034                           ;../Bibliotecas/LCD4b.c: 29:    _delay((unsigned long)((2)*(8000000/4000.0)));
  3035  001150  0E06               	movlw	6
  3036  001152  6E05               	movwf	??_lcd_ini& (0+255),c
  3037  001154  0E30               	movlw	48
  3038  001156                     u1497:
  3039  001156  2EE8               	decfsz	wreg,f,c
  3040  001158  D7FE               	bra	u1497
  3041  00115A  2E05               	decfsz	??_lcd_ini& (0+255),f,c
  3042  00115C  D7FC               	bra	u1497
  3043  00115E  D000               	nop2	
  3044                           
  3045                           ;../Bibliotecas/LCD4b.c: 30:    lcd_cmd(0x0C);
  3046  001160  0E0C               	movlw	12
  3047  001162  EC6A  F007         	call	_lcd_cmd
  3048                           
  3049                           ;../Bibliotecas/LCD4b.c: 31:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3050  001166  0E1A               	movlw	26
  3051  001168                     u1507:
  3052  001168  2EE8               	decfsz	wreg,f,c
  3053  00116A  D7FE               	bra	u1507
  3054  00116C  D000               	nop2	
  3055                           
  3056                           ;../Bibliotecas/LCD4b.c: 32:    lcd_cmd(0x06);
  3057  00116E  0E06               	movlw	6
  3058  001170  EC6A  F007         	call	_lcd_cmd
  3059                           
  3060                           ;../Bibliotecas/LCD4b.c: 33:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3061  001174  0E1A               	movlw	26
  3062  001176                     u1517:
  3063  001176  2EE8               	decfsz	wreg,f,c
  3064  001178  D7FE               	bra	u1517
  3065  00117A  D000               	nop2	
  3066  00117C  0012               	return		;funcret
  3067  00117E                     __end_of_lcd_ini:
  3068                           	opt callstack 0
  3069                           
  3070 ;; *************** function _lcd_escreve_bf *****************
  3071 ;; Defined at:
  3072 ;;		line 82 in file "../Bibliotecas/LCD4b.c"
  3073 ;; Parameters:    Size  Location     Type
  3074 ;;  lin             1    wreg     unsigned char 
  3075 ;;  col             1    6[COMRAM] unsigned char 
  3076 ;;  str             2    7[COMRAM] PTR unsigned char 
  3077 ;;		 -> bufferLCD(16), STR_2(3), STR_1(7), 
  3078 ;; Auto vars:     Size  Location     Type
  3079 ;;  lin             1   10[COMRAM] unsigned char 
  3080 ;;  end             1    9[COMRAM] unsigned char 
  3081 ;; Return value:  Size  Location     Type
  3082 ;;                  1    wreg      void 
  3083 ;; Registers used:
  3084 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3085 ;; Tracked objects:
  3086 ;;		On entry : 0/0
  3087 ;;		On exit  : 0/0
  3088 ;;		Unchanged: 0/0
  3089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3090 ;;      Params:         3       0       0       0       0       0       0
  3091 ;;      Locals:         2       0       0       0       0       0       0
  3092 ;;      Temps:          0       0       0       0       0       0       0
  3093 ;;      Totals:         5       0       0       0       0       0       0
  3094 ;;Total ram usage:        5 bytes
  3095 ;; Hardware stack levels used:    1
  3096 ;; Hardware stack levels required when called:    4
  3097 ;; This function calls:
  3098 ;;		_lcd_envia_byte
  3099 ;; This function is called by:
  3100 ;;		_main
  3101 ;; This function uses a non-reentrant model
  3102 ;;
  3103                           
  3104                           	psect	text18
  3105  001202                     __ptext18:
  3106                           	opt callstack 0
  3107  001202                     _lcd_escreve_bf:
  3108                           	opt callstack 26
  3109                           
  3110                           ;incstack = 0
  3111                           ;lcd_escreve_bf@lin stored from wreg
  3112  001202  6E0B               	movwf	lcd_escreve_bf@lin,c
  3113                           
  3114                           ;../Bibliotecas/LCD4b.c: 82: void lcd_escreve_bf(char lin, char col, char *str);../Bibli
      +                          otecas/LCD4b.c: 83: {;../Bibliotecas/LCD4b.c: 84:     char end;;../Bibliotecas/LCD4b.c: 
      +                          87:     if (lin == 1) {
  3115  001204  040B               	decf	lcd_escreve_bf@lin,w,c
  3116  001206  A4D8               	btfss	status,2,c
  3117  001208  D003               	goto	l1913
  3118                           
  3119                           ;../Bibliotecas/LCD4b.c: 88:         end = col + 0x80 - 1;
  3120  00120A  5007               	movf	lcd_escreve_bf@col,w,c
  3121  00120C  0F7F               	addlw	127
  3122  00120E  D006               	goto	L3
  3123  001210                     l1913:
  3124  001210  0E02               	movlw	2
  3125  001212  180B               	xorwf	lcd_escreve_bf@lin,w,c
  3126  001214  A4D8               	btfss	status,2,c
  3127  001216  D003               	goto	l1917
  3128                           
  3129                           ;../Bibliotecas/LCD4b.c: 91:         end = col + 0xC0 - 1;
  3130  001218  5007               	movf	lcd_escreve_bf@col,w,c
  3131  00121A  0FBF               	addlw	191
  3132  00121C                     L3:
  3133  00121C  6E0A               	movwf	lcd_escreve_bf@end,c
  3134  00121E                     l1917:
  3135                           
  3136                           ;../Bibliotecas/LCD4b.c: 94:     lcd_envia_byte(0,end);
  3137  00121E  C00A  F005         	movff	lcd_escreve_bf@end,lcd_envia_byte@dado
  3138  001222  0E00               	movlw	0
  3139  001224  EC5A  F00A         	call	_lcd_envia_byte
  3140                           
  3141                           ;../Bibliotecas/LCD4b.c: 98:     while (*str){
  3142  001228  D016               	goto	l1923
  3143  00122A                     l1919:
  3144                           
  3145                           ;../Bibliotecas/LCD4b.c: 99:         lcd_envia_byte(1,*str);
  3146  00122A  C008  FFF6         	movff	lcd_escreve_bf@str,tblptrl
  3147  00122E  C009  FFF7         	movff	lcd_escreve_bf@str+1,tblptrh
  3148  001232  6AF8               	clrf	tblptru,c
  3149  001234  0E05               	movlw	(high __ramtop+-1)
  3150  001236  64F7               	cpfsgt	tblptrh,c
  3151  001238  D003               	bra	u1417
  3152  00123A  0008               	tblrd		*
  3153  00123C  50F5               	movf	tablat,w,c
  3154  00123E  D005               	bra	u1410
  3155  001240                     u1417:
  3156  001240  CFF6 FFE1          	movff	tblptrl,fsr1l
  3157  001244  CFF7 FFE2          	movff	tblptrh,fsr1h
  3158  001248  50E7               	movf	indf1,w,c
  3159  00124A                     u1410:
  3160  00124A  6E05               	movwf	lcd_envia_byte@dado,c
  3161  00124C  0E01               	movlw	1
  3162  00124E  EC5A  F00A         	call	_lcd_envia_byte
  3163                           
  3164                           ;../Bibliotecas/LCD4b.c: 100:         str++;
  3165  001252  4A08               	infsnz	lcd_escreve_bf@str,f,c
  3166  001254  2A09               	incf	lcd_escreve_bf@str+1,f,c
  3167  001256                     l1923:
  3168                           
  3169                           ;../Bibliotecas/LCD4b.c: 98:     while (*str){
  3170  001256  C008  FFF6         	movff	lcd_escreve_bf@str,tblptrl
  3171  00125A  C009  FFF7         	movff	lcd_escreve_bf@str+1,tblptrh
  3172  00125E  6AF8               	clrf	tblptru,c
  3173  001260  0E05               	movlw	(high __ramtop+-1)
  3174  001262  64F7               	cpfsgt	tblptrh,c
  3175  001264  D003               	bra	u1427
  3176  001266  0008               	tblrd		*
  3177  001268  50F5               	movf	tablat,w,c
  3178  00126A  D005               	bra	u1420
  3179  00126C                     u1427:
  3180  00126C  CFF6 FFE1          	movff	tblptrl,fsr1l
  3181  001270  CFF7 FFE2          	movff	tblptrh,fsr1h
  3182  001274  50E7               	movf	indf1,w,c
  3183  001276                     u1420:
  3184  001276  0900               	iorlw	0
  3185  001278  B4D8               	btfsc	status,2,c
  3186  00127A  0012               	return	
  3187  00127C  D7D6               	goto	l1919
  3188  00127E                     __end_of_lcd_escreve_bf:
  3189                           	opt callstack 0
  3190                           
  3191 ;; *************** function _lcd_envia_byte *****************
  3192 ;; Defined at:
  3193 ;;		line 74 in file "../Bibliotecas/LCD4b.c"
  3194 ;; Parameters:    Size  Location     Type
  3195 ;;  nivel           1    wreg     unsigned char 
  3196 ;;  dado            1    4[COMRAM] unsigned char 
  3197 ;; Auto vars:     Size  Location     Type
  3198 ;;  nivel           1    5[COMRAM] unsigned char 
  3199 ;; Return value:  Size  Location     Type
  3200 ;;                  1    wreg      void 
  3201 ;; Registers used:
  3202 ;;		wreg, status,2, status,0, cstack
  3203 ;; Tracked objects:
  3204 ;;		On entry : 0/0
  3205 ;;		On exit  : 0/0
  3206 ;;		Unchanged: 0/0
  3207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3208 ;;      Params:         1       0       0       0       0       0       0
  3209 ;;      Locals:         1       0       0       0       0       0       0
  3210 ;;      Temps:          0       0       0       0       0       0       0
  3211 ;;      Totals:         2       0       0       0       0       0       0
  3212 ;;Total ram usage:        2 bytes
  3213 ;; Hardware stack levels used:    1
  3214 ;; Hardware stack levels required when called:    3
  3215 ;; This function calls:
  3216 ;;		_lcd_cmd
  3217 ;; This function is called by:
  3218 ;;		_lcd_escreve_bf
  3219 ;; This function uses a non-reentrant model
  3220 ;;
  3221                           
  3222                           	psect	text19
  3223  0014B4                     __ptext19:
  3224                           	opt callstack 0
  3225  0014B4                     _lcd_envia_byte:
  3226                           	opt callstack 26
  3227                           
  3228                           ;incstack = 0
  3229                           ;lcd_envia_byte@nivel stored from wreg
  3230  0014B4  6E06               	movwf	lcd_envia_byte@nivel,c
  3231                           
  3232                           ;../Bibliotecas/LCD4b.c: 74: void lcd_envia_byte(char nivel, char dado);../Bibliotecas/L
      +                          CD4b.c: 75: {;../Bibliotecas/LCD4b.c: 76:     PORTEbits.RE0 = nivel;
  3233  0014B6  B006               	btfsc	lcd_envia_byte@nivel,0,c
  3234  0014B8  D002               	bra	u1365
  3235  0014BA  9084               	bcf	3972,0,c	;volatile
  3236  0014BC  D001               	bra	u1366
  3237  0014BE                     u1365:
  3238  0014BE  8084               	bsf	3972,0,c	;volatile
  3239  0014C0                     u1366:
  3240                           
  3241                           ;../Bibliotecas/LCD4b.c: 77:     _delay((unsigned long)((100)*(8000000/4000000.0)));
  3242  0014C0  0E42               	movlw	66
  3243  0014C2                     u1527:
  3244  0014C2  2EE8               	decfsz	wreg,f,c
  3245  0014C4  D7FE               	bra	u1527
  3246  0014C6  D000               	nop2	
  3247                           
  3248                           ;../Bibliotecas/LCD4b.c: 78:     PORTEbits.RE1 = 0;
  3249  0014C8  9284               	bcf	3972,1,c	;volatile
  3250                           
  3251                           ;../Bibliotecas/LCD4b.c: 79:     lcd_cmd(dado);
  3252  0014CA  5005               	movf	lcd_envia_byte@dado,w,c
  3253  0014CC  EC6A  F007         	call	_lcd_cmd
  3254  0014D0  0012               	return		;funcret
  3255  0014D2                     __end_of_lcd_envia_byte:
  3256                           	opt callstack 0
  3257                           
  3258 ;; *************** function _lcd_cmd *****************
  3259 ;; Defined at:
  3260 ;;		line 48 in file "../Bibliotecas/LCD4b.c"
  3261 ;; Parameters:    Size  Location     Type
  3262 ;;  cmd             1    wreg     unsigned char 
  3263 ;; Auto vars:     Size  Location     Type
  3264 ;;  cmd             1    3[COMRAM] unsigned char 
  3265 ;; Return value:  Size  Location     Type
  3266 ;;                  1    wreg      void 
  3267 ;; Registers used:
  3268 ;;		wreg, status,2, status,0, cstack
  3269 ;; Tracked objects:
  3270 ;;		On entry : 0/0
  3271 ;;		On exit  : 0/0
  3272 ;;		Unchanged: 0/0
  3273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3274 ;;      Params:         0       0       0       0       0       0       0
  3275 ;;      Locals:         1       0       0       0       0       0       0
  3276 ;;      Temps:          1       0       0       0       0       0       0
  3277 ;;      Totals:         2       0       0       0       0       0       0
  3278 ;;Total ram usage:        2 bytes
  3279 ;; Hardware stack levels used:    1
  3280 ;; Hardware stack levels required when called:    2
  3281 ;; This function calls:
  3282 ;;		_set_bit
  3283 ;; This function is called by:
  3284 ;;		_lcd_ini
  3285 ;;		_lcd_envia_byte
  3286 ;; This function uses a non-reentrant model
  3287 ;;
  3288                           
  3289                           	psect	text20
  3290  000ED4                     __ptext20:
  3291                           	opt callstack 0
  3292  000ED4                     _lcd_cmd:
  3293                           	opt callstack 27
  3294                           
  3295                           ;incstack = 0
  3296                           ;lcd_cmd@cmd stored from wreg
  3297  000ED4  6E04               	movwf	lcd_cmd@cmd,c
  3298                           
  3299                           ;../Bibliotecas/LCD4b.c: 48: void lcd_cmd(char cmd);../Bibliotecas/LCD4b.c: 49: {;../Bib
      +                          liotecas/LCD4b.c: 52:     PORTDbits.RD4 = set_bit(cmd,0b00010000);
  3300  000ED6  0E10               	movlw	16
  3301  000ED8  6E01               	movwf	set_bit@comp,c
  3302  000EDA  5004               	movf	lcd_cmd@cmd,w,c
  3303  000EDC  EC69  F00A         	call	_set_bit
  3304  000EE0  6E03               	movwf	??_lcd_cmd& (0+255),c
  3305  000EE2  3A03               	swapf	??_lcd_cmd,f,c
  3306  000EE4  5083               	movf	3971,w,c	;volatile
  3307  000EE6  1803               	xorwf	??_lcd_cmd,w,c
  3308  000EE8  0BEF               	andlw	-17
  3309  000EEA  1803               	xorwf	??_lcd_cmd,w,c
  3310  000EEC  6E83               	movwf	3971,c	;volatile
  3311                           
  3312                           ;../Bibliotecas/LCD4b.c: 53:     PORTDbits.RD5 = set_bit(cmd,0b00100000);
  3313  000EEE  0E20               	movlw	32
  3314  000EF0  6E01               	movwf	set_bit@comp,c
  3315  000EF2  5004               	movf	lcd_cmd@cmd,w,c
  3316  000EF4  EC69  F00A         	call	_set_bit
  3317  000EF8  6E03               	movwf	??_lcd_cmd& (0+255),c
  3318  000EFA  3A03               	swapf	??_lcd_cmd,f,c
  3319  000EFC  4603               	rlncf	??_lcd_cmd,f,c
  3320  000EFE  5083               	movf	3971,w,c	;volatile
  3321  000F00  1803               	xorwf	??_lcd_cmd,w,c
  3322  000F02  0BDF               	andlw	-33
  3323  000F04  1803               	xorwf	??_lcd_cmd,w,c
  3324  000F06  6E83               	movwf	3971,c	;volatile
  3325                           
  3326                           ;../Bibliotecas/LCD4b.c: 54:     PORTDbits.RD6 = set_bit(cmd,0b01000000);
  3327  000F08  0E40               	movlw	64
  3328  000F0A  6E01               	movwf	set_bit@comp,c
  3329  000F0C  5004               	movf	lcd_cmd@cmd,w,c
  3330  000F0E  EC69  F00A         	call	_set_bit
  3331  000F12  6E03               	movwf	??_lcd_cmd& (0+255),c
  3332  000F14  3A03               	swapf	??_lcd_cmd,f,c
  3333  000F16  4603               	rlncf	??_lcd_cmd,f,c
  3334  000F18  4603               	rlncf	??_lcd_cmd,f,c
  3335  000F1A  5083               	movf	3971,w,c	;volatile
  3336  000F1C  1803               	xorwf	??_lcd_cmd,w,c
  3337  000F1E  0BBF               	andlw	-65
  3338  000F20  1803               	xorwf	??_lcd_cmd,w,c
  3339  000F22  6E83               	movwf	3971,c	;volatile
  3340                           
  3341                           ;../Bibliotecas/LCD4b.c: 55:     PORTDbits.RD7 = set_bit(cmd,0b10000000);
  3342  000F24  0E80               	movlw	128
  3343  000F26  6E01               	movwf	set_bit@comp,c
  3344  000F28  5004               	movf	lcd_cmd@cmd,w,c
  3345  000F2A  EC69  F00A         	call	_set_bit
  3346  000F2E  6E03               	movwf	??_lcd_cmd& (0+255),c
  3347  000F30  3203               	rrcf	??_lcd_cmd,f,c
  3348  000F32  3203               	rrcf	??_lcd_cmd,f,c
  3349  000F34  5083               	movf	3971,w,c	;volatile
  3350  000F36  1803               	xorwf	??_lcd_cmd,w,c
  3351  000F38  0B7F               	andlw	-129
  3352  000F3A  1803               	xorwf	??_lcd_cmd,w,c
  3353  000F3C  6E83               	movwf	3971,c	;volatile
  3354                           
  3355                           ;../Bibliotecas/LCD4b.c: 57:     PORTEbits.RE1 = 1;
  3356  000F3E  8284               	bsf	3972,1,c	;volatile
  3357                           
  3358                           ;../Bibliotecas/LCD4b.c: 58:     PORTEbits.RE1 = 0;
  3359  000F40  9284               	bcf	3972,1,c	;volatile
  3360                           
  3361                           ;../Bibliotecas/LCD4b.c: 60:     _delay((unsigned long)((100)*(8000000/4000000.0)));
  3362  000F42  0E42               	movlw	66
  3363  000F44                     u1537:
  3364  000F44  2EE8               	decfsz	wreg,f,c
  3365  000F46  D7FE               	bra	u1537
  3366  000F48  D000               	nop2	
  3367                           
  3368                           ;../Bibliotecas/LCD4b.c: 64:     PORTDbits.RD4 = set_bit(cmd,0b00000001);
  3369  000F4A  0E01               	movlw	1
  3370  000F4C  6E01               	movwf	set_bit@comp,c
  3371  000F4E  5004               	movf	lcd_cmd@cmd,w,c
  3372  000F50  EC69  F00A         	call	_set_bit
  3373  000F54  6E03               	movwf	??_lcd_cmd& (0+255),c
  3374  000F56  3A03               	swapf	??_lcd_cmd,f,c
  3375  000F58  5083               	movf	3971,w,c	;volatile
  3376  000F5A  1803               	xorwf	??_lcd_cmd,w,c
  3377  000F5C  0BEF               	andlw	-17
  3378  000F5E  1803               	xorwf	??_lcd_cmd,w,c
  3379  000F60  6E83               	movwf	3971,c	;volatile
  3380                           
  3381                           ;../Bibliotecas/LCD4b.c: 65:     PORTDbits.RD5 = set_bit(cmd,0b00000010);
  3382  000F62  0E02               	movlw	2
  3383  000F64  6E01               	movwf	set_bit@comp,c
  3384  000F66  5004               	movf	lcd_cmd@cmd,w,c
  3385  000F68  EC69  F00A         	call	_set_bit
  3386  000F6C  6E03               	movwf	??_lcd_cmd& (0+255),c
  3387  000F6E  3A03               	swapf	??_lcd_cmd,f,c
  3388  000F70  4603               	rlncf	??_lcd_cmd,f,c
  3389  000F72  5083               	movf	3971,w,c	;volatile
  3390  000F74  1803               	xorwf	??_lcd_cmd,w,c
  3391  000F76  0BDF               	andlw	-33
  3392  000F78  1803               	xorwf	??_lcd_cmd,w,c
  3393  000F7A  6E83               	movwf	3971,c	;volatile
  3394                           
  3395                           ;../Bibliotecas/LCD4b.c: 66:     PORTDbits.RD6 = set_bit(cmd,0b00000100);
  3396  000F7C  0E04               	movlw	4
  3397  000F7E  6E01               	movwf	set_bit@comp,c
  3398  000F80  5004               	movf	lcd_cmd@cmd,w,c
  3399  000F82  EC69  F00A         	call	_set_bit
  3400  000F86  6E03               	movwf	??_lcd_cmd& (0+255),c
  3401  000F88  3A03               	swapf	??_lcd_cmd,f,c
  3402  000F8A  4603               	rlncf	??_lcd_cmd,f,c
  3403  000F8C  4603               	rlncf	??_lcd_cmd,f,c
  3404  000F8E  5083               	movf	3971,w,c	;volatile
  3405  000F90  1803               	xorwf	??_lcd_cmd,w,c
  3406  000F92  0BBF               	andlw	-65
  3407  000F94  1803               	xorwf	??_lcd_cmd,w,c
  3408  000F96  6E83               	movwf	3971,c	;volatile
  3409                           
  3410                           ;../Bibliotecas/LCD4b.c: 67:     PORTDbits.RD7 = set_bit(cmd,0b00001000);
  3411  000F98  0E08               	movlw	8
  3412  000F9A  6E01               	movwf	set_bit@comp,c
  3413  000F9C  5004               	movf	lcd_cmd@cmd,w,c
  3414  000F9E  EC69  F00A         	call	_set_bit
  3415  000FA2  6E03               	movwf	??_lcd_cmd& (0+255),c
  3416  000FA4  3203               	rrcf	??_lcd_cmd,f,c
  3417  000FA6  3203               	rrcf	??_lcd_cmd,f,c
  3418  000FA8  5083               	movf	3971,w,c	;volatile
  3419  000FAA  1803               	xorwf	??_lcd_cmd,w,c
  3420  000FAC  0B7F               	andlw	-129
  3421  000FAE  1803               	xorwf	??_lcd_cmd,w,c
  3422  000FB0  6E83               	movwf	3971,c	;volatile
  3423                           
  3424                           ;../Bibliotecas/LCD4b.c: 69:     PORTEbits.RE1 = 1;
  3425  000FB2  8284               	bsf	3972,1,c	;volatile
  3426                           
  3427                           ;../Bibliotecas/LCD4b.c: 70:     PORTEbits.RE1 = 0;
  3428  000FB4  9284               	bcf	3972,1,c	;volatile
  3429  000FB6  0012               	return		;funcret
  3430  000FB8                     __end_of_lcd_cmd:
  3431                           	opt callstack 0
  3432                           
  3433 ;; *************** function _set_bit *****************
  3434 ;; Defined at:
  3435 ;;		line 38 in file "../Bibliotecas/LCD4b.c"
  3436 ;; Parameters:    Size  Location     Type
  3437 ;;  cmd             1    wreg     unsigned char 
  3438 ;;  comp            1    0[COMRAM] unsigned char 
  3439 ;; Auto vars:     Size  Location     Type
  3440 ;;  cmd             1    1[COMRAM] unsigned char 
  3441 ;; Return value:  Size  Location     Type
  3442 ;;                  1    wreg      unsigned char 
  3443 ;; Registers used:
  3444 ;;		wreg, status,2, status,0
  3445 ;; Tracked objects:
  3446 ;;		On entry : 0/0
  3447 ;;		On exit  : 0/0
  3448 ;;		Unchanged: 0/0
  3449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3450 ;;      Params:         1       0       0       0       0       0       0
  3451 ;;      Locals:         1       0       0       0       0       0       0
  3452 ;;      Temps:          0       0       0       0       0       0       0
  3453 ;;      Totals:         2       0       0       0       0       0       0
  3454 ;;Total ram usage:        2 bytes
  3455 ;; Hardware stack levels used:    1
  3456 ;; Hardware stack levels required when called:    1
  3457 ;; This function calls:
  3458 ;;		Nothing
  3459 ;; This function is called by:
  3460 ;;		_lcd_cmd
  3461 ;; This function uses a non-reentrant model
  3462 ;;
  3463                           
  3464                           	psect	text21
  3465  0014D2                     __ptext21:
  3466                           	opt callstack 0
  3467  0014D2                     _set_bit:
  3468                           	opt callstack 27
  3469                           
  3470                           ;incstack = 0
  3471                           ;set_bit@cmd stored from wreg
  3472  0014D2  6E02               	movwf	set_bit@cmd,c
  3473                           
  3474                           ;../Bibliotecas/LCD4b.c: 38: char set_bit(char cmd, char comp);../Bibliotecas/LCD4b.c: 3
      +                          9: {;../Bibliotecas/LCD4b.c: 41:     if ((cmd & comp) >= 1)
  3475  0014D4  5002               	movf	set_bit@cmd,w,c
  3476  0014D6  1401               	andwf	set_bit@comp,w,c
  3477  0014D8  0900               	iorlw	0
  3478  0014DA  B4D8               	btfsc	status,2,c
  3479  0014DC  D002               	goto	l1629
  3480                           
  3481                           ;../Bibliotecas/LCD4b.c: 42:         return 1;
  3482  0014DE  0E01               	movlw	1
  3483  0014E0  0012               	return	
  3484  0014E2                     l1629:
  3485                           
  3486                           ;../Bibliotecas/LCD4b.c: 44:         return 0;
  3487  0014E2  0E00               	movlw	0
  3488  0014E4  0012               	return		;funcret
  3489  0014E6                     __end_of_set_bit:
  3490                           	opt callstack 0
  3491                           
  3492 ;; *************** function _int_TMR2 *****************
  3493 ;; Defined at:
  3494 ;;		line 13 in file "EX19.c"
  3495 ;; Parameters:    Size  Location     Type
  3496 ;;		None
  3497 ;; Auto vars:     Size  Location     Type
  3498 ;;		None
  3499 ;; Return value:  Size  Location     Type
  3500 ;;                  1    wreg      void 
  3501 ;; Registers used:
  3502 ;;		wreg, status,2, status,0
  3503 ;; Tracked objects:
  3504 ;;		On entry : 0/0
  3505 ;;		On exit  : 0/0
  3506 ;;		Unchanged: 0/0
  3507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3508 ;;      Params:         0       0       0       0       0       0       0
  3509 ;;      Locals:         0       0       0       0       0       0       0
  3510 ;;      Temps:          0       0       0       0       0       0       0
  3511 ;;      Totals:         0       0       0       0       0       0       0
  3512 ;;Total ram usage:        0 bytes
  3513 ;; Hardware stack levels used:    1
  3514 ;; This function calls:
  3515 ;;		Nothing
  3516 ;; This function is called by:
  3517 ;;		Interrupt level 2
  3518 ;; This function uses a non-reentrant model
  3519 ;;
  3520                           
  3521                           	psect	intcode
  3522  000008                     __pintcode:
  3523                           	opt callstack 0
  3524  000008                     _int_TMR2:
  3525                           	opt callstack 22
  3526                           
  3527                           ;incstack = 0
  3528  000008  827C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3529  00000A  ED8F  F009         	call	int_func,f	;refresh shadow registers
  3530                           
  3531                           	psect	intcode_body
  3532  00131E                     __pintcode_body:
  3533                           	opt callstack 22
  3534  00131E                     int_func:
  3535                           	opt callstack 22
  3536  00131E  0006               	pop		; remove dummy address from shadow register refresh
  3537                           
  3538                           ;EX19.c: 15:     if (TMR2IF)
  3539  001320  A29E               	btfss	3998,1,c	;volatile
  3540  001322  D01F               	goto	i2l36
  3541                           
  3542                           ;EX19.c: 16:     {;EX19.c: 17:      T2_1s++;
  3543  001324  4A7A               	infsnz	_T2_1s,f,c
  3544  001326  2A7B               	incf	_T2_1s+1,f,c
  3545                           
  3546                           ;EX19.c: 19:      if (T2_1s >= 40)
  3547  001328  BE7B               	btfsc	_T2_1s+1,7,c
  3548  00132A  D018               	goto	i2l34
  3549  00132C  507B               	movf	_T2_1s+1,w,c
  3550  00132E  E104               	bnz	i2u72_40
  3551  001330  0E28               	movlw	40
  3552  001332  5C7A               	subwf	_T2_1s,w,c
  3553  001334  A0D8               	btfss	status,0,c
  3554  001336  D012               	goto	i2l34
  3555  001338                     i2u72_40:
  3556                           
  3557                           ;EX19.c: 20:      {;EX19.c: 21:          T2_1s = 0;
  3558  001338  0E00               	movlw	0
  3559  00133A  6E7B               	movwf	_T2_1s+1,c
  3560  00133C  0E00               	movlw	0
  3561  00133E  6E7A               	movwf	_T2_1s,c
  3562                           
  3563                           ;EX19.c: 22:          conta++;
  3564  001340  4A78               	infsnz	_conta,f,c
  3565  001342  2A79               	incf	_conta+1,f,c
  3566                           
  3567                           ;EX19.c: 23:          if (conta > 99) conta = 0;
  3568  001344  BE79               	btfsc	_conta+1,7,c
  3569  001346  D00A               	goto	i2l34
  3570  001348  5079               	movf	_conta+1,w,c
  3571  00134A  E104               	bnz	i2u73_40
  3572  00134C  0E64               	movlw	100
  3573  00134E  5C78               	subwf	_conta,w,c
  3574  001350  A0D8               	btfss	status,0,c
  3575  001352  D004               	goto	i2l34
  3576  001354                     i2u73_40:
  3577  001354  0E00               	movlw	0
  3578  001356  6E79               	movwf	_conta+1,c
  3579  001358  0E00               	movlw	0
  3580  00135A  6E78               	movwf	_conta,c
  3581  00135C                     i2l34:
  3582                           
  3583                           ;EX19.c: 25:         TMR2 = 0;;
  3584  00135C  0E00               	movlw	0
  3585  00135E  6ECC               	movwf	4044,c	;volatile
  3586                           
  3587                           ;EX19.c: 27:         TMR2IF = 0;
  3588  001360  929E               	bcf	3998,1,c	;volatile
  3589  001362                     i2l36:
  3590  001362  927C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3591  001364  0011               	retfie		f
  3592  001366                     __end_of_int_TMR2:
  3593                           	opt callstack 0
  3594                           
  3595                           	psect	rparam
  3596  0000                     
  3597                           	psect	temp
  3598  00007C                     btemp:
  3599                           	opt callstack 0
  3600  00007C                     	ds	1
  3601  0000                     int$flags	set	btemp
  3602  0000                     wtemp8	set	btemp+1
  3603  0000                     ttemp5	set	btemp+1
  3604  0000                     ttemp6	set	btemp+4
  3605  0000                     ttemp7	set	btemp+8
  3606                           tosu	equ	0xFFF
  3607                           tosh	equ	0xFFE
  3608                           tosl	equ	0xFFD
  3609                           stkptr	equ	0xFFC
  3610                           pclatu	equ	0xFFB
  3611                           pclath	equ	0xFFA
  3612                           pcl	equ	0xFF9
  3613                           tblptru	equ	0xFF8
  3614                           tblptrh	equ	0xFF7
  3615                           tblptrl	equ	0xFF6
  3616                           tablat	equ	0xFF5
  3617                           prodh	equ	0xFF4
  3618                           prodl	equ	0xFF3
  3619                           indf0	equ	0xFEF
  3620                           postinc0	equ	0xFEE
  3621                           postdec0	equ	0xFED
  3622                           preinc0	equ	0xFEC
  3623                           plusw0	equ	0xFEB
  3624                           fsr0h	equ	0xFEA
  3625                           fsr0l	equ	0xFE9
  3626                           wreg	equ	0xFE8
  3627                           indf1	equ	0xFE7
  3628                           postinc1	equ	0xFE6
  3629                           postdec1	equ	0xFE5
  3630                           preinc1	equ	0xFE4
  3631                           plusw1	equ	0xFE3
  3632                           fsr1h	equ	0xFE2
  3633                           fsr1l	equ	0xFE1
  3634                           bsr	equ	0xFE0
  3635                           indf2	equ	0xFDF
  3636                           postinc2	equ	0xFDE
  3637                           postdec2	equ	0xFDD
  3638                           preinc2	equ	0xFDC
  3639                           plusw2	equ	0xFDB
  3640                           fsr2h	equ	0xFDA
  3641                           fsr2l	equ	0xFD9
  3642                           status	equ	0xFD8


Data Sizes:
    Strings     15
    Constant    0
    Data        0
    BSS         60
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    111     123
    BANK0           128      0      48
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_3(CODE[5]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    S888_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_3(CODE[5]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_3(CODE[5]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 5
		 -> STR_3(CODE[5]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    lcd_escreve_bf@str	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), STR_2(CODE[3]), STR_1(CODE[7]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _atoi->_isspace
    _lcd_ini->_lcd_cmd
    _lcd_escreve_bf->_lcd_envia_byte
    _lcd_envia_byte->_lcd_cmd
    _lcd_cmd->_set_bit

Critical Paths under _int_TMR2 in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _int_TMR2 in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _int_TMR2 in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _int_TMR2 in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _int_TMR2 in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _int_TMR2 in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _int_TMR2 in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   10803
                                            109 COMRAM     2     2      0
                     _lcd_escreve_bf
                            _lcd_ini
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             16    10      6    8292
                                             93 COMRAM    16    10      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    7939
                                             85 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           46    40      6    7566
                                             63 COMRAM    22    16      6
                               _atoi
                               _dtoa
                              _fputc
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                36    26     10    4358
                                             27 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    2709
                                             16 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     166
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1235
                                              9 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     834
                                              0 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                             18 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     448
                                              0 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     452
                                              0 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (4) _atoi                                                15    13      2    1244
                                              7 COMRAM    15    13      2
                             ___wmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (5) _isspace                                              7     5      2     207
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              6     4      2     237
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     403
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _lcd_ini                                              2     2      0     874
                                              4 COMRAM     2     2      0
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (1) _lcd_escreve_bf                                       5     2      3    1637
                                              6 COMRAM     5     2      3
                     _lcd_envia_byte
 ---------------------------------------------------------------------------------
 (2) _lcd_envia_byte                                       2     1      1    1024
                                              4 COMRAM     2     1      1
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (2) _lcd_cmd                                              2     2      0     828
                                              2 COMRAM     2     2      0
                            _set_bit
 ---------------------------------------------------------------------------------
 (3) _set_bit                                              2     1      1     652
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _int_TMR2                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _lcd_escreve_bf
     _lcd_envia_byte
       _lcd_cmd
         _set_bit
   _lcd_ini
     _lcd_cmd
       _set_bit
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _atoi
           ___wmul
           _isdigit
           _isspace
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
                 _putch
             _strlen
         _fputc
           _putch
         _isdigit

 _int_TMR2 (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      30       5       37.5%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     6F      7B       1       97.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      AB      15        0.0%
DATA                 0      0      AB       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Mon Apr 08 08:23:04 2019

    ___wmul@multiplicand 0003              __CFG_BORV$3 000000             __CFG_CP0$OFF 000000  
           __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000  
            __CFG_OSC$HS 000000                      l114 1086                      l125 0958  
                    l127 0960                      l890 0DA6                      l859 1404  
           __CFG_CPB$OFF 000000                      _PR2 000FCB             __CFG_CPD$OFF 000000  
                    u910 0BBA                      u750 0FC8                      u840 13EA  
                    u850 1436                      u770 1010                      u860 1438  
                    u970 0E32                      u891 0B82                      _abs 13DC  
                    _pad 1058                      wreg 000FE8             __CFG_LVP$OFF 000000  
           __CFG_WDT$OFF 000000                     ?_abs 0013                     l1501 107E  
                   l1511 10D4                     l1503 1090                     l1601 0E8C  
                   l1507 10A8                     l1605 0EB2                     l1551 0BB6  
                   l1543 0B7C                     l1617 139C                     l1713 0CDC  
                   l1561 0C12                     l1537 0B54                     l1481 13C4  
                   l1723 0D46                     l1715 0CE4                     l1707 0CCC  
                   l1467 0FD0                     l1629 14E2                     l1717 0CEA  
                   l1549 0BA2                     l1565 0C28                     l1581 0DDC  
                   l1477 13AE                     l1485 1448                     l1653 097A  
                   l1805 0730                     l1719 0D12                     l1591 0E2E  
                   l1487 144C                     l1639 093C                     l1831 0890  
                   l1807 074E                     l1913 1210                     l1569 0C4E  
                   l1585 0E00                     l1497 1070                     l1657 098A  
                   l1825 0854                     l1809 075C                     l1841 08B2  
                   l1923 1256                     l1691 0AFE                     l1667 0A82  
                   l1835 089A                     l1771 0668                     l1917 121E  
                   l1597 0E76                     l1589 0E1A                     l1919 122A  
                   l1687 0AE6                     l1791 0682                     l1783 0674  
                   l1775 066C                     l1767 0656                     l1697 0C82  
                   l1769 0658                     l1793 06C4                     l1865 1290  
                   l1699 0C86                     l1787 0678                     l1779 0670  
                   l1867 12B4                     l1947 11BC                     ?_pad 0011  
                   l1887 1112                     STR_1 0601                     STR_2 060D  
                   STR_3 0608                     u1010 1398                     u1100 0A90  
                   u1030 090E                     u1120 0AB2                     u1040 0910  
                   u1121 0AB0                     u1210 0D76                     u1130 0AC0  
                   u1220 0D78                     u1140 0AC4                     u1300 0794  
                   u1070 094E                     u1310 0796                     u1160 0AD0  
                   u1320 07A2                     u1410 124A                     u1090 0974  
                   u1420 1276                     u1340 07D6                     u1190 0CC8  
                   u1417 1240                     u1427 126C                     u1507 1168  
                   u1365 14BE                     u1517 1176                     u1366 14C0  
                   u1527 14C2                     u1447 11C6                     u1537 0F44  
                   u1457 1104                     u1467 111E                     u1477 1136  
                   u1487 1144                     u1497 1156                     i2l34 135C  
                   i2l36 1362                     _TMR2 000FCC             __CFG_PWRT$ON 000000  
                   abs@a 0013                     _dbuf 0080                     _atoi 0C70  
                   _main 117E                     _dtoa 08E6                     _prec 0074  
                   _nout 0070                     pad@i 0018                     pad@p 0015  
                   fsr1h 000FE2                     fsr2h 000FDA                     indf1 000FE7  
                   indf2 000FDF                     fsr1l 000FE1                     pad@w 001A  
                   fsr2l 000FD9                     btemp 007C                     prodh 000FF4  
                   prodl 000FF3                     start 000E            __CFG_IESO$OFF 000000  
          __CFG_MCLRE$ON 000000             ___param_bank 000000                    ??_abs 0015  
                  ??_pad 0017          __end_of___aodiv 0C70                    ?_atoi 0008  
                  ?_main 0001                    ?_dtoa 001C          __end_of___aomod 0ED4  
                  _T2CON 000FCA                    _T2_1s 007A             vfpfcnvrt@fmt 0042  
                  _PORTD 000F83                    _TRISD 000F95            __CFG_WRT0$OFF 000000  
          __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000  
         __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000  
         __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000          __end_of_lcd_cmd 0FB8  
        __end_of_lcd_ini 117E            __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000  
          __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000                    _flags 0076  
                  _conta 0078                    _fputc 0FB8                    _fputs 13A4  
        __end_of_isdigit 143E                    atoi@n 0015                    pad@fp 0011  
                  atoi@s 0008                    _width 0072                    _putch 14E6  
                  dtoa@d 001E                    dtoa@i 003E                    dtoa@n 0036  
                  dtoa@p 0030                    dtoa@s 0034                    dtoa@w 0032  
        __end_of_isspace 13A4           __CFG_BOREN$OFF 000000          __end_of_set_bit 14E6  
                  tablat 000FF5                    ttemp5 007D                    ttemp6 0080  
                  ttemp7 0084                    status 000FD8                    wtemp8 007D  
        __end_of_sprintf 131E          __initialization 1468             __end_of_atoi 0DB0  
           __end_of_main 1202             __end_of_dtoa 0B28                   ??_atoi 000A  
                 ??_main 006E                   ??_dtoa 0026            __activetblptr 000002  
                 _ADCON1 000FC1                   ?_fputc 0001                   ?_fputs 000A  
                 ?_putch 0001                   _INTCON 000FF2            vfpfcnvrt@done 0052  
                 _TMR2IF 007CF1           __CFG_XINST$OFF 000000             vfprintf@cfmt 005C  
              ??___aodiv 0011                ??___aomod 0011                   ___wmul 148E  
         __CFG_STVREN$ON 000000         __end_of_int_TMR2 1366         ??_lcd_escreve_bf 000A  
                 clear_0 146E                   clear_1 147A         ??_lcd_envia_byte 0006  
                 pad@buf 0013                ??_lcd_cmd 0003                   dtoa@fp 001C  
              ??_lcd_ini 0005                   _strlen 143E                   fputc@c 0001  
                 fputs@c 000E                   fputs@i 000F                   fputs@s 000A  
              ??_isdigit 0003             __mediumconst 0000                ??_isspace 0003  
              ??_set_bit 0002                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8                   putch@c 0001         __end_of_vfprintf 12D0  
              ??_sprintf 0064               __accesstop 0080  __end_of__initialization 1480  
        __CFG_PBADEN$OFF 000000            ___rparam_used 000001           __pcstackCOMRAM 0001  
          __end_of_fputc 1058            __end_of_fputs 13DC            __end_of_putch 14E8  
                ??_fputc 0005                  ??_fputs 000E                  ??_putch 0001  
             __pbssBANK0 0080                  ?___wmul 0001                  ?_strlen 0001  
     __size_of_vfpfcnvrt 02D4                  i2u72_40 1338                  i2u73_40 1354  
              ?_int_TMR2 0001                  __Hparam 0000                  __Lparam 0000  
                ___aodiv 0B28                  ___aomod 0DB0          __size_of___wmul 0026  
              ?_vfprintf 0056              set_bit@comp 0001             __psmallconst 0600  
                __pcinit 1468                  __ramtop 0600                  __ptext0 117E  
                __ptext1 12D0                  __ptext2 127E                  __ptext3 0612  
                __ptext4 08E6                  __ptext5 1058                  __ptext6 143E  
                __ptext7 13A4                  __ptext8 0FB8                  __ptext9 14E6  
                _lcd_cmd 0ED4                  _lcd_ini 10EE          __size_of_strlen 002A  
           __size_of_abs 0032             __size_of_pad 0096                  _isdigit 140E  
                _isspace 1366                  _set_bit 14D2                  atoi@neg 000E  
                _sprintf 12D0           __pintcode_body 131E     end_of_initialization 1480  
             ??_int_TMR2 0001       lcd_envia_byte@dado 0005                  fputc@fp 0003  
          __Lmediumconst 0000                  int_func 131E                  fputs@fp 000C  
      __end_of_vfpfcnvrt 08E6                  postdec2 000FDD                  postinc0 000FEE  
                postinc1 000FE6                  postinc2 000FDE               ??_vfprintf 005C  
                strlen@a 0003                  strlen@s 0001                _PORTDbits 000F83  
              _PORTEbits 000F84                _TRISEbits 000F96               lcd_cmd@cmd 0004  
            vfpfcnvrt@ap 0044              vfpfcnvrt@fp 0040              vfpfcnvrt@ll 004A  
         __end_of___wmul 14B4           __end_of_strlen 1468      start_initialization 1468  
            __end_of_abs 140E              __end_of_pad 10EE              vfprintf@fmt 0058  
               ??___wmul 0005         __CFG_LPT1OSC$OFF 000000                 ??_strlen 0003  
            __pbssCOMRAM 0070         ___aodiv@dividend 0001  __size_of_lcd_escreve_bf 007C  
__size_of_lcd_envia_byte 001E        __size_of_int_TMR2 135E        __CFG_CCP2MX$PORTC 000000  
              __pintcode 0008                 ?___aodiv 0001                 ?___aomod 0001  
      lcd_escreve_bf@end 000A        lcd_escreve_bf@col 0007        lcd_escreve_bf@lin 000B  
       ___aodiv@quotient 0013        lcd_escreve_bf@str 0008                _bufferLCD 00A0  
               ?_lcd_cmd 0001        __size_of_vfprintf 0052                 ?_lcd_ini 0001  
            __smallconst 0600                 ?_isdigit 0001                 ?_isspace 0001  
               ?_set_bit 0001               set_bit@cmd 0002                 ?_sprintf 005E  
         __size_of_fputc 00A0           __size_of_fputs 0038           __size_of_putch 0002  
         ___wmul@product 0005                 _PIE1bits 000F9D         __CFG_WDTPS$32768 000000  
              _vfpfcnvrt 0612        ___wmul@multiplier 0001                 __Hrparam 0000  
             vfprintf@ap 005A                 __Lrparam 0000               vfprintf@fp 0056  
       __size_of___aodiv 0148         __size_of___aomod 0124               ?_vfpfcnvrt 0040  
        ___aodiv@divisor 0009          ___aodiv@counter 0011         __size_of_lcd_cmd 00E4  
       __size_of_lcd_ini 0090               sprintf@fmt 0060                 _atoi$866 0010  
               _atoi$867 0014                 _atoi$868 0012         __size_of_isdigit 0030  
               _dtoa$394 002E           _lcd_escreve_bf 1202         __size_of_isspace 003E  
               __ptext10 13DC                 __ptext11 0DB0                 __ptext20 0ED4  
               __ptext12 0B28                 __ptext21 14D2                 __ptext13 0C70  
               __ptext14 1366                 __ptext15 140E                 __ptext16 148E  
               __ptext17 10EE                 __ptext18 1202                 __ptext19 14B4  
       __size_of_set_bit 0014           _lcd_envia_byte 14B4         __size_of_sprintf 004E  
               _int_TMR2 0008            __size_of_atoi 0140            __size_of_main 0084  
          __size_of_dtoa 0242                 int$flags 007C                 lcd_ini@i 0006  
               _vfprintf 127E              _isspace$884 0007         ___aomod@dividend 0001  
 __end_of_lcd_escreve_bf 127E   __end_of_lcd_envia_byte 14D2      lcd_envia_byte@nivel 0006  
               isdigit@c 0001                 intlevel2 0000                sprintf@ap 0066  
               isspace@c 0001          ___aomod@divisor 0009              ??_vfpfcnvrt 0046  
          _vfpfcnvrt$409 0054          ___aomod@counter 0011                 sprintf@f 0068  
               sprintf@s 005E          ?_lcd_escreve_bf 0007          ?_lcd_envia_byte 0005  
           ___aodiv@sign 0012             ___aomod@sign 0012  
