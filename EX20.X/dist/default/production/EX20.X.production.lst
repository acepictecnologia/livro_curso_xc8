

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Mon Apr 08 10:26:23 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    33                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    34  0000                     
    35                           ; Version 2.05
    36                           ; Generated 20/12/2018 GMT
    37                           ; 
    38                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    39                           ; All rights reserved.
    40                           ; 
    41                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    42                           ; 
    43                           ; Redistribution and use in source and binary forms, with or without modification, are
    44                           ; permitted provided that the following conditions are met:
    45                           ; 
    46                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    47                           ;        conditions and the following disclaimer.
    48                           ; 
    49                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    50                           ;        of conditions and the following disclaimer in the documentation and/or other
    51                           ;        materials provided with the distribution.
    52                           ; 
    53                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    54                           ;        software without specific prior written permission.
    55                           ; 
    56                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    57                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    58                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    59                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    60                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    61                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    62                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    63                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    64                           ; 
    65                           ; 
    66                           ; Code-generator required, PIC18F4520 Definitions
    67                           ; 
    68                           ; SFR Addresses
    69  0000                     _PORTDbits	set	3971
    70  0000                     _PORTEbits	set	3972
    71  0000                     _PORTD	set	3971
    72  0000                     _TRISEbits	set	3990
    73  0000                     _TRISD	set	3989
    74  0000                     _ADRESL	set	4035
    75  0000                     _ADRESH	set	4036
    76  0000                     _ADCON0bits	set	4034
    77  0000                     _ADCON2	set	4032
    78  0000                     _ADCON1	set	4033
    79  0000                     _ADCON0	set	4034
    80  0000                     _TRISAbits	set	3986
    81                           
    82                           	psect	smallconst
    83  000600                     __psmallconst:
    84                           	opt callstack 0
    85  000600  00                 	db	0
    86  000601                     STR_1:
    87  000601  43                 	db	67	;'C'
    88  000602  41                 	db	65	;'A'
    89  000603  4E                 	db	78	;'N'
    90  000604  41                 	db	65	;'A'
    91  000605  4C                 	db	76	;'L'
    92  000606  20                 	db	32
    93  000607  41                 	db	65	;'A'
    94  000608  4E                 	db	78	;'N'
    95  000609  30                 	db	48	;'0'
    96  00060A  3A                 	db	58	;':'
    97  00060B  00                 	db	0
    98  00060C                     STR_2:
    99  00060C  30                 	db	48	;'0'
   100  00060D  30                 	db	48	;'0'
   101  00060E  30                 	db	48	;'0'
   102  00060F  30                 	db	48	;'0'
   103  000610  00                 	db	0
   104  000611                     STR_3:
   105  000611  25                 	db	37
   106  000612  30                 	db	48	;'0'
   107  000613  34                 	db	52	;'4'
   108  000614  64                 	db	100	;'d'
   109  000615  00                 	db	0
   110                           
   111                           ; #config settings
   112  000616  00                 	db	0	; dummy byte at the end
   113  0000                     
   114                           	psect	cinit
   115  001462                     __pcinit:
   116                           	opt callstack 0
   117  001462                     start_initialization:
   118                           	opt callstack 0
   119  001462                     __initialization:
   120                           	opt callstack 0
   121                           
   122                           ; Clear objects allocated to BANK0 (48 bytes)
   123  001462  EE00  F080         	lfsr	0,__pbssBANK0
   124  001466  0E30               	movlw	48
   125  001468                     clear_0:
   126  001468  6AEE               	clrf	postinc0,c
   127  00146A  06E8               	decf	wreg,f,c
   128  00146C  E1FD               	bnz	clear_0
   129                           
   130                           ; Clear objects allocated to COMRAM (10 bytes)
   131  00146E  EE00  F070         	lfsr	0,__pbssCOMRAM
   132  001472  0E0A               	movlw	10
   133  001474                     clear_1:
   134  001474  6AEE               	clrf	postinc0,c
   135  001476  06E8               	decf	wreg,f,c
   136  001478  E1FD               	bnz	clear_1
   137  00147A                     end_of_initialization:
   138                           	opt callstack 0
   139  00147A                     __end_of__initialization:
   140                           	opt callstack 0
   141  00147A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   142  00147C  6EF8               	movwf	tblptru,c
   143  00147E  0100               	movlb	0
   144  001480  EF2F  F008         	goto	_main	;jump to C main() function
   145                           
   146                           	psect	bssCOMRAM
   147  000070                     __pbssCOMRAM:
   148                           	opt callstack 0
   149  000070                     _nout:
   150                           	opt callstack 0
   151  000070                     	ds	2
   152  000072                     _width:
   153                           	opt callstack 0
   154  000072                     	ds	2
   155  000074                     _prec:
   156                           	opt callstack 0
   157  000074                     	ds	2
   158  000076                     _flags:
   159                           	opt callstack 0
   160  000076                     	ds	2
   161  000078                     _adc:
   162                           	opt callstack 0
   163  000078                     	ds	2
   164                           
   165                           	psect	bssBANK0
   166  000080                     __pbssBANK0:
   167                           	opt callstack 0
   168  000080                     _dbuf:
   169                           	opt callstack 0
   170  000080                     	ds	32
   171  0000A0                     _bufferLCD:
   172                           	opt callstack 0
   173  0000A0                     	ds	16
   174                           
   175                           	psect	cstackCOMRAM
   176  000001                     __pcstackCOMRAM:
   177                           	opt callstack 0
   178  000001                     ?_strlen:
   179                           	opt callstack 0
   180  000001                     ?_isdigit:
   181                           	opt callstack 0
   182  000001                     ?_isspace:
   183                           	opt callstack 0
   184  000001                     ?___wmul:
   185                           	opt callstack 0
   186  000001                     ?___aodiv:
   187                           	opt callstack 0
   188  000001                     ?___aomod:
   189                           	opt callstack 0
   190  000001                     set_bit@comp:
   191                           	opt callstack 0
   192  000001                     ___wmul@multiplier:
   193                           	opt callstack 0
   194  000001                     isdigit@c:
   195                           	opt callstack 0
   196  000001                     isspace@c:
   197                           	opt callstack 0
   198  000001                     fputc@c:
   199                           	opt callstack 0
   200  000001                     strlen@s:
   201                           	opt callstack 0
   202  000001                     ___aodiv@dividend:
   203                           	opt callstack 0
   204  000001                     ___aomod@dividend:
   205                           	opt callstack 0
   206                           
   207                           ; 8 bytes @ 0x0
   208  000001                     	ds	1
   209  000002                     set_bit@cmd:
   210                           	opt callstack 0
   211                           
   212                           ; 1 bytes @ 0x1
   213  000002                     	ds	1
   214  000003                     ??_lcd_cmd:
   215  000003                     ??_isdigit:
   216  000003                     ??_isspace:
   217  000003                     ___wmul@multiplicand:
   218                           	opt callstack 0
   219  000003                     fputc@fp:
   220                           	opt callstack 0
   221  000003                     strlen@a:
   222                           	opt callstack 0
   223                           
   224                           ; 2 bytes @ 0x2
   225  000003                     	ds	1
   226  000004                     lcd_cmd@cmd:
   227                           	opt callstack 0
   228                           
   229                           ; 1 bytes @ 0x3
   230  000004                     	ds	1
   231  000005                     ??_lcd_ini:
   232  000005                     ??_fputc:
   233  000005                     lcd_envia_byte@dado:
   234                           	opt callstack 0
   235  000005                     ___wmul@product:
   236                           	opt callstack 0
   237                           
   238                           ; 2 bytes @ 0x4
   239  000005                     	ds	1
   240  000006                     lcd_ini@i:
   241                           	opt callstack 0
   242  000006                     lcd_envia_byte@nivel:
   243                           	opt callstack 0
   244                           
   245                           ; 1 bytes @ 0x5
   246  000006                     	ds	1
   247  000007                     lcd_escreve_bf@col:
   248                           	opt callstack 0
   249  000007                     _isspace$961:
   250                           	opt callstack 0
   251                           
   252                           ; 1 bytes @ 0x6
   253  000007                     	ds	1
   254  000008                     ?_atoi:
   255                           	opt callstack 0
   256  000008                     lcd_escreve_bf@str:
   257                           	opt callstack 0
   258  000008                     atoi@s:
   259                           	opt callstack 0
   260                           
   261                           ; 2 bytes @ 0x7
   262  000008                     	ds	1
   263  000009                     ___aodiv@divisor:
   264                           	opt callstack 0
   265  000009                     ___aomod@divisor:
   266                           	opt callstack 0
   267                           
   268                           ; 8 bytes @ 0x8
   269  000009                     	ds	1
   270  00000A                     ??_atoi:
   271  00000A                     lcd_escreve_bf@end:
   272                           	opt callstack 0
   273  00000A                     fputs@s:
   274                           	opt callstack 0
   275                           
   276                           ; 2 bytes @ 0x9
   277  00000A                     	ds	1
   278  00000B                     lcd_escreve_bf@lin:
   279                           	opt callstack 0
   280                           
   281                           ; 1 bytes @ 0xA
   282  00000B                     	ds	1
   283  00000C                     fputs@fp:
   284                           	opt callstack 0
   285                           
   286                           ; 2 bytes @ 0xB
   287  00000C                     	ds	2
   288  00000E                     fputs@c:
   289                           	opt callstack 0
   290  00000E                     atoi@neg:
   291                           	opt callstack 0
   292                           
   293                           ; 2 bytes @ 0xD
   294  00000E                     	ds	1
   295  00000F                     fputs@i:
   296                           	opt callstack 0
   297                           
   298                           ; 2 bytes @ 0xE
   299  00000F                     	ds	1
   300  000010                     _atoi$943:
   301                           	opt callstack 0
   302                           
   303                           ; 2 bytes @ 0xF
   304  000010                     	ds	1
   305  000011                     ?_pad:
   306                           	opt callstack 0
   307  000011                     ___aodiv@counter:
   308                           	opt callstack 0
   309  000011                     ___aomod@counter:
   310                           	opt callstack 0
   311  000011                     pad@fp:
   312                           	opt callstack 0
   313                           
   314                           ; 2 bytes @ 0x10
   315  000011                     	ds	1
   316  000012                     ___aodiv@sign:
   317                           	opt callstack 0
   318  000012                     ___aomod@sign:
   319                           	opt callstack 0
   320  000012                     _atoi$945:
   321                           	opt callstack 0
   322                           
   323                           ; 2 bytes @ 0x11
   324  000012                     	ds	1
   325  000013                     ?_abs:
   326                           	opt callstack 0
   327  000013                     pad@buf:
   328                           	opt callstack 0
   329  000013                     abs@a:
   330                           	opt callstack 0
   331  000013                     ___aodiv@quotient:
   332                           	opt callstack 0
   333                           
   334                           ; 8 bytes @ 0x12
   335  000013                     	ds	1
   336  000014                     _atoi$944:
   337                           	opt callstack 0
   338                           
   339                           ; 1 bytes @ 0x13
   340  000014                     	ds	1
   341  000015                     ??_abs:
   342  000015                     pad@p:
   343                           	opt callstack 0
   344  000015                     atoi@n:
   345                           	opt callstack 0
   346                           
   347                           ; 2 bytes @ 0x14
   348  000015                     	ds	2
   349  000017                     ??_pad:
   350                           
   351                           ; 1 bytes @ 0x16
   352  000017                     	ds	1
   353  000018                     pad@i:
   354                           	opt callstack 0
   355                           
   356                           ; 2 bytes @ 0x17
   357  000018                     	ds	2
   358  00001A                     pad@w:
   359                           	opt callstack 0
   360                           
   361                           ; 2 bytes @ 0x19
   362  00001A                     	ds	2
   363  00001C                     ?_dtoa:
   364                           	opt callstack 0
   365  00001C                     dtoa@fp:
   366                           	opt callstack 0
   367                           
   368                           ; 2 bytes @ 0x1B
   369  00001C                     	ds	2
   370  00001E                     dtoa@d:
   371                           	opt callstack 0
   372                           
   373                           ; 8 bytes @ 0x1D
   374  00001E                     	ds	8
   375  000026                     ??_dtoa:
   376                           
   377                           ; 1 bytes @ 0x25
   378  000026                     	ds	8
   379  00002E                     _dtoa$471:
   380                           	opt callstack 0
   381                           
   382                           ; 2 bytes @ 0x2D
   383  00002E                     	ds	2
   384  000030                     dtoa@p:
   385                           	opt callstack 0
   386                           
   387                           ; 2 bytes @ 0x2F
   388  000030                     	ds	2
   389  000032                     dtoa@w:
   390                           	opt callstack 0
   391                           
   392                           ; 2 bytes @ 0x31
   393  000032                     	ds	2
   394  000034                     dtoa@s:
   395                           	opt callstack 0
   396                           
   397                           ; 2 bytes @ 0x33
   398  000034                     	ds	2
   399  000036                     dtoa@n:
   400                           	opt callstack 0
   401                           
   402                           ; 8 bytes @ 0x35
   403  000036                     	ds	8
   404  00003E                     dtoa@i:
   405                           	opt callstack 0
   406                           
   407                           ; 2 bytes @ 0x3D
   408  00003E                     	ds	2
   409  000040                     ?_vfpfcnvrt:
   410                           	opt callstack 0
   411  000040                     vfpfcnvrt@fp:
   412                           	opt callstack 0
   413                           
   414                           ; 2 bytes @ 0x3F
   415  000040                     	ds	2
   416  000042                     vfpfcnvrt@fmt:
   417                           	opt callstack 0
   418                           
   419                           ; 2 bytes @ 0x41
   420  000042                     	ds	2
   421  000044                     vfpfcnvrt@ap:
   422                           	opt callstack 0
   423                           
   424                           ; 2 bytes @ 0x43
   425  000044                     	ds	2
   426  000046                     ??_vfpfcnvrt:
   427                           
   428                           ; 1 bytes @ 0x45
   429  000046                     	ds	4
   430  00004A                     vfpfcnvrt@ll:
   431                           	opt callstack 0
   432                           
   433                           ; 8 bytes @ 0x49
   434  00004A                     	ds	8
   435  000052                     vfpfcnvrt@done:
   436                           	opt callstack 0
   437                           
   438                           ; 2 bytes @ 0x51
   439  000052                     	ds	2
   440  000054                     _vfpfcnvrt$486:
   441                           	opt callstack 0
   442                           
   443                           ; 2 bytes @ 0x53
   444  000054                     	ds	2
   445  000056                     ?_vfprintf:
   446                           	opt callstack 0
   447  000056                     vfprintf@fp:
   448                           	opt callstack 0
   449                           
   450                           ; 2 bytes @ 0x55
   451  000056                     	ds	2
   452  000058                     vfprintf@fmt:
   453                           	opt callstack 0
   454                           
   455                           ; 2 bytes @ 0x57
   456  000058                     	ds	2
   457  00005A                     vfprintf@ap:
   458                           	opt callstack 0
   459                           
   460                           ; 2 bytes @ 0x59
   461  00005A                     	ds	2
   462  00005C                     vfprintf@cfmt:
   463                           	opt callstack 0
   464                           
   465                           ; 2 bytes @ 0x5B
   466  00005C                     	ds	2
   467  00005E                     ?_sprintf:
   468                           	opt callstack 0
   469  00005E                     sprintf@s:
   470                           	opt callstack 0
   471                           
   472                           ; 2 bytes @ 0x5D
   473  00005E                     	ds	2
   474  000060                     sprintf@fmt:
   475                           	opt callstack 0
   476                           
   477                           ; 2 bytes @ 0x5F
   478  000060                     	ds	4
   479  000064                     
   480                           ; 1 bytes @ 0x63
   481  000064                     	ds	2
   482  000066                     sprintf@ap:
   483                           	opt callstack 0
   484                           
   485                           ; 2 bytes @ 0x65
   486  000066                     	ds	2
   487  000068                     sprintf@f:
   488                           	opt callstack 0
   489                           
   490                           ; 6 bytes @ 0x67
   491  000068                     	ds	6
   492  00006E                     ??_main:
   493                           
   494                           ; 1 bytes @ 0x6D
   495  00006E                     	ds	2
   496                           
   497 ;;
   498 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   499 ;;
   500 ;; *************** function _main *****************
   501 ;; Defined at:
   502 ;;		line 13 in file "EX20.c"
   503 ;; Parameters:    Size  Location     Type
   504 ;;		None
   505 ;; Auto vars:     Size  Location     Type
   506 ;;		None
   507 ;; Return value:  Size  Location     Type
   508 ;;                  1    wreg      void 
   509 ;; Registers used:
   510 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   511 ;; Tracked objects:
   512 ;;		On entry : 0/0
   513 ;;		On exit  : 0/0
   514 ;;		Unchanged: 0/0
   515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   516 ;;      Params:         0       0       0       0       0       0       0
   517 ;;      Locals:         0       0       0       0       0       0       0
   518 ;;      Temps:          2       0       0       0       0       0       0
   519 ;;      Totals:         2       0       0       0       0       0       0
   520 ;;Total ram usage:        2 bytes
   521 ;; Hardware stack levels required when called:    8
   522 ;; This function calls:
   523 ;;		_lcd_escreve_bf
   524 ;;		_lcd_ini
   525 ;;		_sprintf
   526 ;; This function is called by:
   527 ;;		Startup code after reset
   528 ;; This function uses a non-reentrant model
   529 ;;
   530                           
   531                           	psect	text0
   532  00105E                     __ptext0:
   533                           	opt callstack 0
   534  00105E                     _main:
   535                           	opt callstack 23
   536                           
   537                           ;EX20.c: 15:     TRISAbits.RA0 = 1;
   538                           
   539                           ;incstack = 0
   540  00105E  8092               	bsf	3986,0,c	;volatile
   541                           
   542                           ;EX20.c: 16:     ADCON0 = 0b00000001;
   543  001060  0E01               	movlw	1
   544  001062  6EC2               	movwf	4034,c	;volatile
   545                           
   546                           ;EX20.c: 22:     ADCON1 = 0b00001110;
   547  001064  0E0E               	movlw	14
   548  001066  6EC1               	movwf	4033,c	;volatile
   549                           
   550                           ;EX20.c: 27:     ADCON2 = 0b10000111;
   551  001068  0E87               	movlw	135
   552  00106A  6EC0               	movwf	4032,c	;volatile
   553                           
   554                           ;EX20.c: 33:     lcd_ini();
   555  00106C  ECC7  F008         	call	_lcd_ini	;wreg free
   556                           
   557                           ;EX20.c: 36:     lcd_escreve_bf(1, 4, "CANAL AN0:");
   558  001070  0E04               	movlw	4
   559  001072  6E07               	movwf	lcd_escreve_bf@col,c
   560  001074  0E01               	movlw	low STR_1
   561  001076  6E08               	movwf	lcd_escreve_bf@str,c
   562  001078  0E06               	movlw	high STR_1
   563  00107A  6E09               	movwf	lcd_escreve_bf@str+1,c
   564  00107C  0E01               	movlw	1
   565  00107E  EC0F  F009         	call	_lcd_escreve_bf
   566                           
   567                           ;EX20.c: 39:     lcd_escreve_bf(2, 7,"0000");
   568  001082  0E07               	movlw	7
   569  001084  6E07               	movwf	lcd_escreve_bf@col,c
   570  001086  0E0C               	movlw	low STR_2
   571  001088  6E08               	movwf	lcd_escreve_bf@str,c
   572  00108A  0E06               	movlw	high STR_2
   573  00108C  6E09               	movwf	lcd_escreve_bf@str+1,c
   574  00108E  0E02               	movlw	2
   575  001090  EC0F  F009         	call	_lcd_escreve_bf
   576  001094                     l1928:
   577                           
   578                           ;EX20.c: 42:     {;EX20.c: 43:         _delay((unsigned long)((300)*(8000000/4000.0)));
   579  001094  0E04               	movlw	4
   580  001096  6E6F               	movwf	(??_main+1)& (0+255),c
   581  001098  0E0C               	movlw	12
   582  00109A  6E6E               	movwf	??_main& (0+255),c
   583  00109C  0E34               	movlw	52
   584  00109E                     u1437:
   585  00109E  2EE8               	decfsz	wreg,f,c
   586  0010A0  D7FE               	bra	u1437
   587  0010A2  2E6E               	decfsz	??_main& (0+255),f,c
   588  0010A4  D7FC               	bra	u1437
   589  0010A6  2E6F               	decfsz	(??_main+1)& (0+255),f,c
   590  0010A8  D7FA               	bra	u1437
   591                           
   592                           ;EX20.c: 45:         ADCON0bits.GO = 1;
   593  0010AA  82C2               	bsf	4034,1,c	;volatile
   594  0010AC                     l32:
   595  0010AC  B2C2               	btfsc	4034,1,c	;volatile
   596  0010AE  D7FE               	goto	l32
   597                           
   598                           ;EX20.c: 49:         adc = ADRESH;
   599  0010B0  CFC4 F078          	movff	4036,_adc	;volatile
   600  0010B4  6A79               	clrf	_adc+1,c
   601                           
   602                           ;EX20.c: 51:         adc = (adc << 8) + ADRESL;
   603  0010B6  5078               	movf	_adc,w,c
   604  0010B8  6E6F               	movwf	(??_main+1)& (0+255),c
   605  0010BA  6A6E               	clrf	??_main& (0+255),c
   606  0010BC  50C3               	movf	4035,w,c	;volatile
   607  0010BE  246E               	addwf	??_main,w,c
   608  0010C0  6E78               	movwf	_adc,c
   609  0010C2  0E00               	movlw	0
   610  0010C4  206F               	addwfc	??_main+1,w,c
   611  0010C6  6E79               	movwf	_adc+1,c
   612                           
   613                           ;EX20.c: 55:         sprintf(bufferLCD, "%04d", adc);
   614  0010C8  0EA0               	movlw	low _bufferLCD
   615  0010CA  6E5E               	movwf	sprintf@s,c
   616  0010CC  0E00               	movlw	high _bufferLCD
   617  0010CE  6E5F               	movwf	sprintf@s+1,c
   618  0010D0  0E11               	movlw	low STR_3
   619  0010D2  6E60               	movwf	sprintf@fmt,c
   620  0010D4  0E06               	movlw	high STR_3
   621  0010D6  6E61               	movwf	sprintf@fmt+1,c
   622  0010D8  C078  F062         	movff	_adc,?_sprintf+4
   623  0010DC  C079  F063         	movff	_adc+1,?_sprintf+5
   624  0010E0  EC76  F009         	call	_sprintf	;wreg free
   625                           
   626                           ;EX20.c: 58:         lcd_escreve_bf(2, 7, bufferLCD);
   627  0010E4  0E07               	movlw	7
   628  0010E6  6E07               	movwf	lcd_escreve_bf@col,c
   629  0010E8  0EA0               	movlw	low _bufferLCD
   630  0010EA  6E08               	movwf	lcd_escreve_bf@str,c
   631  0010EC  0E00               	movlw	high _bufferLCD
   632  0010EE  6E09               	movwf	lcd_escreve_bf@str+1,c
   633  0010F0  0E02               	movlw	2
   634  0010F2  EC0F  F009         	call	_lcd_escreve_bf
   635  0010F6  D7CE               	goto	l1928
   636  0010F8                     __end_of_main:
   637                           	opt callstack 0
   638                           
   639 ;; *************** function _sprintf *****************
   640 ;; Defined at:
   641 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_sprintf.c"
   642 ;; Parameters:    Size  Location     Type
   643 ;;  s               2   93[COMRAM] PTR unsigned char 
   644 ;;		 -> bufferLCD(16), 
   645 ;;  fmt             2   95[COMRAM] PTR const unsigned char 
   646 ;;		 -> STR_3(5), 
   647 ;; Auto vars:     Size  Location     Type
   648 ;;  f               6  103[COMRAM] struct _IO_FILE
   649 ;;  ap              2  101[COMRAM] PTR void [1]
   650 ;;		 -> ?_sprintf(2), 
   651 ;;  ret             2    0        int 
   652 ;; Return value:  Size  Location     Type
   653 ;;                  2   93[COMRAM] int 
   654 ;; Registers used:
   655 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   656 ;; Tracked objects:
   657 ;;		On entry : 0/0
   658 ;;		On exit  : 0/0
   659 ;;		Unchanged: 0/0
   660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   661 ;;      Params:         6       0       0       0       0       0       0
   662 ;;      Locals:        10       0       0       0       0       0       0
   663 ;;      Temps:          0       0       0       0       0       0       0
   664 ;;      Totals:        16       0       0       0       0       0       0
   665 ;;Total ram usage:       16 bytes
   666 ;; Hardware stack levels used:    1
   667 ;; Hardware stack levels required when called:    7
   668 ;; This function calls:
   669 ;;		_vfprintf
   670 ;; This function is called by:
   671 ;;		_main
   672 ;; This function uses a non-reentrant model
   673 ;;
   674                           
   675                           	psect	text1
   676  0012EC                     __ptext1:
   677                           	opt callstack 0
   678  0012EC                     _sprintf:
   679                           	opt callstack 23
   680                           
   681                           ;incstack = 0
   682  0012EC  0E62               	movlw	low (?_sprintf+4)
   683  0012EE  6E66               	movwf	sprintf@ap,c
   684  0012F0  0E00               	movlw	high (?_sprintf+4)
   685  0012F2  6E67               	movwf	sprintf@ap+1,c
   686  0012F4  C05E  F068         	movff	sprintf@s,sprintf@f
   687  0012F8  C05F  F069         	movff	sprintf@s+1,sprintf@f+1
   688  0012FC  0E00               	movlw	0
   689  0012FE  6E6B               	movwf	sprintf@f+3,c
   690  001300  0E00               	movlw	0
   691  001302  6E6A               	movwf	sprintf@f+2,c
   692  001304  0E00               	movlw	0
   693  001306  6E6D               	movwf	sprintf@f+5,c
   694  001308  0E00               	movlw	0
   695  00130A  6E6C               	movwf	sprintf@f+4,c
   696  00130C  0E68               	movlw	low sprintf@f
   697  00130E  6E56               	movwf	vfprintf@fp,c
   698  001310  0E00               	movlw	high sprintf@f
   699  001312  6E57               	movwf	vfprintf@fp+1,c
   700  001314  C060  F058         	movff	sprintf@fmt,vfprintf@fmt
   701  001318  C061  F059         	movff	sprintf@fmt+1,vfprintf@fmt+1
   702  00131C  0E66               	movlw	low sprintf@ap
   703  00131E  6E5A               	movwf	vfprintf@ap,c
   704  001320  0E00               	movlw	high sprintf@ap
   705  001322  6E5B               	movwf	vfprintf@ap+1,c
   706  001324  EC4D  F009         	call	_vfprintf	;wreg free
   707  001328  506A               	movf	sprintf@f+2,w,c
   708  00132A  245E               	addwf	sprintf@s,w,c
   709  00132C  6ED9               	movwf	fsr2l,c
   710  00132E  506B               	movf	sprintf@f+3,w,c
   711  001330  205F               	addwfc	sprintf@s+1,w,c
   712  001332  6EDA               	movwf	fsr2h,c
   713  001334  0E00               	movlw	0
   714  001336  6EDF               	movwf	indf2,c
   715  001338  0012               	return		;funcret
   716  00133A                     __end_of_sprintf:
   717                           	opt callstack 0
   718                           
   719 ;; *************** function _vfprintf *****************
   720 ;; Defined at:
   721 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
   722 ;; Parameters:    Size  Location     Type
   723 ;;  fp              2   85[COMRAM] PTR struct _IO_FILE
   724 ;;		 -> sprintf@f(6), 
   725 ;;  fmt             2   87[COMRAM] PTR const unsigned char 
   726 ;;		 -> STR_3(5), 
   727 ;;  ap              2   89[COMRAM] PTR PTR void 
   728 ;;		 -> sprintf@ap(2), 
   729 ;; Auto vars:     Size  Location     Type
   730 ;;  cfmt            2   91[COMRAM] PTR unsigned char 
   731 ;;		 -> STR_3(5), 
   732 ;; Return value:  Size  Location     Type
   733 ;;                  2   85[COMRAM] int 
   734 ;; Registers used:
   735 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   736 ;; Tracked objects:
   737 ;;		On entry : 0/0
   738 ;;		On exit  : 0/0
   739 ;;		Unchanged: 0/0
   740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   741 ;;      Params:         6       0       0       0       0       0       0
   742 ;;      Locals:         2       0       0       0       0       0       0
   743 ;;      Temps:          0       0       0       0       0       0       0
   744 ;;      Totals:         8       0       0       0       0       0       0
   745 ;;Total ram usage:        8 bytes
   746 ;; Hardware stack levels used:    1
   747 ;; Hardware stack levels required when called:    6
   748 ;; This function calls:
   749 ;;		_vfpfcnvrt
   750 ;; This function is called by:
   751 ;;		_sprintf
   752 ;; This function uses a non-reentrant model
   753 ;;
   754                           
   755                           	psect	text2
   756  00129A                     __ptext2:
   757                           	opt callstack 0
   758  00129A                     _vfprintf:
   759                           	opt callstack 23
   760                           
   761                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.05\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
   762                           
   763                           ;incstack = 0
   764  00129A  C058  F05C         	movff	vfprintf@fmt,vfprintf@cfmt
   765  00129E  C059  F05D         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
   766                           
   767                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
   768  0012A2  0E00               	movlw	0
   769  0012A4  6E71               	movwf	_nout+1,c
   770  0012A6  0E00               	movlw	0
   771  0012A8  6E70               	movwf	_nout,c
   772                           
   773                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
   774  0012AA  D012               	goto	l1848
   775  0012AC                     l1846:
   776                           
   777                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
   778  0012AC  C056  F040         	movff	vfprintf@fp,vfpfcnvrt@fp
   779  0012B0  C057  F041         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
   780  0012B4  0E5C               	movlw	low vfprintf@cfmt
   781  0012B6  6E42               	movwf	vfpfcnvrt@fmt,c
   782  0012B8  0E00               	movlw	high vfprintf@cfmt
   783  0012BA  6E43               	movwf	vfpfcnvrt@fmt+1,c
   784  0012BC  C05A  F044         	movff	vfprintf@ap,vfpfcnvrt@ap
   785  0012C0  C05B  F045         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
   786  0012C4  EC0C  F003         	call	_vfpfcnvrt	;wreg free
   787  0012C8  5040               	movf	?_vfpfcnvrt,w,c
   788  0012CA  2670               	addwf	_nout,f,c
   789  0012CC  5041               	movf	?_vfpfcnvrt+1,w,c
   790  0012CE  2271               	addwfc	_nout+1,f,c
   791  0012D0                     l1848:
   792                           
   793                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
   794  0012D0  C05C  FFF6         	movff	vfprintf@cfmt,tblptrl
   795  0012D4  C05D  FFF7         	movff	vfprintf@cfmt+1,tblptrh
   796  0012D8                     	if	0	;tblptru may be non-zero
   797  0012D8                     	endif
   798  0012D8                     	if	0	;tblptru may be non-zero
   799  0012D8                     	endif
   800  0012D8  0008               	tblrd		*
   801  0012DA  50F5               	movf	tablat,w,c
   802  0012DC  0900               	iorlw	0
   803  0012DE  A4D8               	btfss	status,2,c
   804  0012E0  D7E5               	goto	l1846
   805                           
   806                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
   807  0012E2  C070  F056         	movff	_nout,?_vfprintf
   808  0012E6  C071  F057         	movff	_nout+1,?_vfprintf+1
   809  0012EA  0012               	return		;funcret
   810  0012EC                     __end_of_vfprintf:
   811                           	opt callstack 0
   812                           
   813 ;; *************** function _vfpfcnvrt *****************
   814 ;; Defined at:
   815 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
   816 ;; Parameters:    Size  Location     Type
   817 ;;  fp              2   63[COMRAM] PTR struct _IO_FILE
   818 ;;		 -> sprintf@f(6), 
   819 ;;  fmt             2   65[COMRAM] PTR PTR unsigned char 
   820 ;;		 -> vfprintf@cfmt(2), 
   821 ;;  ap              2   67[COMRAM] PTR PTR void 
   822 ;;		 -> sprintf@ap(2), 
   823 ;; Auto vars:     Size  Location     Type
   824 ;;  ll              8   73[COMRAM] long long 
   825 ;;  llu             8    0        unsigned long long 
   826 ;;  f               4    0        unsigned long long 
   827 ;;  vp              3    0        PTR void 
   828 ;;  ct              3    0        unsigned char [3]
   829 ;;  cp              3    0        PTR unsigned char 
   830 ;;  done            2   81[COMRAM] int 
   831 ;;  i               2    0        int 
   832 ;;  c               1    0        unsigned char 
   833 ;; Return value:  Size  Location     Type
   834 ;;                  2   63[COMRAM] int 
   835 ;; Registers used:
   836 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   837 ;; Tracked objects:
   838 ;;		On entry : 0/0
   839 ;;		On exit  : 0/0
   840 ;;		Unchanged: 0/0
   841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   842 ;;      Params:         6       0       0       0       0       0       0
   843 ;;      Locals:        12       0       0       0       0       0       0
   844 ;;      Temps:          4       0       0       0       0       0       0
   845 ;;      Totals:        22       0       0       0       0       0       0
   846 ;;Total ram usage:       22 bytes
   847 ;; Hardware stack levels used:    1
   848 ;; Hardware stack levels required when called:    5
   849 ;; This function calls:
   850 ;;		_atoi
   851 ;;		_dtoa
   852 ;;		_fputc
   853 ;;		_isdigit
   854 ;; This function is called by:
   855 ;;		_vfprintf
   856 ;; This function uses a non-reentrant model
   857 ;;
   858                           
   859                           	psect	text3
   860  000618                     __ptext3:
   861                           	opt callstack 0
   862  000618                     _vfpfcnvrt:
   863                           	opt callstack 23
   864                           
   865                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 674:     long long ll;
   866                           
   867                           ;incstack = 0
   868  000618  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   869  00061C  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   870  000620  CFDE FFF6          	movff	postinc2,tblptrl
   871  000624  CFDD FFF7          	movff	postdec2,tblptrh
   872  000628                     	if	0	;tblptru may be non-zero
   873  000628                     	endif
   874  000628                     	if	0	;tblptru may be non-zero
   875  000628                     	endif
   876  000628  0008               	tblrd		*
   877  00062A  50F5               	movf	tablat,w,c
   878  00062C  0A25               	xorlw	37
   879  00062E  A4D8               	btfss	status,2,c
   880  000630  D143               	goto	l1822
   881                           
   882                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
   883  000632  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   884  000636  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   885  00063A  2ADE               	incf	postinc2,f,c
   886  00063C  0E00               	movlw	0
   887  00063E  22DD               	addwfc	postdec2,f,c
   888                           
   889                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
   890  000640  0E00               	movlw	0
   891  000642  6E73               	movwf	_width+1,c
   892  000644  0E00               	movlw	0
   893  000646  6E72               	movwf	_width,c
   894  000648  C072  F076         	movff	_width,_flags
   895  00064C  C073  F077         	movff	_width+1,_flags+1
   896                           
   897                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
   898  000650  6874               	setf	_prec,c
   899  000652  6875               	setf	_prec+1,c
   900                           
   901                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 688:       
      +                            done = 0;
   902  000654  0E00               	movlw	0
   903  000656  6E53               	movwf	vfpfcnvrt@done+1,c
   904  000658  0E00               	movlw	0
   905  00065A  D014               	goto	L1
   906  00065C                     l1748:
   907                           
   908                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 692:       
      +                                        flags |= (1 << 0);
   909  00065C  8076               	bsf	_flags,0,c
   910  00065E                     l1750:
   911                           
   912                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 693:       
      +                                        ++*fmt;
   913  00065E  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   914  000662  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   915  000666  2ADE               	incf	postinc2,f,c
   916  000668  0E00               	movlw	0
   917  00066A  22DD               	addwfc	postdec2,f,c
   918                           
   919                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 694:       
      +                                        break;
   920  00066C  D02E               	goto	l1774
   921  00066E                     l1752:
   922                           
   923                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 696:       
      +                                        flags |= (1 << 1);
   924  00066E  8276               	bsf	_flags,1,c
   925  000670  D7F6               	goto	l1750
   926  000672                     l1756:
   927                           
   928                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 700:       
      +                                        flags |= (1 << 2);
   929  000672  8476               	bsf	_flags,2,c
   930  000674  D7F4               	goto	l1750
   931  000676                     l1760:
   932                           
   933                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 704:       
      +                                        flags |= (1 << 3);
   934  000676  8676               	bsf	_flags,3,c
   935  000678  D7F2               	goto	l1750
   936  00067A                     l1764:
   937                           
   938                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 708:       
      +                                        flags |= (1 << 4);
   939  00067A  8876               	bsf	_flags,4,c
   940  00067C  D7F0               	goto	l1750
   941  00067E                     l1768:
   942                           
   943                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 712:       
      +                                        done = 1;
   944  00067E  0E00               	movlw	0
   945  000680  6E53               	movwf	vfpfcnvrt@done+1,c
   946  000682  0E01               	movlw	1
   947  000684                     L1:
   948  000684  6E52               	movwf	vfpfcnvrt@done,c
   949                           
   950                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 713:       
      +                                        break;
   951  000686  D021               	goto	l1774
   952  000688                     l1772:
   953  000688  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   954  00068C  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   955  000690  CFDE FFF6          	movff	postinc2,tblptrl
   956  000694  CFDD FFF7          	movff	postdec2,tblptrh
   957  000698                     	if	0	;tblptru may be non-zero
   958  000698                     	endif
   959  000698                     	if	0	;tblptru may be non-zero
   960  000698                     	endif
   961  000698  0008               	tblrd		*
   962  00069A  50F5               	movf	tablat,w,c
   963  00069C  6E46               	movwf	??_vfpfcnvrt& (0+255),c
   964  00069E  6A47               	clrf	(??_vfpfcnvrt+1)& (0+255),c
   965                           
   966                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   967                           ; Switch size 1, requested type "simple"
   968                           ; Number of cases is 1, Range of values is 0 to 0
   969                           ; switch strategies available:
   970                           ; Name         Instructions Cycles
   971                           ; simple_byte            4     3 (average)
   972                           ;	Chosen strategy is simple_byte
   973  0006A0  5047               	movf	??_vfpfcnvrt+1,w,c
   974  0006A2  0A00               	xorlw	0	; case 0
   975  0006A4  A4D8               	btfss	status,2,c
   976  0006A6  D7EB               	goto	l1768
   977                           
   978                           ; Switch size 1, requested type "simple"
   979                           ; Number of cases is 5, Range of values is 32 to 48
   980                           ; switch strategies available:
   981                           ; Name         Instructions Cycles
   982                           ; simple_byte           16     9 (average)
   983                           ;	Chosen strategy is simple_byte
   984  0006A8  5046               	movf	??_vfpfcnvrt,w,c
   985  0006AA  0A20               	xorlw	32	; case 32
   986  0006AC  B4D8               	btfsc	status,2,c
   987  0006AE  D7E3               	goto	l1760
   988  0006B0  0A03               	xorlw	3	; case 35
   989  0006B2  B4D8               	btfsc	status,2,c
   990  0006B4  D7E2               	goto	l1764
   991  0006B6  0A08               	xorlw	8	; case 43
   992  0006B8  B4D8               	btfsc	status,2,c
   993  0006BA  D7DB               	goto	l1756
   994  0006BC  0A06               	xorlw	6	; case 45
   995  0006BE  B4D8               	btfsc	status,2,c
   996  0006C0  D7CD               	goto	l1748
   997  0006C2  0A1D               	xorlw	29	; case 48
   998  0006C4  B4D8               	btfsc	status,2,c
   999  0006C6  D7D3               	goto	l1752
  1000  0006C8  D7DA               	goto	l1768
  1001  0006CA                     l1774:
  1002                           
  1003                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 689:       
      +                            while (!done) {
  1004  0006CA  5052               	movf	vfpfcnvrt@done,w,c
  1005  0006CC  1053               	iorwf	vfpfcnvrt@done+1,w,c
  1006  0006CE  B4D8               	btfsc	status,2,c
  1007  0006D0  D7DB               	goto	l1772
  1008                           
  1009                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 716:       
      +                            if (flags & (1 << 0)) {
  1010  0006D2  B076               	btfsc	_flags,0,c
  1011                           
  1012                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 717:       
      +                                flags &= ~(1 << 1);
  1013  0006D4  9276               	bcf	_flags,1,c
  1014                           
  1015                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 723:       
      +                            if ((*fmt)[0] == '*') {
  1016  0006D6  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1017  0006DA  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1018  0006DE  CFDE FFF6          	movff	postinc2,tblptrl
  1019  0006E2  CFDD FFF7          	movff	postdec2,tblptrh
  1020  0006E6                     	if	0	;tblptru may be non-zero
  1021  0006E6                     	endif
  1022  0006E6                     	if	0	;tblptru may be non-zero
  1023  0006E6                     	endif
  1024  0006E6  0008               	tblrd		*
  1025  0006E8  50F5               	movf	tablat,w,c
  1026  0006EA  0A2A               	xorlw	42
  1027  0006EC  A4D8               	btfss	status,2,c
  1028  0006EE  D023               	goto	l1786
  1029                           
  1030                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 724:       
      +                                ++*fmt;
  1031  0006F0  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1032  0006F4  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1033  0006F8  2ADE               	incf	postinc2,f,c
  1034  0006FA  0E00               	movlw	0
  1035  0006FC  22DD               	addwfc	postdec2,f,c
  1036                           
  1037                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 725:       
      +                                width = (*(int *)__va_arg(*(int **)ap, (int)0));
  1038  0006FE  C044  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1039  000702  C045  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1040  000706  CFDF F046          	movff	indf2,??_vfpfcnvrt
  1041  00070A  0E02               	movlw	2
  1042  00070C  26DE               	addwf	postinc2,f,c
  1043  00070E  CFDF F047          	movff	indf2,??_vfpfcnvrt+1
  1044  000712  0E00               	movlw	0
  1045  000714  22DD               	addwfc	postdec2,f,c
  1046  000716  C046  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1047  00071A  C047  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1048  00071E  CFDE F072          	movff	postinc2,_width
  1049  000722  CFDD F073          	movff	postdec2,_width+1
  1050                           
  1051                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 726:       
      +                                if (width < 0) {
  1052  000726  AE73               	btfss	_width+1,7,c
  1053  000728  D03F               	goto	u1300
  1054                           
  1055                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 727:       
      +                                    flags |= (1 << 0);
  1056  00072A  8076               	bsf	_flags,0,c
  1057                           
  1058                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 728:       
      +                                    width = -width;
  1059  00072C  6C72               	negf	_width,c
  1060  00072E  1E73               	comf	_width+1,f,c
  1061  000730  B0D8               	btfsc	status,0,c
  1062  000732  2A73               	incf	_width+1,f,c
  1063  000734  D039               	goto	u1300
  1064  000736                     l1786:
  1065                           
  1066                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 731:       
      +                                width = atoi(*fmt);
  1067  000736  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1068  00073A  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1069  00073E  CFDE F008          	movff	postinc2,atoi@s
  1070  000742  CFDD F009          	movff	postdec2,atoi@s+1
  1071  000746  EC3B  F006         	call	_atoi	;wreg free
  1072  00074A  C008  F072         	movff	?_atoi,_width
  1073  00074E  C009  F073         	movff	?_atoi+1,_width+1
  1074                           
  1075                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 732:       
      +                                while ((0 ? isdigit((*fmt)[0]) : ((unsigned)((*fmt)[0])-'0') < 10)) {
  1076  000752  D007               	goto	l1790
  1077  000754                     l1788:
  1078                           
  1079                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 733:       
      +                                    ++*fmt;
  1080  000754  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1081  000758  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1082  00075C  2ADE               	incf	postinc2,f,c
  1083  00075E  0E00               	movlw	0
  1084  000760  22DD               	addwfc	postdec2,f,c
  1085  000762                     l1790:
  1086  000762  0ED0               	movlw	208
  1087  000764  6E46               	movwf	??_vfpfcnvrt& (0+255),c
  1088  000766  0EFF               	movlw	255
  1089  000768  6E47               	movwf	(??_vfpfcnvrt+1)& (0+255),c
  1090  00076A  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1091  00076E  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1092  000772  CFDE FFF6          	movff	postinc2,tblptrl
  1093  000776  CFDD FFF7          	movff	postdec2,tblptrh
  1094  00077A                     	if	0	;tblptru may be non-zero
  1095  00077A                     	endif
  1096  00077A                     	if	0	;tblptru may be non-zero
  1097  00077A                     	endif
  1098  00077A  0008               	tblrd		*
  1099  00077C  50F5               	movf	tablat,w,c
  1100  00077E  6E48               	movwf	(??_vfpfcnvrt+2)& (0+255),c
  1101  000780  6A49               	clrf	(??_vfpfcnvrt+3)& (0+255),c
  1102  000782  5046               	movf	??_vfpfcnvrt,w,c
  1103  000784  2648               	addwf	??_vfpfcnvrt+2,f,c
  1104  000786  5047               	movf	??_vfpfcnvrt+1,w,c
  1105  000788  2249               	addwfc	??_vfpfcnvrt+3,f,c
  1106  00078A  5049               	movf	??_vfpfcnvrt+3,w,c
  1107  00078C  E106               	bnz	u1280
  1108  00078E  0E0A               	movlw	10
  1109  000790  5C48               	subwf	??_vfpfcnvrt+2,w,c
  1110  000792  B0D8               	btfsc	status,0,c
  1111  000794  D002               	goto	u1280
  1112  000796  0E01               	movlw	1
  1113  000798  D001               	goto	u1290
  1114  00079A                     u1280:
  1115  00079A  0E00               	movlw	0
  1116  00079C                     u1290:
  1117  00079C  6E54               	movwf	_vfpfcnvrt$486,c
  1118  00079E  6A55               	clrf	_vfpfcnvrt$486+1,c
  1119  0007A0  5054               	movf	_vfpfcnvrt$486,w,c
  1120  0007A2  1055               	iorwf	_vfpfcnvrt$486+1,w,c
  1121  0007A4  A4D8               	btfss	status,2,c
  1122  0007A6  D7D6               	goto	l1788
  1123  0007A8                     u1300:
  1124                           
  1125                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 825:       
      +                            if ((*fmt[0] == 'd') || (*fmt[0] == 'i')) {
  1126  0007A8  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1127  0007AC  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1128  0007B0  CFDE FFF6          	movff	postinc2,tblptrl
  1129  0007B4  CFDD FFF7          	movff	postdec2,tblptrh
  1130  0007B8                     	if	0	;tblptru may be non-zero
  1131  0007B8                     	endif
  1132  0007B8                     	if	0	;tblptru may be non-zero
  1133  0007B8                     	endif
  1134  0007B8  0008               	tblrd		*
  1135  0007BA  50F5               	movf	tablat,w,c
  1136  0007BC  0A64               	xorlw	100
  1137  0007BE  B4D8               	btfsc	status,2,c
  1138  0007C0  D00D               	goto	u1320
  1139  0007C2  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1140  0007C6  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1141  0007CA  CFDE FFF6          	movff	postinc2,tblptrl
  1142  0007CE  CFDD FFF7          	movff	postdec2,tblptrh
  1143  0007D2                     	if	0	;tblptru may be non-zero
  1144  0007D2                     	endif
  1145  0007D2                     	if	0	;tblptru may be non-zero
  1146  0007D2                     	endif
  1147  0007D2  0008               	tblrd		*
  1148  0007D4  50F5               	movf	tablat,w,c
  1149  0007D6  0A69               	xorlw	105
  1150  0007D8  A4D8               	btfss	status,2,c
  1151  0007DA  D03F               	goto	l1806
  1152  0007DC                     u1320:
  1153                           
  1154                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 827:       
      +                                ++*fmt;
  1155  0007DC  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1156  0007E0  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1157  0007E4  2ADE               	incf	postinc2,f,c
  1158  0007E6  0E00               	movlw	0
  1159  0007E8  22DD               	addwfc	postdec2,f,c
  1160                           
  1161                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 828:       
      +                                ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  1162  0007EA  C044  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1163  0007EE  C045  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1164  0007F2  CFDF F046          	movff	indf2,??_vfpfcnvrt
  1165  0007F6  0E02               	movlw	2
  1166  0007F8  26DE               	addwf	postinc2,f,c
  1167  0007FA  CFDF F047          	movff	indf2,??_vfpfcnvrt+1
  1168  0007FE  0E00               	movlw	0
  1169  000800  22DD               	addwfc	postdec2,f,c
  1170  000802  C046  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1171  000806  C047  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1172  00080A  CFDE F04A          	movff	postinc2,vfpfcnvrt@ll
  1173  00080E  CFDD F04B          	movff	postdec2,vfpfcnvrt@ll+1
  1174  000812  0E00               	movlw	0
  1175  000814  BE4B               	btfsc	vfpfcnvrt@ll+1,7,c
  1176  000816  0EFF               	movlw	-1
  1177  000818  6E4C               	movwf	vfpfcnvrt@ll+2,c
  1178  00081A  6E4D               	movwf	vfpfcnvrt@ll+3,c
  1179  00081C  6E4E               	movwf	vfpfcnvrt@ll+4,c
  1180  00081E  6E4F               	movwf	vfpfcnvrt@ll+5,c
  1181  000820  6E50               	movwf	vfpfcnvrt@ll+6,c
  1182  000822  6E51               	movwf	vfpfcnvrt@ll+7,c
  1183                           
  1184                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 830:       
      +                                return dtoa(fp, ll);
  1185  000824  C040  F01C         	movff	vfpfcnvrt@fp,dtoa@fp
  1186  000828  C041  F01D         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  1187  00082C  C04A  F01E         	movff	vfpfcnvrt@ll,dtoa@d
  1188  000830  C04B  F01F         	movff	vfpfcnvrt@ll+1,dtoa@d+1
  1189  000834  C04C  F020         	movff	vfpfcnvrt@ll+2,dtoa@d+2
  1190  000838  C04D  F021         	movff	vfpfcnvrt@ll+3,dtoa@d+3
  1191  00083C  C04E  F022         	movff	vfpfcnvrt@ll+4,dtoa@d+4
  1192  000840  C04F  F023         	movff	vfpfcnvrt@ll+5,dtoa@d+5
  1193  000844  C050  F024         	movff	vfpfcnvrt@ll+6,dtoa@d+6
  1194  000848  C051  F025         	movff	vfpfcnvrt@ll+7,dtoa@d+7
  1195  00084C  EC76  F004         	call	_dtoa	;wreg free
  1196  000850  C01C  F040         	movff	?_dtoa,?_vfpfcnvrt
  1197  000854  C01D  F041         	movff	?_dtoa+1,?_vfpfcnvrt+1
  1198  000858  0012               	return	
  1199  00085A                     l1806:
  1200                           
  1201                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
  1202  00085A  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1203  00085E  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1204  000862  CFDE FFF6          	movff	postinc2,tblptrl
  1205  000866  CFDD FFF7          	movff	postdec2,tblptrh
  1206  00086A                     	if	0	;tblptru may be non-zero
  1207  00086A                     	endif
  1208  00086A                     	if	0	;tblptru may be non-zero
  1209  00086A                     	endif
  1210  00086A  0008               	tblrd		*
  1211  00086C  50F5               	movf	tablat,w,c
  1212  00086E  0A25               	xorlw	37
  1213  000870  A4D8               	btfss	status,2,c
  1214  000872  D016               	goto	l1816
  1215                           
  1216                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
  1217  000874  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1218  000878  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1219  00087C  2ADE               	incf	postinc2,f,c
  1220  00087E  0E00               	movlw	0
  1221  000880  22DD               	addwfc	postdec2,f,c
  1222                           
  1223                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
  1224  000882  0E00               	movlw	0
  1225  000884  6E02               	movwf	fputc@c+1,c
  1226  000886  0E25               	movlw	37
  1227  000888  6E01               	movwf	fputc@c,c
  1228  00088A  C040  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1229  00088E  C041  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1230  000892  ECDF  F007         	call	_fputc	;wreg free
  1231  000896                     l1812:
  1232                           
  1233                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
  1234  000896  0E00               	movlw	0
  1235  000898  6E41               	movwf	?_vfpfcnvrt+1,c
  1236  00089A  0E01               	movlw	1
  1237  00089C  6E40               	movwf	?_vfpfcnvrt,c
  1238  00089E  0012               	return	
  1239  0008A0                     l1816:
  1240                           
  1241                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
  1242  0008A0  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1243  0008A4  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1244  0008A8  2ADE               	incf	postinc2,f,c
  1245  0008AA  0E00               	movlw	0
  1246  0008AC  22DD               	addwfc	postdec2,f,c
  1247                           
  1248                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
  1249  0008AE  0E00               	movlw	0
  1250  0008B0  6E41               	movwf	?_vfpfcnvrt+1,c
  1251  0008B2  0E00               	movlw	0
  1252  0008B4  6E40               	movwf	?_vfpfcnvrt,c
  1253  0008B6  0012               	return	
  1254  0008B8                     l1822:
  1255                           
  1256                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
  1257  0008B8  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1258  0008BC  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1259  0008C0  CFDE FFF6          	movff	postinc2,tblptrl
  1260  0008C4  CFDD FFF7          	movff	postdec2,tblptrh
  1261  0008C8                     	if	0	;tblptru may be non-zero
  1262  0008C8                     	endif
  1263  0008C8                     	if	0	;tblptru may be non-zero
  1264  0008C8                     	endif
  1265  0008C8  0008               	tblrd		*
  1266  0008CA  50F5               	movf	tablat,w,c
  1267  0008CC  6E01               	movwf	fputc@c,c
  1268  0008CE  6A02               	clrf	fputc@c+1,c
  1269  0008D0  C040  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1270  0008D4  C041  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1271  0008D8  ECDF  F007         	call	_fputc	;wreg free
  1272                           
  1273                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
  1274  0008DC  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1275  0008E0  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1276  0008E4  2ADE               	incf	postinc2,f,c
  1277  0008E6  0E00               	movlw	0
  1278  0008E8  22DD               	addwfc	postdec2,f,c
  1279  0008EA  D7D5               	goto	l1812
  1280  0008EC                     __end_of_vfpfcnvrt:
  1281                           	opt callstack 0
  1282                           
  1283 ;; *************** function _dtoa *****************
  1284 ;; Defined at:
  1285 ;;		line 274 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1286 ;; Parameters:    Size  Location     Type
  1287 ;;  fp              2   27[COMRAM] PTR struct _IO_FILE
  1288 ;;		 -> sprintf@f(6), 
  1289 ;;  d               8   29[COMRAM] long long 
  1290 ;; Auto vars:     Size  Location     Type
  1291 ;;  n               8   53[COMRAM] long long 
  1292 ;;  i               2   61[COMRAM] int 
  1293 ;;  s               2   51[COMRAM] int 
  1294 ;;  w               2   49[COMRAM] int 
  1295 ;;  p               2   47[COMRAM] int 
  1296 ;; Return value:  Size  Location     Type
  1297 ;;                  2   27[COMRAM] int 
  1298 ;; Registers used:
  1299 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1300 ;; Tracked objects:
  1301 ;;		On entry : 0/0
  1302 ;;		On exit  : 0/0
  1303 ;;		Unchanged: 0/0
  1304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1305 ;;      Params:        10       0       0       0       0       0       0
  1306 ;;      Locals:        18       0       0       0       0       0       0
  1307 ;;      Temps:          8       0       0       0       0       0       0
  1308 ;;      Totals:        36       0       0       0       0       0       0
  1309 ;;Total ram usage:       36 bytes
  1310 ;; Hardware stack levels used:    1
  1311 ;; Hardware stack levels required when called:    4
  1312 ;; This function calls:
  1313 ;;		___aodiv
  1314 ;;		___aomod
  1315 ;;		_abs
  1316 ;;		_pad
  1317 ;; This function is called by:
  1318 ;;		_vfpfcnvrt
  1319 ;; This function uses a non-reentrant model
  1320 ;;
  1321                           
  1322                           	psect	text4
  1323  0008EC                     __ptext4:
  1324                           	opt callstack 0
  1325  0008EC                     _dtoa:
  1326                           	opt callstack 23
  1327                           
  1328                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 274: static
      +                           int dtoa(FILE *fp, long long d);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\
      +                          c99\common\doprnt.c: 275: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\c
      +                          ommon\doprnt.c: 276:     int i, p, s, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\
      +                          sources\c99\common\doprnt.c: 277:     long long n;;C:\Program Files (x86)\Microchip\xc8\
      +                          v2.05\pic\sources\c99\common\doprnt.c: 280:     n = d;
  1329                           
  1330                           ;incstack = 0
  1331  0008EC  C01E  F036         	movff	dtoa@d,dtoa@n
  1332  0008F0  C01F  F037         	movff	dtoa@d+1,dtoa@n+1
  1333  0008F4  C020  F038         	movff	dtoa@d+2,dtoa@n+2
  1334  0008F8  C021  F039         	movff	dtoa@d+3,dtoa@n+3
  1335  0008FC  C022  F03A         	movff	dtoa@d+4,dtoa@n+4
  1336  000900  C023  F03B         	movff	dtoa@d+5,dtoa@n+5
  1337  000904  C024  F03C         	movff	dtoa@d+6,dtoa@n+6
  1338  000908  C025  F03D         	movff	dtoa@d+7,dtoa@n+7
  1339                           
  1340                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 281:     s 
      +                          = n < 0 ? 1 : 0;
  1341  00090C  AE3D               	btfss	dtoa@n+7,7,c
  1342  00090E  D002               	goto	u1010
  1343  000910  0E01               	movlw	1
  1344  000912  D001               	goto	u1020
  1345  000914                     u1010:
  1346  000914  0E00               	movlw	0
  1347  000916                     u1020:
  1348  000916  6E34               	movwf	dtoa@s,c
  1349  000918  6A35               	clrf	dtoa@s+1,c
  1350                           
  1351                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 282:     if
      +                           (s) {
  1352  00091A  5034               	movf	dtoa@s,w,c
  1353  00091C  1035               	iorwf	dtoa@s+1,w,c
  1354  00091E  B4D8               	btfsc	status,2,c
  1355  000920  D010               	goto	l1620
  1356                           
  1357                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 283:       
      +                            n = -n;
  1358  000922  1E3D               	comf	dtoa@n+7,f,c
  1359  000924  1E3C               	comf	dtoa@n+6,f,c
  1360  000926  1E3B               	comf	dtoa@n+5,f,c
  1361  000928  1E3A               	comf	dtoa@n+4,f,c
  1362  00092A  1E39               	comf	dtoa@n+3,f,c
  1363  00092C  1E38               	comf	dtoa@n+2,f,c
  1364  00092E  1E37               	comf	dtoa@n+1,f,c
  1365  000930  6C36               	negf	dtoa@n,c
  1366  000932  0E00               	movlw	0
  1367  000934  2237               	addwfc	dtoa@n+1,f,c
  1368  000936  2238               	addwfc	dtoa@n+2,f,c
  1369  000938  2239               	addwfc	dtoa@n+3,f,c
  1370  00093A  223A               	addwfc	dtoa@n+4,f,c
  1371  00093C  223B               	addwfc	dtoa@n+5,f,c
  1372  00093E  223C               	addwfc	dtoa@n+6,f,c
  1373  000940  223D               	addwfc	dtoa@n+7,f,c
  1374  000942                     l1620:
  1375                           
  1376                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 287:     if
      +                           (!(prec < 0)) {
  1377  000942  AE75               	btfss	_prec+1,7,c
  1378                           
  1379                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 288:       
      +                            flags &= ~(1 << 1);
  1380  000944  9276               	bcf	_flags,1,c
  1381                           
  1382                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 290:     p 
      +                          = (0 < prec) ? prec : 1;
  1383  000946  BE75               	btfsc	_prec+1,7,c
  1384  000948  D005               	goto	u1050
  1385  00094A  5075               	movf	_prec+1,w,c
  1386  00094C  E108               	bnz	l118
  1387  00094E  0474               	decf	_prec,w,c
  1388  000950  B0D8               	btfsc	status,0,c
  1389  000952  D005               	goto	l118
  1390  000954                     u1050:
  1391  000954  0E00               	movlw	0
  1392  000956  6E31               	movwf	dtoa@p+1,c
  1393  000958  0E01               	movlw	1
  1394  00095A  6E30               	movwf	dtoa@p,c
  1395  00095C  D004               	goto	l120
  1396  00095E                     l118:
  1397  00095E  C074  F030         	movff	_prec,dtoa@p
  1398  000962  C075  F031         	movff	_prec+1,dtoa@p+1
  1399  000966                     l120:
  1400                           
  1401                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 291:     w 
      +                          = width;
  1402  000966  C072  F032         	movff	_width,dtoa@w
  1403  00096A  C073  F033         	movff	_width+1,dtoa@w+1
  1404                           
  1405                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 292:     if
      +                           (s || (flags & (1 << 2))) {
  1406  00096E  5034               	movf	dtoa@s,w,c
  1407  000970  1035               	iorwf	dtoa@s+1,w,c
  1408  000972  A4D8               	btfss	status,2,c
  1409  000974  D002               	goto	u1070
  1410  000976  A476               	btfss	_flags,2,c
  1411  000978  D003               	goto	l1634
  1412  00097A                     u1070:
  1413                           
  1414                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 293:       
      +                            --w;
  1415  00097A  0632               	decf	dtoa@w,f,c
  1416  00097C  A0D8               	btfss	status,0,c
  1417  00097E  0633               	decf	dtoa@w+1,f,c
  1418  000980                     l1634:
  1419                           
  1420                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 297:     i 
      +                          = sizeof(dbuf) - 1;
  1421  000980  0E00               	movlw	0
  1422  000982  6E3F               	movwf	dtoa@i+1,c
  1423  000984  0E1F               	movlw	31
  1424  000986  6E3E               	movwf	dtoa@i,c
  1425                           
  1426                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 298:     db
      +                          uf[i] = '\0';
  1427  000988  0E00               	movlw	0
  1428  00098A  0100               	movlb	0	; () banked
  1429  00098C  6F9F               	movwf	(_dbuf+31)& (0+255),b
  1430                           
  1431                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1432  00098E  D07C               	goto	l1648
  1433  000990                     l1638:
  1434                           
  1435                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 300:       
      +                            --i;
  1436  000990  063E               	decf	dtoa@i,f,c
  1437  000992  A0D8               	btfss	status,0,c
  1438  000994  063F               	decf	dtoa@i+1,f,c
  1439                           
  1440                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 301:       
      +                            dbuf[i] = '0' + abs(n % 10);
  1441  000996  0E80               	movlw	low _dbuf
  1442  000998  243E               	addwf	dtoa@i,w,c
  1443  00099A  6ED9               	movwf	fsr2l,c
  1444  00099C  0E00               	movlw	high _dbuf
  1445  00099E  203F               	addwfc	dtoa@i+1,w,c
  1446  0009A0  6EDA               	movwf	fsr2h,c
  1447  0009A2  C036  F001         	movff	dtoa@n,___aomod@dividend
  1448  0009A6  C037  F002         	movff	dtoa@n+1,___aomod@dividend+1
  1449  0009AA  C038  F003         	movff	dtoa@n+2,___aomod@dividend+2
  1450  0009AE  C039  F004         	movff	dtoa@n+3,___aomod@dividend+3
  1451  0009B2  C03A  F005         	movff	dtoa@n+4,___aomod@dividend+4
  1452  0009B6  C03B  F006         	movff	dtoa@n+5,___aomod@dividend+5
  1453  0009BA  C03C  F007         	movff	dtoa@n+6,___aomod@dividend+6
  1454  0009BE  C03D  F008         	movff	dtoa@n+7,___aomod@dividend+7
  1455  0009C2  0E0A               	movlw	10
  1456  0009C4  6E09               	movwf	___aomod@divisor,c
  1457  0009C6  0E00               	movlw	0
  1458  0009C8  6E0A               	movwf	___aomod@divisor+1,c
  1459  0009CA  0E00               	movlw	0
  1460  0009CC  6E0B               	movwf	___aomod@divisor+2,c
  1461  0009CE  0E00               	movlw	0
  1462  0009D0  6E0C               	movwf	___aomod@divisor+3,c
  1463  0009D2  0E00               	movlw	0
  1464  0009D4  6E0D               	movwf	___aomod@divisor+4,c
  1465  0009D6  0E00               	movlw	0
  1466  0009D8  6E0E               	movwf	___aomod@divisor+5,c
  1467  0009DA  0E00               	movlw	0
  1468  0009DC  6E0F               	movwf	___aomod@divisor+6,c
  1469  0009DE  0E00               	movlw	0
  1470  0009E0  6E10               	movwf	___aomod@divisor+7,c
  1471  0009E2  ECDB  F006         	call	___aomod	;wreg free
  1472  0009E6  C001  F026         	movff	?___aomod,??_dtoa
  1473  0009EA  C002  F027         	movff	?___aomod+1,??_dtoa+1
  1474  0009EE  C003  F028         	movff	?___aomod+2,??_dtoa+2
  1475  0009F2  C004  F029         	movff	?___aomod+3,??_dtoa+3
  1476  0009F6  C005  F02A         	movff	?___aomod+4,??_dtoa+4
  1477  0009FA  C006  F02B         	movff	?___aomod+5,??_dtoa+5
  1478  0009FE  C007  F02C         	movff	?___aomod+6,??_dtoa+6
  1479  000A02  C008  F02D         	movff	?___aomod+7,??_dtoa+7
  1480  000A06  C026  F013         	movff	??_dtoa,abs@a
  1481  000A0A  C028  F014         	movff	??_dtoa+2,abs@a+1
  1482  000A0E  ECD8  F009         	call	_abs	;wreg free
  1483  000A12  5013               	movf	?_abs,w,c
  1484  000A14  0F30               	addlw	48
  1485  000A16  6EDF               	movwf	indf2,c
  1486                           
  1487                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 302:       
      +                            --p;
  1488  000A18  0630               	decf	dtoa@p,f,c
  1489  000A1A  A0D8               	btfss	status,0,c
  1490  000A1C  0631               	decf	dtoa@p+1,f,c
  1491                           
  1492                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 303:       
      +                            --w;
  1493  000A1E  0632               	decf	dtoa@w,f,c
  1494  000A20  A0D8               	btfss	status,0,c
  1495  000A22  0633               	decf	dtoa@w+1,f,c
  1496                           
  1497                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 304:       
      +                            n = n / 10;
  1498  000A24  C036  F001         	movff	dtoa@n,___aodiv@dividend
  1499  000A28  C037  F002         	movff	dtoa@n+1,___aodiv@dividend+1
  1500  000A2C  C038  F003         	movff	dtoa@n+2,___aodiv@dividend+2
  1501  000A30  C039  F004         	movff	dtoa@n+3,___aodiv@dividend+3
  1502  000A34  C03A  F005         	movff	dtoa@n+4,___aodiv@dividend+4
  1503  000A38  C03B  F006         	movff	dtoa@n+5,___aodiv@dividend+5
  1504  000A3C  C03C  F007         	movff	dtoa@n+6,___aodiv@dividend+6
  1505  000A40  C03D  F008         	movff	dtoa@n+7,___aodiv@dividend+7
  1506  000A44  0E0A               	movlw	10
  1507  000A46  6E09               	movwf	___aodiv@divisor,c
  1508  000A48  0E00               	movlw	0
  1509  000A4A  6E0A               	movwf	___aodiv@divisor+1,c
  1510  000A4C  0E00               	movlw	0
  1511  000A4E  6E0B               	movwf	___aodiv@divisor+2,c
  1512  000A50  0E00               	movlw	0
  1513  000A52  6E0C               	movwf	___aodiv@divisor+3,c
  1514  000A54  0E00               	movlw	0
  1515  000A56  6E0D               	movwf	___aodiv@divisor+4,c
  1516  000A58  0E00               	movlw	0
  1517  000A5A  6E0E               	movwf	___aodiv@divisor+5,c
  1518  000A5C  0E00               	movlw	0
  1519  000A5E  6E0F               	movwf	___aodiv@divisor+6,c
  1520  000A60  0E00               	movlw	0
  1521  000A62  6E10               	movwf	___aodiv@divisor+7,c
  1522  000A64  EC97  F005         	call	___aodiv	;wreg free
  1523  000A68  C001  F036         	movff	?___aodiv,dtoa@n
  1524  000A6C  C002  F037         	movff	?___aodiv+1,dtoa@n+1
  1525  000A70  C003  F038         	movff	?___aodiv+2,dtoa@n+2
  1526  000A74  C004  F039         	movff	?___aodiv+3,dtoa@n+3
  1527  000A78  C005  F03A         	movff	?___aodiv+4,dtoa@n+4
  1528  000A7C  C006  F03B         	movff	?___aodiv+5,dtoa@n+5
  1529  000A80  C007  F03C         	movff	?___aodiv+6,dtoa@n+6
  1530  000A84  C008  F03D         	movff	?___aodiv+7,dtoa@n+7
  1531  000A88                     l1648:
  1532                           
  1533                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1534  000A88  BE3F               	btfsc	dtoa@i+1,7,c
  1535  000A8A  D01F               	goto	u1120
  1536  000A8C  503F               	movf	dtoa@i+1,w,c
  1537  000A8E  E103               	bnz	u1080
  1538  000A90  043E               	decf	dtoa@i,w,c
  1539  000A92  A0D8               	btfss	status,0,c
  1540  000A94  D01A               	goto	u1120
  1541  000A96                     u1080:
  1542  000A96  5036               	movf	dtoa@n,w,c
  1543  000A98  1037               	iorwf	dtoa@n+1,w,c
  1544  000A9A  1038               	iorwf	dtoa@n+2,w,c
  1545  000A9C  1039               	iorwf	dtoa@n+3,w,c
  1546  000A9E  103A               	iorwf	dtoa@n+4,w,c
  1547  000AA0  103B               	iorwf	dtoa@n+5,w,c
  1548  000AA2  103C               	iorwf	dtoa@n+6,w,c
  1549  000AA4  103D               	iorwf	dtoa@n+7,w,c
  1550  000AA6  A4D8               	btfss	status,2,c
  1551  000AA8  D773               	goto	l1638
  1552  000AAA  BE31               	btfsc	dtoa@p+1,7,c
  1553  000AAC  D005               	goto	u1100
  1554  000AAE  5031               	movf	dtoa@p+1,w,c
  1555  000AB0  E102               	bnz	u1101
  1556  000AB2  0430               	decf	dtoa@p,w,c
  1557  000AB4  B0D8               	btfsc	status,0,c
  1558  000AB6                     u1101:
  1559  000AB6  D76C               	goto	l1638
  1560  000AB8                     u1100:
  1561  000AB8  BE33               	btfsc	dtoa@w+1,7,c
  1562  000ABA  D007               	goto	u1120
  1563  000ABC  5033               	movf	dtoa@w+1,w,c
  1564  000ABE  E103               	bnz	u1110
  1565  000AC0  0432               	decf	dtoa@w,w,c
  1566  000AC2  A0D8               	btfss	status,0,c
  1567  000AC4  D002               	goto	u1120
  1568  000AC6                     u1110:
  1569  000AC6  B276               	btfsc	_flags,1,c
  1570  000AC8  D763               	goto	l1638
  1571  000ACA                     u1120:
  1572                           
  1573                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 308:     if
      +                           (s || (flags & (1 << 2))) {
  1574  000ACA  5034               	movf	dtoa@s,w,c
  1575  000ACC  1035               	iorwf	dtoa@s+1,w,c
  1576  000ACE  A4D8               	btfss	status,2,c
  1577  000AD0  D002               	goto	u1140
  1578  000AD2  A476               	btfss	_flags,2,c
  1579  000AD4  D017               	goto	l1672
  1580  000AD6                     u1140:
  1581                           
  1582                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 309:       
      +                            --i;
  1583  000AD6  063E               	decf	dtoa@i,f,c
  1584  000AD8  A0D8               	btfss	status,0,c
  1585  000ADA  063F               	decf	dtoa@i+1,f,c
  1586                           
  1587                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 310:       
      +                            dbuf[i] = s ? '-' : '+';
  1588  000ADC  5034               	movf	dtoa@s,w,c
  1589  000ADE  1035               	iorwf	dtoa@s+1,w,c
  1590  000AE0  A4D8               	btfss	status,2,c
  1591  000AE2  D004               	goto	l1668
  1592  000AE4  0E00               	movlw	0
  1593  000AE6  6E2F               	movwf	_dtoa$471+1,c
  1594  000AE8  0E2B               	movlw	43
  1595  000AEA  D003               	goto	L2
  1596  000AEC                     l1668:
  1597  000AEC  0E00               	movlw	0
  1598  000AEE  6E2F               	movwf	_dtoa$471+1,c
  1599  000AF0  0E2D               	movlw	45
  1600  000AF2                     L2:
  1601  000AF2  6E2E               	movwf	_dtoa$471,c
  1602  000AF4  0E80               	movlw	low _dbuf
  1603  000AF6  243E               	addwf	dtoa@i,w,c
  1604  000AF8  6ED9               	movwf	fsr2l,c
  1605  000AFA  0E00               	movlw	high _dbuf
  1606  000AFC  203F               	addwfc	dtoa@i+1,w,c
  1607  000AFE  6EDA               	movwf	fsr2h,c
  1608  000B00  C02E  FFDF         	movff	_dtoa$471,indf2
  1609  000B04                     l1672:
  1610                           
  1611                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 314:     re
      +                          turn pad(fp, &dbuf[i], w);
  1612  000B04  C01C  F011         	movff	dtoa@fp,pad@fp
  1613  000B08  C01D  F012         	movff	dtoa@fp+1,pad@fp+1
  1614  000B0C  0E80               	movlw	low _dbuf
  1615  000B0E  243E               	addwf	dtoa@i,w,c
  1616  000B10  6E13               	movwf	pad@buf,c
  1617  000B12  0E00               	movlw	high _dbuf
  1618  000B14  203F               	addwfc	dtoa@i+1,w,c
  1619  000B16  6E14               	movwf	pad@buf+1,c
  1620  000B18  C032  F015         	movff	dtoa@w,pad@p
  1621  000B1C  C033  F016         	movff	dtoa@w+1,pad@p+1
  1622  000B20  EC7C  F008         	call	_pad	;wreg free
  1623  000B24  C011  F01C         	movff	?_pad,?_dtoa
  1624  000B28  C012  F01D         	movff	?_pad+1,?_dtoa+1
  1625  000B2C  0012               	return		;funcret
  1626  000B2E                     __end_of_dtoa:
  1627                           	opt callstack 0
  1628                           
  1629 ;; *************** function _pad *****************
  1630 ;; Defined at:
  1631 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1632 ;; Parameters:    Size  Location     Type
  1633 ;;  fp              2   16[COMRAM] PTR struct _IO_FILE
  1634 ;;		 -> sprintf@f(6), 
  1635 ;;  buf             2   18[COMRAM] PTR unsigned char 
  1636 ;;		 -> dbuf(32), 
  1637 ;;  p               2   20[COMRAM] int 
  1638 ;; Auto vars:     Size  Location     Type
  1639 ;;  w               2   25[COMRAM] int 
  1640 ;;  i               2   23[COMRAM] int 
  1641 ;; Return value:  Size  Location     Type
  1642 ;;                  2   16[COMRAM] int 
  1643 ;; Registers used:
  1644 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1645 ;; Tracked objects:
  1646 ;;		On entry : 0/0
  1647 ;;		On exit  : 0/0
  1648 ;;		Unchanged: 0/0
  1649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1650 ;;      Params:         6       0       0       0       0       0       0
  1651 ;;      Locals:         4       0       0       0       0       0       0
  1652 ;;      Temps:          1       0       0       0       0       0       0
  1653 ;;      Totals:        11       0       0       0       0       0       0
  1654 ;;Total ram usage:       11 bytes
  1655 ;; Hardware stack levels used:    1
  1656 ;; Hardware stack levels required when called:    3
  1657 ;; This function calls:
  1658 ;;		_fputc
  1659 ;;		_fputs
  1660 ;;		_strlen
  1661 ;; This function is called by:
  1662 ;;		_dtoa
  1663 ;; This function uses a non-reentrant model
  1664 ;;
  1665                           
  1666                           	psect	text5
  1667  0010F8                     __ptext5:
  1668                           	opt callstack 0
  1669  0010F8                     _pad:
  1670                           	opt callstack 23
  1671                           
  1672                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
  1673                           
  1674                           ;incstack = 0
  1675  0010F8  A076               	btfss	_flags,0,c
  1676  0010FA  D00A               	goto	l1478
  1677                           
  1678                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
  1679  0010FC  C013  F00A         	movff	pad@buf,fputs@s
  1680  001100  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1681  001104  C011  F00C         	movff	pad@fp,fputs@fp
  1682  001108  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1683  00110C  ECBC  F009         	call	_fputs	;wreg free
  1684  001110                     l1478:
  1685                           
  1686                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
  1687  001110  BE16               	btfsc	pad@p+1,7,c
  1688  001112  D005               	goto	l1482
  1689  001114  C015  F01A         	movff	pad@p,pad@w
  1690  001118  C016  F01B         	movff	pad@p+1,pad@w+1
  1691  00111C  D004               	goto	l107
  1692  00111E                     l1482:
  1693  00111E  0E00               	movlw	0
  1694  001120  6E1B               	movwf	pad@w+1,c
  1695  001122  0E00               	movlw	0
  1696  001124  6E1A               	movwf	pad@w,c
  1697  001126                     l107:
  1698                           
  1699                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
  1700  001126  0E00               	movlw	0
  1701  001128  6E19               	movwf	pad@i+1,c
  1702  00112A  0E00               	movlw	0
  1703  00112C  6E18               	movwf	pad@i,c
  1704                           
  1705                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  1706  00112E  D00C               	goto	l1488
  1707  001130                     l1484:
  1708                           
  1709                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
  1710  001130  0E00               	movlw	0
  1711  001132  6E02               	movwf	fputc@c+1,c
  1712  001134  0E20               	movlw	32
  1713  001136  6E01               	movwf	fputc@c,c
  1714  001138  C011  F003         	movff	pad@fp,fputc@fp
  1715  00113C  C012  F004         	movff	pad@fp+1,fputc@fp+1
  1716  001140  ECDF  F007         	call	_fputc	;wreg free
  1717                           
  1718                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
  1719  001144  4A18               	infsnz	pad@i,f,c
  1720  001146  2A19               	incf	pad@i+1,f,c
  1721  001148                     l1488:
  1722                           
  1723                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  1724  001148  501A               	movf	pad@w,w,c
  1725  00114A  5C18               	subwf	pad@i,w,c
  1726  00114C  5019               	movf	pad@i+1,w,c
  1727  00114E  0A80               	xorlw	128
  1728  001150  6E17               	movwf	??_pad& (0+255),c
  1729  001152  501B               	movf	pad@w+1,w,c
  1730  001154  0A80               	xorlw	128
  1731  001156  5817               	subwfb	??_pad& (0+255),w,c
  1732  001158  A0D8               	btfss	status,0,c
  1733  00115A  D7EA               	goto	l1484
  1734                           
  1735                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
  1736  00115C  B076               	btfsc	_flags,0,c
  1737  00115E  D00A               	goto	l1492
  1738                           
  1739                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
  1740  001160  C013  F00A         	movff	pad@buf,fputs@s
  1741  001164  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1742  001168  C011  F00C         	movff	pad@fp,fputs@fp
  1743  00116C  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1744  001170  ECBC  F009         	call	_fputs	;wreg free
  1745  001174                     l1492:
  1746                           
  1747                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
  1748  001174  C013  F001         	movff	pad@buf,strlen@s
  1749  001178  C014  F002         	movff	pad@buf+1,strlen@s+1
  1750  00117C  EC09  F00A         	call	_strlen	;wreg free
  1751  001180  501A               	movf	pad@w,w,c
  1752  001182  2401               	addwf	?_strlen,w,c
  1753  001184  6E11               	movwf	?_pad,c
  1754  001186  501B               	movf	pad@w+1,w,c
  1755  001188  2002               	addwfc	?_strlen+1,w,c
  1756  00118A  6E12               	movwf	?_pad+1,c
  1757  00118C  0012               	return		;funcret
  1758  00118E                     __end_of_pad:
  1759                           	opt callstack 0
  1760                           
  1761 ;; *************** function _strlen *****************
  1762 ;; Defined at:
  1763 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
  1764 ;; Parameters:    Size  Location     Type
  1765 ;;  s               2    0[COMRAM] PTR const unsigned char 
  1766 ;;		 -> dbuf(32), 
  1767 ;; Auto vars:     Size  Location     Type
  1768 ;;  a               2    2[COMRAM] PTR const unsigned char 
  1769 ;;		 -> dbuf(32), 
  1770 ;; Return value:  Size  Location     Type
  1771 ;;                  2    0[COMRAM] unsigned int 
  1772 ;; Registers used:
  1773 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1774 ;; Tracked objects:
  1775 ;;		On entry : 0/0
  1776 ;;		On exit  : 0/0
  1777 ;;		Unchanged: 0/0
  1778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1779 ;;      Params:         2       0       0       0       0       0       0
  1780 ;;      Locals:         2       0       0       0       0       0       0
  1781 ;;      Temps:          0       0       0       0       0       0       0
  1782 ;;      Totals:         4       0       0       0       0       0       0
  1783 ;;Total ram usage:        4 bytes
  1784 ;; Hardware stack levels used:    1
  1785 ;; This function calls:
  1786 ;;		Nothing
  1787 ;; This function is called by:
  1788 ;;		_pad
  1789 ;; This function uses a non-reentrant model
  1790 ;;
  1791                           
  1792                           	psect	text6
  1793  001412                     __ptext6:
  1794                           	opt callstack 0
  1795  001412                     _strlen:
  1796                           	opt callstack 25
  1797                           
  1798                           ;incstack = 0
  1799  001412  C001  F003         	movff	strlen@s,strlen@a
  1800  001416  C002  F004         	movff	strlen@s+1,strlen@a+1
  1801  00141A  D002               	goto	l1468
  1802  00141C                     l1466:
  1803  00141C  4A01               	infsnz	strlen@s,f,c
  1804  00141E  2A02               	incf	strlen@s+1,f,c
  1805  001420                     l1468:
  1806  001420  C001  FFD9         	movff	strlen@s,fsr2l
  1807  001424  C002  FFDA         	movff	strlen@s+1,fsr2h
  1808  001428  50DF               	movf	indf2,w,c
  1809  00142A  A4D8               	btfss	status,2,c
  1810  00142C  D7F7               	goto	l1466
  1811  00142E  5003               	movf	strlen@a,w,c
  1812  001430  5C01               	subwf	strlen@s,w,c
  1813  001432  6E01               	movwf	?_strlen,c
  1814  001434  5004               	movf	strlen@a+1,w,c
  1815  001436  5802               	subwfb	strlen@s+1,w,c
  1816  001438  6E02               	movwf	?_strlen+1,c
  1817  00143A  0012               	return		;funcret
  1818  00143C                     __end_of_strlen:
  1819                           	opt callstack 0
  1820                           
  1821 ;; *************** function _fputs *****************
  1822 ;; Defined at:
  1823 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputs.c"
  1824 ;; Parameters:    Size  Location     Type
  1825 ;;  s               2    9[COMRAM] PTR const unsigned char 
  1826 ;;		 -> dbuf(32), 
  1827 ;;  fp              2   11[COMRAM] PTR struct _IO_FILE
  1828 ;;		 -> sprintf@f(6), 
  1829 ;; Auto vars:     Size  Location     Type
  1830 ;;  i               2   14[COMRAM] int 
  1831 ;;  c               1   13[COMRAM] unsigned char 
  1832 ;; Return value:  Size  Location     Type
  1833 ;;                  2    9[COMRAM] int 
  1834 ;; Registers used:
  1835 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1836 ;; Tracked objects:
  1837 ;;		On entry : 0/0
  1838 ;;		On exit  : 0/0
  1839 ;;		Unchanged: 0/0
  1840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1841 ;;      Params:         4       0       0       0       0       0       0
  1842 ;;      Locals:         3       0       0       0       0       0       0
  1843 ;;      Temps:          0       0       0       0       0       0       0
  1844 ;;      Totals:         7       0       0       0       0       0       0
  1845 ;;Total ram usage:        7 bytes
  1846 ;; Hardware stack levels used:    1
  1847 ;; Hardware stack levels required when called:    2
  1848 ;; This function calls:
  1849 ;;		_fputc
  1850 ;; This function is called by:
  1851 ;;		_pad
  1852 ;; This function uses a non-reentrant model
  1853 ;;
  1854                           
  1855                           	psect	text7
  1856  001378                     __ptext7:
  1857                           	opt callstack 0
  1858  001378                     _fputs:
  1859                           	opt callstack 23
  1860                           
  1861                           ;incstack = 0
  1862  001378  0E00               	movlw	0
  1863  00137A  6E10               	movwf	fputs@i+1,c
  1864  00137C  0E00               	movlw	0
  1865  00137E  6E0F               	movwf	fputs@i,c
  1866  001380  D00B               	goto	l1462
  1867  001382                     l1458:
  1868  001382  C00E  F001         	movff	fputs@c,fputc@c
  1869  001386  6A02               	clrf	fputc@c+1,c
  1870  001388  C00C  F003         	movff	fputs@fp,fputc@fp
  1871  00138C  C00D  F004         	movff	fputs@fp+1,fputc@fp+1
  1872  001390  ECDF  F007         	call	_fputc	;wreg free
  1873  001394  4A0F               	infsnz	fputs@i,f,c
  1874  001396  2A10               	incf	fputs@i+1,f,c
  1875  001398                     l1462:
  1876  001398  500F               	movf	fputs@i,w,c
  1877  00139A  240A               	addwf	fputs@s,w,c
  1878  00139C  6ED9               	movwf	fsr2l,c
  1879  00139E  5010               	movf	fputs@i+1,w,c
  1880  0013A0  200B               	addwfc	fputs@s+1,w,c
  1881  0013A2  6EDA               	movwf	fsr2h,c
  1882  0013A4  50DF               	movf	indf2,w,c
  1883  0013A6  6E0E               	movwf	fputs@c,c
  1884  0013A8  500E               	movf	fputs@c,w,c
  1885  0013AA  B4D8               	btfsc	status,2,c
  1886  0013AC  0012               	return	
  1887  0013AE  D7E9               	goto	l1458
  1888  0013B0                     __end_of_fputs:
  1889                           	opt callstack 0
  1890                           
  1891 ;; *************** function _fputc *****************
  1892 ;; Defined at:
  1893 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputc.c"
  1894 ;; Parameters:    Size  Location     Type
  1895 ;;  c               2    0[COMRAM] int 
  1896 ;;  fp              2    2[COMRAM] PTR struct _IO_FILE
  1897 ;;		 -> sprintf@f(6), 
  1898 ;; Auto vars:     Size  Location     Type
  1899 ;;		None
  1900 ;; Return value:  Size  Location     Type
  1901 ;;                  2    0[COMRAM] int 
  1902 ;; Registers used:
  1903 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1904 ;; Tracked objects:
  1905 ;;		On entry : 0/0
  1906 ;;		On exit  : 0/0
  1907 ;;		Unchanged: 0/0
  1908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1909 ;;      Params:         4       0       0       0       0       0       0
  1910 ;;      Locals:         0       0       0       0       0       0       0
  1911 ;;      Temps:          5       0       0       0       0       0       0
  1912 ;;      Totals:         9       0       0       0       0       0       0
  1913 ;;Total ram usage:        9 bytes
  1914 ;; Hardware stack levels used:    1
  1915 ;; Hardware stack levels required when called:    1
  1916 ;; This function calls:
  1917 ;;		_putch
  1918 ;; This function is called by:
  1919 ;;		_pad
  1920 ;;		_vfpfcnvrt
  1921 ;;		_fputs
  1922 ;; This function uses a non-reentrant model
  1923 ;;
  1924                           
  1925                           	psect	text8
  1926  000FBE                     __ptext8:
  1927                           	opt callstack 0
  1928  000FBE                     _fputc:
  1929                           	opt callstack 26
  1930                           
  1931                           ;incstack = 0
  1932  000FBE  5003               	movf	fputc@fp,w,c
  1933  000FC0  1004               	iorwf	fputc@fp+1,w,c
  1934  000FC2  B4D8               	btfsc	status,2,c
  1935  000FC4  D004               	goto	u730
  1936  000FC6  5003               	movf	fputc@fp,w,c
  1937  000FC8  1004               	iorwf	fputc@fp+1,w,c
  1938  000FCA  A4D8               	btfss	status,2,c
  1939  000FCC  D004               	goto	l1448
  1940  000FCE                     u730:
  1941  000FCE  5001               	movf	fputc@c,w,c
  1942  000FD0  EC5B  F00A         	call	_putch
  1943  000FD4  0012               	return	
  1944  000FD6                     l1448:
  1945  000FD6  EE20 F004          	lfsr	2,4
  1946  000FDA  5003               	movf	fputc@fp,w,c
  1947  000FDC  26D9               	addwf	fsr2l,f,c
  1948  000FDE  5004               	movf	fputc@fp+1,w,c
  1949  000FE0  22DA               	addwfc	fsr2h,f,c
  1950  000FE2  50DE               	movf	postinc2,w,c
  1951  000FE4  10DE               	iorwf	postinc2,w,c
  1952  000FE6  B4D8               	btfsc	status,2,c
  1953  000FE8  D016               	goto	u750
  1954  000FEA  EE20 F004          	lfsr	2,4
  1955  000FEE  5003               	movf	fputc@fp,w,c
  1956  000FF0  26D9               	addwf	fsr2l,f,c
  1957  000FF2  5004               	movf	fputc@fp+1,w,c
  1958  000FF4  22DA               	addwfc	fsr2h,f,c
  1959  000FF6  EE10 F002          	lfsr	1,2
  1960  000FFA  5003               	movf	fputc@fp,w,c
  1961  000FFC  26E1               	addwf	fsr1l,f,c
  1962  000FFE  5004               	movf	fputc@fp+1,w,c
  1963  001000  22E2               	addwfc	fsr1h,f,c
  1964  001002  50DE               	movf	postinc2,w,c
  1965  001004  5CE6               	subwf	postinc1,w,c
  1966  001006  50E6               	movf	postinc1,w,c
  1967  001008  0A80               	xorlw	128
  1968  00100A  6E09               	movwf	(??_fputc+4)& (0+255),c
  1969  00100C  50DE               	movf	postinc2,w,c
  1970  00100E  0A80               	xorlw	128
  1971  001010  5809               	subwfb	(??_fputc+4)& (0+255),w,c
  1972  001012  B0D8               	btfsc	status,0,c
  1973  001014  0012               	return	
  1974  001016                     u750:
  1975  001016  EE20 F002          	lfsr	2,2
  1976  00101A  5003               	movf	fputc@fp,w,c
  1977  00101C  26D9               	addwf	fsr2l,f,c
  1978  00101E  5004               	movf	fputc@fp+1,w,c
  1979  001020  22DA               	addwfc	fsr2h,f,c
  1980  001022  CFDE F005          	movff	postinc2,??_fputc
  1981  001026  CFDD F006          	movff	postdec2,??_fputc+1
  1982  00102A  C003  FFD9         	movff	fputc@fp,fsr2l
  1983  00102E  C004  FFDA         	movff	fputc@fp+1,fsr2h
  1984  001032  CFDE F007          	movff	postinc2,??_fputc+2
  1985  001036  CFDD F008          	movff	postdec2,??_fputc+3
  1986  00103A  5005               	movf	??_fputc,w,c
  1987  00103C  2407               	addwf	??_fputc+2,w,c
  1988  00103E  6ED9               	movwf	fsr2l,c
  1989  001040  5006               	movf	??_fputc+1,w,c
  1990  001042  2008               	addwfc	??_fputc+3,w,c
  1991  001044  6EDA               	movwf	fsr2h,c
  1992  001046  C001  FFDF         	movff	fputc@c,indf2
  1993  00104A  EE20 F002          	lfsr	2,2
  1994  00104E  5003               	movf	fputc@fp,w,c
  1995  001050  26D9               	addwf	fsr2l,f,c
  1996  001052  5004               	movf	fputc@fp+1,w,c
  1997  001054  22DA               	addwfc	fsr2h,f,c
  1998  001056  2ADE               	incf	postinc2,f,c
  1999  001058  0E00               	movlw	0
  2000  00105A  22DD               	addwfc	postdec2,f,c
  2001  00105C  0012               	return		;funcret
  2002  00105E                     __end_of_fputc:
  2003                           	opt callstack 0
  2004                           
  2005 ;; *************** function _putch *****************
  2006 ;; Defined at:
  2007 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\putch.c"
  2008 ;; Parameters:    Size  Location     Type
  2009 ;;  c               1    wreg     unsigned char 
  2010 ;; Auto vars:     Size  Location     Type
  2011 ;;  c               1    0[COMRAM] unsigned char 
  2012 ;; Return value:  Size  Location     Type
  2013 ;;                  1    wreg      void 
  2014 ;; Registers used:
  2015 ;;		wreg
  2016 ;; Tracked objects:
  2017 ;;		On entry : 0/0
  2018 ;;		On exit  : 0/0
  2019 ;;		Unchanged: 0/0
  2020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2021 ;;      Params:         0       0       0       0       0       0       0
  2022 ;;      Locals:         0       0       0       0       0       0       0
  2023 ;;      Temps:          0       0       0       0       0       0       0
  2024 ;;      Totals:         0       0       0       0       0       0       0
  2025 ;;Total ram usage:        0 bytes
  2026 ;; Hardware stack levels used:    1
  2027 ;; This function calls:
  2028 ;;		Nothing
  2029 ;; This function is called by:
  2030 ;;		_fputc
  2031 ;; This function uses a non-reentrant model
  2032 ;;
  2033                           
  2034                           	psect	text9
  2035  0014B6                     __ptext9:
  2036                           	opt callstack 0
  2037  0014B6                     _putch:
  2038                           	opt callstack 26
  2039                           
  2040                           ;incstack = 0
  2041  0014B6  0012               	return		;funcret
  2042  0014B8                     __end_of_putch:
  2043                           	opt callstack 0
  2044                           
  2045 ;; *************** function _abs *****************
  2046 ;; Defined at:
  2047 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\abs.c"
  2048 ;; Parameters:    Size  Location     Type
  2049 ;;  a               2   18[COMRAM] int 
  2050 ;; Auto vars:     Size  Location     Type
  2051 ;;		None
  2052 ;; Return value:  Size  Location     Type
  2053 ;;                  2   18[COMRAM] int 
  2054 ;; Registers used:
  2055 ;;		wreg, status,2, status,0
  2056 ;; Tracked objects:
  2057 ;;		On entry : 0/0
  2058 ;;		On exit  : 0/0
  2059 ;;		Unchanged: 0/0
  2060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2061 ;;      Params:         2       0       0       0       0       0       0
  2062 ;;      Locals:         0       0       0       0       0       0       0
  2063 ;;      Temps:          2       0       0       0       0       0       0
  2064 ;;      Totals:         4       0       0       0       0       0       0
  2065 ;;Total ram usage:        4 bytes
  2066 ;; Hardware stack levels used:    1
  2067 ;; This function calls:
  2068 ;;		Nothing
  2069 ;; This function is called by:
  2070 ;;		_dtoa
  2071 ;; This function uses a non-reentrant model
  2072 ;;
  2073                           
  2074                           	psect	text10
  2075  0013B0                     __ptext10:
  2076                           	opt callstack 0
  2077  0013B0                     _abs:
  2078                           	opt callstack 26
  2079                           
  2080                           ;incstack = 0
  2081  0013B0  BE14               	btfsc	abs@a+1,7,c
  2082  0013B2  D005               	goto	u820
  2083  0013B4  5014               	movf	abs@a+1,w,c
  2084  0013B6  E110               	bnz	l852
  2085  0013B8  0413               	decf	abs@a,w,c
  2086  0013BA  B0D8               	btfsc	status,0,c
  2087  0013BC  D00D               	goto	l852
  2088  0013BE                     u820:
  2089  0013BE  C013  F015         	movff	abs@a,??_abs
  2090  0013C2  C014  F016         	movff	abs@a+1,??_abs+1
  2091  0013C6  1E15               	comf	??_abs,f,c
  2092  0013C8  1E16               	comf	??_abs+1,f,c
  2093  0013CA  4A15               	infsnz	??_abs,f,c
  2094  0013CC  2A16               	incf	??_abs+1,f,c
  2095  0013CE  C015  F013         	movff	??_abs,?_abs
  2096  0013D2  C016  F014         	movff	??_abs+1,?_abs+1
  2097  0013D6  0012               	return	
  2098  0013D8                     l852:
  2099  0013D8  C013  F013         	movff	abs@a,?_abs
  2100  0013DC  C014  F014         	movff	abs@a+1,?_abs+1
  2101  0013E0  0012               	return		;funcret
  2102  0013E2                     __end_of_abs:
  2103                           	opt callstack 0
  2104                           
  2105 ;; *************** function ___aomod *****************
  2106 ;; Defined at:
  2107 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aomod.c"
  2108 ;; Parameters:    Size  Location     Type
  2109 ;;  dividend        8    0[COMRAM] long long 
  2110 ;;  divisor         8    8[COMRAM] long long 
  2111 ;; Auto vars:     Size  Location     Type
  2112 ;;  sign            1   17[COMRAM] unsigned char 
  2113 ;;  counter         1   16[COMRAM] unsigned char 
  2114 ;; Return value:  Size  Location     Type
  2115 ;;                  8    0[COMRAM] long long 
  2116 ;; Registers used:
  2117 ;;		wreg, status,2, status,0
  2118 ;; Tracked objects:
  2119 ;;		On entry : 0/0
  2120 ;;		On exit  : 0/0
  2121 ;;		Unchanged: 0/0
  2122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2123 ;;      Params:        16       0       0       0       0       0       0
  2124 ;;      Locals:         2       0       0       0       0       0       0
  2125 ;;      Temps:          0       0       0       0       0       0       0
  2126 ;;      Totals:        18       0       0       0       0       0       0
  2127 ;;Total ram usage:       18 bytes
  2128 ;; Hardware stack levels used:    1
  2129 ;; This function calls:
  2130 ;;		Nothing
  2131 ;; This function is called by:
  2132 ;;		_dtoa
  2133 ;; This function uses a non-reentrant model
  2134 ;;
  2135                           
  2136                           	psect	text11
  2137  000DB6                     __ptext11:
  2138                           	opt callstack 0
  2139  000DB6                     ___aomod:
  2140                           	opt callstack 26
  2141                           
  2142                           ;incstack = 0
  2143  000DB6  0E00               	movlw	0
  2144  000DB8  6E12               	movwf	___aomod@sign,c
  2145  000DBA  AE08               	btfss	___aomod@dividend+7,7,c
  2146  000DBC  D012               	goto	l1562
  2147  000DBE  1E08               	comf	___aomod@dividend+7,f,c
  2148  000DC0  1E07               	comf	___aomod@dividend+6,f,c
  2149  000DC2  1E06               	comf	___aomod@dividend+5,f,c
  2150  000DC4  1E05               	comf	___aomod@dividend+4,f,c
  2151  000DC6  1E04               	comf	___aomod@dividend+3,f,c
  2152  000DC8  1E03               	comf	___aomod@dividend+2,f,c
  2153  000DCA  1E02               	comf	___aomod@dividend+1,f,c
  2154  000DCC  6C01               	negf	___aomod@dividend,c
  2155  000DCE  0E00               	movlw	0
  2156  000DD0  2202               	addwfc	___aomod@dividend+1,f,c
  2157  000DD2  2203               	addwfc	___aomod@dividend+2,f,c
  2158  000DD4  2204               	addwfc	___aomod@dividend+3,f,c
  2159  000DD6  2205               	addwfc	___aomod@dividend+4,f,c
  2160  000DD8  2206               	addwfc	___aomod@dividend+5,f,c
  2161  000DDA  2207               	addwfc	___aomod@dividend+6,f,c
  2162  000DDC  2208               	addwfc	___aomod@dividend+7,f,c
  2163  000DDE  0E01               	movlw	1
  2164  000DE0  6E12               	movwf	___aomod@sign,c
  2165  000DE2                     l1562:
  2166  000DE2  AE10               	btfss	___aomod@divisor+7,7,c
  2167  000DE4  D010               	goto	l1566
  2168  000DE6  1E10               	comf	___aomod@divisor+7,f,c
  2169  000DE8  1E0F               	comf	___aomod@divisor+6,f,c
  2170  000DEA  1E0E               	comf	___aomod@divisor+5,f,c
  2171  000DEC  1E0D               	comf	___aomod@divisor+4,f,c
  2172  000DEE  1E0C               	comf	___aomod@divisor+3,f,c
  2173  000DF0  1E0B               	comf	___aomod@divisor+2,f,c
  2174  000DF2  1E0A               	comf	___aomod@divisor+1,f,c
  2175  000DF4  6C09               	negf	___aomod@divisor,c
  2176  000DF6  0E00               	movlw	0
  2177  000DF8  220A               	addwfc	___aomod@divisor+1,f,c
  2178  000DFA  220B               	addwfc	___aomod@divisor+2,f,c
  2179  000DFC  220C               	addwfc	___aomod@divisor+3,f,c
  2180  000DFE  220D               	addwfc	___aomod@divisor+4,f,c
  2181  000E00  220E               	addwfc	___aomod@divisor+5,f,c
  2182  000E02  220F               	addwfc	___aomod@divisor+6,f,c
  2183  000E04  2210               	addwfc	___aomod@divisor+7,f,c
  2184  000E06                     l1566:
  2185  000E06  5009               	movf	___aomod@divisor,w,c
  2186  000E08  100A               	iorwf	___aomod@divisor+1,w,c
  2187  000E0A  100B               	iorwf	___aomod@divisor+2,w,c
  2188  000E0C  100C               	iorwf	___aomod@divisor+3,w,c
  2189  000E0E  100D               	iorwf	___aomod@divisor+4,w,c
  2190  000E10  100E               	iorwf	___aomod@divisor+5,w,c
  2191  000E12  100F               	iorwf	___aomod@divisor+6,w,c
  2192  000E14  1010               	iorwf	___aomod@divisor+7,w,c
  2193  000E16  B4D8               	btfsc	status,2,c
  2194  000E18  D03C               	goto	l1582
  2195  000E1A  0E01               	movlw	1
  2196  000E1C  6E11               	movwf	___aomod@counter,c
  2197  000E1E  D00A               	goto	l1572
  2198  000E20                     l1570:
  2199  000E20  90D8               	bcf	status,0,c
  2200  000E22  3609               	rlcf	___aomod@divisor,f,c
  2201  000E24  360A               	rlcf	___aomod@divisor+1,f,c
  2202  000E26  360B               	rlcf	___aomod@divisor+2,f,c
  2203  000E28  360C               	rlcf	___aomod@divisor+3,f,c
  2204  000E2A  360D               	rlcf	___aomod@divisor+4,f,c
  2205  000E2C  360E               	rlcf	___aomod@divisor+5,f,c
  2206  000E2E  360F               	rlcf	___aomod@divisor+6,f,c
  2207  000E30  3610               	rlcf	___aomod@divisor+7,f,c
  2208  000E32  2A11               	incf	___aomod@counter,f,c
  2209  000E34                     l1572:
  2210  000E34  AE10               	btfss	___aomod@divisor+7,7,c
  2211  000E36  D7F4               	goto	l1570
  2212  000E38                     u950:
  2213  000E38  5009               	movf	___aomod@divisor,w,c
  2214  000E3A  5C01               	subwf	___aomod@dividend,w,c
  2215  000E3C  500A               	movf	___aomod@divisor+1,w,c
  2216  000E3E  5802               	subwfb	___aomod@dividend+1,w,c
  2217  000E40  500B               	movf	___aomod@divisor+2,w,c
  2218  000E42  5803               	subwfb	___aomod@dividend+2,w,c
  2219  000E44  500C               	movf	___aomod@divisor+3,w,c
  2220  000E46  5804               	subwfb	___aomod@dividend+3,w,c
  2221  000E48  500D               	movf	___aomod@divisor+4,w,c
  2222  000E4A  5805               	subwfb	___aomod@dividend+4,w,c
  2223  000E4C  500E               	movf	___aomod@divisor+5,w,c
  2224  000E4E  5806               	subwfb	___aomod@dividend+5,w,c
  2225  000E50  500F               	movf	___aomod@divisor+6,w,c
  2226  000E52  5807               	subwfb	___aomod@dividend+6,w,c
  2227  000E54  5010               	movf	___aomod@divisor+7,w,c
  2228  000E56  5808               	subwfb	___aomod@dividend+7,w,c
  2229  000E58  A0D8               	btfss	status,0,c
  2230  000E5A  D010               	goto	l1578
  2231  000E5C  5009               	movf	___aomod@divisor,w,c
  2232  000E5E  5E01               	subwf	___aomod@dividend,f,c
  2233  000E60  500A               	movf	___aomod@divisor+1,w,c
  2234  000E62  5A02               	subwfb	___aomod@dividend+1,f,c
  2235  000E64  500B               	movf	___aomod@divisor+2,w,c
  2236  000E66  5A03               	subwfb	___aomod@dividend+2,f,c
  2237  000E68  500C               	movf	___aomod@divisor+3,w,c
  2238  000E6A  5A04               	subwfb	___aomod@dividend+3,f,c
  2239  000E6C  500D               	movf	___aomod@divisor+4,w,c
  2240  000E6E  5A05               	subwfb	___aomod@dividend+4,f,c
  2241  000E70  500E               	movf	___aomod@divisor+5,w,c
  2242  000E72  5A06               	subwfb	___aomod@dividend+5,f,c
  2243  000E74  500F               	movf	___aomod@divisor+6,w,c
  2244  000E76  5A07               	subwfb	___aomod@dividend+6,f,c
  2245  000E78  5010               	movf	___aomod@divisor+7,w,c
  2246  000E7A  5A08               	subwfb	___aomod@dividend+7,f,c
  2247  000E7C                     l1578:
  2248  000E7C  90D8               	bcf	status,0,c
  2249  000E7E  3210               	rrcf	___aomod@divisor+7,f,c
  2250  000E80  320F               	rrcf	___aomod@divisor+6,f,c
  2251  000E82  320E               	rrcf	___aomod@divisor+5,f,c
  2252  000E84  320D               	rrcf	___aomod@divisor+4,f,c
  2253  000E86  320C               	rrcf	___aomod@divisor+3,f,c
  2254  000E88  320B               	rrcf	___aomod@divisor+2,f,c
  2255  000E8A  320A               	rrcf	___aomod@divisor+1,f,c
  2256  000E8C  3209               	rrcf	___aomod@divisor,f,c
  2257  000E8E  2E11               	decfsz	___aomod@counter,f,c
  2258  000E90  D7D3               	goto	u950
  2259  000E92                     l1582:
  2260  000E92  5012               	movf	___aomod@sign,w,c
  2261  000E94  B4D8               	btfsc	status,2,c
  2262  000E96  D010               	goto	l1586
  2263  000E98  1E08               	comf	___aomod@dividend+7,f,c
  2264  000E9A  1E07               	comf	___aomod@dividend+6,f,c
  2265  000E9C  1E06               	comf	___aomod@dividend+5,f,c
  2266  000E9E  1E05               	comf	___aomod@dividend+4,f,c
  2267  000EA0  1E04               	comf	___aomod@dividend+3,f,c
  2268  000EA2  1E03               	comf	___aomod@dividend+2,f,c
  2269  000EA4  1E02               	comf	___aomod@dividend+1,f,c
  2270  000EA6  6C01               	negf	___aomod@dividend,c
  2271  000EA8  0E00               	movlw	0
  2272  000EAA  2202               	addwfc	___aomod@dividend+1,f,c
  2273  000EAC  2203               	addwfc	___aomod@dividend+2,f,c
  2274  000EAE  2204               	addwfc	___aomod@dividend+3,f,c
  2275  000EB0  2205               	addwfc	___aomod@dividend+4,f,c
  2276  000EB2  2206               	addwfc	___aomod@dividend+5,f,c
  2277  000EB4  2207               	addwfc	___aomod@dividend+6,f,c
  2278  000EB6  2208               	addwfc	___aomod@dividend+7,f,c
  2279  000EB8                     l1586:
  2280  000EB8  C001  F001         	movff	___aomod@dividend,?___aomod
  2281  000EBC  C002  F002         	movff	___aomod@dividend+1,?___aomod+1
  2282  000EC0  C003  F003         	movff	___aomod@dividend+2,?___aomod+2
  2283  000EC4  C004  F004         	movff	___aomod@dividend+3,?___aomod+3
  2284  000EC8  C005  F005         	movff	___aomod@dividend+4,?___aomod+4
  2285  000ECC  C006  F006         	movff	___aomod@dividend+5,?___aomod+5
  2286  000ED0  C007  F007         	movff	___aomod@dividend+6,?___aomod+6
  2287  000ED4  C008  F008         	movff	___aomod@dividend+7,?___aomod+7
  2288  000ED8  0012               	return		;funcret
  2289  000EDA                     __end_of___aomod:
  2290                           	opt callstack 0
  2291                           
  2292 ;; *************** function ___aodiv *****************
  2293 ;; Defined at:
  2294 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aodiv.c"
  2295 ;; Parameters:    Size  Location     Type
  2296 ;;  dividend        8    0[COMRAM] long long 
  2297 ;;  divisor         8    8[COMRAM] long long 
  2298 ;; Auto vars:     Size  Location     Type
  2299 ;;  quotient        8   18[COMRAM] long long 
  2300 ;;  sign            1   17[COMRAM] unsigned char 
  2301 ;;  counter         1   16[COMRAM] unsigned char 
  2302 ;; Return value:  Size  Location     Type
  2303 ;;                  8    0[COMRAM] long long 
  2304 ;; Registers used:
  2305 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2306 ;; Tracked objects:
  2307 ;;		On entry : 0/0
  2308 ;;		On exit  : 0/0
  2309 ;;		Unchanged: 0/0
  2310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2311 ;;      Params:        16       0       0       0       0       0       0
  2312 ;;      Locals:        10       0       0       0       0       0       0
  2313 ;;      Temps:          0       0       0       0       0       0       0
  2314 ;;      Totals:        26       0       0       0       0       0       0
  2315 ;;Total ram usage:       26 bytes
  2316 ;; Hardware stack levels used:    1
  2317 ;; This function calls:
  2318 ;;		Nothing
  2319 ;; This function is called by:
  2320 ;;		_dtoa
  2321 ;; This function uses a non-reentrant model
  2322 ;;
  2323                           
  2324                           	psect	text12
  2325  000B2E                     __ptext12:
  2326                           	opt callstack 0
  2327  000B2E                     ___aodiv:
  2328                           	opt callstack 26
  2329                           
  2330                           ;incstack = 0
  2331  000B2E  0E00               	movlw	0
  2332  000B30  6E12               	movwf	___aodiv@sign,c
  2333  000B32  AE10               	btfss	___aodiv@divisor+7,7,c
  2334  000B34  D012               	goto	l1518
  2335  000B36  1E10               	comf	___aodiv@divisor+7,f,c
  2336  000B38  1E0F               	comf	___aodiv@divisor+6,f,c
  2337  000B3A  1E0E               	comf	___aodiv@divisor+5,f,c
  2338  000B3C  1E0D               	comf	___aodiv@divisor+4,f,c
  2339  000B3E  1E0C               	comf	___aodiv@divisor+3,f,c
  2340  000B40  1E0B               	comf	___aodiv@divisor+2,f,c
  2341  000B42  1E0A               	comf	___aodiv@divisor+1,f,c
  2342  000B44  6C09               	negf	___aodiv@divisor,c
  2343  000B46  0E00               	movlw	0
  2344  000B48  220A               	addwfc	___aodiv@divisor+1,f,c
  2345  000B4A  220B               	addwfc	___aodiv@divisor+2,f,c
  2346  000B4C  220C               	addwfc	___aodiv@divisor+3,f,c
  2347  000B4E  220D               	addwfc	___aodiv@divisor+4,f,c
  2348  000B50  220E               	addwfc	___aodiv@divisor+5,f,c
  2349  000B52  220F               	addwfc	___aodiv@divisor+6,f,c
  2350  000B54  2210               	addwfc	___aodiv@divisor+7,f,c
  2351  000B56  0E01               	movlw	1
  2352  000B58  6E12               	movwf	___aodiv@sign,c
  2353  000B5A                     l1518:
  2354  000B5A  AE08               	btfss	___aodiv@dividend+7,7,c
  2355  000B5C  D012               	goto	l1524
  2356  000B5E  1E08               	comf	___aodiv@dividend+7,f,c
  2357  000B60  1E07               	comf	___aodiv@dividend+6,f,c
  2358  000B62  1E06               	comf	___aodiv@dividend+5,f,c
  2359  000B64  1E05               	comf	___aodiv@dividend+4,f,c
  2360  000B66  1E04               	comf	___aodiv@dividend+3,f,c
  2361  000B68  1E03               	comf	___aodiv@dividend+2,f,c
  2362  000B6A  1E02               	comf	___aodiv@dividend+1,f,c
  2363  000B6C  6C01               	negf	___aodiv@dividend,c
  2364  000B6E  0E00               	movlw	0
  2365  000B70  2202               	addwfc	___aodiv@dividend+1,f,c
  2366  000B72  2203               	addwfc	___aodiv@dividend+2,f,c
  2367  000B74  2204               	addwfc	___aodiv@dividend+3,f,c
  2368  000B76  2205               	addwfc	___aodiv@dividend+4,f,c
  2369  000B78  2206               	addwfc	___aodiv@dividend+5,f,c
  2370  000B7A  2207               	addwfc	___aodiv@dividend+6,f,c
  2371  000B7C  2208               	addwfc	___aodiv@dividend+7,f,c
  2372  000B7E  0E01               	movlw	1
  2373  000B80  1A12               	xorwf	___aodiv@sign,f,c
  2374  000B82                     l1524:
  2375  000B82  EE20  F013         	lfsr	2,___aodiv@quotient
  2376  000B86  0E07               	movlw	7
  2377  000B88                     u871:
  2378  000B88  6ADE               	clrf	postinc2,c
  2379  000B8A  06E8               	decf	wreg,f,c
  2380  000B8C  E2FD               	bc	u871
  2381  000B8E  5009               	movf	___aodiv@divisor,w,c
  2382  000B90  100A               	iorwf	___aodiv@divisor+1,w,c
  2383  000B92  100B               	iorwf	___aodiv@divisor+2,w,c
  2384  000B94  100C               	iorwf	___aodiv@divisor+3,w,c
  2385  000B96  100D               	iorwf	___aodiv@divisor+4,w,c
  2386  000B98  100E               	iorwf	___aodiv@divisor+5,w,c
  2387  000B9A  100F               	iorwf	___aodiv@divisor+6,w,c
  2388  000B9C  1010               	iorwf	___aodiv@divisor+7,w,c
  2389  000B9E  B4D8               	btfsc	status,2,c
  2390  000BA0  D046               	goto	l1546
  2391  000BA2  0E01               	movlw	1
  2392  000BA4  6E11               	movwf	___aodiv@counter,c
  2393  000BA6  D00A               	goto	l1532
  2394  000BA8                     l1530:
  2395  000BA8  90D8               	bcf	status,0,c
  2396  000BAA  3609               	rlcf	___aodiv@divisor,f,c
  2397  000BAC  360A               	rlcf	___aodiv@divisor+1,f,c
  2398  000BAE  360B               	rlcf	___aodiv@divisor+2,f,c
  2399  000BB0  360C               	rlcf	___aodiv@divisor+3,f,c
  2400  000BB2  360D               	rlcf	___aodiv@divisor+4,f,c
  2401  000BB4  360E               	rlcf	___aodiv@divisor+5,f,c
  2402  000BB6  360F               	rlcf	___aodiv@divisor+6,f,c
  2403  000BB8  3610               	rlcf	___aodiv@divisor+7,f,c
  2404  000BBA  2A11               	incf	___aodiv@counter,f,c
  2405  000BBC                     l1532:
  2406  000BBC  AE10               	btfss	___aodiv@divisor+7,7,c
  2407  000BBE  D7F4               	goto	l1530
  2408  000BC0                     u890:
  2409  000BC0  90D8               	bcf	status,0,c
  2410  000BC2  3613               	rlcf	___aodiv@quotient,f,c
  2411  000BC4  3614               	rlcf	___aodiv@quotient+1,f,c
  2412  000BC6  3615               	rlcf	___aodiv@quotient+2,f,c
  2413  000BC8  3616               	rlcf	___aodiv@quotient+3,f,c
  2414  000BCA  3617               	rlcf	___aodiv@quotient+4,f,c
  2415  000BCC  3618               	rlcf	___aodiv@quotient+5,f,c
  2416  000BCE  3619               	rlcf	___aodiv@quotient+6,f,c
  2417  000BD0  361A               	rlcf	___aodiv@quotient+7,f,c
  2418  000BD2  5009               	movf	___aodiv@divisor,w,c
  2419  000BD4  5C01               	subwf	___aodiv@dividend,w,c
  2420  000BD6  500A               	movf	___aodiv@divisor+1,w,c
  2421  000BD8  5802               	subwfb	___aodiv@dividend+1,w,c
  2422  000BDA  500B               	movf	___aodiv@divisor+2,w,c
  2423  000BDC  5803               	subwfb	___aodiv@dividend+2,w,c
  2424  000BDE  500C               	movf	___aodiv@divisor+3,w,c
  2425  000BE0  5804               	subwfb	___aodiv@dividend+3,w,c
  2426  000BE2  500D               	movf	___aodiv@divisor+4,w,c
  2427  000BE4  5805               	subwfb	___aodiv@dividend+4,w,c
  2428  000BE6  500E               	movf	___aodiv@divisor+5,w,c
  2429  000BE8  5806               	subwfb	___aodiv@dividend+5,w,c
  2430  000BEA  500F               	movf	___aodiv@divisor+6,w,c
  2431  000BEC  5807               	subwfb	___aodiv@dividend+6,w,c
  2432  000BEE  5010               	movf	___aodiv@divisor+7,w,c
  2433  000BF0  5808               	subwfb	___aodiv@dividend+7,w,c
  2434  000BF2  A0D8               	btfss	status,0,c
  2435  000BF4  D011               	goto	l1542
  2436  000BF6  5009               	movf	___aodiv@divisor,w,c
  2437  000BF8  5E01               	subwf	___aodiv@dividend,f,c
  2438  000BFA  500A               	movf	___aodiv@divisor+1,w,c
  2439  000BFC  5A02               	subwfb	___aodiv@dividend+1,f,c
  2440  000BFE  500B               	movf	___aodiv@divisor+2,w,c
  2441  000C00  5A03               	subwfb	___aodiv@dividend+2,f,c
  2442  000C02  500C               	movf	___aodiv@divisor+3,w,c
  2443  000C04  5A04               	subwfb	___aodiv@dividend+3,f,c
  2444  000C06  500D               	movf	___aodiv@divisor+4,w,c
  2445  000C08  5A05               	subwfb	___aodiv@dividend+4,f,c
  2446  000C0A  500E               	movf	___aodiv@divisor+5,w,c
  2447  000C0C  5A06               	subwfb	___aodiv@dividend+5,f,c
  2448  000C0E  500F               	movf	___aodiv@divisor+6,w,c
  2449  000C10  5A07               	subwfb	___aodiv@dividend+6,f,c
  2450  000C12  5010               	movf	___aodiv@divisor+7,w,c
  2451  000C14  5A08               	subwfb	___aodiv@dividend+7,f,c
  2452  000C16  8013               	bsf	___aodiv@quotient,0,c
  2453  000C18                     l1542:
  2454  000C18  90D8               	bcf	status,0,c
  2455  000C1A  3210               	rrcf	___aodiv@divisor+7,f,c
  2456  000C1C  320F               	rrcf	___aodiv@divisor+6,f,c
  2457  000C1E  320E               	rrcf	___aodiv@divisor+5,f,c
  2458  000C20  320D               	rrcf	___aodiv@divisor+4,f,c
  2459  000C22  320C               	rrcf	___aodiv@divisor+3,f,c
  2460  000C24  320B               	rrcf	___aodiv@divisor+2,f,c
  2461  000C26  320A               	rrcf	___aodiv@divisor+1,f,c
  2462  000C28  3209               	rrcf	___aodiv@divisor,f,c
  2463  000C2A  2E11               	decfsz	___aodiv@counter,f,c
  2464  000C2C  D7C9               	goto	u890
  2465  000C2E                     l1546:
  2466  000C2E  5012               	movf	___aodiv@sign,w,c
  2467  000C30  B4D8               	btfsc	status,2,c
  2468  000C32  D010               	goto	l1550
  2469  000C34  1E1A               	comf	___aodiv@quotient+7,f,c
  2470  000C36  1E19               	comf	___aodiv@quotient+6,f,c
  2471  000C38  1E18               	comf	___aodiv@quotient+5,f,c
  2472  000C3A  1E17               	comf	___aodiv@quotient+4,f,c
  2473  000C3C  1E16               	comf	___aodiv@quotient+3,f,c
  2474  000C3E  1E15               	comf	___aodiv@quotient+2,f,c
  2475  000C40  1E14               	comf	___aodiv@quotient+1,f,c
  2476  000C42  6C13               	negf	___aodiv@quotient,c
  2477  000C44  0E00               	movlw	0
  2478  000C46  2214               	addwfc	___aodiv@quotient+1,f,c
  2479  000C48  2215               	addwfc	___aodiv@quotient+2,f,c
  2480  000C4A  2216               	addwfc	___aodiv@quotient+3,f,c
  2481  000C4C  2217               	addwfc	___aodiv@quotient+4,f,c
  2482  000C4E  2218               	addwfc	___aodiv@quotient+5,f,c
  2483  000C50  2219               	addwfc	___aodiv@quotient+6,f,c
  2484  000C52  221A               	addwfc	___aodiv@quotient+7,f,c
  2485  000C54                     l1550:
  2486  000C54  C013  F001         	movff	___aodiv@quotient,?___aodiv
  2487  000C58  C014  F002         	movff	___aodiv@quotient+1,?___aodiv+1
  2488  000C5C  C015  F003         	movff	___aodiv@quotient+2,?___aodiv+2
  2489  000C60  C016  F004         	movff	___aodiv@quotient+3,?___aodiv+3
  2490  000C64  C017  F005         	movff	___aodiv@quotient+4,?___aodiv+4
  2491  000C68  C018  F006         	movff	___aodiv@quotient+5,?___aodiv+5
  2492  000C6C  C019  F007         	movff	___aodiv@quotient+6,?___aodiv+6
  2493  000C70  C01A  F008         	movff	___aodiv@quotient+7,?___aodiv+7
  2494  000C74  0012               	return		;funcret
  2495  000C76                     __end_of___aodiv:
  2496                           	opt callstack 0
  2497                           
  2498 ;; *************** function _atoi *****************
  2499 ;; Defined at:
  2500 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\atoi.c"
  2501 ;; Parameters:    Size  Location     Type
  2502 ;;  s               2    7[COMRAM] PTR const unsigned char 
  2503 ;;		 -> STR_3(5), 
  2504 ;; Auto vars:     Size  Location     Type
  2505 ;;  n               2   20[COMRAM] int 
  2506 ;;  neg             2   13[COMRAM] int 
  2507 ;; Return value:  Size  Location     Type
  2508 ;;                  2    7[COMRAM] int 
  2509 ;; Registers used:
  2510 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2511 ;; Tracked objects:
  2512 ;;		On entry : 0/0
  2513 ;;		On exit  : 0/0
  2514 ;;		Unchanged: 0/0
  2515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2516 ;;      Params:         2       0       0       0       0       0       0
  2517 ;;      Locals:         9       0       0       0       0       0       0
  2518 ;;      Temps:          4       0       0       0       0       0       0
  2519 ;;      Totals:        15       0       0       0       0       0       0
  2520 ;;Total ram usage:       15 bytes
  2521 ;; Hardware stack levels used:    1
  2522 ;; Hardware stack levels required when called:    1
  2523 ;; This function calls:
  2524 ;;		___wmul
  2525 ;;		_isdigit
  2526 ;;		_isspace
  2527 ;; This function is called by:
  2528 ;;		_vfpfcnvrt
  2529 ;; This function uses a non-reentrant model
  2530 ;;
  2531                           
  2532                           	psect	text13
  2533  000C76                     __ptext13:
  2534                           	opt callstack 0
  2535  000C76                     _atoi:
  2536                           	opt callstack 26
  2537                           
  2538                           ;incstack = 0
  2539  000C76  0E00               	movlw	0
  2540  000C78  6E16               	movwf	atoi@n+1,c
  2541  000C7A  0E00               	movlw	0
  2542  000C7C  6E15               	movwf	atoi@n,c
  2543  000C7E  0E00               	movlw	0
  2544  000C80  6E0F               	movwf	atoi@neg+1,c
  2545  000C82  0E00               	movlw	0
  2546  000C84  6E0E               	movwf	atoi@neg,c
  2547  000C86  D002               	goto	l1680
  2548  000C88                     l1678:
  2549  000C88  4A08               	infsnz	atoi@s,f,c
  2550  000C8A  2A09               	incf	atoi@s+1,f,c
  2551  000C8C                     l1680:
  2552  000C8C  0E01               	movlw	1
  2553  000C8E  6E14               	movwf	_atoi$944,c
  2554  000C90  C008  FFF6         	movff	atoi@s,tblptrl
  2555  000C94  C009  FFF7         	movff	atoi@s+1,tblptrh
  2556  000C98                     	if	0	;tblptru may be non-zero
  2557  000C98                     	endif
  2558  000C98                     	if	0	;tblptru may be non-zero
  2559  000C98                     	endif
  2560  000C98  0008               	tblrd		*
  2561  000C9A  50F5               	movf	tablat,w,c
  2562  000C9C  0A20               	xorlw	32
  2563  000C9E  B4D8               	btfsc	status,2,c
  2564  000CA0  D018               	goto	l1688
  2565  000CA2  0EF7               	movlw	247
  2566  000CA4  6E0A               	movwf	??_atoi& (0+255),c
  2567  000CA6  0EFF               	movlw	255
  2568  000CA8  6E0B               	movwf	(??_atoi+1)& (0+255),c
  2569  000CAA  C008  FFF6         	movff	atoi@s,tblptrl
  2570  000CAE  C009  FFF7         	movff	atoi@s+1,tblptrh
  2571  000CB2                     	if	0	;tblptru may be non-zero
  2572  000CB2                     	endif
  2573  000CB2                     	if	0	;tblptru may be non-zero
  2574  000CB2                     	endif
  2575  000CB2  0008               	tblrd		*
  2576  000CB4  50F5               	movf	tablat,w,c
  2577  000CB6  6E0C               	movwf	(??_atoi+2)& (0+255),c
  2578  000CB8  6A0D               	clrf	(??_atoi+3)& (0+255),c
  2579  000CBA  500A               	movf	??_atoi,w,c
  2580  000CBC  260C               	addwf	??_atoi+2,f,c
  2581  000CBE  500B               	movf	??_atoi+1,w,c
  2582  000CC0  220D               	addwfc	??_atoi+3,f,c
  2583  000CC2  500D               	movf	??_atoi+3,w,c
  2584  000CC4  E104               	bnz	u1170
  2585  000CC6  0E05               	movlw	5
  2586  000CC8  5C0C               	subwf	??_atoi+2,w,c
  2587  000CCA  A0D8               	btfss	status,0,c
  2588  000CCC  D002               	goto	l1688
  2589  000CCE                     u1170:
  2590  000CCE  0E00               	movlw	0
  2591  000CD0  6E14               	movwf	_atoi$944,c
  2592  000CD2                     l1688:
  2593  000CD2  C014  F010         	movff	_atoi$944,_atoi$943
  2594  000CD6  6A11               	clrf	_atoi$943+1,c
  2595  000CD8  5010               	movf	_atoi$943,w,c
  2596  000CDA  1011               	iorwf	_atoi$943+1,w,c
  2597  000CDC  B4D8               	btfsc	status,2,c
  2598  000CDE  D008               	goto	l1698
  2599  000CE0  D7D3               	goto	l1678
  2600  000CE2                     l1694:
  2601  000CE2  0E00               	movlw	0
  2602  000CE4  6E0F               	movwf	atoi@neg+1,c
  2603  000CE6  0E01               	movlw	1
  2604  000CE8  6E0E               	movwf	atoi@neg,c
  2605  000CEA                     l1696:
  2606  000CEA  4A08               	infsnz	atoi@s,f,c
  2607  000CEC  2A09               	incf	atoi@s+1,f,c
  2608  000CEE  D02E               	goto	l1704
  2609  000CF0                     l1698:
  2610  000CF0  C008  FFF6         	movff	atoi@s,tblptrl
  2611  000CF4  C009  FFF7         	movff	atoi@s+1,tblptrh
  2612  000CF8                     	if	0	;tblptru may be non-zero
  2613  000CF8                     	endif
  2614  000CF8                     	if	0	;tblptru may be non-zero
  2615  000CF8                     	endif
  2616  000CF8  0008               	tblrd		*
  2617  000CFA  50F5               	movf	tablat,w,c
  2618  000CFC  6E0A               	movwf	??_atoi& (0+255),c
  2619  000CFE  6A0B               	clrf	(??_atoi+1)& (0+255),c
  2620                           
  2621                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2622                           ; Switch size 1, requested type "simple"
  2623                           ; Number of cases is 1, Range of values is 0 to 0
  2624                           ; switch strategies available:
  2625                           ; Name         Instructions Cycles
  2626                           ; simple_byte            4     3 (average)
  2627                           ;	Chosen strategy is simple_byte
  2628  000D00  500B               	movf	??_atoi+1,w,c
  2629  000D02  0A00               	xorlw	0	; case 0
  2630  000D04  A4D8               	btfss	status,2,c
  2631  000D06  D022               	goto	l1704
  2632                           
  2633                           ; Switch size 1, requested type "simple"
  2634                           ; Number of cases is 2, Range of values is 43 to 45
  2635                           ; switch strategies available:
  2636                           ; Name         Instructions Cycles
  2637                           ; simple_byte            7     4 (average)
  2638                           ;	Chosen strategy is simple_byte
  2639  000D08  500A               	movf	??_atoi,w,c
  2640  000D0A  0A2B               	xorlw	43	; case 43
  2641  000D0C  B4D8               	btfsc	status,2,c
  2642  000D0E  D7ED               	goto	l1696
  2643  000D10  0A06               	xorlw	6	; case 45
  2644  000D12  B4D8               	btfsc	status,2,c
  2645  000D14  D7E6               	goto	l1694
  2646  000D16  D01A               	goto	l1704
  2647  000D18                     l1700:
  2648  000D18  C015  F001         	movff	atoi@n,___wmul@multiplier
  2649  000D1C  C016  F002         	movff	atoi@n+1,___wmul@multiplier+1
  2650  000D20  0E00               	movlw	0
  2651  000D22  6E04               	movwf	___wmul@multiplicand+1,c
  2652  000D24  0E0A               	movlw	10
  2653  000D26  6E03               	movwf	___wmul@multiplicand,c
  2654  000D28  EC1E  F00A         	call	___wmul	;wreg free
  2655  000D2C  C008  FFF6         	movff	atoi@s,tblptrl
  2656  000D30  C009  FFF7         	movff	atoi@s+1,tblptrh
  2657  000D34                     	if	0	;tblptru may be non-zero
  2658  000D34                     	endif
  2659  000D34                     	if	0	;tblptru may be non-zero
  2660  000D34                     	endif
  2661  000D34  0008               	tblrd		*
  2662  000D36  50F5               	movf	tablat,w,c
  2663  000D38  5E01               	subwf	?___wmul,f,c
  2664  000D3A  0E00               	movlw	0
  2665  000D3C  5A02               	subwfb	?___wmul+1,f,c
  2666  000D3E  0E30               	movlw	48
  2667  000D40  2401               	addwf	?___wmul,w,c
  2668  000D42  6E15               	movwf	atoi@n,c
  2669  000D44  0E00               	movlw	0
  2670  000D46  2002               	addwfc	?___wmul+1,w,c
  2671  000D48  6E16               	movwf	atoi@n+1,c
  2672  000D4A  D7CF               	goto	l1696
  2673  000D4C                     l1704:
  2674  000D4C  0ED0               	movlw	208
  2675  000D4E  6E0A               	movwf	??_atoi& (0+255),c
  2676  000D50  0EFF               	movlw	255
  2677  000D52  6E0B               	movwf	(??_atoi+1)& (0+255),c
  2678  000D54  C008  FFF6         	movff	atoi@s,tblptrl
  2679  000D58  C009  FFF7         	movff	atoi@s+1,tblptrh
  2680  000D5C                     	if	0	;tblptru may be non-zero
  2681  000D5C                     	endif
  2682  000D5C                     	if	0	;tblptru may be non-zero
  2683  000D5C                     	endif
  2684  000D5C  0008               	tblrd		*
  2685  000D5E  50F5               	movf	tablat,w,c
  2686  000D60  6E0C               	movwf	(??_atoi+2)& (0+255),c
  2687  000D62  6A0D               	clrf	(??_atoi+3)& (0+255),c
  2688  000D64  500A               	movf	??_atoi,w,c
  2689  000D66  260C               	addwf	??_atoi+2,f,c
  2690  000D68  500B               	movf	??_atoi+1,w,c
  2691  000D6A  220D               	addwfc	??_atoi+3,f,c
  2692  000D6C  500D               	movf	??_atoi+3,w,c
  2693  000D6E  E106               	bnz	u1190
  2694  000D70  0E0A               	movlw	10
  2695  000D72  5C0C               	subwf	??_atoi+2,w,c
  2696  000D74  B0D8               	btfsc	status,0,c
  2697  000D76  D002               	goto	u1190
  2698  000D78  0E01               	movlw	1
  2699  000D7A  D001               	goto	u1200
  2700  000D7C                     u1190:
  2701  000D7C  0E00               	movlw	0
  2702  000D7E                     u1200:
  2703  000D7E  6E12               	movwf	_atoi$945,c
  2704  000D80  6A13               	clrf	_atoi$945+1,c
  2705  000D82  5012               	movf	_atoi$945,w,c
  2706  000D84  1013               	iorwf	_atoi$945+1,w,c
  2707  000D86  A4D8               	btfss	status,2,c
  2708  000D88  D7C7               	goto	l1700
  2709  000D8A  500E               	movf	atoi@neg,w,c
  2710  000D8C  100F               	iorwf	atoi@neg+1,w,c
  2711  000D8E  A4D8               	btfss	status,2,c
  2712  000D90  D00D               	goto	l883
  2713  000D92  C015  F00A         	movff	atoi@n,??_atoi
  2714  000D96  C016  F00B         	movff	atoi@n+1,??_atoi+1
  2715  000D9A  1E0A               	comf	??_atoi,f,c
  2716  000D9C  1E0B               	comf	??_atoi+1,f,c
  2717  000D9E  4A0A               	infsnz	??_atoi,f,c
  2718  000DA0  2A0B               	incf	??_atoi+1,f,c
  2719  000DA2  C00A  F008         	movff	??_atoi,?_atoi
  2720  000DA6  C00B  F009         	movff	??_atoi+1,?_atoi+1
  2721  000DAA  0012               	return	
  2722  000DAC                     l883:
  2723  000DAC  C015  F008         	movff	atoi@n,?_atoi
  2724  000DB0  C016  F009         	movff	atoi@n+1,?_atoi+1
  2725  000DB4  0012               	return		;funcret
  2726  000DB6                     __end_of_atoi:
  2727                           	opt callstack 0
  2728                           
  2729 ;; *************** function _isspace *****************
  2730 ;; Defined at:
  2731 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\isspace.c"
  2732 ;; Parameters:    Size  Location     Type
  2733 ;;  c               2    0[COMRAM] int 
  2734 ;; Auto vars:     Size  Location     Type
  2735 ;;		None
  2736 ;; Return value:  Size  Location     Type
  2737 ;;                  2    0[COMRAM] int 
  2738 ;; Registers used:
  2739 ;;		wreg, status,2, status,0
  2740 ;; Tracked objects:
  2741 ;;		On entry : 0/0
  2742 ;;		On exit  : 0/0
  2743 ;;		Unchanged: 0/0
  2744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2745 ;;      Params:         2       0       0       0       0       0       0
  2746 ;;      Locals:         1       0       0       0       0       0       0
  2747 ;;      Temps:          4       0       0       0       0       0       0
  2748 ;;      Totals:         7       0       0       0       0       0       0
  2749 ;;Total ram usage:        7 bytes
  2750 ;; Hardware stack levels used:    1
  2751 ;; This function calls:
  2752 ;;		Nothing
  2753 ;; This function is called by:
  2754 ;;		_atoi
  2755 ;; This function uses a non-reentrant model
  2756 ;;
  2757                           
  2758                           	psect	text14
  2759  00133A                     __ptext14:
  2760                           	opt callstack 0
  2761  00133A                     _isspace:
  2762                           	opt callstack 26
  2763                           
  2764                           ;incstack = 0
  2765  00133A  0E01               	movlw	1
  2766  00133C  6E07               	movwf	_isspace$961,c
  2767  00133E  0E20               	movlw	32
  2768  001340  1801               	xorwf	isspace@c,w,c
  2769  001342  1002               	iorwf	isspace@c+1,w,c
  2770  001344  B4D8               	btfsc	status,2,c
  2771  001346  D014               	goto	l1598
  2772  001348  0EF7               	movlw	247
  2773  00134A  6E03               	movwf	??_isspace& (0+255),c
  2774  00134C  0EFF               	movlw	255
  2775  00134E  6E04               	movwf	(??_isspace+1)& (0+255),c
  2776  001350  C001  F005         	movff	isspace@c,??_isspace+2
  2777  001354  C002  F006         	movff	isspace@c+1,??_isspace+3
  2778  001358  5003               	movf	??_isspace,w,c
  2779  00135A  2605               	addwf	??_isspace+2,f,c
  2780  00135C  5004               	movf	??_isspace+1,w,c
  2781  00135E  2206               	addwfc	??_isspace+3,f,c
  2782  001360  5006               	movf	??_isspace+3,w,c
  2783  001362  E104               	bnz	u990
  2784  001364  0E05               	movlw	5
  2785  001366  5C05               	subwf	??_isspace+2,w,c
  2786  001368  A0D8               	btfss	status,0,c
  2787  00136A  D002               	goto	l1598
  2788  00136C                     u990:
  2789  00136C  0E00               	movlw	0
  2790  00136E  6E07               	movwf	_isspace$961,c
  2791  001370                     l1598:
  2792  001370  C007  F001         	movff	_isspace$961,?_isspace
  2793  001374  6A02               	clrf	?_isspace+1,c
  2794  001376  0012               	return		;funcret
  2795  001378                     __end_of_isspace:
  2796                           	opt callstack 0
  2797                           
  2798 ;; *************** function _isdigit *****************
  2799 ;; Defined at:
  2800 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\isdigit.c"
  2801 ;; Parameters:    Size  Location     Type
  2802 ;;  c               2    0[COMRAM] int 
  2803 ;; Auto vars:     Size  Location     Type
  2804 ;;		None
  2805 ;; Return value:  Size  Location     Type
  2806 ;;                  2    0[COMRAM] int 
  2807 ;; Registers used:
  2808 ;;		wreg, status,2, status,0
  2809 ;; Tracked objects:
  2810 ;;		On entry : 0/0
  2811 ;;		On exit  : 0/0
  2812 ;;		Unchanged: 0/0
  2813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2814 ;;      Params:         2       0       0       0       0       0       0
  2815 ;;      Locals:         0       0       0       0       0       0       0
  2816 ;;      Temps:          4       0       0       0       0       0       0
  2817 ;;      Totals:         6       0       0       0       0       0       0
  2818 ;;Total ram usage:        6 bytes
  2819 ;; Hardware stack levels used:    1
  2820 ;; This function calls:
  2821 ;;		Nothing
  2822 ;; This function is called by:
  2823 ;;		_vfpfcnvrt
  2824 ;;		_atoi
  2825 ;; This function uses a non-reentrant model
  2826 ;;
  2827                           
  2828                           	psect	text15
  2829  0013E2                     __ptext15:
  2830                           	opt callstack 0
  2831  0013E2                     _isdigit:
  2832                           	opt callstack 27
  2833                           
  2834                           ;incstack = 0
  2835  0013E2  0ED0               	movlw	208
  2836  0013E4  6E03               	movwf	??_isdigit& (0+255),c
  2837  0013E6  0EFF               	movlw	255
  2838  0013E8  6E04               	movwf	(??_isdigit+1)& (0+255),c
  2839  0013EA  C001  F005         	movff	isdigit@c,??_isdigit+2
  2840  0013EE  C002  F006         	movff	isdigit@c+1,??_isdigit+3
  2841  0013F2  5003               	movf	??_isdigit,w,c
  2842  0013F4  2605               	addwf	??_isdigit+2,f,c
  2843  0013F6  5004               	movf	??_isdigit+1,w,c
  2844  0013F8  2206               	addwfc	??_isdigit+3,f,c
  2845  0013FA  5006               	movf	??_isdigit+3,w,c
  2846  0013FC  E106               	bnz	u830
  2847  0013FE  0E0A               	movlw	10
  2848  001400  5C05               	subwf	??_isdigit+2,w,c
  2849  001402  B0D8               	btfsc	status,0,c
  2850  001404  D002               	goto	u830
  2851  001406  0E01               	movlw	1
  2852  001408  D001               	goto	u840
  2853  00140A                     u830:
  2854  00140A  0E00               	movlw	0
  2855  00140C                     u840:
  2856  00140C  6E01               	movwf	?_isdigit,c
  2857  00140E  6A02               	clrf	?_isdigit+1,c
  2858  001410  0012               	return		;funcret
  2859  001412                     __end_of_isdigit:
  2860                           	opt callstack 0
  2861                           
  2862 ;; *************** function ___wmul *****************
  2863 ;; Defined at:
  2864 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
  2865 ;; Parameters:    Size  Location     Type
  2866 ;;  multiplier      2    0[COMRAM] unsigned int 
  2867 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2868 ;; Auto vars:     Size  Location     Type
  2869 ;;  product         2    4[COMRAM] unsigned int 
  2870 ;; Return value:  Size  Location     Type
  2871 ;;                  2    0[COMRAM] unsigned int 
  2872 ;; Registers used:
  2873 ;;		wreg, status,2, status,0, prodl, prodh
  2874 ;; Tracked objects:
  2875 ;;		On entry : 0/0
  2876 ;;		On exit  : 0/0
  2877 ;;		Unchanged: 0/0
  2878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2879 ;;      Params:         4       0       0       0       0       0       0
  2880 ;;      Locals:         2       0       0       0       0       0       0
  2881 ;;      Temps:          0       0       0       0       0       0       0
  2882 ;;      Totals:         6       0       0       0       0       0       0
  2883 ;;Total ram usage:        6 bytes
  2884 ;; Hardware stack levels used:    1
  2885 ;; This function calls:
  2886 ;;		Nothing
  2887 ;; This function is called by:
  2888 ;;		_atoi
  2889 ;; This function uses a non-reentrant model
  2890 ;;
  2891                           
  2892                           	psect	text16
  2893  00143C                     __ptext16:
  2894                           	opt callstack 0
  2895  00143C                     ___wmul:
  2896                           	opt callstack 26
  2897                           
  2898                           ;incstack = 0
  2899  00143C  5001               	movf	___wmul@multiplier,w,c
  2900  00143E  0203               	mulwf	___wmul@multiplicand,c
  2901  001440  CFF3 F005          	movff	prodl,___wmul@product
  2902  001444  CFF4 F006          	movff	prodh,___wmul@product+1
  2903  001448  5001               	movf	___wmul@multiplier,w,c
  2904  00144A  0204               	mulwf	___wmul@multiplicand+1,c
  2905  00144C  50F3               	movf	prodl,w,c
  2906  00144E  2606               	addwf	___wmul@product+1,f,c
  2907  001450  5002               	movf	___wmul@multiplier+1,w,c
  2908  001452  0203               	mulwf	___wmul@multiplicand,c
  2909  001454  50F3               	movf	prodl,w,c
  2910  001456  2606               	addwf	___wmul@product+1,f,c
  2911  001458  C005  F001         	movff	___wmul@product,?___wmul
  2912  00145C  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2913  001460  0012               	return		;funcret
  2914  001462                     __end_of___wmul:
  2915                           	opt callstack 0
  2916                           
  2917 ;; *************** function _lcd_ini *****************
  2918 ;; Defined at:
  2919 ;;		line 3 in file "../Bibliotecas/LCD4b.c"
  2920 ;; Parameters:    Size  Location     Type
  2921 ;;		None
  2922 ;; Auto vars:     Size  Location     Type
  2923 ;;  i               1    5[COMRAM] unsigned char 
  2924 ;; Return value:  Size  Location     Type
  2925 ;;                  1    wreg      void 
  2926 ;; Registers used:
  2927 ;;		wreg, status,2, status,0, cstack
  2928 ;; Tracked objects:
  2929 ;;		On entry : 0/0
  2930 ;;		On exit  : 0/0
  2931 ;;		Unchanged: 0/0
  2932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2933 ;;      Params:         0       0       0       0       0       0       0
  2934 ;;      Locals:         1       0       0       0       0       0       0
  2935 ;;      Temps:          1       0       0       0       0       0       0
  2936 ;;      Totals:         2       0       0       0       0       0       0
  2937 ;;Total ram usage:        2 bytes
  2938 ;; Hardware stack levels used:    1
  2939 ;; Hardware stack levels required when called:    2
  2940 ;; This function calls:
  2941 ;;		_lcd_cmd
  2942 ;; This function is called by:
  2943 ;;		_main
  2944 ;; This function uses a non-reentrant model
  2945 ;;
  2946                           
  2947                           	psect	text17
  2948  00118E                     __ptext17:
  2949                           	opt callstack 0
  2950  00118E                     _lcd_ini:
  2951                           	opt callstack 28
  2952                           
  2953                           ;../Bibliotecas/LCD4b.c: 5: char i;;../Bibliotecas/LCD4b.c: 7: TRISD = 0b00000000;
  2954                           
  2955                           ;incstack = 0
  2956  00118E  0E00               	movlw	0
  2957  001190  6E95               	movwf	3989,c	;volatile
  2958                           
  2959                           ;../Bibliotecas/LCD4b.c: 8: TRISEbits.TRISE1 = 0;
  2960  001192  9296               	bcf	3990,1,c	;volatile
  2961                           
  2962                           ;../Bibliotecas/LCD4b.c: 9: TRISEbits.TRISE0 = 0;
  2963  001194  9096               	bcf	3990,0,c	;volatile
  2964                           
  2965                           ;../Bibliotecas/LCD4b.c: 11: PORTD = 0b00000000;
  2966  001196  0E00               	movlw	0
  2967  001198  6E83               	movwf	3971,c	;volatile
  2968                           
  2969                           ;../Bibliotecas/LCD4b.c: 12: PORTEbits.RE0 = 0;
  2970  00119A  9084               	bcf	3972,0,c	;volatile
  2971                           
  2972                           ;../Bibliotecas/LCD4b.c: 13: PORTEbits.RE1 = 0;
  2973  00119C  9284               	bcf	3972,1,c	;volatile
  2974                           
  2975                           ;../Bibliotecas/LCD4b.c: 15: _delay((unsigned long)((15)*(8000000/4000.0)));
  2976  00119E  0E27               	movlw	39
  2977  0011A0  6E05               	movwf	??_lcd_ini& (0+255),c
  2978  0011A2  0EF5               	movlw	245
  2979  0011A4                     u1447:
  2980  0011A4  2EE8               	decfsz	wreg,f,c
  2981  0011A6  D7FE               	bra	u1447
  2982  0011A8  2E05               	decfsz	??_lcd_ini& (0+255),f,c
  2983  0011AA  D7FC               	bra	u1447
  2984  0011AC  F000               	nop	
  2985                           
  2986                           ;../Bibliotecas/LCD4b.c: 18: for(i=0;i<=2;i++)
  2987  0011AE  0E00               	movlw	0
  2988  0011B0  6E06               	movwf	lcd_ini@i,c
  2989  0011B2                     l1868:
  2990                           
  2991                           ;../Bibliotecas/LCD4b.c: 19:    {;../Bibliotecas/LCD4b.c: 20:    lcd_cmd(0x30);
  2992  0011B2  0E30               	movlw	48
  2993  0011B4  EC6D  F007         	call	_lcd_cmd
  2994                           
  2995                           ;../Bibliotecas/LCD4b.c: 21:    _delay((unsigned long)((5)*(8000000/4000.0)));
  2996  0011B8  0E0D               	movlw	13
  2997  0011BA  6E05               	movwf	??_lcd_ini& (0+255),c
  2998  0011BC  0EFC               	movlw	252
  2999  0011BE                     u1457:
  3000  0011BE  2EE8               	decfsz	wreg,f,c
  3001  0011C0  D7FE               	bra	u1457
  3002  0011C2  2E05               	decfsz	??_lcd_ini& (0+255),f,c
  3003  0011C4  D7FC               	bra	u1457
  3004                           
  3005                           ;../Bibliotecas/LCD4b.c: 22:    }
  3006  0011C6  2A06               	incf	lcd_ini@i,f,c
  3007  0011C8  0E02               	movlw	2
  3008  0011CA  6406               	cpfsgt	lcd_ini@i,c
  3009  0011CC  D7F2               	goto	l1868
  3010                           
  3011                           ;../Bibliotecas/LCD4b.c: 24:    lcd_cmd(0x02);
  3012  0011CE  0E02               	movlw	2
  3013  0011D0  EC6D  F007         	call	_lcd_cmd
  3014                           
  3015                           ;../Bibliotecas/LCD4b.c: 25:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3016  0011D4  0E1A               	movlw	26
  3017  0011D6                     u1467:
  3018  0011D6  2EE8               	decfsz	wreg,f,c
  3019  0011D8  D7FE               	bra	u1467
  3020  0011DA  D000               	nop2	
  3021                           
  3022                           ;../Bibliotecas/LCD4b.c: 26:    lcd_cmd(0x28);
  3023  0011DC  0E28               	movlw	40
  3024  0011DE  EC6D  F007         	call	_lcd_cmd
  3025                           
  3026                           ;../Bibliotecas/LCD4b.c: 27:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3027  0011E2  0E1A               	movlw	26
  3028  0011E4                     u1477:
  3029  0011E4  2EE8               	decfsz	wreg,f,c
  3030  0011E6  D7FE               	bra	u1477
  3031  0011E8  D000               	nop2	
  3032                           
  3033                           ;../Bibliotecas/LCD4b.c: 28:    lcd_cmd(0x01);
  3034  0011EA  0E01               	movlw	1
  3035  0011EC  EC6D  F007         	call	_lcd_cmd
  3036                           
  3037                           ;../Bibliotecas/LCD4b.c: 29:    _delay((unsigned long)((2)*(8000000/4000.0)));
  3038  0011F0  0E06               	movlw	6
  3039  0011F2  6E05               	movwf	??_lcd_ini& (0+255),c
  3040  0011F4  0E30               	movlw	48
  3041  0011F6                     u1487:
  3042  0011F6  2EE8               	decfsz	wreg,f,c
  3043  0011F8  D7FE               	bra	u1487
  3044  0011FA  2E05               	decfsz	??_lcd_ini& (0+255),f,c
  3045  0011FC  D7FC               	bra	u1487
  3046  0011FE  D000               	nop2	
  3047                           
  3048                           ;../Bibliotecas/LCD4b.c: 30:    lcd_cmd(0x0C);
  3049  001200  0E0C               	movlw	12
  3050  001202  EC6D  F007         	call	_lcd_cmd
  3051                           
  3052                           ;../Bibliotecas/LCD4b.c: 31:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3053  001206  0E1A               	movlw	26
  3054  001208                     u1497:
  3055  001208  2EE8               	decfsz	wreg,f,c
  3056  00120A  D7FE               	bra	u1497
  3057  00120C  D000               	nop2	
  3058                           
  3059                           ;../Bibliotecas/LCD4b.c: 32:    lcd_cmd(0x06);
  3060  00120E  0E06               	movlw	6
  3061  001210  EC6D  F007         	call	_lcd_cmd
  3062                           
  3063                           ;../Bibliotecas/LCD4b.c: 33:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3064  001214  0E1A               	movlw	26
  3065  001216                     u1507:
  3066  001216  2EE8               	decfsz	wreg,f,c
  3067  001218  D7FE               	bra	u1507
  3068  00121A  D000               	nop2	
  3069  00121C  0012               	return		;funcret
  3070  00121E                     __end_of_lcd_ini:
  3071                           	opt callstack 0
  3072                           
  3073 ;; *************** function _lcd_escreve_bf *****************
  3074 ;; Defined at:
  3075 ;;		line 82 in file "../Bibliotecas/LCD4b.c"
  3076 ;; Parameters:    Size  Location     Type
  3077 ;;  lin             1    wreg     unsigned char 
  3078 ;;  col             1    6[COMRAM] unsigned char 
  3079 ;;  str             2    7[COMRAM] PTR unsigned char 
  3080 ;;		 -> bufferLCD(16), STR_2(5), STR_1(11), 
  3081 ;; Auto vars:     Size  Location     Type
  3082 ;;  lin             1   10[COMRAM] unsigned char 
  3083 ;;  end             1    9[COMRAM] unsigned char 
  3084 ;; Return value:  Size  Location     Type
  3085 ;;                  1    wreg      void 
  3086 ;; Registers used:
  3087 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3088 ;; Tracked objects:
  3089 ;;		On entry : 0/0
  3090 ;;		On exit  : 0/0
  3091 ;;		Unchanged: 0/0
  3092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3093 ;;      Params:         3       0       0       0       0       0       0
  3094 ;;      Locals:         2       0       0       0       0       0       0
  3095 ;;      Temps:          0       0       0       0       0       0       0
  3096 ;;      Totals:         5       0       0       0       0       0       0
  3097 ;;Total ram usage:        5 bytes
  3098 ;; Hardware stack levels used:    1
  3099 ;; Hardware stack levels required when called:    3
  3100 ;; This function calls:
  3101 ;;		_lcd_envia_byte
  3102 ;; This function is called by:
  3103 ;;		_main
  3104 ;; This function uses a non-reentrant model
  3105 ;;
  3106                           
  3107                           	psect	text18
  3108  00121E                     __ptext18:
  3109                           	opt callstack 0
  3110  00121E                     _lcd_escreve_bf:
  3111                           	opt callstack 27
  3112                           
  3113                           ;incstack = 0
  3114                           ;lcd_escreve_bf@lin stored from wreg
  3115  00121E  6E0B               	movwf	lcd_escreve_bf@lin,c
  3116                           
  3117                           ;../Bibliotecas/LCD4b.c: 82: void lcd_escreve_bf(char lin, char col, char *str);../Bibli
      +                          otecas/LCD4b.c: 83: {;../Bibliotecas/LCD4b.c: 84:     char end;;../Bibliotecas/LCD4b.c: 
      +                          87:     if (lin == 1) {
  3118  001220  040B               	decf	lcd_escreve_bf@lin,w,c
  3119  001222  A4D8               	btfss	status,2,c
  3120  001224  D003               	goto	l1894
  3121                           
  3122                           ;../Bibliotecas/LCD4b.c: 88:         end = col + 0x80 - 1;
  3123  001226  5007               	movf	lcd_escreve_bf@col,w,c
  3124  001228  0F7F               	addlw	127
  3125  00122A  D006               	goto	L3
  3126  00122C                     l1894:
  3127  00122C  0E02               	movlw	2
  3128  00122E  180B               	xorwf	lcd_escreve_bf@lin,w,c
  3129  001230  A4D8               	btfss	status,2,c
  3130  001232  D003               	goto	l1898
  3131                           
  3132                           ;../Bibliotecas/LCD4b.c: 91:         end = col + 0xC0 - 1;
  3133  001234  5007               	movf	lcd_escreve_bf@col,w,c
  3134  001236  0FBF               	addlw	191
  3135  001238                     L3:
  3136  001238  6E0A               	movwf	lcd_escreve_bf@end,c
  3137  00123A                     l1898:
  3138                           
  3139                           ;../Bibliotecas/LCD4b.c: 94:     lcd_envia_byte(0,end);
  3140  00123A  C00A  F005         	movff	lcd_escreve_bf@end,lcd_envia_byte@dado
  3141  00123E  0E00               	movlw	0
  3142  001240  EC42  F00A         	call	_lcd_envia_byte
  3143                           
  3144                           ;../Bibliotecas/LCD4b.c: 98:     while (*str){
  3145  001244  D016               	goto	l1904
  3146  001246                     l1900:
  3147                           
  3148                           ;../Bibliotecas/LCD4b.c: 99:         lcd_envia_byte(1,*str);
  3149  001246  C008  FFF6         	movff	lcd_escreve_bf@str,tblptrl
  3150  00124A  C009  FFF7         	movff	lcd_escreve_bf@str+1,tblptrh
  3151  00124E  6AF8               	clrf	tblptru,c
  3152  001250  0E05               	movlw	(high __ramtop+-1)
  3153  001252  64F7               	cpfsgt	tblptrh,c
  3154  001254  D003               	bra	u1397
  3155  001256  0008               	tblrd		*
  3156  001258  50F5               	movf	tablat,w,c
  3157  00125A  D005               	bra	u1390
  3158  00125C                     u1397:
  3159  00125C  CFF6 FFE1          	movff	tblptrl,fsr1l
  3160  001260  CFF7 FFE2          	movff	tblptrh,fsr1h
  3161  001264  50E7               	movf	indf1,w,c
  3162  001266                     u1390:
  3163  001266  6E05               	movwf	lcd_envia_byte@dado,c
  3164  001268  0E01               	movlw	1
  3165  00126A  EC42  F00A         	call	_lcd_envia_byte
  3166                           
  3167                           ;../Bibliotecas/LCD4b.c: 100:         str++;
  3168  00126E  4A08               	infsnz	lcd_escreve_bf@str,f,c
  3169  001270  2A09               	incf	lcd_escreve_bf@str+1,f,c
  3170  001272                     l1904:
  3171                           
  3172                           ;../Bibliotecas/LCD4b.c: 98:     while (*str){
  3173  001272  C008  FFF6         	movff	lcd_escreve_bf@str,tblptrl
  3174  001276  C009  FFF7         	movff	lcd_escreve_bf@str+1,tblptrh
  3175  00127A  6AF8               	clrf	tblptru,c
  3176  00127C  0E05               	movlw	(high __ramtop+-1)
  3177  00127E  64F7               	cpfsgt	tblptrh,c
  3178  001280  D003               	bra	u1407
  3179  001282  0008               	tblrd		*
  3180  001284  50F5               	movf	tablat,w,c
  3181  001286  D005               	bra	u1400
  3182  001288                     u1407:
  3183  001288  CFF6 FFE1          	movff	tblptrl,fsr1l
  3184  00128C  CFF7 FFE2          	movff	tblptrh,fsr1h
  3185  001290  50E7               	movf	indf1,w,c
  3186  001292                     u1400:
  3187  001292  0900               	iorlw	0
  3188  001294  B4D8               	btfsc	status,2,c
  3189  001296  0012               	return	
  3190  001298  D7D6               	goto	l1900
  3191  00129A                     __end_of_lcd_escreve_bf:
  3192                           	opt callstack 0
  3193                           
  3194 ;; *************** function _lcd_envia_byte *****************
  3195 ;; Defined at:
  3196 ;;		line 74 in file "../Bibliotecas/LCD4b.c"
  3197 ;; Parameters:    Size  Location     Type
  3198 ;;  nivel           1    wreg     unsigned char 
  3199 ;;  dado            1    4[COMRAM] unsigned char 
  3200 ;; Auto vars:     Size  Location     Type
  3201 ;;  nivel           1    5[COMRAM] unsigned char 
  3202 ;; Return value:  Size  Location     Type
  3203 ;;                  1    wreg      void 
  3204 ;; Registers used:
  3205 ;;		wreg, status,2, status,0, cstack
  3206 ;; Tracked objects:
  3207 ;;		On entry : 0/0
  3208 ;;		On exit  : 0/0
  3209 ;;		Unchanged: 0/0
  3210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3211 ;;      Params:         1       0       0       0       0       0       0
  3212 ;;      Locals:         1       0       0       0       0       0       0
  3213 ;;      Temps:          0       0       0       0       0       0       0
  3214 ;;      Totals:         2       0       0       0       0       0       0
  3215 ;;Total ram usage:        2 bytes
  3216 ;; Hardware stack levels used:    1
  3217 ;; Hardware stack levels required when called:    2
  3218 ;; This function calls:
  3219 ;;		_lcd_cmd
  3220 ;; This function is called by:
  3221 ;;		_lcd_escreve_bf
  3222 ;; This function uses a non-reentrant model
  3223 ;;
  3224                           
  3225                           	psect	text19
  3226  001484                     __ptext19:
  3227                           	opt callstack 0
  3228  001484                     _lcd_envia_byte:
  3229                           	opt callstack 27
  3230                           
  3231                           ;incstack = 0
  3232                           ;lcd_envia_byte@nivel stored from wreg
  3233  001484  6E06               	movwf	lcd_envia_byte@nivel,c
  3234                           
  3235                           ;../Bibliotecas/LCD4b.c: 74: void lcd_envia_byte(char nivel, char dado);../Bibliotecas/L
      +                          CD4b.c: 75: {;../Bibliotecas/LCD4b.c: 76:     PORTEbits.RE0 = nivel;
  3236  001486  B006               	btfsc	lcd_envia_byte@nivel,0,c
  3237  001488  D002               	bra	u1345
  3238  00148A  9084               	bcf	3972,0,c	;volatile
  3239  00148C  D001               	bra	u1346
  3240  00148E                     u1345:
  3241  00148E  8084               	bsf	3972,0,c	;volatile
  3242  001490                     u1346:
  3243                           
  3244                           ;../Bibliotecas/LCD4b.c: 77:     _delay((unsigned long)((100)*(8000000/4000000.0)));
  3245  001490  0E42               	movlw	66
  3246  001492                     u1517:
  3247  001492  2EE8               	decfsz	wreg,f,c
  3248  001494  D7FE               	bra	u1517
  3249  001496  D000               	nop2	
  3250                           
  3251                           ;../Bibliotecas/LCD4b.c: 78:     PORTEbits.RE1 = 0;
  3252  001498  9284               	bcf	3972,1,c	;volatile
  3253                           
  3254                           ;../Bibliotecas/LCD4b.c: 79:     lcd_cmd(dado);
  3255  00149A  5005               	movf	lcd_envia_byte@dado,w,c
  3256  00149C  EC6D  F007         	call	_lcd_cmd
  3257  0014A0  0012               	return		;funcret
  3258  0014A2                     __end_of_lcd_envia_byte:
  3259                           	opt callstack 0
  3260                           
  3261 ;; *************** function _lcd_cmd *****************
  3262 ;; Defined at:
  3263 ;;		line 48 in file "../Bibliotecas/LCD4b.c"
  3264 ;; Parameters:    Size  Location     Type
  3265 ;;  cmd             1    wreg     unsigned char 
  3266 ;; Auto vars:     Size  Location     Type
  3267 ;;  cmd             1    3[COMRAM] unsigned char 
  3268 ;; Return value:  Size  Location     Type
  3269 ;;                  1    wreg      void 
  3270 ;; Registers used:
  3271 ;;		wreg, status,2, status,0, cstack
  3272 ;; Tracked objects:
  3273 ;;		On entry : 0/0
  3274 ;;		On exit  : 0/0
  3275 ;;		Unchanged: 0/0
  3276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3277 ;;      Params:         0       0       0       0       0       0       0
  3278 ;;      Locals:         1       0       0       0       0       0       0
  3279 ;;      Temps:          1       0       0       0       0       0       0
  3280 ;;      Totals:         2       0       0       0       0       0       0
  3281 ;;Total ram usage:        2 bytes
  3282 ;; Hardware stack levels used:    1
  3283 ;; Hardware stack levels required when called:    1
  3284 ;; This function calls:
  3285 ;;		_set_bit
  3286 ;; This function is called by:
  3287 ;;		_lcd_ini
  3288 ;;		_lcd_envia_byte
  3289 ;; This function uses a non-reentrant model
  3290 ;;
  3291                           
  3292                           	psect	text20
  3293  000EDA                     __ptext20:
  3294                           	opt callstack 0
  3295  000EDA                     _lcd_cmd:
  3296                           	opt callstack 28
  3297                           
  3298                           ;incstack = 0
  3299                           ;lcd_cmd@cmd stored from wreg
  3300  000EDA  6E04               	movwf	lcd_cmd@cmd,c
  3301                           
  3302                           ;../Bibliotecas/LCD4b.c: 48: void lcd_cmd(char cmd);../Bibliotecas/LCD4b.c: 49: {;../Bib
      +                          liotecas/LCD4b.c: 52:     PORTDbits.RD4 = set_bit(cmd,0b00010000);
  3303  000EDC  0E10               	movlw	16
  3304  000EDE  6E01               	movwf	set_bit@comp,c
  3305  000EE0  5004               	movf	lcd_cmd@cmd,w,c
  3306  000EE2  EC51  F00A         	call	_set_bit
  3307  000EE6  6E03               	movwf	??_lcd_cmd& (0+255),c
  3308  000EE8  3A03               	swapf	??_lcd_cmd,f,c
  3309  000EEA  5083               	movf	3971,w,c	;volatile
  3310  000EEC  1803               	xorwf	??_lcd_cmd,w,c
  3311  000EEE  0BEF               	andlw	-17
  3312  000EF0  1803               	xorwf	??_lcd_cmd,w,c
  3313  000EF2  6E83               	movwf	3971,c	;volatile
  3314                           
  3315                           ;../Bibliotecas/LCD4b.c: 53:     PORTDbits.RD5 = set_bit(cmd,0b00100000);
  3316  000EF4  0E20               	movlw	32
  3317  000EF6  6E01               	movwf	set_bit@comp,c
  3318  000EF8  5004               	movf	lcd_cmd@cmd,w,c
  3319  000EFA  EC51  F00A         	call	_set_bit
  3320  000EFE  6E03               	movwf	??_lcd_cmd& (0+255),c
  3321  000F00  3A03               	swapf	??_lcd_cmd,f,c
  3322  000F02  4603               	rlncf	??_lcd_cmd,f,c
  3323  000F04  5083               	movf	3971,w,c	;volatile
  3324  000F06  1803               	xorwf	??_lcd_cmd,w,c
  3325  000F08  0BDF               	andlw	-33
  3326  000F0A  1803               	xorwf	??_lcd_cmd,w,c
  3327  000F0C  6E83               	movwf	3971,c	;volatile
  3328                           
  3329                           ;../Bibliotecas/LCD4b.c: 54:     PORTDbits.RD6 = set_bit(cmd,0b01000000);
  3330  000F0E  0E40               	movlw	64
  3331  000F10  6E01               	movwf	set_bit@comp,c
  3332  000F12  5004               	movf	lcd_cmd@cmd,w,c
  3333  000F14  EC51  F00A         	call	_set_bit
  3334  000F18  6E03               	movwf	??_lcd_cmd& (0+255),c
  3335  000F1A  3A03               	swapf	??_lcd_cmd,f,c
  3336  000F1C  4603               	rlncf	??_lcd_cmd,f,c
  3337  000F1E  4603               	rlncf	??_lcd_cmd,f,c
  3338  000F20  5083               	movf	3971,w,c	;volatile
  3339  000F22  1803               	xorwf	??_lcd_cmd,w,c
  3340  000F24  0BBF               	andlw	-65
  3341  000F26  1803               	xorwf	??_lcd_cmd,w,c
  3342  000F28  6E83               	movwf	3971,c	;volatile
  3343                           
  3344                           ;../Bibliotecas/LCD4b.c: 55:     PORTDbits.RD7 = set_bit(cmd,0b10000000);
  3345  000F2A  0E80               	movlw	128
  3346  000F2C  6E01               	movwf	set_bit@comp,c
  3347  000F2E  5004               	movf	lcd_cmd@cmd,w,c
  3348  000F30  EC51  F00A         	call	_set_bit
  3349  000F34  6E03               	movwf	??_lcd_cmd& (0+255),c
  3350  000F36  3203               	rrcf	??_lcd_cmd,f,c
  3351  000F38  3203               	rrcf	??_lcd_cmd,f,c
  3352  000F3A  5083               	movf	3971,w,c	;volatile
  3353  000F3C  1803               	xorwf	??_lcd_cmd,w,c
  3354  000F3E  0B7F               	andlw	-129
  3355  000F40  1803               	xorwf	??_lcd_cmd,w,c
  3356  000F42  6E83               	movwf	3971,c	;volatile
  3357                           
  3358                           ;../Bibliotecas/LCD4b.c: 57:     PORTEbits.RE1 = 1;
  3359  000F44  8284               	bsf	3972,1,c	;volatile
  3360                           
  3361                           ;../Bibliotecas/LCD4b.c: 58:     PORTEbits.RE1 = 0;
  3362  000F46  9284               	bcf	3972,1,c	;volatile
  3363                           
  3364                           ;../Bibliotecas/LCD4b.c: 60:     _delay((unsigned long)((100)*(8000000/4000000.0)));
  3365  000F48  0E42               	movlw	66
  3366  000F4A                     u1527:
  3367  000F4A  2EE8               	decfsz	wreg,f,c
  3368  000F4C  D7FE               	bra	u1527
  3369  000F4E  D000               	nop2	
  3370                           
  3371                           ;../Bibliotecas/LCD4b.c: 64:     PORTDbits.RD4 = set_bit(cmd,0b00000001);
  3372  000F50  0E01               	movlw	1
  3373  000F52  6E01               	movwf	set_bit@comp,c
  3374  000F54  5004               	movf	lcd_cmd@cmd,w,c
  3375  000F56  EC51  F00A         	call	_set_bit
  3376  000F5A  6E03               	movwf	??_lcd_cmd& (0+255),c
  3377  000F5C  3A03               	swapf	??_lcd_cmd,f,c
  3378  000F5E  5083               	movf	3971,w,c	;volatile
  3379  000F60  1803               	xorwf	??_lcd_cmd,w,c
  3380  000F62  0BEF               	andlw	-17
  3381  000F64  1803               	xorwf	??_lcd_cmd,w,c
  3382  000F66  6E83               	movwf	3971,c	;volatile
  3383                           
  3384                           ;../Bibliotecas/LCD4b.c: 65:     PORTDbits.RD5 = set_bit(cmd,0b00000010);
  3385  000F68  0E02               	movlw	2
  3386  000F6A  6E01               	movwf	set_bit@comp,c
  3387  000F6C  5004               	movf	lcd_cmd@cmd,w,c
  3388  000F6E  EC51  F00A         	call	_set_bit
  3389  000F72  6E03               	movwf	??_lcd_cmd& (0+255),c
  3390  000F74  3A03               	swapf	??_lcd_cmd,f,c
  3391  000F76  4603               	rlncf	??_lcd_cmd,f,c
  3392  000F78  5083               	movf	3971,w,c	;volatile
  3393  000F7A  1803               	xorwf	??_lcd_cmd,w,c
  3394  000F7C  0BDF               	andlw	-33
  3395  000F7E  1803               	xorwf	??_lcd_cmd,w,c
  3396  000F80  6E83               	movwf	3971,c	;volatile
  3397                           
  3398                           ;../Bibliotecas/LCD4b.c: 66:     PORTDbits.RD6 = set_bit(cmd,0b00000100);
  3399  000F82  0E04               	movlw	4
  3400  000F84  6E01               	movwf	set_bit@comp,c
  3401  000F86  5004               	movf	lcd_cmd@cmd,w,c
  3402  000F88  EC51  F00A         	call	_set_bit
  3403  000F8C  6E03               	movwf	??_lcd_cmd& (0+255),c
  3404  000F8E  3A03               	swapf	??_lcd_cmd,f,c
  3405  000F90  4603               	rlncf	??_lcd_cmd,f,c
  3406  000F92  4603               	rlncf	??_lcd_cmd,f,c
  3407  000F94  5083               	movf	3971,w,c	;volatile
  3408  000F96  1803               	xorwf	??_lcd_cmd,w,c
  3409  000F98  0BBF               	andlw	-65
  3410  000F9A  1803               	xorwf	??_lcd_cmd,w,c
  3411  000F9C  6E83               	movwf	3971,c	;volatile
  3412                           
  3413                           ;../Bibliotecas/LCD4b.c: 67:     PORTDbits.RD7 = set_bit(cmd,0b00001000);
  3414  000F9E  0E08               	movlw	8
  3415  000FA0  6E01               	movwf	set_bit@comp,c
  3416  000FA2  5004               	movf	lcd_cmd@cmd,w,c
  3417  000FA4  EC51  F00A         	call	_set_bit
  3418  000FA8  6E03               	movwf	??_lcd_cmd& (0+255),c
  3419  000FAA  3203               	rrcf	??_lcd_cmd,f,c
  3420  000FAC  3203               	rrcf	??_lcd_cmd,f,c
  3421  000FAE  5083               	movf	3971,w,c	;volatile
  3422  000FB0  1803               	xorwf	??_lcd_cmd,w,c
  3423  000FB2  0B7F               	andlw	-129
  3424  000FB4  1803               	xorwf	??_lcd_cmd,w,c
  3425  000FB6  6E83               	movwf	3971,c	;volatile
  3426                           
  3427                           ;../Bibliotecas/LCD4b.c: 69:     PORTEbits.RE1 = 1;
  3428  000FB8  8284               	bsf	3972,1,c	;volatile
  3429                           
  3430                           ;../Bibliotecas/LCD4b.c: 70:     PORTEbits.RE1 = 0;
  3431  000FBA  9284               	bcf	3972,1,c	;volatile
  3432  000FBC  0012               	return		;funcret
  3433  000FBE                     __end_of_lcd_cmd:
  3434                           	opt callstack 0
  3435                           
  3436 ;; *************** function _set_bit *****************
  3437 ;; Defined at:
  3438 ;;		line 38 in file "../Bibliotecas/LCD4b.c"
  3439 ;; Parameters:    Size  Location     Type
  3440 ;;  cmd             1    wreg     unsigned char 
  3441 ;;  comp            1    0[COMRAM] unsigned char 
  3442 ;; Auto vars:     Size  Location     Type
  3443 ;;  cmd             1    1[COMRAM] unsigned char 
  3444 ;; Return value:  Size  Location     Type
  3445 ;;                  1    wreg      unsigned char 
  3446 ;; Registers used:
  3447 ;;		wreg, status,2, status,0
  3448 ;; Tracked objects:
  3449 ;;		On entry : 0/0
  3450 ;;		On exit  : 0/0
  3451 ;;		Unchanged: 0/0
  3452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3453 ;;      Params:         1       0       0       0       0       0       0
  3454 ;;      Locals:         1       0       0       0       0       0       0
  3455 ;;      Temps:          0       0       0       0       0       0       0
  3456 ;;      Totals:         2       0       0       0       0       0       0
  3457 ;;Total ram usage:        2 bytes
  3458 ;; Hardware stack levels used:    1
  3459 ;; This function calls:
  3460 ;;		Nothing
  3461 ;; This function is called by:
  3462 ;;		_lcd_cmd
  3463 ;; This function uses a non-reentrant model
  3464 ;;
  3465                           
  3466                           	psect	text21
  3467  0014A2                     __ptext21:
  3468                           	opt callstack 0
  3469  0014A2                     _set_bit:
  3470                           	opt callstack 28
  3471                           
  3472                           ;incstack = 0
  3473                           ;set_bit@cmd stored from wreg
  3474  0014A2  6E02               	movwf	set_bit@cmd,c
  3475                           
  3476                           ;../Bibliotecas/LCD4b.c: 38: char set_bit(char cmd, char comp);../Bibliotecas/LCD4b.c: 3
      +                          9: {;../Bibliotecas/LCD4b.c: 41:     if ((cmd & comp) >= 1)
  3477  0014A4  5002               	movf	set_bit@cmd,w,c
  3478  0014A6  1401               	andwf	set_bit@comp,w,c
  3479  0014A8  0900               	iorlw	0
  3480  0014AA  B4D8               	btfsc	status,2,c
  3481  0014AC  D002               	goto	l1610
  3482                           
  3483                           ;../Bibliotecas/LCD4b.c: 42:         return 1;
  3484  0014AE  0E01               	movlw	1
  3485  0014B0  0012               	return	
  3486  0014B2                     l1610:
  3487                           
  3488                           ;../Bibliotecas/LCD4b.c: 44:         return 0;
  3489  0014B2  0E00               	movlw	0
  3490  0014B4  0012               	return		;funcret
  3491  0014B6                     __end_of_set_bit:
  3492                           	opt callstack 0
  3493                           
  3494                           	psect	rparam
  3495  0000                     tosu	equ	0xFFF
  3496                           tosh	equ	0xFFE
  3497                           tosl	equ	0xFFD
  3498                           stkptr	equ	0xFFC
  3499                           pclatu	equ	0xFFB
  3500                           pclath	equ	0xFFA
  3501                           pcl	equ	0xFF9
  3502                           tblptru	equ	0xFF8
  3503                           tblptrh	equ	0xFF7
  3504                           tblptrl	equ	0xFF6
  3505                           tablat	equ	0xFF5
  3506                           prodh	equ	0xFF4
  3507                           prodl	equ	0xFF3
  3508                           indf0	equ	0xFEF
  3509                           postinc0	equ	0xFEE
  3510                           postdec0	equ	0xFED
  3511                           preinc0	equ	0xFEC
  3512                           plusw0	equ	0xFEB
  3513                           fsr0h	equ	0xFEA
  3514                           fsr0l	equ	0xFE9
  3515                           wreg	equ	0xFE8
  3516                           indf1	equ	0xFE7
  3517                           postinc1	equ	0xFE6
  3518                           postdec1	equ	0xFE5
  3519                           preinc1	equ	0xFE4
  3520                           plusw1	equ	0xFE3
  3521                           fsr1h	equ	0xFE2
  3522                           fsr1l	equ	0xFE1
  3523                           bsr	equ	0xFE0
  3524                           indf2	equ	0xFDF
  3525                           postinc2	equ	0xFDE
  3526                           postdec2	equ	0xFDD
  3527                           preinc2	equ	0xFDC
  3528                           plusw2	equ	0xFDB
  3529                           fsr2h	equ	0xFDA
  3530                           fsr2l	equ	0xFD9
  3531                           status	equ	0xFD8


Data Sizes:
    Strings     21
    Constant    0
    Data        0
    BSS         58
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    111     121
    BANK0           128      0      48
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_3(CODE[5]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    S965_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_3(CODE[5]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_3(CODE[5]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 5
		 -> STR_3(CODE[5]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    lcd_escreve_bf@str	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), STR_2(CODE[5]), STR_1(CODE[11]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _atoi->_isspace
    _lcd_ini->_lcd_cmd
    _lcd_escreve_bf->_lcd_envia_byte
    _lcd_envia_byte->_lcd_cmd
    _lcd_cmd->_set_bit

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   10803
                                            109 COMRAM     2     2      0
                     _lcd_escreve_bf
                            _lcd_ini
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             16    10      6    8292
                                             93 COMRAM    16    10      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    7939
                                             85 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           46    40      6    7566
                                             63 COMRAM    22    16      6
                               _atoi
                               _dtoa
                              _fputc
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                36    26     10    4358
                                             27 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    2709
                                             16 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     166
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1235
                                              9 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     834
                                              0 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                             18 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     448
                                              0 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     452
                                              0 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (4) _atoi                                                15    13      2    1244
                                              7 COMRAM    15    13      2
                             ___wmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (5) _isspace                                              7     5      2     207
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              6     4      2     237
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     403
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _lcd_ini                                              2     2      0     874
                                              4 COMRAM     2     2      0
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (1) _lcd_escreve_bf                                       5     2      3    1637
                                              6 COMRAM     5     2      3
                     _lcd_envia_byte
 ---------------------------------------------------------------------------------
 (2) _lcd_envia_byte                                       2     1      1    1024
                                              4 COMRAM     2     1      1
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (2) _lcd_cmd                                              2     2      0     828
                                              2 COMRAM     2     2      0
                            _set_bit
 ---------------------------------------------------------------------------------
 (3) _set_bit                                              2     1      1     652
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _lcd_escreve_bf
     _lcd_envia_byte
       _lcd_cmd
         _set_bit
   _lcd_ini
     _lcd_cmd
       _set_bit
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _atoi
           ___wmul
           _isdigit
           _isspace
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
                 _putch
             _strlen
         _fputc
           _putch
         _isdigit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      30       5       37.5%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     6F      79       1       95.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A9      15        0.0%
DATA                 0      0      A9       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Mon Apr 08 10:26:23 2019

                     l32 10AC      ___wmul@multiplicand 0003              __CFG_BORV$3 000000  
           __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000  
           __CFG_CP3$OFF 000000              __CFG_OSC$HS 000000                      l120 0966  
                    l107 1126                      l118 095E                      l852 13D8  
                    l883 0DAC             __CFG_CPB$OFF 000000             __CFG_CPD$OFF 000000  
                    u730 0FCE                      u820 13BE                      u830 140A  
                    u750 1016                      u840 140C                      u950 0E38  
                    u871 0B88                      u890 0BC0                      u990 136C  
                    _adc 0078                      _abs 13B0                      _pad 10F8  
                    wreg 000FE8             __CFG_LVP$OFF 000000             __CFG_WDT$OFF 000000  
                   ?_abs 0013                     l1610 14B2                     l1530 0BA8  
                   l1700 0D18                     l1532 0BBC                     l1524 0B82  
                   l1620 0942                     l1550 0C54                     l1542 0C18  
                   l1518 0B5A                     l1462 1398                     l1704 0D4C  
                   l1448 0FD6                     l1546 0C2E                     l1570 0E20  
                   l1562 0DE2                     l1458 1382                     l1466 141C  
                   l1482 111E                     l1634 0980                     l1900 1246  
                   l1572 0E34                     l1468 1420                     l1492 1174  
                   l1484 1130                     l1812 0896                     l1582 0E92  
                   l1566 0E06                     l1478 1110                     l1638 0990  
                   l1806 085A                     l1750 065E                     l1822 08B8  
                   l1904 1272                     l1680 0C8C                     l1488 1148  
                   l1672 0B04                     l1648 0A88                     l1816 08A0  
                   l1760 0676                     l1752 066E                     l1586 0EB8  
                   l1578 0E7C                     l1668 0AEC                     l1772 0688  
                   l1764 067A                     l1756 0672                     l1748 065C  
                   l1598 1370                     l1694 0CE2                     l1678 0C88  
                   l1790 0762                     l1774 06CA                     l1846 12AC  
                   l1696 0CEA                     l1688 0CD2                     l1768 067E  
                   l1848 12D0                     l1928 1094                     l1698 0CF0  
                   l1786 0736                     l1868 11B2                     l1788 0754  
                   l1894 122C                     ?_pad 0011                     l1898 123A  
                   STR_1 0601                     STR_2 060C                     STR_3 0611  
                   u1010 0914                     u1100 0AB8                     u1020 0916  
                   u1101 0AB6                     u1110 0AC6                     u1200 0D7E  
                   u1120 0ACA                     u1050 0954                     u1140 0AD6  
                   u1300 07A8                     u1070 097A                     u1400 1292  
                   u1080 0A96                     u1320 07DC                     u1170 0CCE  
                   u1190 0D7C                     u1407 1288                     u1280 079A  
                   u1345 148E                     u1346 1490                     u1290 079C  
                   u1507 1216                     u1517 1492                     u1437 109E  
                   u1390 1266                     u1527 0F4A                     u1447 11A4  
                   u1457 11BE                     u1467 11D6                     u1397 125C  
                   u1477 11E4                     u1487 11F6                     u1497 1208  
           __CFG_PWRT$ON 000000                     abs@a 0013                     _dbuf 0080  
                   _atoi 0C76                     _main 105E                     _dtoa 08EC  
                   _prec 0074                     _nout 0070                     pad@i 0018  
                   pad@p 0015                     fsr1h 000FE2                     fsr2h 000FDA  
                   indf1 000FE7                     indf2 000FDF                     fsr1l 000FE1  
                   pad@w 001A                     fsr2l 000FD9                     prodh 000FF4  
                   prodl 000FF3                     start 0000            __CFG_IESO$OFF 000000  
          __CFG_MCLRE$ON 000000             ___param_bank 000000                    ??_abs 0015  
                  ??_pad 0017          __end_of___aodiv 0C76                    ?_atoi 0008  
                  ?_main 0001                    ?_dtoa 001C          __end_of___aomod 0EDA  
           vfpfcnvrt@fmt 0042                    _PORTD 000F83                    _TRISD 000F95  
          __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000  
          __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000  
         __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000  
        __end_of_lcd_cmd 0FBE          __end_of_lcd_ini 121E            __CFG_WRTB$OFF 000000  
          __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000  
                  _flags 0076                    _fputc 0FBE                    _fputs 1378  
        __end_of_isdigit 1412                    atoi@n 0015                    pad@fp 0011  
                  atoi@s 0008                    _width 0072                    _putch 14B6  
                  dtoa@d 001E                    dtoa@i 003E                    dtoa@n 0036  
                  dtoa@p 0030                    dtoa@s 0034                    dtoa@w 0032  
        __end_of_isspace 1378           __CFG_BOREN$OFF 000000          __end_of_set_bit 14B6  
                  tablat 000FF5                    status 000FD8          __end_of_sprintf 133A  
        __initialization 1462             __end_of_atoi 0DB6             __end_of_main 10F8  
           __end_of_dtoa 0B2E                   ??_atoi 000A                   ??_main 006E  
                 ??_dtoa 0026            __activetblptr 000002                   _ADCON0 000FC2  
                 _ADCON1 000FC1                   _ADCON2 000FC0                   ?_fputc 0001  
                 ?_fputs 000A                   _ADRESH 000FC4                   _ADRESL 000FC3  
                 ?_putch 0001            vfpfcnvrt@done 0052           __CFG_XINST$OFF 000000  
           vfprintf@cfmt 005C                ??___aodiv 0011                ??___aomod 0011  
                 ___wmul 143C           __CFG_STVREN$ON 000000         ??_lcd_escreve_bf 000A  
                 clear_0 1468                   clear_1 1474         ??_lcd_envia_byte 0006  
                 pad@buf 0013                ??_lcd_cmd 0003                   dtoa@fp 001C  
              ??_lcd_ini 0005                   _strlen 1412                   fputc@c 0001  
                 fputs@c 000E                   fputs@i 000F                   fputs@s 000A  
              ??_isdigit 0003             __mediumconst 0000                ??_isspace 0003  
              ??_set_bit 0002                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8                   putch@c 0001         __end_of_vfprintf 12EC  
              ??_sprintf 0064               __accesstop 0080  __end_of__initialization 147A  
        __CFG_PBADEN$OFF 000000            ___rparam_used 000001           __pcstackCOMRAM 0001  
          __end_of_fputc 105E            __end_of_fputs 13B0            __end_of_putch 14B8  
                ??_fputc 0005                  ??_fputs 000E                  ??_putch 0001  
             __pbssBANK0 0080                  ?___wmul 0001                  ?_strlen 0001  
     __size_of_vfpfcnvrt 02D4                  __Hparam 0000                  __Lparam 0000  
                ___aodiv 0B2E                  ___aomod 0DB6          __size_of___wmul 0026  
              ?_vfprintf 0056              set_bit@comp 0001             __psmallconst 0600  
                __pcinit 1462                  __ramtop 0600                  __ptext0 105E  
                __ptext1 12EC                  __ptext2 129A                  __ptext3 0618  
                __ptext4 08EC                  __ptext5 10F8                  __ptext6 1412  
                __ptext7 1378                  __ptext8 0FBE                  __ptext9 14B6  
                _lcd_cmd 0EDA                  _lcd_ini 118E          __size_of_strlen 002A  
           __size_of_abs 0032             __size_of_pad 0096                  _isdigit 13E2  
                _isspace 133A                  _set_bit 14A2                  atoi@neg 000E  
                _sprintf 12EC     end_of_initialization 147A       lcd_envia_byte@dado 0005  
                fputc@fp 0003            __Lmediumconst 0000                  fputs@fp 000C  
      __end_of_vfpfcnvrt 08EC                  postdec2 000FDD                  postinc0 000FEE  
                postinc1 000FE6                  postinc2 000FDE               ??_vfprintf 005C  
                strlen@a 0003                  strlen@s 0001                _PORTDbits 000F83  
              _PORTEbits 000F84                _TRISAbits 000F92                _TRISEbits 000F96  
             lcd_cmd@cmd 0004              vfpfcnvrt@ap 0044              vfpfcnvrt@fp 0040  
            vfpfcnvrt@ll 004A           __end_of___wmul 1462           __end_of_strlen 143C  
    start_initialization 1462              __end_of_abs 13E2              __end_of_pad 118E  
            vfprintf@fmt 0058                 ??___wmul 0005         __CFG_LPT1OSC$OFF 000000  
               ??_strlen 0003              __pbssCOMRAM 0070         ___aodiv@dividend 0001  
__size_of_lcd_escreve_bf 007C  __size_of_lcd_envia_byte 001E        __CFG_CCP2MX$PORTC 000000  
               ?___aodiv 0001                 ?___aomod 0001        lcd_escreve_bf@end 000A  
      lcd_escreve_bf@col 0007        lcd_escreve_bf@lin 000B         ___aodiv@quotient 0013  
      lcd_escreve_bf@str 0008                _bufferLCD 00A0                 ?_lcd_cmd 0001  
      __size_of_vfprintf 0052                 ?_lcd_ini 0001              __smallconst 0600  
               ?_isdigit 0001                 ?_isspace 0001                 ?_set_bit 0001  
             set_bit@cmd 0002                 ?_sprintf 005E           __size_of_fputc 00A0  
         __size_of_fputs 0038           __size_of_putch 0002           ___wmul@product 0005  
       __CFG_WDTPS$32768 000000                _vfpfcnvrt 0618               _ADCON0bits 000FC2  
      ___wmul@multiplier 0001                 __Hrparam 0000               vfprintf@ap 005A  
               __Lrparam 0000               vfprintf@fp 0056         __size_of___aodiv 0148  
       __size_of___aomod 0124               ?_vfpfcnvrt 0040          ___aodiv@divisor 0009  
        ___aodiv@counter 0011         __size_of_lcd_cmd 00E4         __size_of_lcd_ini 0090  
             sprintf@fmt 0060                 _atoi$943 0010                 _atoi$944 0014  
               _atoi$945 0012         __size_of_isdigit 0030                 _dtoa$471 002E  
         _lcd_escreve_bf 121E         __size_of_isspace 003E                 __ptext10 13B0  
               __ptext11 0DB6                 __ptext20 0EDA                 __ptext12 0B2E  
               __ptext21 14A2                 __ptext13 0C76                 __ptext14 133A  
               __ptext15 13E2                 __ptext16 143C                 __ptext17 118E  
               __ptext18 121E                 __ptext19 1484         __size_of_set_bit 0014  
         _lcd_envia_byte 1484         __size_of_sprintf 004E            __size_of_atoi 0140  
          __size_of_main 009A            __size_of_dtoa 0242                 lcd_ini@i 0006  
               _vfprintf 129A              _isspace$961 0007         ___aomod@dividend 0001  
 __end_of_lcd_escreve_bf 129A   __end_of_lcd_envia_byte 14A2      lcd_envia_byte@nivel 0006  
               isdigit@c 0001                sprintf@ap 0066                 isspace@c 0001  
        ___aomod@divisor 0009              ??_vfpfcnvrt 0046          ___aomod@counter 0011  
          _vfpfcnvrt$486 0054                 sprintf@f 0068                 sprintf@s 005E  
        ?_lcd_escreve_bf 0007          ?_lcd_envia_byte 0005             ___aodiv@sign 0012  
           ___aomod@sign 0012  
