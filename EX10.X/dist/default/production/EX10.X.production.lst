

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Wed Apr 03 14:02:08 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    33                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    34  0000                     
    35                           ; Version 2.05
    36                           ; Generated 20/12/2018 GMT
    37                           ; 
    38                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    39                           ; All rights reserved.
    40                           ; 
    41                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    42                           ; 
    43                           ; Redistribution and use in source and binary forms, with or without modification, are
    44                           ; permitted provided that the following conditions are met:
    45                           ; 
    46                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    47                           ;        conditions and the following disclaimer.
    48                           ; 
    49                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    50                           ;        of conditions and the following disclaimer in the documentation and/or other
    51                           ;        materials provided with the distribution.
    52                           ; 
    53                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    54                           ;        software without specific prior written permission.
    55                           ; 
    56                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    57                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    58                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    59                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    60                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    61                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    62                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    63                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    64                           ; 
    65                           ; 
    66                           ; Code-generator required, PIC18F4520 Definitions
    67                           ; 
    68                           ; SFR Addresses
    69  0000                     _PORTDbits	set	3971
    70  0000                     _PORTEbits	set	3972
    71  0000                     _PORTD	set	3971
    72  0000                     _TRISEbits	set	3990
    73  0000                     _TRISD	set	3989
    74  0000                     _ADCON1	set	4033
    75                           
    76                           	psect	smallconst
    77  000600                     __psmallconst:
    78                           	opt callstack 0
    79  000600  00                 	db	0
    80  000601                     STR_1:
    81  000601  43                 	db	67	;'C'
    82  000602  4F                 	db	79	;'O'
    83  000603  4E                 	db	78	;'N'
    84  000604  54                 	db	84	;'T'
    85  000605  41                 	db	65	;'A'
    86  000606  47                 	db	71	;'G'
    87  000607  45                 	db	69	;'E'
    88  000608  4D                 	db	77	;'M'
    89  000609  3A                 	db	58	;':'
    90  00060A  20                 	db	32
    91  00060B  30                 	db	48	;'0'
    92  00060C  30                 	db	48	;'0'
    93  00060D  30                 	db	48	;'0'
    94  00060E  00                 	db	0
    95  00060F                     STR_2:
    96  00060F  25                 	db	37
    97  000610  30                 	db	48	;'0'
    98  000611  33                 	db	51	;'3'
    99  000612  64                 	db	100	;'d'
   100  000613  00                 	db	0
   101                           
   102                           ; #config settings
   103  000614  00                 	db	0	; dummy byte at the end
   104  0000                     
   105                           	psect	cinit
   106  00140A                     __pcinit:
   107                           	opt callstack 0
   108  00140A                     start_initialization:
   109                           	opt callstack 0
   110  00140A                     __initialization:
   111                           	opt callstack 0
   112                           
   113                           ; Clear objects allocated to BANK0 (48 bytes)
   114  00140A  EE00  F080         	lfsr	0,__pbssBANK0
   115  00140E  0E30               	movlw	48
   116  001410                     clear_0:
   117  001410  6AEE               	clrf	postinc0,c
   118  001412  06E8               	decf	wreg,f,c
   119  001414  E1FD               	bnz	clear_0
   120                           
   121                           ; Clear objects allocated to COMRAM (10 bytes)
   122  001416  EE00  F070         	lfsr	0,__pbssCOMRAM
   123  00141A  0E0A               	movlw	10
   124  00141C                     clear_1:
   125  00141C  6AEE               	clrf	postinc0,c
   126  00141E  06E8               	decf	wreg,f,c
   127  001420  E1FD               	bnz	clear_1
   128  001422                     end_of_initialization:
   129                           	opt callstack 0
   130  001422                     __end_of__initialization:
   131                           	opt callstack 0
   132  001422  0E00               	movlw	low (__Lmediumconst shr (0+16))
   133  001424  6EF8               	movwf	tblptru,c
   134  001426  0100               	movlb	0
   135  001428  EF2E  F008         	goto	_main	;jump to C main() function
   136                           
   137                           	psect	bssCOMRAM
   138  000070                     __pbssCOMRAM:
   139                           	opt callstack 0
   140  000070                     _nout:
   141                           	opt callstack 0
   142  000070                     	ds	2
   143  000072                     _width:
   144                           	opt callstack 0
   145  000072                     	ds	2
   146  000074                     _prec:
   147                           	opt callstack 0
   148  000074                     	ds	2
   149  000076                     _flags:
   150                           	opt callstack 0
   151  000076                     	ds	2
   152  000078                     _conta:
   153                           	opt callstack 0
   154  000078                     	ds	2
   155                           
   156                           	psect	bssBANK0
   157  000080                     __pbssBANK0:
   158                           	opt callstack 0
   159  000080                     _dbuf:
   160                           	opt callstack 0
   161  000080                     	ds	32
   162  0000A0                     _bufferLCD:
   163                           	opt callstack 0
   164  0000A0                     	ds	16
   165                           
   166                           	psect	cstackCOMRAM
   167  000001                     __pcstackCOMRAM:
   168                           	opt callstack 0
   169  000001                     ?_strlen:
   170                           	opt callstack 0
   171  000001                     ?_isdigit:
   172                           	opt callstack 0
   173  000001                     ?_isspace:
   174                           	opt callstack 0
   175  000001                     ?___wmul:
   176                           	opt callstack 0
   177  000001                     ?___aodiv:
   178                           	opt callstack 0
   179  000001                     ?___aomod:
   180                           	opt callstack 0
   181  000001                     set_bit@comp:
   182                           	opt callstack 0
   183  000001                     ___wmul@multiplier:
   184                           	opt callstack 0
   185  000001                     isdigit@c:
   186                           	opt callstack 0
   187  000001                     isspace@c:
   188                           	opt callstack 0
   189  000001                     fputc@c:
   190                           	opt callstack 0
   191  000001                     strlen@s:
   192                           	opt callstack 0
   193  000001                     ___aodiv@dividend:
   194                           	opt callstack 0
   195  000001                     ___aomod@dividend:
   196                           	opt callstack 0
   197                           
   198                           ; 8 bytes @ 0x0
   199  000001                     	ds	1
   200  000002                     set_bit@cmd:
   201                           	opt callstack 0
   202                           
   203                           ; 1 bytes @ 0x1
   204  000002                     	ds	1
   205  000003                     ??_lcd_cmd:
   206  000003                     ??_isdigit:
   207  000003                     ??_isspace:
   208  000003                     ___wmul@multiplicand:
   209                           	opt callstack 0
   210  000003                     fputc@fp:
   211                           	opt callstack 0
   212  000003                     strlen@a:
   213                           	opt callstack 0
   214                           
   215                           ; 2 bytes @ 0x2
   216  000003                     	ds	1
   217  000004                     lcd_cmd@cmd:
   218                           	opt callstack 0
   219                           
   220                           ; 1 bytes @ 0x3
   221  000004                     	ds	1
   222  000005                     ??_lcd_ini:
   223  000005                     ??_fputc:
   224  000005                     lcd_envia_byte@dado:
   225                           	opt callstack 0
   226  000005                     ___wmul@product:
   227                           	opt callstack 0
   228                           
   229                           ; 2 bytes @ 0x4
   230  000005                     	ds	1
   231  000006                     lcd_ini@i:
   232                           	opt callstack 0
   233  000006                     lcd_envia_byte@nivel:
   234                           	opt callstack 0
   235                           
   236                           ; 1 bytes @ 0x5
   237  000006                     	ds	1
   238  000007                     _isspace$834:
   239                           	opt callstack 0
   240  000007                     lcd_escreve_bf@str:
   241                           	opt callstack 0
   242                           
   243                           ; 2 bytes @ 0x6
   244  000007                     	ds	1
   245  000008                     ?_atoi:
   246                           	opt callstack 0
   247  000008                     atoi@s:
   248                           	opt callstack 0
   249                           
   250                           ; 2 bytes @ 0x7
   251  000008                     	ds	1
   252  000009                     ___aodiv@divisor:
   253                           	opt callstack 0
   254  000009                     ___aomod@divisor:
   255                           	opt callstack 0
   256                           
   257                           ; 8 bytes @ 0x8
   258  000009                     	ds	1
   259  00000A                     ??_atoi:
   260  00000A                     fputs@s:
   261                           	opt callstack 0
   262                           
   263                           ; 2 bytes @ 0x9
   264  00000A                     	ds	2
   265  00000C                     fputs@fp:
   266                           	opt callstack 0
   267                           
   268                           ; 2 bytes @ 0xB
   269  00000C                     	ds	2
   270  00000E                     fputs@c:
   271                           	opt callstack 0
   272  00000E                     atoi@neg:
   273                           	opt callstack 0
   274                           
   275                           ; 2 bytes @ 0xD
   276  00000E                     	ds	1
   277  00000F                     fputs@i:
   278                           	opt callstack 0
   279                           
   280                           ; 2 bytes @ 0xE
   281  00000F                     	ds	1
   282  000010                     _atoi$816:
   283                           	opt callstack 0
   284                           
   285                           ; 2 bytes @ 0xF
   286  000010                     	ds	1
   287  000011                     ?_pad:
   288                           	opt callstack 0
   289  000011                     ___aodiv@counter:
   290                           	opt callstack 0
   291  000011                     ___aomod@counter:
   292                           	opt callstack 0
   293  000011                     pad@fp:
   294                           	opt callstack 0
   295                           
   296                           ; 2 bytes @ 0x10
   297  000011                     	ds	1
   298  000012                     ___aodiv@sign:
   299                           	opt callstack 0
   300  000012                     ___aomod@sign:
   301                           	opt callstack 0
   302  000012                     _atoi$818:
   303                           	opt callstack 0
   304                           
   305                           ; 2 bytes @ 0x11
   306  000012                     	ds	1
   307  000013                     ?_abs:
   308                           	opt callstack 0
   309  000013                     pad@buf:
   310                           	opt callstack 0
   311  000013                     abs@a:
   312                           	opt callstack 0
   313  000013                     ___aodiv@quotient:
   314                           	opt callstack 0
   315                           
   316                           ; 8 bytes @ 0x12
   317  000013                     	ds	1
   318  000014                     _atoi$817:
   319                           	opt callstack 0
   320                           
   321                           ; 1 bytes @ 0x13
   322  000014                     	ds	1
   323  000015                     ??_abs:
   324  000015                     pad@p:
   325                           	opt callstack 0
   326  000015                     atoi@n:
   327                           	opt callstack 0
   328                           
   329                           ; 2 bytes @ 0x14
   330  000015                     	ds	2
   331  000017                     ??_pad:
   332                           
   333                           ; 1 bytes @ 0x16
   334  000017                     	ds	1
   335  000018                     pad@i:
   336                           	opt callstack 0
   337                           
   338                           ; 2 bytes @ 0x17
   339  000018                     	ds	2
   340  00001A                     pad@w:
   341                           	opt callstack 0
   342                           
   343                           ; 2 bytes @ 0x19
   344  00001A                     	ds	2
   345  00001C                     ?_dtoa:
   346                           	opt callstack 0
   347  00001C                     dtoa@fp:
   348                           	opt callstack 0
   349                           
   350                           ; 2 bytes @ 0x1B
   351  00001C                     	ds	2
   352  00001E                     dtoa@d:
   353                           	opt callstack 0
   354                           
   355                           ; 8 bytes @ 0x1D
   356  00001E                     	ds	8
   357  000026                     ??_dtoa:
   358                           
   359                           ; 1 bytes @ 0x25
   360  000026                     	ds	8
   361  00002E                     _dtoa$344:
   362                           	opt callstack 0
   363                           
   364                           ; 2 bytes @ 0x2D
   365  00002E                     	ds	2
   366  000030                     dtoa@p:
   367                           	opt callstack 0
   368                           
   369                           ; 2 bytes @ 0x2F
   370  000030                     	ds	2
   371  000032                     dtoa@w:
   372                           	opt callstack 0
   373                           
   374                           ; 2 bytes @ 0x31
   375  000032                     	ds	2
   376  000034                     dtoa@s:
   377                           	opt callstack 0
   378                           
   379                           ; 2 bytes @ 0x33
   380  000034                     	ds	2
   381  000036                     dtoa@n:
   382                           	opt callstack 0
   383                           
   384                           ; 8 bytes @ 0x35
   385  000036                     	ds	8
   386  00003E                     dtoa@i:
   387                           	opt callstack 0
   388                           
   389                           ; 2 bytes @ 0x3D
   390  00003E                     	ds	2
   391  000040                     ?_vfpfcnvrt:
   392                           	opt callstack 0
   393  000040                     vfpfcnvrt@fp:
   394                           	opt callstack 0
   395                           
   396                           ; 2 bytes @ 0x3F
   397  000040                     	ds	2
   398  000042                     vfpfcnvrt@fmt:
   399                           	opt callstack 0
   400                           
   401                           ; 2 bytes @ 0x41
   402  000042                     	ds	2
   403  000044                     vfpfcnvrt@ap:
   404                           	opt callstack 0
   405                           
   406                           ; 2 bytes @ 0x43
   407  000044                     	ds	2
   408  000046                     ??_vfpfcnvrt:
   409                           
   410                           ; 1 bytes @ 0x45
   411  000046                     	ds	4
   412  00004A                     vfpfcnvrt@ll:
   413                           	opt callstack 0
   414                           
   415                           ; 8 bytes @ 0x49
   416  00004A                     	ds	8
   417  000052                     vfpfcnvrt@done:
   418                           	opt callstack 0
   419                           
   420                           ; 2 bytes @ 0x51
   421  000052                     	ds	2
   422  000054                     _vfpfcnvrt$359:
   423                           	opt callstack 0
   424                           
   425                           ; 2 bytes @ 0x53
   426  000054                     	ds	2
   427  000056                     ?_vfprintf:
   428                           	opt callstack 0
   429  000056                     vfprintf@fp:
   430                           	opt callstack 0
   431                           
   432                           ; 2 bytes @ 0x55
   433  000056                     	ds	2
   434  000058                     vfprintf@fmt:
   435                           	opt callstack 0
   436                           
   437                           ; 2 bytes @ 0x57
   438  000058                     	ds	2
   439  00005A                     vfprintf@ap:
   440                           	opt callstack 0
   441                           
   442                           ; 2 bytes @ 0x59
   443  00005A                     	ds	2
   444  00005C                     vfprintf@cfmt:
   445                           	opt callstack 0
   446                           
   447                           ; 2 bytes @ 0x5B
   448  00005C                     	ds	2
   449  00005E                     ?_sprintf:
   450                           	opt callstack 0
   451  00005E                     sprintf@s:
   452                           	opt callstack 0
   453                           
   454                           ; 2 bytes @ 0x5D
   455  00005E                     	ds	2
   456  000060                     sprintf@fmt:
   457                           	opt callstack 0
   458                           
   459                           ; 2 bytes @ 0x5F
   460  000060                     	ds	4
   461  000064                     
   462                           ; 1 bytes @ 0x63
   463  000064                     	ds	2
   464  000066                     sprintf@ap:
   465                           	opt callstack 0
   466                           
   467                           ; 2 bytes @ 0x65
   468  000066                     	ds	2
   469  000068                     sprintf@f:
   470                           	opt callstack 0
   471                           
   472                           ; 6 bytes @ 0x67
   473  000068                     	ds	6
   474  00006E                     ??_main:
   475                           
   476                           ; 1 bytes @ 0x6D
   477  00006E                     	ds	2
   478                           
   479 ;;
   480 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   481 ;;
   482 ;; *************** function _main *****************
   483 ;; Defined at:
   484 ;;		line 10 in file "EX10.c"
   485 ;; Parameters:    Size  Location     Type
   486 ;;		None
   487 ;; Auto vars:     Size  Location     Type
   488 ;;		None
   489 ;; Return value:  Size  Location     Type
   490 ;;                  1    wreg      void 
   491 ;; Registers used:
   492 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   493 ;; Tracked objects:
   494 ;;		On entry : 0/0
   495 ;;		On exit  : 0/0
   496 ;;		Unchanged: 0/0
   497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   498 ;;      Params:         0       0       0       0       0       0       0
   499 ;;      Locals:         0       0       0       0       0       0       0
   500 ;;      Temps:          2       0       0       0       0       0       0
   501 ;;      Totals:         2       0       0       0       0       0       0
   502 ;;Total ram usage:        2 bytes
   503 ;; Hardware stack levels required when called:    8
   504 ;; This function calls:
   505 ;;		_lcd_envia_byte
   506 ;;		_lcd_escreve_bf
   507 ;;		_lcd_ini
   508 ;;		_sprintf
   509 ;; This function is called by:
   510 ;;		Startup code after reset
   511 ;; This function uses a non-reentrant model
   512 ;;
   513                           
   514                           	psect	text0
   515  00105C                     __ptext0:
   516                           	opt callstack 0
   517  00105C                     _main:
   518                           	opt callstack 23
   519                           
   520                           ;EX10.c: 12:     ADCON1 = 0x0F;
   521                           
   522                           ;incstack = 0
   523  00105C  0E0F               	movlw	15
   524  00105E  6EC1               	movwf	4033,c	;volatile
   525                           
   526                           ;EX10.c: 14:     lcd_ini();
   527  001060  ECC5  F008         	call	_lcd_ini	;wreg free
   528                           
   529                           ;EX10.c: 16:     lcd_envia_byte(0,0x80);
   530  001064  0E80               	movlw	128
   531  001066  6E05               	movwf	lcd_envia_byte@dado,c
   532  001068  0E00               	movlw	0
   533  00106A  EC16  F00A         	call	_lcd_envia_byte
   534                           
   535                           ;EX10.c: 18:     sprintf(bufferLCD, "CONTAGEM: 000");
   536  00106E  0EA0               	movlw	low _bufferLCD
   537  001070  6E5E               	movwf	sprintf@s,c
   538  001072  0E00               	movlw	high _bufferLCD
   539  001074  6E5F               	movwf	sprintf@s+1,c
   540  001076  0E01               	movlw	low STR_1
   541  001078  6E60               	movwf	sprintf@fmt,c
   542  00107A  0E06               	movlw	high STR_1
   543  00107C  6E61               	movwf	sprintf@fmt+1,c
   544  00107E  EC36  F009         	call	_sprintf	;wreg free
   545                           
   546                           ;EX10.c: 20:     lcd_escreve_bf(bufferLCD);
   547  001082  0EA0               	movlw	low _bufferLCD
   548  001084  6E07               	movwf	lcd_escreve_bf@str,c
   549  001086  0E00               	movlw	high _bufferLCD
   550  001088  6E08               	movwf	lcd_escreve_bf@str+1,c
   551  00108A  ECDE  F009         	call	_lcd_escreve_bf	;wreg free
   552  00108E                     l1901:
   553                           
   554                           ;EX10.c: 23:     {;EX10.c: 24:         lcd_envia_byte(0,0x8A);
   555  00108E  0E8A               	movlw	138
   556  001090  6E05               	movwf	lcd_envia_byte@dado,c
   557  001092  0E00               	movlw	0
   558  001094  EC16  F00A         	call	_lcd_envia_byte
   559                           
   560                           ;EX10.c: 27:         sprintf(bufferLCD, "%03d", conta);
   561  001098  0EA0               	movlw	low _bufferLCD
   562  00109A  6E5E               	movwf	sprintf@s,c
   563  00109C  0E00               	movlw	high _bufferLCD
   564  00109E  6E5F               	movwf	sprintf@s+1,c
   565  0010A0  0E0F               	movlw	low STR_2
   566  0010A2  6E60               	movwf	sprintf@fmt,c
   567  0010A4  0E06               	movlw	high STR_2
   568  0010A6  6E61               	movwf	sprintf@fmt+1,c
   569  0010A8  C078  F062         	movff	_conta,?_sprintf+4
   570  0010AC  C079  F063         	movff	_conta+1,?_sprintf+5
   571  0010B0  EC36  F009         	call	_sprintf	;wreg free
   572                           
   573                           ;EX10.c: 29:         lcd_escreve_bf(bufferLCD);
   574  0010B4  0EA0               	movlw	low _bufferLCD
   575  0010B6  6E07               	movwf	lcd_escreve_bf@str,c
   576  0010B8  0E00               	movlw	high _bufferLCD
   577  0010BA  6E08               	movwf	lcd_escreve_bf@str+1,c
   578  0010BC  ECDE  F009         	call	_lcd_escreve_bf	;wreg free
   579                           
   580                           ;EX10.c: 31:         conta++;
   581  0010C0  4A78               	infsnz	_conta,f,c
   582  0010C2  2A79               	incf	_conta+1,f,c
   583                           
   584                           ;EX10.c: 33:         if (conta > 999) conta = 0;
   585  0010C4  BE79               	btfsc	_conta+1,7,c
   586  0010C6  D00A               	goto	l1913
   587  0010C8  0EE8               	movlw	232
   588  0010CA  5C78               	subwf	_conta,w,c
   589  0010CC  0E03               	movlw	3
   590  0010CE  5879               	subwfb	_conta+1,w,c
   591  0010D0  A0D8               	btfss	status,0,c
   592  0010D2  D004               	goto	l1913
   593  0010D4  0E00               	movlw	0
   594  0010D6  6E79               	movwf	_conta+1,c
   595  0010D8  0E00               	movlw	0
   596  0010DA  6E78               	movwf	_conta,c
   597  0010DC                     l1913:
   598                           
   599                           ;EX10.c: 35:         _delay((unsigned long)((1000)*(8000000/4000.0)));
   600  0010DC  0E0B               	movlw	11
   601  0010DE  6E6F               	movwf	(??_main+1)& (0+255),c
   602  0010E0  0E26               	movlw	38
   603  0010E2  6E6E               	movwf	??_main& (0+255),c
   604  0010E4  0E5E               	movlw	94
   605  0010E6                     u1357:
   606  0010E6  2EE8               	decfsz	wreg,f,c
   607  0010E8  D7FE               	bra	u1357
   608  0010EA  2E6E               	decfsz	??_main& (0+255),f,c
   609  0010EC  D7FC               	bra	u1357
   610  0010EE  2E6F               	decfsz	(??_main+1)& (0+255),f,c
   611  0010F0  D7FA               	bra	u1357
   612  0010F2  D7CD               	goto	l1901
   613  0010F4                     __end_of_main:
   614                           	opt callstack 0
   615                           
   616 ;; *************** function _sprintf *****************
   617 ;; Defined at:
   618 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_sprintf.c"
   619 ;; Parameters:    Size  Location     Type
   620 ;;  s               2   93[COMRAM] PTR unsigned char 
   621 ;;		 -> bufferLCD(16), 
   622 ;;  fmt             2   95[COMRAM] PTR const unsigned char 
   623 ;;		 -> STR_2(5), STR_1(14), 
   624 ;; Auto vars:     Size  Location     Type
   625 ;;  f               6  103[COMRAM] struct _IO_FILE
   626 ;;  ap              2  101[COMRAM] PTR void [1]
   627 ;;		 -> ?_sprintf(2), 
   628 ;;  ret             2    0        int 
   629 ;; Return value:  Size  Location     Type
   630 ;;                  2   93[COMRAM] int 
   631 ;; Registers used:
   632 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   633 ;; Tracked objects:
   634 ;;		On entry : 0/0
   635 ;;		On exit  : 0/0
   636 ;;		Unchanged: 0/0
   637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   638 ;;      Params:         6       0       0       0       0       0       0
   639 ;;      Locals:        10       0       0       0       0       0       0
   640 ;;      Temps:          0       0       0       0       0       0       0
   641 ;;      Totals:        16       0       0       0       0       0       0
   642 ;;Total ram usage:       16 bytes
   643 ;; Hardware stack levels used:    1
   644 ;; Hardware stack levels required when called:    7
   645 ;; This function calls:
   646 ;;		_vfprintf
   647 ;; This function is called by:
   648 ;;		_main
   649 ;; This function uses a non-reentrant model
   650 ;;
   651                           
   652                           	psect	text1
   653  00126C                     __ptext1:
   654                           	opt callstack 0
   655  00126C                     _sprintf:
   656                           	opt callstack 23
   657                           
   658                           ;incstack = 0
   659  00126C  0E62               	movlw	low (?_sprintf+4)
   660  00126E  6E66               	movwf	sprintf@ap,c
   661  001270  0E00               	movlw	high (?_sprintf+4)
   662  001272  6E67               	movwf	sprintf@ap+1,c
   663  001274  C05E  F068         	movff	sprintf@s,sprintf@f
   664  001278  C05F  F069         	movff	sprintf@s+1,sprintf@f+1
   665  00127C  0E00               	movlw	0
   666  00127E  6E6B               	movwf	sprintf@f+3,c
   667  001280  0E00               	movlw	0
   668  001282  6E6A               	movwf	sprintf@f+2,c
   669  001284  0E00               	movlw	0
   670  001286  6E6D               	movwf	sprintf@f+5,c
   671  001288  0E00               	movlw	0
   672  00128A  6E6C               	movwf	sprintf@f+4,c
   673  00128C  0E68               	movlw	low sprintf@f
   674  00128E  6E56               	movwf	vfprintf@fp,c
   675  001290  0E00               	movlw	high sprintf@f
   676  001292  6E57               	movwf	vfprintf@fp+1,c
   677  001294  C060  F058         	movff	sprintf@fmt,vfprintf@fmt
   678  001298  C061  F059         	movff	sprintf@fmt+1,vfprintf@fmt+1
   679  00129C  0E66               	movlw	low sprintf@ap
   680  00129E  6E5A               	movwf	vfprintf@ap,c
   681  0012A0  0E00               	movlw	high sprintf@ap
   682  0012A2  6E5B               	movwf	vfprintf@ap+1,c
   683  0012A4  EC0D  F009         	call	_vfprintf	;wreg free
   684  0012A8  506A               	movf	sprintf@f+2,w,c
   685  0012AA  245E               	addwf	sprintf@s,w,c
   686  0012AC  6ED9               	movwf	fsr2l,c
   687  0012AE  506B               	movf	sprintf@f+3,w,c
   688  0012B0  205F               	addwfc	sprintf@s+1,w,c
   689  0012B2  6EDA               	movwf	fsr2h,c
   690  0012B4  0E00               	movlw	0
   691  0012B6  6EDF               	movwf	indf2,c
   692  0012B8  0012               	return		;funcret
   693  0012BA                     __end_of_sprintf:
   694                           	opt callstack 0
   695                           
   696 ;; *************** function _vfprintf *****************
   697 ;; Defined at:
   698 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
   699 ;; Parameters:    Size  Location     Type
   700 ;;  fp              2   85[COMRAM] PTR struct _IO_FILE
   701 ;;		 -> sprintf@f(6), 
   702 ;;  fmt             2   87[COMRAM] PTR const unsigned char 
   703 ;;		 -> STR_2(5), STR_1(14), 
   704 ;;  ap              2   89[COMRAM] PTR PTR void 
   705 ;;		 -> sprintf@ap(2), 
   706 ;; Auto vars:     Size  Location     Type
   707 ;;  cfmt            2   91[COMRAM] PTR unsigned char 
   708 ;;		 -> STR_2(5), STR_1(14), 
   709 ;; Return value:  Size  Location     Type
   710 ;;                  2   85[COMRAM] int 
   711 ;; Registers used:
   712 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   713 ;; Tracked objects:
   714 ;;		On entry : 0/0
   715 ;;		On exit  : 0/0
   716 ;;		Unchanged: 0/0
   717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   718 ;;      Params:         6       0       0       0       0       0       0
   719 ;;      Locals:         2       0       0       0       0       0       0
   720 ;;      Temps:          0       0       0       0       0       0       0
   721 ;;      Totals:         8       0       0       0       0       0       0
   722 ;;Total ram usage:        8 bytes
   723 ;; Hardware stack levels used:    1
   724 ;; Hardware stack levels required when called:    6
   725 ;; This function calls:
   726 ;;		_vfpfcnvrt
   727 ;; This function is called by:
   728 ;;		_sprintf
   729 ;; This function uses a non-reentrant model
   730 ;;
   731                           
   732                           	psect	text2
   733  00121A                     __ptext2:
   734                           	opt callstack 0
   735  00121A                     _vfprintf:
   736                           	opt callstack 23
   737                           
   738                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.05\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
   739                           
   740                           ;incstack = 0
   741  00121A  C058  F05C         	movff	vfprintf@fmt,vfprintf@cfmt
   742  00121E  C059  F05D         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
   743                           
   744                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
   745  001222  0E00               	movlw	0
   746  001224  6E71               	movwf	_nout+1,c
   747  001226  0E00               	movlw	0
   748  001228  6E70               	movwf	_nout,c
   749                           
   750                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
   751  00122A  D012               	goto	l1829
   752  00122C                     l1827:
   753                           
   754                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
   755  00122C  C056  F040         	movff	vfprintf@fp,vfpfcnvrt@fp
   756  001230  C057  F041         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
   757  001234  0E5C               	movlw	low vfprintf@cfmt
   758  001236  6E42               	movwf	vfpfcnvrt@fmt,c
   759  001238  0E00               	movlw	high vfprintf@cfmt
   760  00123A  6E43               	movwf	vfpfcnvrt@fmt+1,c
   761  00123C  C05A  F044         	movff	vfprintf@ap,vfpfcnvrt@ap
   762  001240  C05B  F045         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
   763  001244  EC0B  F003         	call	_vfpfcnvrt	;wreg free
   764  001248  5040               	movf	?_vfpfcnvrt,w,c
   765  00124A  2670               	addwf	_nout,f,c
   766  00124C  5041               	movf	?_vfpfcnvrt+1,w,c
   767  00124E  2271               	addwfc	_nout+1,f,c
   768  001250                     l1829:
   769                           
   770                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
   771  001250  C05C  FFF6         	movff	vfprintf@cfmt,tblptrl
   772  001254  C05D  FFF7         	movff	vfprintf@cfmt+1,tblptrh
   773  001258                     	if	0	;tblptru may be non-zero
   774  001258                     	endif
   775  001258                     	if	0	;tblptru may be non-zero
   776  001258                     	endif
   777  001258  0008               	tblrd		*
   778  00125A  50F5               	movf	tablat,w,c
   779  00125C  0900               	iorlw	0
   780  00125E  A4D8               	btfss	status,2,c
   781  001260  D7E5               	goto	l1827
   782                           
   783                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
   784  001262  C070  F056         	movff	_nout,?_vfprintf
   785  001266  C071  F057         	movff	_nout+1,?_vfprintf+1
   786  00126A  0012               	return		;funcret
   787  00126C                     __end_of_vfprintf:
   788                           	opt callstack 0
   789                           
   790 ;; *************** function _vfpfcnvrt *****************
   791 ;; Defined at:
   792 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
   793 ;; Parameters:    Size  Location     Type
   794 ;;  fp              2   63[COMRAM] PTR struct _IO_FILE
   795 ;;		 -> sprintf@f(6), 
   796 ;;  fmt             2   65[COMRAM] PTR PTR unsigned char 
   797 ;;		 -> vfprintf@cfmt(2), 
   798 ;;  ap              2   67[COMRAM] PTR PTR void 
   799 ;;		 -> sprintf@ap(2), 
   800 ;; Auto vars:     Size  Location     Type
   801 ;;  ll              8   73[COMRAM] long long 
   802 ;;  llu             8    0        unsigned long long 
   803 ;;  f               4    0        unsigned long long 
   804 ;;  vp              3    0        PTR void 
   805 ;;  ct              3    0        unsigned char [3]
   806 ;;  cp              3    0        PTR unsigned char 
   807 ;;  done            2   81[COMRAM] int 
   808 ;;  i               2    0        int 
   809 ;;  c               1    0        unsigned char 
   810 ;; Return value:  Size  Location     Type
   811 ;;                  2   63[COMRAM] int 
   812 ;; Registers used:
   813 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   814 ;; Tracked objects:
   815 ;;		On entry : 0/0
   816 ;;		On exit  : 0/0
   817 ;;		Unchanged: 0/0
   818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   819 ;;      Params:         6       0       0       0       0       0       0
   820 ;;      Locals:        12       0       0       0       0       0       0
   821 ;;      Temps:          4       0       0       0       0       0       0
   822 ;;      Totals:        22       0       0       0       0       0       0
   823 ;;Total ram usage:       22 bytes
   824 ;; Hardware stack levels used:    1
   825 ;; Hardware stack levels required when called:    5
   826 ;; This function calls:
   827 ;;		_atoi
   828 ;;		_dtoa
   829 ;;		_fputc
   830 ;;		_isdigit
   831 ;; This function is called by:
   832 ;;		_vfprintf
   833 ;; This function uses a non-reentrant model
   834 ;;
   835                           
   836                           	psect	text3
   837  000616                     __ptext3:
   838                           	opt callstack 0
   839  000616                     _vfpfcnvrt:
   840                           	opt callstack 23
   841                           
   842                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 674:     long long ll;
   843                           
   844                           ;incstack = 0
   845  000616  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   846  00061A  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   847  00061E  CFDE FFF6          	movff	postinc2,tblptrl
   848  000622  CFDD FFF7          	movff	postdec2,tblptrh
   849  000626                     	if	0	;tblptru may be non-zero
   850  000626                     	endif
   851  000626                     	if	0	;tblptru may be non-zero
   852  000626                     	endif
   853  000626  0008               	tblrd		*
   854  000628  50F5               	movf	tablat,w,c
   855  00062A  0A25               	xorlw	37
   856  00062C  A4D8               	btfss	status,2,c
   857  00062E  D143               	goto	l1803
   858                           
   859                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
   860  000630  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   861  000634  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   862  000638  2ADE               	incf	postinc2,f,c
   863  00063A  0E00               	movlw	0
   864  00063C  22DD               	addwfc	postdec2,f,c
   865                           
   866                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
   867  00063E  0E00               	movlw	0
   868  000640  6E73               	movwf	_width+1,c
   869  000642  0E00               	movlw	0
   870  000644  6E72               	movwf	_width,c
   871  000646  C072  F076         	movff	_width,_flags
   872  00064A  C073  F077         	movff	_width+1,_flags+1
   873                           
   874                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
   875  00064E  6874               	setf	_prec,c
   876  000650  6875               	setf	_prec+1,c
   877                           
   878                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 688:       
      +                            done = 0;
   879  000652  0E00               	movlw	0
   880  000654  6E53               	movwf	vfpfcnvrt@done+1,c
   881  000656  0E00               	movlw	0
   882  000658  D014               	goto	L1
   883  00065A                     l1729:
   884                           
   885                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 692:       
      +                                        flags |= (1 << 0);
   886  00065A  8076               	bsf	_flags,0,c
   887  00065C                     l1731:
   888                           
   889                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 693:       
      +                                        ++*fmt;
   890  00065C  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   891  000660  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   892  000664  2ADE               	incf	postinc2,f,c
   893  000666  0E00               	movlw	0
   894  000668  22DD               	addwfc	postdec2,f,c
   895                           
   896                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 694:       
      +                                        break;
   897  00066A  D02E               	goto	l1755
   898  00066C                     l1733:
   899                           
   900                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 696:       
      +                                        flags |= (1 << 1);
   901  00066C  8276               	bsf	_flags,1,c
   902  00066E  D7F6               	goto	l1731
   903  000670                     l1737:
   904                           
   905                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 700:       
      +                                        flags |= (1 << 2);
   906  000670  8476               	bsf	_flags,2,c
   907  000672  D7F4               	goto	l1731
   908  000674                     l1741:
   909                           
   910                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 704:       
      +                                        flags |= (1 << 3);
   911  000674  8676               	bsf	_flags,3,c
   912  000676  D7F2               	goto	l1731
   913  000678                     l1745:
   914                           
   915                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 708:       
      +                                        flags |= (1 << 4);
   916  000678  8876               	bsf	_flags,4,c
   917  00067A  D7F0               	goto	l1731
   918  00067C                     l1749:
   919                           
   920                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 712:       
      +                                        done = 1;
   921  00067C  0E00               	movlw	0
   922  00067E  6E53               	movwf	vfpfcnvrt@done+1,c
   923  000680  0E01               	movlw	1
   924  000682                     L1:
   925  000682  6E52               	movwf	vfpfcnvrt@done,c
   926                           
   927                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 713:       
      +                                        break;
   928  000684  D021               	goto	l1755
   929  000686                     l1753:
   930  000686  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   931  00068A  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   932  00068E  CFDE FFF6          	movff	postinc2,tblptrl
   933  000692  CFDD FFF7          	movff	postdec2,tblptrh
   934  000696                     	if	0	;tblptru may be non-zero
   935  000696                     	endif
   936  000696                     	if	0	;tblptru may be non-zero
   937  000696                     	endif
   938  000696  0008               	tblrd		*
   939  000698  50F5               	movf	tablat,w,c
   940  00069A  6E46               	movwf	??_vfpfcnvrt& (0+255),c
   941  00069C  6A47               	clrf	(??_vfpfcnvrt+1)& (0+255),c
   942                           
   943                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   944                           ; Switch size 1, requested type "simple"
   945                           ; Number of cases is 1, Range of values is 0 to 0
   946                           ; switch strategies available:
   947                           ; Name         Instructions Cycles
   948                           ; simple_byte            4     3 (average)
   949                           ;	Chosen strategy is simple_byte
   950  00069E  5047               	movf	??_vfpfcnvrt+1,w,c
   951  0006A0  0A00               	xorlw	0	; case 0
   952  0006A2  A4D8               	btfss	status,2,c
   953  0006A4  D7EB               	goto	l1749
   954                           
   955                           ; Switch size 1, requested type "simple"
   956                           ; Number of cases is 5, Range of values is 32 to 48
   957                           ; switch strategies available:
   958                           ; Name         Instructions Cycles
   959                           ; simple_byte           16     9 (average)
   960                           ;	Chosen strategy is simple_byte
   961  0006A6  5046               	movf	??_vfpfcnvrt,w,c
   962  0006A8  0A20               	xorlw	32	; case 32
   963  0006AA  B4D8               	btfsc	status,2,c
   964  0006AC  D7E3               	goto	l1741
   965  0006AE  0A03               	xorlw	3	; case 35
   966  0006B0  B4D8               	btfsc	status,2,c
   967  0006B2  D7E2               	goto	l1745
   968  0006B4  0A08               	xorlw	8	; case 43
   969  0006B6  B4D8               	btfsc	status,2,c
   970  0006B8  D7DB               	goto	l1737
   971  0006BA  0A06               	xorlw	6	; case 45
   972  0006BC  B4D8               	btfsc	status,2,c
   973  0006BE  D7CD               	goto	l1729
   974  0006C0  0A1D               	xorlw	29	; case 48
   975  0006C2  B4D8               	btfsc	status,2,c
   976  0006C4  D7D3               	goto	l1733
   977  0006C6  D7DA               	goto	l1749
   978  0006C8                     l1755:
   979                           
   980                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 689:       
      +                            while (!done) {
   981  0006C8  5052               	movf	vfpfcnvrt@done,w,c
   982  0006CA  1053               	iorwf	vfpfcnvrt@done+1,w,c
   983  0006CC  B4D8               	btfsc	status,2,c
   984  0006CE  D7DB               	goto	l1753
   985                           
   986                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 716:       
      +                            if (flags & (1 << 0)) {
   987  0006D0  B076               	btfsc	_flags,0,c
   988                           
   989                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 717:       
      +                                flags &= ~(1 << 1);
   990  0006D2  9276               	bcf	_flags,1,c
   991                           
   992                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 723:       
      +                            if ((*fmt)[0] == '*') {
   993  0006D4  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   994  0006D8  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   995  0006DC  CFDE FFF6          	movff	postinc2,tblptrl
   996  0006E0  CFDD FFF7          	movff	postdec2,tblptrh
   997  0006E4                     	if	0	;tblptru may be non-zero
   998  0006E4                     	endif
   999  0006E4                     	if	0	;tblptru may be non-zero
  1000  0006E4                     	endif
  1001  0006E4  0008               	tblrd		*
  1002  0006E6  50F5               	movf	tablat,w,c
  1003  0006E8  0A2A               	xorlw	42
  1004  0006EA  A4D8               	btfss	status,2,c
  1005  0006EC  D023               	goto	l1767
  1006                           
  1007                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 724:       
      +                                ++*fmt;
  1008  0006EE  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1009  0006F2  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1010  0006F6  2ADE               	incf	postinc2,f,c
  1011  0006F8  0E00               	movlw	0
  1012  0006FA  22DD               	addwfc	postdec2,f,c
  1013                           
  1014                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 725:       
      +                                width = (*(int *)__va_arg(*(int **)ap, (int)0));
  1015  0006FC  C044  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1016  000700  C045  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1017  000704  CFDF F046          	movff	indf2,??_vfpfcnvrt
  1018  000708  0E02               	movlw	2
  1019  00070A  26DE               	addwf	postinc2,f,c
  1020  00070C  CFDF F047          	movff	indf2,??_vfpfcnvrt+1
  1021  000710  0E00               	movlw	0
  1022  000712  22DD               	addwfc	postdec2,f,c
  1023  000714  C046  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1024  000718  C047  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1025  00071C  CFDE F072          	movff	postinc2,_width
  1026  000720  CFDD F073          	movff	postdec2,_width+1
  1027                           
  1028                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 726:       
      +                                if (width < 0) {
  1029  000724  AE73               	btfss	_width+1,7,c
  1030  000726  D03F               	goto	u1260
  1031                           
  1032                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 727:       
      +                                    flags |= (1 << 0);
  1033  000728  8076               	bsf	_flags,0,c
  1034                           
  1035                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 728:       
      +                                    width = -width;
  1036  00072A  6C72               	negf	_width,c
  1037  00072C  1E73               	comf	_width+1,f,c
  1038  00072E  B0D8               	btfsc	status,0,c
  1039  000730  2A73               	incf	_width+1,f,c
  1040  000732  D039               	goto	u1260
  1041  000734                     l1767:
  1042                           
  1043                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 731:       
      +                                width = atoi(*fmt);
  1044  000734  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1045  000738  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1046  00073C  CFDE F008          	movff	postinc2,atoi@s
  1047  000740  CFDD F009          	movff	postdec2,atoi@s+1
  1048  000744  EC3A  F006         	call	_atoi	;wreg free
  1049  000748  C008  F072         	movff	?_atoi,_width
  1050  00074C  C009  F073         	movff	?_atoi+1,_width+1
  1051                           
  1052                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 732:       
      +                                while ((0 ? isdigit((*fmt)[0]) : ((unsigned)((*fmt)[0])-'0') < 10)) {
  1053  000750  D007               	goto	l1771
  1054  000752                     l1769:
  1055                           
  1056                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 733:       
      +                                    ++*fmt;
  1057  000752  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1058  000756  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1059  00075A  2ADE               	incf	postinc2,f,c
  1060  00075C  0E00               	movlw	0
  1061  00075E  22DD               	addwfc	postdec2,f,c
  1062  000760                     l1771:
  1063  000760  0ED0               	movlw	208
  1064  000762  6E46               	movwf	??_vfpfcnvrt& (0+255),c
  1065  000764  0EFF               	movlw	255
  1066  000766  6E47               	movwf	(??_vfpfcnvrt+1)& (0+255),c
  1067  000768  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1068  00076C  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1069  000770  CFDE FFF6          	movff	postinc2,tblptrl
  1070  000774  CFDD FFF7          	movff	postdec2,tblptrh
  1071  000778                     	if	0	;tblptru may be non-zero
  1072  000778                     	endif
  1073  000778                     	if	0	;tblptru may be non-zero
  1074  000778                     	endif
  1075  000778  0008               	tblrd		*
  1076  00077A  50F5               	movf	tablat,w,c
  1077  00077C  6E48               	movwf	(??_vfpfcnvrt+2)& (0+255),c
  1078  00077E  6A49               	clrf	(??_vfpfcnvrt+3)& (0+255),c
  1079  000780  5046               	movf	??_vfpfcnvrt,w,c
  1080  000782  2648               	addwf	??_vfpfcnvrt+2,f,c
  1081  000784  5047               	movf	??_vfpfcnvrt+1,w,c
  1082  000786  2249               	addwfc	??_vfpfcnvrt+3,f,c
  1083  000788  5049               	movf	??_vfpfcnvrt+3,w,c
  1084  00078A  E106               	bnz	u1240
  1085  00078C  0E0A               	movlw	10
  1086  00078E  5C48               	subwf	??_vfpfcnvrt+2,w,c
  1087  000790  B0D8               	btfsc	status,0,c
  1088  000792  D002               	goto	u1240
  1089  000794  0E01               	movlw	1
  1090  000796  D001               	goto	u1250
  1091  000798                     u1240:
  1092  000798  0E00               	movlw	0
  1093  00079A                     u1250:
  1094  00079A  6E54               	movwf	_vfpfcnvrt$359,c
  1095  00079C  6A55               	clrf	_vfpfcnvrt$359+1,c
  1096  00079E  5054               	movf	_vfpfcnvrt$359,w,c
  1097  0007A0  1055               	iorwf	_vfpfcnvrt$359+1,w,c
  1098  0007A2  A4D8               	btfss	status,2,c
  1099  0007A4  D7D6               	goto	l1769
  1100  0007A6                     u1260:
  1101                           
  1102                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 825:       
      +                            if ((*fmt[0] == 'd') || (*fmt[0] == 'i')) {
  1103  0007A6  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1104  0007AA  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1105  0007AE  CFDE FFF6          	movff	postinc2,tblptrl
  1106  0007B2  CFDD FFF7          	movff	postdec2,tblptrh
  1107  0007B6                     	if	0	;tblptru may be non-zero
  1108  0007B6                     	endif
  1109  0007B6                     	if	0	;tblptru may be non-zero
  1110  0007B6                     	endif
  1111  0007B6  0008               	tblrd		*
  1112  0007B8  50F5               	movf	tablat,w,c
  1113  0007BA  0A64               	xorlw	100
  1114  0007BC  B4D8               	btfsc	status,2,c
  1115  0007BE  D00D               	goto	u1280
  1116  0007C0  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1117  0007C4  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1118  0007C8  CFDE FFF6          	movff	postinc2,tblptrl
  1119  0007CC  CFDD FFF7          	movff	postdec2,tblptrh
  1120  0007D0                     	if	0	;tblptru may be non-zero
  1121  0007D0                     	endif
  1122  0007D0                     	if	0	;tblptru may be non-zero
  1123  0007D0                     	endif
  1124  0007D0  0008               	tblrd		*
  1125  0007D2  50F5               	movf	tablat,w,c
  1126  0007D4  0A69               	xorlw	105
  1127  0007D6  A4D8               	btfss	status,2,c
  1128  0007D8  D03F               	goto	l1787
  1129  0007DA                     u1280:
  1130                           
  1131                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 827:       
      +                                ++*fmt;
  1132  0007DA  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1133  0007DE  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1134  0007E2  2ADE               	incf	postinc2,f,c
  1135  0007E4  0E00               	movlw	0
  1136  0007E6  22DD               	addwfc	postdec2,f,c
  1137                           
  1138                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 828:       
      +                                ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  1139  0007E8  C044  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1140  0007EC  C045  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1141  0007F0  CFDF F046          	movff	indf2,??_vfpfcnvrt
  1142  0007F4  0E02               	movlw	2
  1143  0007F6  26DE               	addwf	postinc2,f,c
  1144  0007F8  CFDF F047          	movff	indf2,??_vfpfcnvrt+1
  1145  0007FC  0E00               	movlw	0
  1146  0007FE  22DD               	addwfc	postdec2,f,c
  1147  000800  C046  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1148  000804  C047  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1149  000808  CFDE F04A          	movff	postinc2,vfpfcnvrt@ll
  1150  00080C  CFDD F04B          	movff	postdec2,vfpfcnvrt@ll+1
  1151  000810  0E00               	movlw	0
  1152  000812  BE4B               	btfsc	vfpfcnvrt@ll+1,7,c
  1153  000814  0EFF               	movlw	-1
  1154  000816  6E4C               	movwf	vfpfcnvrt@ll+2,c
  1155  000818  6E4D               	movwf	vfpfcnvrt@ll+3,c
  1156  00081A  6E4E               	movwf	vfpfcnvrt@ll+4,c
  1157  00081C  6E4F               	movwf	vfpfcnvrt@ll+5,c
  1158  00081E  6E50               	movwf	vfpfcnvrt@ll+6,c
  1159  000820  6E51               	movwf	vfpfcnvrt@ll+7,c
  1160                           
  1161                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 830:       
      +                                return dtoa(fp, ll);
  1162  000822  C040  F01C         	movff	vfpfcnvrt@fp,dtoa@fp
  1163  000826  C041  F01D         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  1164  00082A  C04A  F01E         	movff	vfpfcnvrt@ll,dtoa@d
  1165  00082E  C04B  F01F         	movff	vfpfcnvrt@ll+1,dtoa@d+1
  1166  000832  C04C  F020         	movff	vfpfcnvrt@ll+2,dtoa@d+2
  1167  000836  C04D  F021         	movff	vfpfcnvrt@ll+3,dtoa@d+3
  1168  00083A  C04E  F022         	movff	vfpfcnvrt@ll+4,dtoa@d+4
  1169  00083E  C04F  F023         	movff	vfpfcnvrt@ll+5,dtoa@d+5
  1170  000842  C050  F024         	movff	vfpfcnvrt@ll+6,dtoa@d+6
  1171  000846  C051  F025         	movff	vfpfcnvrt@ll+7,dtoa@d+7
  1172  00084A  EC75  F004         	call	_dtoa	;wreg free
  1173  00084E  C01C  F040         	movff	?_dtoa,?_vfpfcnvrt
  1174  000852  C01D  F041         	movff	?_dtoa+1,?_vfpfcnvrt+1
  1175  000856  0012               	return	
  1176  000858                     l1787:
  1177                           
  1178                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
  1179  000858  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1180  00085C  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1181  000860  CFDE FFF6          	movff	postinc2,tblptrl
  1182  000864  CFDD FFF7          	movff	postdec2,tblptrh
  1183  000868                     	if	0	;tblptru may be non-zero
  1184  000868                     	endif
  1185  000868                     	if	0	;tblptru may be non-zero
  1186  000868                     	endif
  1187  000868  0008               	tblrd		*
  1188  00086A  50F5               	movf	tablat,w,c
  1189  00086C  0A25               	xorlw	37
  1190  00086E  A4D8               	btfss	status,2,c
  1191  000870  D016               	goto	l1797
  1192                           
  1193                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
  1194  000872  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1195  000876  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1196  00087A  2ADE               	incf	postinc2,f,c
  1197  00087C  0E00               	movlw	0
  1198  00087E  22DD               	addwfc	postdec2,f,c
  1199                           
  1200                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
  1201  000880  0E00               	movlw	0
  1202  000882  6E02               	movwf	fputc@c+1,c
  1203  000884  0E25               	movlw	37
  1204  000886  6E01               	movwf	fputc@c,c
  1205  000888  C040  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1206  00088C  C041  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1207  000890  ECDE  F007         	call	_fputc	;wreg free
  1208  000894                     l1793:
  1209                           
  1210                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
  1211  000894  0E00               	movlw	0
  1212  000896  6E41               	movwf	?_vfpfcnvrt+1,c
  1213  000898  0E01               	movlw	1
  1214  00089A  6E40               	movwf	?_vfpfcnvrt,c
  1215  00089C  0012               	return	
  1216  00089E                     l1797:
  1217                           
  1218                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
  1219  00089E  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1220  0008A2  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1221  0008A6  2ADE               	incf	postinc2,f,c
  1222  0008A8  0E00               	movlw	0
  1223  0008AA  22DD               	addwfc	postdec2,f,c
  1224                           
  1225                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
  1226  0008AC  0E00               	movlw	0
  1227  0008AE  6E41               	movwf	?_vfpfcnvrt+1,c
  1228  0008B0  0E00               	movlw	0
  1229  0008B2  6E40               	movwf	?_vfpfcnvrt,c
  1230  0008B4  0012               	return	
  1231  0008B6                     l1803:
  1232                           
  1233                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
  1234  0008B6  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1235  0008BA  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1236  0008BE  CFDE FFF6          	movff	postinc2,tblptrl
  1237  0008C2  CFDD FFF7          	movff	postdec2,tblptrh
  1238  0008C6                     	if	0	;tblptru may be non-zero
  1239  0008C6                     	endif
  1240  0008C6                     	if	0	;tblptru may be non-zero
  1241  0008C6                     	endif
  1242  0008C6  0008               	tblrd		*
  1243  0008C8  50F5               	movf	tablat,w,c
  1244  0008CA  6E01               	movwf	fputc@c,c
  1245  0008CC  6A02               	clrf	fputc@c+1,c
  1246  0008CE  C040  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1247  0008D2  C041  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1248  0008D6  ECDE  F007         	call	_fputc	;wreg free
  1249                           
  1250                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
  1251  0008DA  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1252  0008DE  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1253  0008E2  2ADE               	incf	postinc2,f,c
  1254  0008E4  0E00               	movlw	0
  1255  0008E6  22DD               	addwfc	postdec2,f,c
  1256  0008E8  D7D5               	goto	l1793
  1257  0008EA                     __end_of_vfpfcnvrt:
  1258                           	opt callstack 0
  1259                           
  1260 ;; *************** function _dtoa *****************
  1261 ;; Defined at:
  1262 ;;		line 274 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1263 ;; Parameters:    Size  Location     Type
  1264 ;;  fp              2   27[COMRAM] PTR struct _IO_FILE
  1265 ;;		 -> sprintf@f(6), 
  1266 ;;  d               8   29[COMRAM] long long 
  1267 ;; Auto vars:     Size  Location     Type
  1268 ;;  n               8   53[COMRAM] long long 
  1269 ;;  i               2   61[COMRAM] int 
  1270 ;;  s               2   51[COMRAM] int 
  1271 ;;  w               2   49[COMRAM] int 
  1272 ;;  p               2   47[COMRAM] int 
  1273 ;; Return value:  Size  Location     Type
  1274 ;;                  2   27[COMRAM] int 
  1275 ;; Registers used:
  1276 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1277 ;; Tracked objects:
  1278 ;;		On entry : 0/0
  1279 ;;		On exit  : 0/0
  1280 ;;		Unchanged: 0/0
  1281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1282 ;;      Params:        10       0       0       0       0       0       0
  1283 ;;      Locals:        18       0       0       0       0       0       0
  1284 ;;      Temps:          8       0       0       0       0       0       0
  1285 ;;      Totals:        36       0       0       0       0       0       0
  1286 ;;Total ram usage:       36 bytes
  1287 ;; Hardware stack levels used:    1
  1288 ;; Hardware stack levels required when called:    4
  1289 ;; This function calls:
  1290 ;;		___aodiv
  1291 ;;		___aomod
  1292 ;;		_abs
  1293 ;;		_pad
  1294 ;; This function is called by:
  1295 ;;		_vfpfcnvrt
  1296 ;; This function uses a non-reentrant model
  1297 ;;
  1298                           
  1299                           	psect	text4
  1300  0008EA                     __ptext4:
  1301                           	opt callstack 0
  1302  0008EA                     _dtoa:
  1303                           	opt callstack 23
  1304                           
  1305                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 274: static
      +                           int dtoa(FILE *fp, long long d);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\
      +                          c99\common\doprnt.c: 275: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\c
      +                          ommon\doprnt.c: 276:     int i, p, s, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\
      +                          sources\c99\common\doprnt.c: 277:     long long n;;C:\Program Files (x86)\Microchip\xc8\
      +                          v2.05\pic\sources\c99\common\doprnt.c: 280:     n = d;
  1306                           
  1307                           ;incstack = 0
  1308  0008EA  C01E  F036         	movff	dtoa@d,dtoa@n
  1309  0008EE  C01F  F037         	movff	dtoa@d+1,dtoa@n+1
  1310  0008F2  C020  F038         	movff	dtoa@d+2,dtoa@n+2
  1311  0008F6  C021  F039         	movff	dtoa@d+3,dtoa@n+3
  1312  0008FA  C022  F03A         	movff	dtoa@d+4,dtoa@n+4
  1313  0008FE  C023  F03B         	movff	dtoa@d+5,dtoa@n+5
  1314  000902  C024  F03C         	movff	dtoa@d+6,dtoa@n+6
  1315  000906  C025  F03D         	movff	dtoa@d+7,dtoa@n+7
  1316                           
  1317                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 281:     s 
      +                          = n < 0 ? 1 : 0;
  1318  00090A  AE3D               	btfss	dtoa@n+7,7,c
  1319  00090C  D002               	goto	u970
  1320  00090E  0E01               	movlw	1
  1321  000910  D001               	goto	u980
  1322  000912                     u970:
  1323  000912  0E00               	movlw	0
  1324  000914                     u980:
  1325  000914  6E34               	movwf	dtoa@s,c
  1326  000916  6A35               	clrf	dtoa@s+1,c
  1327                           
  1328                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 282:     if
      +                           (s) {
  1329  000918  5034               	movf	dtoa@s,w,c
  1330  00091A  1035               	iorwf	dtoa@s+1,w,c
  1331  00091C  B4D8               	btfsc	status,2,c
  1332  00091E  D010               	goto	l1601
  1333                           
  1334                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 283:       
      +                            n = -n;
  1335  000920  1E3D               	comf	dtoa@n+7,f,c
  1336  000922  1E3C               	comf	dtoa@n+6,f,c
  1337  000924  1E3B               	comf	dtoa@n+5,f,c
  1338  000926  1E3A               	comf	dtoa@n+4,f,c
  1339  000928  1E39               	comf	dtoa@n+3,f,c
  1340  00092A  1E38               	comf	dtoa@n+2,f,c
  1341  00092C  1E37               	comf	dtoa@n+1,f,c
  1342  00092E  6C36               	negf	dtoa@n,c
  1343  000930  0E00               	movlw	0
  1344  000932  2237               	addwfc	dtoa@n+1,f,c
  1345  000934  2238               	addwfc	dtoa@n+2,f,c
  1346  000936  2239               	addwfc	dtoa@n+3,f,c
  1347  000938  223A               	addwfc	dtoa@n+4,f,c
  1348  00093A  223B               	addwfc	dtoa@n+5,f,c
  1349  00093C  223C               	addwfc	dtoa@n+6,f,c
  1350  00093E  223D               	addwfc	dtoa@n+7,f,c
  1351  000940                     l1601:
  1352                           
  1353                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 287:     if
      +                           (!(prec < 0)) {
  1354  000940  AE75               	btfss	_prec+1,7,c
  1355                           
  1356                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 288:       
      +                            flags &= ~(1 << 1);
  1357  000942  9276               	bcf	_flags,1,c
  1358                           
  1359                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 290:     p 
      +                          = (0 < prec) ? prec : 1;
  1360  000944  BE75               	btfsc	_prec+1,7,c
  1361  000946  D005               	goto	u1010
  1362  000948  5075               	movf	_prec+1,w,c
  1363  00094A  E108               	bnz	l103
  1364  00094C  0474               	decf	_prec,w,c
  1365  00094E  B0D8               	btfsc	status,0,c
  1366  000950  D005               	goto	l103
  1367  000952                     u1010:
  1368  000952  0E00               	movlw	0
  1369  000954  6E31               	movwf	dtoa@p+1,c
  1370  000956  0E01               	movlw	1
  1371  000958  6E30               	movwf	dtoa@p,c
  1372  00095A  D004               	goto	l105
  1373  00095C                     l103:
  1374  00095C  C074  F030         	movff	_prec,dtoa@p
  1375  000960  C075  F031         	movff	_prec+1,dtoa@p+1
  1376  000964                     l105:
  1377                           
  1378                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 291:     w 
      +                          = width;
  1379  000964  C072  F032         	movff	_width,dtoa@w
  1380  000968  C073  F033         	movff	_width+1,dtoa@w+1
  1381                           
  1382                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 292:     if
      +                           (s || (flags & (1 << 2))) {
  1383  00096C  5034               	movf	dtoa@s,w,c
  1384  00096E  1035               	iorwf	dtoa@s+1,w,c
  1385  000970  A4D8               	btfss	status,2,c
  1386  000972  D002               	goto	u1030
  1387  000974  A476               	btfss	_flags,2,c
  1388  000976  D003               	goto	l1615
  1389  000978                     u1030:
  1390                           
  1391                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 293:       
      +                            --w;
  1392  000978  0632               	decf	dtoa@w,f,c
  1393  00097A  A0D8               	btfss	status,0,c
  1394  00097C  0633               	decf	dtoa@w+1,f,c
  1395  00097E                     l1615:
  1396                           
  1397                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 297:     i 
      +                          = sizeof(dbuf) - 1;
  1398  00097E  0E00               	movlw	0
  1399  000980  6E3F               	movwf	dtoa@i+1,c
  1400  000982  0E1F               	movlw	31
  1401  000984  6E3E               	movwf	dtoa@i,c
  1402                           
  1403                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 298:     db
      +                          uf[i] = '\0';
  1404  000986  0E00               	movlw	0
  1405  000988  0100               	movlb	0	; () banked
  1406  00098A  6F9F               	movwf	(_dbuf+31)& (0+255),b
  1407                           
  1408                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1409  00098C  D07C               	goto	l1629
  1410  00098E                     l1619:
  1411                           
  1412                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 300:       
      +                            --i;
  1413  00098E  063E               	decf	dtoa@i,f,c
  1414  000990  A0D8               	btfss	status,0,c
  1415  000992  063F               	decf	dtoa@i+1,f,c
  1416                           
  1417                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 301:       
      +                            dbuf[i] = '0' + abs(n % 10);
  1418  000994  0E80               	movlw	low _dbuf
  1419  000996  243E               	addwf	dtoa@i,w,c
  1420  000998  6ED9               	movwf	fsr2l,c
  1421  00099A  0E00               	movlw	high _dbuf
  1422  00099C  203F               	addwfc	dtoa@i+1,w,c
  1423  00099E  6EDA               	movwf	fsr2h,c
  1424  0009A0  C036  F001         	movff	dtoa@n,___aomod@dividend
  1425  0009A4  C037  F002         	movff	dtoa@n+1,___aomod@dividend+1
  1426  0009A8  C038  F003         	movff	dtoa@n+2,___aomod@dividend+2
  1427  0009AC  C039  F004         	movff	dtoa@n+3,___aomod@dividend+3
  1428  0009B0  C03A  F005         	movff	dtoa@n+4,___aomod@dividend+4
  1429  0009B4  C03B  F006         	movff	dtoa@n+5,___aomod@dividend+5
  1430  0009B8  C03C  F007         	movff	dtoa@n+6,___aomod@dividend+6
  1431  0009BC  C03D  F008         	movff	dtoa@n+7,___aomod@dividend+7
  1432  0009C0  0E0A               	movlw	10
  1433  0009C2  6E09               	movwf	___aomod@divisor,c
  1434  0009C4  0E00               	movlw	0
  1435  0009C6  6E0A               	movwf	___aomod@divisor+1,c
  1436  0009C8  0E00               	movlw	0
  1437  0009CA  6E0B               	movwf	___aomod@divisor+2,c
  1438  0009CC  0E00               	movlw	0
  1439  0009CE  6E0C               	movwf	___aomod@divisor+3,c
  1440  0009D0  0E00               	movlw	0
  1441  0009D2  6E0D               	movwf	___aomod@divisor+4,c
  1442  0009D4  0E00               	movlw	0
  1443  0009D6  6E0E               	movwf	___aomod@divisor+5,c
  1444  0009D8  0E00               	movlw	0
  1445  0009DA  6E0F               	movwf	___aomod@divisor+6,c
  1446  0009DC  0E00               	movlw	0
  1447  0009DE  6E10               	movwf	___aomod@divisor+7,c
  1448  0009E0  ECDA  F006         	call	___aomod	;wreg free
  1449  0009E4  C001  F026         	movff	?___aomod,??_dtoa
  1450  0009E8  C002  F027         	movff	?___aomod+1,??_dtoa+1
  1451  0009EC  C003  F028         	movff	?___aomod+2,??_dtoa+2
  1452  0009F0  C004  F029         	movff	?___aomod+3,??_dtoa+3
  1453  0009F4  C005  F02A         	movff	?___aomod+4,??_dtoa+4
  1454  0009F8  C006  F02B         	movff	?___aomod+5,??_dtoa+5
  1455  0009FC  C007  F02C         	movff	?___aomod+6,??_dtoa+6
  1456  000A00  C008  F02D         	movff	?___aomod+7,??_dtoa+7
  1457  000A04  C026  F013         	movff	??_dtoa,abs@a
  1458  000A08  C028  F014         	movff	??_dtoa+2,abs@a+1
  1459  000A0C  EC98  F009         	call	_abs	;wreg free
  1460  000A10  5013               	movf	?_abs,w,c
  1461  000A12  0F30               	addlw	48
  1462  000A14  6EDF               	movwf	indf2,c
  1463                           
  1464                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 302:       
      +                            --p;
  1465  000A16  0630               	decf	dtoa@p,f,c
  1466  000A18  A0D8               	btfss	status,0,c
  1467  000A1A  0631               	decf	dtoa@p+1,f,c
  1468                           
  1469                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 303:       
      +                            --w;
  1470  000A1C  0632               	decf	dtoa@w,f,c
  1471  000A1E  A0D8               	btfss	status,0,c
  1472  000A20  0633               	decf	dtoa@w+1,f,c
  1473                           
  1474                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 304:       
      +                            n = n / 10;
  1475  000A22  C036  F001         	movff	dtoa@n,___aodiv@dividend
  1476  000A26  C037  F002         	movff	dtoa@n+1,___aodiv@dividend+1
  1477  000A2A  C038  F003         	movff	dtoa@n+2,___aodiv@dividend+2
  1478  000A2E  C039  F004         	movff	dtoa@n+3,___aodiv@dividend+3
  1479  000A32  C03A  F005         	movff	dtoa@n+4,___aodiv@dividend+4
  1480  000A36  C03B  F006         	movff	dtoa@n+5,___aodiv@dividend+5
  1481  000A3A  C03C  F007         	movff	dtoa@n+6,___aodiv@dividend+6
  1482  000A3E  C03D  F008         	movff	dtoa@n+7,___aodiv@dividend+7
  1483  000A42  0E0A               	movlw	10
  1484  000A44  6E09               	movwf	___aodiv@divisor,c
  1485  000A46  0E00               	movlw	0
  1486  000A48  6E0A               	movwf	___aodiv@divisor+1,c
  1487  000A4A  0E00               	movlw	0
  1488  000A4C  6E0B               	movwf	___aodiv@divisor+2,c
  1489  000A4E  0E00               	movlw	0
  1490  000A50  6E0C               	movwf	___aodiv@divisor+3,c
  1491  000A52  0E00               	movlw	0
  1492  000A54  6E0D               	movwf	___aodiv@divisor+4,c
  1493  000A56  0E00               	movlw	0
  1494  000A58  6E0E               	movwf	___aodiv@divisor+5,c
  1495  000A5A  0E00               	movlw	0
  1496  000A5C  6E0F               	movwf	___aodiv@divisor+6,c
  1497  000A5E  0E00               	movlw	0
  1498  000A60  6E10               	movwf	___aodiv@divisor+7,c
  1499  000A62  EC96  F005         	call	___aodiv	;wreg free
  1500  000A66  C001  F036         	movff	?___aodiv,dtoa@n
  1501  000A6A  C002  F037         	movff	?___aodiv+1,dtoa@n+1
  1502  000A6E  C003  F038         	movff	?___aodiv+2,dtoa@n+2
  1503  000A72  C004  F039         	movff	?___aodiv+3,dtoa@n+3
  1504  000A76  C005  F03A         	movff	?___aodiv+4,dtoa@n+4
  1505  000A7A  C006  F03B         	movff	?___aodiv+5,dtoa@n+5
  1506  000A7E  C007  F03C         	movff	?___aodiv+6,dtoa@n+6
  1507  000A82  C008  F03D         	movff	?___aodiv+7,dtoa@n+7
  1508  000A86                     l1629:
  1509                           
  1510                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1511  000A86  BE3F               	btfsc	dtoa@i+1,7,c
  1512  000A88  D01F               	goto	u1080
  1513  000A8A  503F               	movf	dtoa@i+1,w,c
  1514  000A8C  E103               	bnz	u1040
  1515  000A8E  043E               	decf	dtoa@i,w,c
  1516  000A90  A0D8               	btfss	status,0,c
  1517  000A92  D01A               	goto	u1080
  1518  000A94                     u1040:
  1519  000A94  5036               	movf	dtoa@n,w,c
  1520  000A96  1037               	iorwf	dtoa@n+1,w,c
  1521  000A98  1038               	iorwf	dtoa@n+2,w,c
  1522  000A9A  1039               	iorwf	dtoa@n+3,w,c
  1523  000A9C  103A               	iorwf	dtoa@n+4,w,c
  1524  000A9E  103B               	iorwf	dtoa@n+5,w,c
  1525  000AA0  103C               	iorwf	dtoa@n+6,w,c
  1526  000AA2  103D               	iorwf	dtoa@n+7,w,c
  1527  000AA4  A4D8               	btfss	status,2,c
  1528  000AA6  D773               	goto	l1619
  1529  000AA8  BE31               	btfsc	dtoa@p+1,7,c
  1530  000AAA  D005               	goto	u1060
  1531  000AAC  5031               	movf	dtoa@p+1,w,c
  1532  000AAE  E102               	bnz	u1061
  1533  000AB0  0430               	decf	dtoa@p,w,c
  1534  000AB2  B0D8               	btfsc	status,0,c
  1535  000AB4                     u1061:
  1536  000AB4  D76C               	goto	l1619
  1537  000AB6                     u1060:
  1538  000AB6  BE33               	btfsc	dtoa@w+1,7,c
  1539  000AB8  D007               	goto	u1080
  1540  000ABA  5033               	movf	dtoa@w+1,w,c
  1541  000ABC  E103               	bnz	u1070
  1542  000ABE  0432               	decf	dtoa@w,w,c
  1543  000AC0  A0D8               	btfss	status,0,c
  1544  000AC2  D002               	goto	u1080
  1545  000AC4                     u1070:
  1546  000AC4  B276               	btfsc	_flags,1,c
  1547  000AC6  D763               	goto	l1619
  1548  000AC8                     u1080:
  1549                           
  1550                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 308:     if
      +                           (s || (flags & (1 << 2))) {
  1551  000AC8  5034               	movf	dtoa@s,w,c
  1552  000ACA  1035               	iorwf	dtoa@s+1,w,c
  1553  000ACC  A4D8               	btfss	status,2,c
  1554  000ACE  D002               	goto	u1100
  1555  000AD0  A476               	btfss	_flags,2,c
  1556  000AD2  D017               	goto	l1653
  1557  000AD4                     u1100:
  1558                           
  1559                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 309:       
      +                            --i;
  1560  000AD4  063E               	decf	dtoa@i,f,c
  1561  000AD6  A0D8               	btfss	status,0,c
  1562  000AD8  063F               	decf	dtoa@i+1,f,c
  1563                           
  1564                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 310:       
      +                            dbuf[i] = s ? '-' : '+';
  1565  000ADA  5034               	movf	dtoa@s,w,c
  1566  000ADC  1035               	iorwf	dtoa@s+1,w,c
  1567  000ADE  A4D8               	btfss	status,2,c
  1568  000AE0  D004               	goto	l1649
  1569  000AE2  0E00               	movlw	0
  1570  000AE4  6E2F               	movwf	_dtoa$344+1,c
  1571  000AE6  0E2B               	movlw	43
  1572  000AE8  D003               	goto	L2
  1573  000AEA                     l1649:
  1574  000AEA  0E00               	movlw	0
  1575  000AEC  6E2F               	movwf	_dtoa$344+1,c
  1576  000AEE  0E2D               	movlw	45
  1577  000AF0                     L2:
  1578  000AF0  6E2E               	movwf	_dtoa$344,c
  1579  000AF2  0E80               	movlw	low _dbuf
  1580  000AF4  243E               	addwf	dtoa@i,w,c
  1581  000AF6  6ED9               	movwf	fsr2l,c
  1582  000AF8  0E00               	movlw	high _dbuf
  1583  000AFA  203F               	addwfc	dtoa@i+1,w,c
  1584  000AFC  6EDA               	movwf	fsr2h,c
  1585  000AFE  C02E  FFDF         	movff	_dtoa$344,indf2
  1586  000B02                     l1653:
  1587                           
  1588                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 314:     re
      +                          turn pad(fp, &dbuf[i], w);
  1589  000B02  C01C  F011         	movff	dtoa@fp,pad@fp
  1590  000B06  C01D  F012         	movff	dtoa@fp+1,pad@fp+1
  1591  000B0A  0E80               	movlw	low _dbuf
  1592  000B0C  243E               	addwf	dtoa@i,w,c
  1593  000B0E  6E13               	movwf	pad@buf,c
  1594  000B10  0E00               	movlw	high _dbuf
  1595  000B12  203F               	addwfc	dtoa@i+1,w,c
  1596  000B14  6E14               	movwf	pad@buf+1,c
  1597  000B16  C032  F015         	movff	dtoa@w,pad@p
  1598  000B1A  C033  F016         	movff	dtoa@w+1,pad@p+1
  1599  000B1E  EC7A  F008         	call	_pad	;wreg free
  1600  000B22  C011  F01C         	movff	?_pad,?_dtoa
  1601  000B26  C012  F01D         	movff	?_pad+1,?_dtoa+1
  1602  000B2A  0012               	return		;funcret
  1603  000B2C                     __end_of_dtoa:
  1604                           	opt callstack 0
  1605                           
  1606 ;; *************** function _pad *****************
  1607 ;; Defined at:
  1608 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1609 ;; Parameters:    Size  Location     Type
  1610 ;;  fp              2   16[COMRAM] PTR struct _IO_FILE
  1611 ;;		 -> sprintf@f(6), 
  1612 ;;  buf             2   18[COMRAM] PTR unsigned char 
  1613 ;;		 -> dbuf(32), 
  1614 ;;  p               2   20[COMRAM] int 
  1615 ;; Auto vars:     Size  Location     Type
  1616 ;;  w               2   25[COMRAM] int 
  1617 ;;  i               2   23[COMRAM] int 
  1618 ;; Return value:  Size  Location     Type
  1619 ;;                  2   16[COMRAM] int 
  1620 ;; Registers used:
  1621 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1622 ;; Tracked objects:
  1623 ;;		On entry : 0/0
  1624 ;;		On exit  : 0/0
  1625 ;;		Unchanged: 0/0
  1626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1627 ;;      Params:         6       0       0       0       0       0       0
  1628 ;;      Locals:         4       0       0       0       0       0       0
  1629 ;;      Temps:          1       0       0       0       0       0       0
  1630 ;;      Totals:        11       0       0       0       0       0       0
  1631 ;;Total ram usage:       11 bytes
  1632 ;; Hardware stack levels used:    1
  1633 ;; Hardware stack levels required when called:    3
  1634 ;; This function calls:
  1635 ;;		_fputc
  1636 ;;		_fputs
  1637 ;;		_strlen
  1638 ;; This function is called by:
  1639 ;;		_dtoa
  1640 ;; This function uses a non-reentrant model
  1641 ;;
  1642                           
  1643                           	psect	text5
  1644  0010F4                     __ptext5:
  1645                           	opt callstack 0
  1646  0010F4                     _pad:
  1647                           	opt callstack 23
  1648                           
  1649                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
  1650                           
  1651                           ;incstack = 0
  1652  0010F4  A076               	btfss	_flags,0,c
  1653  0010F6  D00A               	goto	l1459
  1654                           
  1655                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
  1656  0010F8  C013  F00A         	movff	pad@buf,fputs@s
  1657  0010FC  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1658  001100  C011  F00C         	movff	pad@fp,fputs@fp
  1659  001104  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1660  001108  EC7C  F009         	call	_fputs	;wreg free
  1661  00110C                     l1459:
  1662                           
  1663                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
  1664  00110C  BE16               	btfsc	pad@p+1,7,c
  1665  00110E  D005               	goto	l1463
  1666  001110  C015  F01A         	movff	pad@p,pad@w
  1667  001114  C016  F01B         	movff	pad@p+1,pad@w+1
  1668  001118  D004               	goto	l92
  1669  00111A                     l1463:
  1670  00111A  0E00               	movlw	0
  1671  00111C  6E1B               	movwf	pad@w+1,c
  1672  00111E  0E00               	movlw	0
  1673  001120  6E1A               	movwf	pad@w,c
  1674  001122                     l92:
  1675                           
  1676                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
  1677  001122  0E00               	movlw	0
  1678  001124  6E19               	movwf	pad@i+1,c
  1679  001126  0E00               	movlw	0
  1680  001128  6E18               	movwf	pad@i,c
  1681                           
  1682                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  1683  00112A  D00C               	goto	l1469
  1684  00112C                     l1465:
  1685                           
  1686                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
  1687  00112C  0E00               	movlw	0
  1688  00112E  6E02               	movwf	fputc@c+1,c
  1689  001130  0E20               	movlw	32
  1690  001132  6E01               	movwf	fputc@c,c
  1691  001134  C011  F003         	movff	pad@fp,fputc@fp
  1692  001138  C012  F004         	movff	pad@fp+1,fputc@fp+1
  1693  00113C  ECDE  F007         	call	_fputc	;wreg free
  1694                           
  1695                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
  1696  001140  4A18               	infsnz	pad@i,f,c
  1697  001142  2A19               	incf	pad@i+1,f,c
  1698  001144                     l1469:
  1699                           
  1700                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  1701  001144  501A               	movf	pad@w,w,c
  1702  001146  5C18               	subwf	pad@i,w,c
  1703  001148  5019               	movf	pad@i+1,w,c
  1704  00114A  0A80               	xorlw	128
  1705  00114C  6E17               	movwf	??_pad& (0+255),c
  1706  00114E  501B               	movf	pad@w+1,w,c
  1707  001150  0A80               	xorlw	128
  1708  001152  5817               	subwfb	??_pad& (0+255),w,c
  1709  001154  A0D8               	btfss	status,0,c
  1710  001156  D7EA               	goto	l1465
  1711                           
  1712                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
  1713  001158  B076               	btfsc	_flags,0,c
  1714  00115A  D00A               	goto	l1473
  1715                           
  1716                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
  1717  00115C  C013  F00A         	movff	pad@buf,fputs@s
  1718  001160  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1719  001164  C011  F00C         	movff	pad@fp,fputs@fp
  1720  001168  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1721  00116C  EC7C  F009         	call	_fputs	;wreg free
  1722  001170                     l1473:
  1723                           
  1724                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
  1725  001170  C013  F001         	movff	pad@buf,strlen@s
  1726  001174  C014  F002         	movff	pad@buf+1,strlen@s+1
  1727  001178  ECC9  F009         	call	_strlen	;wreg free
  1728  00117C  501A               	movf	pad@w,w,c
  1729  00117E  2401               	addwf	?_strlen,w,c
  1730  001180  6E11               	movwf	?_pad,c
  1731  001182  501B               	movf	pad@w+1,w,c
  1732  001184  2002               	addwfc	?_strlen+1,w,c
  1733  001186  6E12               	movwf	?_pad+1,c
  1734  001188  0012               	return		;funcret
  1735  00118A                     __end_of_pad:
  1736                           	opt callstack 0
  1737                           
  1738 ;; *************** function _strlen *****************
  1739 ;; Defined at:
  1740 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
  1741 ;; Parameters:    Size  Location     Type
  1742 ;;  s               2    0[COMRAM] PTR const unsigned char 
  1743 ;;		 -> dbuf(32), 
  1744 ;; Auto vars:     Size  Location     Type
  1745 ;;  a               2    2[COMRAM] PTR const unsigned char 
  1746 ;;		 -> dbuf(32), 
  1747 ;; Return value:  Size  Location     Type
  1748 ;;                  2    0[COMRAM] unsigned int 
  1749 ;; Registers used:
  1750 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1751 ;; Tracked objects:
  1752 ;;		On entry : 0/0
  1753 ;;		On exit  : 0/0
  1754 ;;		Unchanged: 0/0
  1755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1756 ;;      Params:         2       0       0       0       0       0       0
  1757 ;;      Locals:         2       0       0       0       0       0       0
  1758 ;;      Temps:          0       0       0       0       0       0       0
  1759 ;;      Totals:         4       0       0       0       0       0       0
  1760 ;;Total ram usage:        4 bytes
  1761 ;; Hardware stack levels used:    1
  1762 ;; This function calls:
  1763 ;;		Nothing
  1764 ;; This function is called by:
  1765 ;;		_pad
  1766 ;; This function uses a non-reentrant model
  1767 ;;
  1768                           
  1769                           	psect	text6
  1770  001392                     __ptext6:
  1771                           	opt callstack 0
  1772  001392                     _strlen:
  1773                           	opt callstack 25
  1774                           
  1775                           ;incstack = 0
  1776  001392  C001  F003         	movff	strlen@s,strlen@a
  1777  001396  C002  F004         	movff	strlen@s+1,strlen@a+1
  1778  00139A  D002               	goto	l1449
  1779  00139C                     l1447:
  1780  00139C  4A01               	infsnz	strlen@s,f,c
  1781  00139E  2A02               	incf	strlen@s+1,f,c
  1782  0013A0                     l1449:
  1783  0013A0  C001  FFD9         	movff	strlen@s,fsr2l
  1784  0013A4  C002  FFDA         	movff	strlen@s+1,fsr2h
  1785  0013A8  50DF               	movf	indf2,w,c
  1786  0013AA  A4D8               	btfss	status,2,c
  1787  0013AC  D7F7               	goto	l1447
  1788  0013AE  5003               	movf	strlen@a,w,c
  1789  0013B0  5C01               	subwf	strlen@s,w,c
  1790  0013B2  6E01               	movwf	?_strlen,c
  1791  0013B4  5004               	movf	strlen@a+1,w,c
  1792  0013B6  5802               	subwfb	strlen@s+1,w,c
  1793  0013B8  6E02               	movwf	?_strlen+1,c
  1794  0013BA  0012               	return		;funcret
  1795  0013BC                     __end_of_strlen:
  1796                           	opt callstack 0
  1797                           
  1798 ;; *************** function _fputs *****************
  1799 ;; Defined at:
  1800 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputs.c"
  1801 ;; Parameters:    Size  Location     Type
  1802 ;;  s               2    9[COMRAM] PTR const unsigned char 
  1803 ;;		 -> dbuf(32), 
  1804 ;;  fp              2   11[COMRAM] PTR struct _IO_FILE
  1805 ;;		 -> sprintf@f(6), 
  1806 ;; Auto vars:     Size  Location     Type
  1807 ;;  i               2   14[COMRAM] int 
  1808 ;;  c               1   13[COMRAM] unsigned char 
  1809 ;; Return value:  Size  Location     Type
  1810 ;;                  2    9[COMRAM] int 
  1811 ;; Registers used:
  1812 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1813 ;; Tracked objects:
  1814 ;;		On entry : 0/0
  1815 ;;		On exit  : 0/0
  1816 ;;		Unchanged: 0/0
  1817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1818 ;;      Params:         4       0       0       0       0       0       0
  1819 ;;      Locals:         3       0       0       0       0       0       0
  1820 ;;      Temps:          0       0       0       0       0       0       0
  1821 ;;      Totals:         7       0       0       0       0       0       0
  1822 ;;Total ram usage:        7 bytes
  1823 ;; Hardware stack levels used:    1
  1824 ;; Hardware stack levels required when called:    2
  1825 ;; This function calls:
  1826 ;;		_fputc
  1827 ;; This function is called by:
  1828 ;;		_pad
  1829 ;; This function uses a non-reentrant model
  1830 ;;
  1831                           
  1832                           	psect	text7
  1833  0012F8                     __ptext7:
  1834                           	opt callstack 0
  1835  0012F8                     _fputs:
  1836                           	opt callstack 23
  1837                           
  1838                           ;incstack = 0
  1839  0012F8  0E00               	movlw	0
  1840  0012FA  6E10               	movwf	fputs@i+1,c
  1841  0012FC  0E00               	movlw	0
  1842  0012FE  6E0F               	movwf	fputs@i,c
  1843  001300  D00B               	goto	l1443
  1844  001302                     l1439:
  1845  001302  C00E  F001         	movff	fputs@c,fputc@c
  1846  001306  6A02               	clrf	fputc@c+1,c
  1847  001308  C00C  F003         	movff	fputs@fp,fputc@fp
  1848  00130C  C00D  F004         	movff	fputs@fp+1,fputc@fp+1
  1849  001310  ECDE  F007         	call	_fputc	;wreg free
  1850  001314  4A0F               	infsnz	fputs@i,f,c
  1851  001316  2A10               	incf	fputs@i+1,f,c
  1852  001318                     l1443:
  1853  001318  500F               	movf	fputs@i,w,c
  1854  00131A  240A               	addwf	fputs@s,w,c
  1855  00131C  6ED9               	movwf	fsr2l,c
  1856  00131E  5010               	movf	fputs@i+1,w,c
  1857  001320  200B               	addwfc	fputs@s+1,w,c
  1858  001322  6EDA               	movwf	fsr2h,c
  1859  001324  50DF               	movf	indf2,w,c
  1860  001326  6E0E               	movwf	fputs@c,c
  1861  001328  500E               	movf	fputs@c,w,c
  1862  00132A  B4D8               	btfsc	status,2,c
  1863  00132C  0012               	return	
  1864  00132E  D7E9               	goto	l1439
  1865  001330                     __end_of_fputs:
  1866                           	opt callstack 0
  1867                           
  1868 ;; *************** function _fputc *****************
  1869 ;; Defined at:
  1870 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputc.c"
  1871 ;; Parameters:    Size  Location     Type
  1872 ;;  c               2    0[COMRAM] int 
  1873 ;;  fp              2    2[COMRAM] PTR struct _IO_FILE
  1874 ;;		 -> sprintf@f(6), 
  1875 ;; Auto vars:     Size  Location     Type
  1876 ;;		None
  1877 ;; Return value:  Size  Location     Type
  1878 ;;                  2    0[COMRAM] int 
  1879 ;; Registers used:
  1880 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1881 ;; Tracked objects:
  1882 ;;		On entry : 0/0
  1883 ;;		On exit  : 0/0
  1884 ;;		Unchanged: 0/0
  1885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1886 ;;      Params:         4       0       0       0       0       0       0
  1887 ;;      Locals:         0       0       0       0       0       0       0
  1888 ;;      Temps:          5       0       0       0       0       0       0
  1889 ;;      Totals:         9       0       0       0       0       0       0
  1890 ;;Total ram usage:        9 bytes
  1891 ;; Hardware stack levels used:    1
  1892 ;; Hardware stack levels required when called:    1
  1893 ;; This function calls:
  1894 ;;		_putch
  1895 ;; This function is called by:
  1896 ;;		_pad
  1897 ;;		_vfpfcnvrt
  1898 ;;		_fputs
  1899 ;; This function uses a non-reentrant model
  1900 ;;
  1901                           
  1902                           	psect	text8
  1903  000FBC                     __ptext8:
  1904                           	opt callstack 0
  1905  000FBC                     _fputc:
  1906                           	opt callstack 26
  1907                           
  1908                           ;incstack = 0
  1909  000FBC  5003               	movf	fputc@fp,w,c
  1910  000FBE  1004               	iorwf	fputc@fp+1,w,c
  1911  000FC0  B4D8               	btfsc	status,2,c
  1912  000FC2  D004               	goto	u690
  1913  000FC4  5003               	movf	fputc@fp,w,c
  1914  000FC6  1004               	iorwf	fputc@fp+1,w,c
  1915  000FC8  A4D8               	btfss	status,2,c
  1916  000FCA  D004               	goto	l1429
  1917  000FCC                     u690:
  1918  000FCC  5001               	movf	fputc@c,w,c
  1919  000FCE  EC2F  F00A         	call	_putch
  1920  000FD2  0012               	return	
  1921  000FD4                     l1429:
  1922  000FD4  EE20 F004          	lfsr	2,4
  1923  000FD8  5003               	movf	fputc@fp,w,c
  1924  000FDA  26D9               	addwf	fsr2l,f,c
  1925  000FDC  5004               	movf	fputc@fp+1,w,c
  1926  000FDE  22DA               	addwfc	fsr2h,f,c
  1927  000FE0  50DE               	movf	postinc2,w,c
  1928  000FE2  10DE               	iorwf	postinc2,w,c
  1929  000FE4  B4D8               	btfsc	status,2,c
  1930  000FE6  D016               	goto	u710
  1931  000FE8  EE20 F004          	lfsr	2,4
  1932  000FEC  5003               	movf	fputc@fp,w,c
  1933  000FEE  26D9               	addwf	fsr2l,f,c
  1934  000FF0  5004               	movf	fputc@fp+1,w,c
  1935  000FF2  22DA               	addwfc	fsr2h,f,c
  1936  000FF4  EE10 F002          	lfsr	1,2
  1937  000FF8  5003               	movf	fputc@fp,w,c
  1938  000FFA  26E1               	addwf	fsr1l,f,c
  1939  000FFC  5004               	movf	fputc@fp+1,w,c
  1940  000FFE  22E2               	addwfc	fsr1h,f,c
  1941  001000  50DE               	movf	postinc2,w,c
  1942  001002  5CE6               	subwf	postinc1,w,c
  1943  001004  50E6               	movf	postinc1,w,c
  1944  001006  0A80               	xorlw	128
  1945  001008  6E09               	movwf	(??_fputc+4)& (0+255),c
  1946  00100A  50DE               	movf	postinc2,w,c
  1947  00100C  0A80               	xorlw	128
  1948  00100E  5809               	subwfb	(??_fputc+4)& (0+255),w,c
  1949  001010  B0D8               	btfsc	status,0,c
  1950  001012  0012               	return	
  1951  001014                     u710:
  1952  001014  EE20 F002          	lfsr	2,2
  1953  001018  5003               	movf	fputc@fp,w,c
  1954  00101A  26D9               	addwf	fsr2l,f,c
  1955  00101C  5004               	movf	fputc@fp+1,w,c
  1956  00101E  22DA               	addwfc	fsr2h,f,c
  1957  001020  CFDE F005          	movff	postinc2,??_fputc
  1958  001024  CFDD F006          	movff	postdec2,??_fputc+1
  1959  001028  C003  FFD9         	movff	fputc@fp,fsr2l
  1960  00102C  C004  FFDA         	movff	fputc@fp+1,fsr2h
  1961  001030  CFDE F007          	movff	postinc2,??_fputc+2
  1962  001034  CFDD F008          	movff	postdec2,??_fputc+3
  1963  001038  5005               	movf	??_fputc,w,c
  1964  00103A  2407               	addwf	??_fputc+2,w,c
  1965  00103C  6ED9               	movwf	fsr2l,c
  1966  00103E  5006               	movf	??_fputc+1,w,c
  1967  001040  2008               	addwfc	??_fputc+3,w,c
  1968  001042  6EDA               	movwf	fsr2h,c
  1969  001044  C001  FFDF         	movff	fputc@c,indf2
  1970  001048  EE20 F002          	lfsr	2,2
  1971  00104C  5003               	movf	fputc@fp,w,c
  1972  00104E  26D9               	addwf	fsr2l,f,c
  1973  001050  5004               	movf	fputc@fp+1,w,c
  1974  001052  22DA               	addwfc	fsr2h,f,c
  1975  001054  2ADE               	incf	postinc2,f,c
  1976  001056  0E00               	movlw	0
  1977  001058  22DD               	addwfc	postdec2,f,c
  1978  00105A  0012               	return		;funcret
  1979  00105C                     __end_of_fputc:
  1980                           	opt callstack 0
  1981                           
  1982 ;; *************** function _putch *****************
  1983 ;; Defined at:
  1984 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\putch.c"
  1985 ;; Parameters:    Size  Location     Type
  1986 ;;  c               1    wreg     unsigned char 
  1987 ;; Auto vars:     Size  Location     Type
  1988 ;;  c               1    0[COMRAM] unsigned char 
  1989 ;; Return value:  Size  Location     Type
  1990 ;;                  1    wreg      void 
  1991 ;; Registers used:
  1992 ;;		wreg
  1993 ;; Tracked objects:
  1994 ;;		On entry : 0/0
  1995 ;;		On exit  : 0/0
  1996 ;;		Unchanged: 0/0
  1997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1998 ;;      Params:         0       0       0       0       0       0       0
  1999 ;;      Locals:         0       0       0       0       0       0       0
  2000 ;;      Temps:          0       0       0       0       0       0       0
  2001 ;;      Totals:         0       0       0       0       0       0       0
  2002 ;;Total ram usage:        0 bytes
  2003 ;; Hardware stack levels used:    1
  2004 ;; This function calls:
  2005 ;;		Nothing
  2006 ;; This function is called by:
  2007 ;;		_fputc
  2008 ;; This function uses a non-reentrant model
  2009 ;;
  2010                           
  2011                           	psect	text9
  2012  00145E                     __ptext9:
  2013                           	opt callstack 0
  2014  00145E                     _putch:
  2015                           	opt callstack 26
  2016                           
  2017                           ;incstack = 0
  2018  00145E  0012               	return		;funcret
  2019  001460                     __end_of_putch:
  2020                           	opt callstack 0
  2021                           
  2022 ;; *************** function _abs *****************
  2023 ;; Defined at:
  2024 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\abs.c"
  2025 ;; Parameters:    Size  Location     Type
  2026 ;;  a               2   18[COMRAM] int 
  2027 ;; Auto vars:     Size  Location     Type
  2028 ;;		None
  2029 ;; Return value:  Size  Location     Type
  2030 ;;                  2   18[COMRAM] int 
  2031 ;; Registers used:
  2032 ;;		wreg, status,2, status,0
  2033 ;; Tracked objects:
  2034 ;;		On entry : 0/0
  2035 ;;		On exit  : 0/0
  2036 ;;		Unchanged: 0/0
  2037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2038 ;;      Params:         2       0       0       0       0       0       0
  2039 ;;      Locals:         0       0       0       0       0       0       0
  2040 ;;      Temps:          2       0       0       0       0       0       0
  2041 ;;      Totals:         4       0       0       0       0       0       0
  2042 ;;Total ram usage:        4 bytes
  2043 ;; Hardware stack levels used:    1
  2044 ;; This function calls:
  2045 ;;		Nothing
  2046 ;; This function is called by:
  2047 ;;		_dtoa
  2048 ;; This function uses a non-reentrant model
  2049 ;;
  2050                           
  2051                           	psect	text10
  2052  001330                     __ptext10:
  2053                           	opt callstack 0
  2054  001330                     _abs:
  2055                           	opt callstack 26
  2056                           
  2057                           ;incstack = 0
  2058  001330  BE14               	btfsc	abs@a+1,7,c
  2059  001332  D005               	goto	u780
  2060  001334  5014               	movf	abs@a+1,w,c
  2061  001336  E110               	bnz	l837
  2062  001338  0413               	decf	abs@a,w,c
  2063  00133A  B0D8               	btfsc	status,0,c
  2064  00133C  D00D               	goto	l837
  2065  00133E                     u780:
  2066  00133E  C013  F015         	movff	abs@a,??_abs
  2067  001342  C014  F016         	movff	abs@a+1,??_abs+1
  2068  001346  1E15               	comf	??_abs,f,c
  2069  001348  1E16               	comf	??_abs+1,f,c
  2070  00134A  4A15               	infsnz	??_abs,f,c
  2071  00134C  2A16               	incf	??_abs+1,f,c
  2072  00134E  C015  F013         	movff	??_abs,?_abs
  2073  001352  C016  F014         	movff	??_abs+1,?_abs+1
  2074  001356  0012               	return	
  2075  001358                     l837:
  2076  001358  C013  F013         	movff	abs@a,?_abs
  2077  00135C  C014  F014         	movff	abs@a+1,?_abs+1
  2078  001360  0012               	return		;funcret
  2079  001362                     __end_of_abs:
  2080                           	opt callstack 0
  2081                           
  2082 ;; *************** function ___aomod *****************
  2083 ;; Defined at:
  2084 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aomod.c"
  2085 ;; Parameters:    Size  Location     Type
  2086 ;;  dividend        8    0[COMRAM] long long 
  2087 ;;  divisor         8    8[COMRAM] long long 
  2088 ;; Auto vars:     Size  Location     Type
  2089 ;;  sign            1   17[COMRAM] unsigned char 
  2090 ;;  counter         1   16[COMRAM] unsigned char 
  2091 ;; Return value:  Size  Location     Type
  2092 ;;                  8    0[COMRAM] long long 
  2093 ;; Registers used:
  2094 ;;		wreg, status,2, status,0
  2095 ;; Tracked objects:
  2096 ;;		On entry : 0/0
  2097 ;;		On exit  : 0/0
  2098 ;;		Unchanged: 0/0
  2099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2100 ;;      Params:        16       0       0       0       0       0       0
  2101 ;;      Locals:         2       0       0       0       0       0       0
  2102 ;;      Temps:          0       0       0       0       0       0       0
  2103 ;;      Totals:        18       0       0       0       0       0       0
  2104 ;;Total ram usage:       18 bytes
  2105 ;; Hardware stack levels used:    1
  2106 ;; This function calls:
  2107 ;;		Nothing
  2108 ;; This function is called by:
  2109 ;;		_dtoa
  2110 ;; This function uses a non-reentrant model
  2111 ;;
  2112                           
  2113                           	psect	text11
  2114  000DB4                     __ptext11:
  2115                           	opt callstack 0
  2116  000DB4                     ___aomod:
  2117                           	opt callstack 26
  2118                           
  2119                           ;incstack = 0
  2120  000DB4  0E00               	movlw	0
  2121  000DB6  6E12               	movwf	___aomod@sign,c
  2122  000DB8  AE08               	btfss	___aomod@dividend+7,7,c
  2123  000DBA  D012               	goto	l1543
  2124  000DBC  1E08               	comf	___aomod@dividend+7,f,c
  2125  000DBE  1E07               	comf	___aomod@dividend+6,f,c
  2126  000DC0  1E06               	comf	___aomod@dividend+5,f,c
  2127  000DC2  1E05               	comf	___aomod@dividend+4,f,c
  2128  000DC4  1E04               	comf	___aomod@dividend+3,f,c
  2129  000DC6  1E03               	comf	___aomod@dividend+2,f,c
  2130  000DC8  1E02               	comf	___aomod@dividend+1,f,c
  2131  000DCA  6C01               	negf	___aomod@dividend,c
  2132  000DCC  0E00               	movlw	0
  2133  000DCE  2202               	addwfc	___aomod@dividend+1,f,c
  2134  000DD0  2203               	addwfc	___aomod@dividend+2,f,c
  2135  000DD2  2204               	addwfc	___aomod@dividend+3,f,c
  2136  000DD4  2205               	addwfc	___aomod@dividend+4,f,c
  2137  000DD6  2206               	addwfc	___aomod@dividend+5,f,c
  2138  000DD8  2207               	addwfc	___aomod@dividend+6,f,c
  2139  000DDA  2208               	addwfc	___aomod@dividend+7,f,c
  2140  000DDC  0E01               	movlw	1
  2141  000DDE  6E12               	movwf	___aomod@sign,c
  2142  000DE0                     l1543:
  2143  000DE0  AE10               	btfss	___aomod@divisor+7,7,c
  2144  000DE2  D010               	goto	l1547
  2145  000DE4  1E10               	comf	___aomod@divisor+7,f,c
  2146  000DE6  1E0F               	comf	___aomod@divisor+6,f,c
  2147  000DE8  1E0E               	comf	___aomod@divisor+5,f,c
  2148  000DEA  1E0D               	comf	___aomod@divisor+4,f,c
  2149  000DEC  1E0C               	comf	___aomod@divisor+3,f,c
  2150  000DEE  1E0B               	comf	___aomod@divisor+2,f,c
  2151  000DF0  1E0A               	comf	___aomod@divisor+1,f,c
  2152  000DF2  6C09               	negf	___aomod@divisor,c
  2153  000DF4  0E00               	movlw	0
  2154  000DF6  220A               	addwfc	___aomod@divisor+1,f,c
  2155  000DF8  220B               	addwfc	___aomod@divisor+2,f,c
  2156  000DFA  220C               	addwfc	___aomod@divisor+3,f,c
  2157  000DFC  220D               	addwfc	___aomod@divisor+4,f,c
  2158  000DFE  220E               	addwfc	___aomod@divisor+5,f,c
  2159  000E00  220F               	addwfc	___aomod@divisor+6,f,c
  2160  000E02  2210               	addwfc	___aomod@divisor+7,f,c
  2161  000E04                     l1547:
  2162  000E04  5009               	movf	___aomod@divisor,w,c
  2163  000E06  100A               	iorwf	___aomod@divisor+1,w,c
  2164  000E08  100B               	iorwf	___aomod@divisor+2,w,c
  2165  000E0A  100C               	iorwf	___aomod@divisor+3,w,c
  2166  000E0C  100D               	iorwf	___aomod@divisor+4,w,c
  2167  000E0E  100E               	iorwf	___aomod@divisor+5,w,c
  2168  000E10  100F               	iorwf	___aomod@divisor+6,w,c
  2169  000E12  1010               	iorwf	___aomod@divisor+7,w,c
  2170  000E14  B4D8               	btfsc	status,2,c
  2171  000E16  D03C               	goto	l1563
  2172  000E18  0E01               	movlw	1
  2173  000E1A  6E11               	movwf	___aomod@counter,c
  2174  000E1C  D00A               	goto	l1553
  2175  000E1E                     l1551:
  2176  000E1E  90D8               	bcf	status,0,c
  2177  000E20  3609               	rlcf	___aomod@divisor,f,c
  2178  000E22  360A               	rlcf	___aomod@divisor+1,f,c
  2179  000E24  360B               	rlcf	___aomod@divisor+2,f,c
  2180  000E26  360C               	rlcf	___aomod@divisor+3,f,c
  2181  000E28  360D               	rlcf	___aomod@divisor+4,f,c
  2182  000E2A  360E               	rlcf	___aomod@divisor+5,f,c
  2183  000E2C  360F               	rlcf	___aomod@divisor+6,f,c
  2184  000E2E  3610               	rlcf	___aomod@divisor+7,f,c
  2185  000E30  2A11               	incf	___aomod@counter,f,c
  2186  000E32                     l1553:
  2187  000E32  AE10               	btfss	___aomod@divisor+7,7,c
  2188  000E34  D7F4               	goto	l1551
  2189  000E36                     u910:
  2190  000E36  5009               	movf	___aomod@divisor,w,c
  2191  000E38  5C01               	subwf	___aomod@dividend,w,c
  2192  000E3A  500A               	movf	___aomod@divisor+1,w,c
  2193  000E3C  5802               	subwfb	___aomod@dividend+1,w,c
  2194  000E3E  500B               	movf	___aomod@divisor+2,w,c
  2195  000E40  5803               	subwfb	___aomod@dividend+2,w,c
  2196  000E42  500C               	movf	___aomod@divisor+3,w,c
  2197  000E44  5804               	subwfb	___aomod@dividend+3,w,c
  2198  000E46  500D               	movf	___aomod@divisor+4,w,c
  2199  000E48  5805               	subwfb	___aomod@dividend+4,w,c
  2200  000E4A  500E               	movf	___aomod@divisor+5,w,c
  2201  000E4C  5806               	subwfb	___aomod@dividend+5,w,c
  2202  000E4E  500F               	movf	___aomod@divisor+6,w,c
  2203  000E50  5807               	subwfb	___aomod@dividend+6,w,c
  2204  000E52  5010               	movf	___aomod@divisor+7,w,c
  2205  000E54  5808               	subwfb	___aomod@dividend+7,w,c
  2206  000E56  A0D8               	btfss	status,0,c
  2207  000E58  D010               	goto	l1559
  2208  000E5A  5009               	movf	___aomod@divisor,w,c
  2209  000E5C  5E01               	subwf	___aomod@dividend,f,c
  2210  000E5E  500A               	movf	___aomod@divisor+1,w,c
  2211  000E60  5A02               	subwfb	___aomod@dividend+1,f,c
  2212  000E62  500B               	movf	___aomod@divisor+2,w,c
  2213  000E64  5A03               	subwfb	___aomod@dividend+2,f,c
  2214  000E66  500C               	movf	___aomod@divisor+3,w,c
  2215  000E68  5A04               	subwfb	___aomod@dividend+3,f,c
  2216  000E6A  500D               	movf	___aomod@divisor+4,w,c
  2217  000E6C  5A05               	subwfb	___aomod@dividend+4,f,c
  2218  000E6E  500E               	movf	___aomod@divisor+5,w,c
  2219  000E70  5A06               	subwfb	___aomod@dividend+5,f,c
  2220  000E72  500F               	movf	___aomod@divisor+6,w,c
  2221  000E74  5A07               	subwfb	___aomod@dividend+6,f,c
  2222  000E76  5010               	movf	___aomod@divisor+7,w,c
  2223  000E78  5A08               	subwfb	___aomod@dividend+7,f,c
  2224  000E7A                     l1559:
  2225  000E7A  90D8               	bcf	status,0,c
  2226  000E7C  3210               	rrcf	___aomod@divisor+7,f,c
  2227  000E7E  320F               	rrcf	___aomod@divisor+6,f,c
  2228  000E80  320E               	rrcf	___aomod@divisor+5,f,c
  2229  000E82  320D               	rrcf	___aomod@divisor+4,f,c
  2230  000E84  320C               	rrcf	___aomod@divisor+3,f,c
  2231  000E86  320B               	rrcf	___aomod@divisor+2,f,c
  2232  000E88  320A               	rrcf	___aomod@divisor+1,f,c
  2233  000E8A  3209               	rrcf	___aomod@divisor,f,c
  2234  000E8C  2E11               	decfsz	___aomod@counter,f,c
  2235  000E8E  D7D3               	goto	u910
  2236  000E90                     l1563:
  2237  000E90  5012               	movf	___aomod@sign,w,c
  2238  000E92  B4D8               	btfsc	status,2,c
  2239  000E94  D010               	goto	l1567
  2240  000E96  1E08               	comf	___aomod@dividend+7,f,c
  2241  000E98  1E07               	comf	___aomod@dividend+6,f,c
  2242  000E9A  1E06               	comf	___aomod@dividend+5,f,c
  2243  000E9C  1E05               	comf	___aomod@dividend+4,f,c
  2244  000E9E  1E04               	comf	___aomod@dividend+3,f,c
  2245  000EA0  1E03               	comf	___aomod@dividend+2,f,c
  2246  000EA2  1E02               	comf	___aomod@dividend+1,f,c
  2247  000EA4  6C01               	negf	___aomod@dividend,c
  2248  000EA6  0E00               	movlw	0
  2249  000EA8  2202               	addwfc	___aomod@dividend+1,f,c
  2250  000EAA  2203               	addwfc	___aomod@dividend+2,f,c
  2251  000EAC  2204               	addwfc	___aomod@dividend+3,f,c
  2252  000EAE  2205               	addwfc	___aomod@dividend+4,f,c
  2253  000EB0  2206               	addwfc	___aomod@dividend+5,f,c
  2254  000EB2  2207               	addwfc	___aomod@dividend+6,f,c
  2255  000EB4  2208               	addwfc	___aomod@dividend+7,f,c
  2256  000EB6                     l1567:
  2257  000EB6  C001  F001         	movff	___aomod@dividend,?___aomod
  2258  000EBA  C002  F002         	movff	___aomod@dividend+1,?___aomod+1
  2259  000EBE  C003  F003         	movff	___aomod@dividend+2,?___aomod+2
  2260  000EC2  C004  F004         	movff	___aomod@dividend+3,?___aomod+3
  2261  000EC6  C005  F005         	movff	___aomod@dividend+4,?___aomod+4
  2262  000ECA  C006  F006         	movff	___aomod@dividend+5,?___aomod+5
  2263  000ECE  C007  F007         	movff	___aomod@dividend+6,?___aomod+6
  2264  000ED2  C008  F008         	movff	___aomod@dividend+7,?___aomod+7
  2265  000ED6  0012               	return		;funcret
  2266  000ED8                     __end_of___aomod:
  2267                           	opt callstack 0
  2268                           
  2269 ;; *************** function ___aodiv *****************
  2270 ;; Defined at:
  2271 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aodiv.c"
  2272 ;; Parameters:    Size  Location     Type
  2273 ;;  dividend        8    0[COMRAM] long long 
  2274 ;;  divisor         8    8[COMRAM] long long 
  2275 ;; Auto vars:     Size  Location     Type
  2276 ;;  quotient        8   18[COMRAM] long long 
  2277 ;;  sign            1   17[COMRAM] unsigned char 
  2278 ;;  counter         1   16[COMRAM] unsigned char 
  2279 ;; Return value:  Size  Location     Type
  2280 ;;                  8    0[COMRAM] long long 
  2281 ;; Registers used:
  2282 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2283 ;; Tracked objects:
  2284 ;;		On entry : 0/0
  2285 ;;		On exit  : 0/0
  2286 ;;		Unchanged: 0/0
  2287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2288 ;;      Params:        16       0       0       0       0       0       0
  2289 ;;      Locals:        10       0       0       0       0       0       0
  2290 ;;      Temps:          0       0       0       0       0       0       0
  2291 ;;      Totals:        26       0       0       0       0       0       0
  2292 ;;Total ram usage:       26 bytes
  2293 ;; Hardware stack levels used:    1
  2294 ;; This function calls:
  2295 ;;		Nothing
  2296 ;; This function is called by:
  2297 ;;		_dtoa
  2298 ;; This function uses a non-reentrant model
  2299 ;;
  2300                           
  2301                           	psect	text12
  2302  000B2C                     __ptext12:
  2303                           	opt callstack 0
  2304  000B2C                     ___aodiv:
  2305                           	opt callstack 26
  2306                           
  2307                           ;incstack = 0
  2308  000B2C  0E00               	movlw	0
  2309  000B2E  6E12               	movwf	___aodiv@sign,c
  2310  000B30  AE10               	btfss	___aodiv@divisor+7,7,c
  2311  000B32  D012               	goto	l1499
  2312  000B34  1E10               	comf	___aodiv@divisor+7,f,c
  2313  000B36  1E0F               	comf	___aodiv@divisor+6,f,c
  2314  000B38  1E0E               	comf	___aodiv@divisor+5,f,c
  2315  000B3A  1E0D               	comf	___aodiv@divisor+4,f,c
  2316  000B3C  1E0C               	comf	___aodiv@divisor+3,f,c
  2317  000B3E  1E0B               	comf	___aodiv@divisor+2,f,c
  2318  000B40  1E0A               	comf	___aodiv@divisor+1,f,c
  2319  000B42  6C09               	negf	___aodiv@divisor,c
  2320  000B44  0E00               	movlw	0
  2321  000B46  220A               	addwfc	___aodiv@divisor+1,f,c
  2322  000B48  220B               	addwfc	___aodiv@divisor+2,f,c
  2323  000B4A  220C               	addwfc	___aodiv@divisor+3,f,c
  2324  000B4C  220D               	addwfc	___aodiv@divisor+4,f,c
  2325  000B4E  220E               	addwfc	___aodiv@divisor+5,f,c
  2326  000B50  220F               	addwfc	___aodiv@divisor+6,f,c
  2327  000B52  2210               	addwfc	___aodiv@divisor+7,f,c
  2328  000B54  0E01               	movlw	1
  2329  000B56  6E12               	movwf	___aodiv@sign,c
  2330  000B58                     l1499:
  2331  000B58  AE08               	btfss	___aodiv@dividend+7,7,c
  2332  000B5A  D012               	goto	l1505
  2333  000B5C  1E08               	comf	___aodiv@dividend+7,f,c
  2334  000B5E  1E07               	comf	___aodiv@dividend+6,f,c
  2335  000B60  1E06               	comf	___aodiv@dividend+5,f,c
  2336  000B62  1E05               	comf	___aodiv@dividend+4,f,c
  2337  000B64  1E04               	comf	___aodiv@dividend+3,f,c
  2338  000B66  1E03               	comf	___aodiv@dividend+2,f,c
  2339  000B68  1E02               	comf	___aodiv@dividend+1,f,c
  2340  000B6A  6C01               	negf	___aodiv@dividend,c
  2341  000B6C  0E00               	movlw	0
  2342  000B6E  2202               	addwfc	___aodiv@dividend+1,f,c
  2343  000B70  2203               	addwfc	___aodiv@dividend+2,f,c
  2344  000B72  2204               	addwfc	___aodiv@dividend+3,f,c
  2345  000B74  2205               	addwfc	___aodiv@dividend+4,f,c
  2346  000B76  2206               	addwfc	___aodiv@dividend+5,f,c
  2347  000B78  2207               	addwfc	___aodiv@dividend+6,f,c
  2348  000B7A  2208               	addwfc	___aodiv@dividend+7,f,c
  2349  000B7C  0E01               	movlw	1
  2350  000B7E  1A12               	xorwf	___aodiv@sign,f,c
  2351  000B80                     l1505:
  2352  000B80  EE20  F013         	lfsr	2,___aodiv@quotient
  2353  000B84  0E07               	movlw	7
  2354  000B86                     u831:
  2355  000B86  6ADE               	clrf	postinc2,c
  2356  000B88  06E8               	decf	wreg,f,c
  2357  000B8A  E2FD               	bc	u831
  2358  000B8C  5009               	movf	___aodiv@divisor,w,c
  2359  000B8E  100A               	iorwf	___aodiv@divisor+1,w,c
  2360  000B90  100B               	iorwf	___aodiv@divisor+2,w,c
  2361  000B92  100C               	iorwf	___aodiv@divisor+3,w,c
  2362  000B94  100D               	iorwf	___aodiv@divisor+4,w,c
  2363  000B96  100E               	iorwf	___aodiv@divisor+5,w,c
  2364  000B98  100F               	iorwf	___aodiv@divisor+6,w,c
  2365  000B9A  1010               	iorwf	___aodiv@divisor+7,w,c
  2366  000B9C  B4D8               	btfsc	status,2,c
  2367  000B9E  D046               	goto	l1527
  2368  000BA0  0E01               	movlw	1
  2369  000BA2  6E11               	movwf	___aodiv@counter,c
  2370  000BA4  D00A               	goto	l1513
  2371  000BA6                     l1511:
  2372  000BA6  90D8               	bcf	status,0,c
  2373  000BA8  3609               	rlcf	___aodiv@divisor,f,c
  2374  000BAA  360A               	rlcf	___aodiv@divisor+1,f,c
  2375  000BAC  360B               	rlcf	___aodiv@divisor+2,f,c
  2376  000BAE  360C               	rlcf	___aodiv@divisor+3,f,c
  2377  000BB0  360D               	rlcf	___aodiv@divisor+4,f,c
  2378  000BB2  360E               	rlcf	___aodiv@divisor+5,f,c
  2379  000BB4  360F               	rlcf	___aodiv@divisor+6,f,c
  2380  000BB6  3610               	rlcf	___aodiv@divisor+7,f,c
  2381  000BB8  2A11               	incf	___aodiv@counter,f,c
  2382  000BBA                     l1513:
  2383  000BBA  AE10               	btfss	___aodiv@divisor+7,7,c
  2384  000BBC  D7F4               	goto	l1511
  2385  000BBE                     u850:
  2386  000BBE  90D8               	bcf	status,0,c
  2387  000BC0  3613               	rlcf	___aodiv@quotient,f,c
  2388  000BC2  3614               	rlcf	___aodiv@quotient+1,f,c
  2389  000BC4  3615               	rlcf	___aodiv@quotient+2,f,c
  2390  000BC6  3616               	rlcf	___aodiv@quotient+3,f,c
  2391  000BC8  3617               	rlcf	___aodiv@quotient+4,f,c
  2392  000BCA  3618               	rlcf	___aodiv@quotient+5,f,c
  2393  000BCC  3619               	rlcf	___aodiv@quotient+6,f,c
  2394  000BCE  361A               	rlcf	___aodiv@quotient+7,f,c
  2395  000BD0  5009               	movf	___aodiv@divisor,w,c
  2396  000BD2  5C01               	subwf	___aodiv@dividend,w,c
  2397  000BD4  500A               	movf	___aodiv@divisor+1,w,c
  2398  000BD6  5802               	subwfb	___aodiv@dividend+1,w,c
  2399  000BD8  500B               	movf	___aodiv@divisor+2,w,c
  2400  000BDA  5803               	subwfb	___aodiv@dividend+2,w,c
  2401  000BDC  500C               	movf	___aodiv@divisor+3,w,c
  2402  000BDE  5804               	subwfb	___aodiv@dividend+3,w,c
  2403  000BE0  500D               	movf	___aodiv@divisor+4,w,c
  2404  000BE2  5805               	subwfb	___aodiv@dividend+4,w,c
  2405  000BE4  500E               	movf	___aodiv@divisor+5,w,c
  2406  000BE6  5806               	subwfb	___aodiv@dividend+5,w,c
  2407  000BE8  500F               	movf	___aodiv@divisor+6,w,c
  2408  000BEA  5807               	subwfb	___aodiv@dividend+6,w,c
  2409  000BEC  5010               	movf	___aodiv@divisor+7,w,c
  2410  000BEE  5808               	subwfb	___aodiv@dividend+7,w,c
  2411  000BF0  A0D8               	btfss	status,0,c
  2412  000BF2  D011               	goto	l1523
  2413  000BF4  5009               	movf	___aodiv@divisor,w,c
  2414  000BF6  5E01               	subwf	___aodiv@dividend,f,c
  2415  000BF8  500A               	movf	___aodiv@divisor+1,w,c
  2416  000BFA  5A02               	subwfb	___aodiv@dividend+1,f,c
  2417  000BFC  500B               	movf	___aodiv@divisor+2,w,c
  2418  000BFE  5A03               	subwfb	___aodiv@dividend+2,f,c
  2419  000C00  500C               	movf	___aodiv@divisor+3,w,c
  2420  000C02  5A04               	subwfb	___aodiv@dividend+3,f,c
  2421  000C04  500D               	movf	___aodiv@divisor+4,w,c
  2422  000C06  5A05               	subwfb	___aodiv@dividend+4,f,c
  2423  000C08  500E               	movf	___aodiv@divisor+5,w,c
  2424  000C0A  5A06               	subwfb	___aodiv@dividend+5,f,c
  2425  000C0C  500F               	movf	___aodiv@divisor+6,w,c
  2426  000C0E  5A07               	subwfb	___aodiv@dividend+6,f,c
  2427  000C10  5010               	movf	___aodiv@divisor+7,w,c
  2428  000C12  5A08               	subwfb	___aodiv@dividend+7,f,c
  2429  000C14  8013               	bsf	___aodiv@quotient,0,c
  2430  000C16                     l1523:
  2431  000C16  90D8               	bcf	status,0,c
  2432  000C18  3210               	rrcf	___aodiv@divisor+7,f,c
  2433  000C1A  320F               	rrcf	___aodiv@divisor+6,f,c
  2434  000C1C  320E               	rrcf	___aodiv@divisor+5,f,c
  2435  000C1E  320D               	rrcf	___aodiv@divisor+4,f,c
  2436  000C20  320C               	rrcf	___aodiv@divisor+3,f,c
  2437  000C22  320B               	rrcf	___aodiv@divisor+2,f,c
  2438  000C24  320A               	rrcf	___aodiv@divisor+1,f,c
  2439  000C26  3209               	rrcf	___aodiv@divisor,f,c
  2440  000C28  2E11               	decfsz	___aodiv@counter,f,c
  2441  000C2A  D7C9               	goto	u850
  2442  000C2C                     l1527:
  2443  000C2C  5012               	movf	___aodiv@sign,w,c
  2444  000C2E  B4D8               	btfsc	status,2,c
  2445  000C30  D010               	goto	l1531
  2446  000C32  1E1A               	comf	___aodiv@quotient+7,f,c
  2447  000C34  1E19               	comf	___aodiv@quotient+6,f,c
  2448  000C36  1E18               	comf	___aodiv@quotient+5,f,c
  2449  000C38  1E17               	comf	___aodiv@quotient+4,f,c
  2450  000C3A  1E16               	comf	___aodiv@quotient+3,f,c
  2451  000C3C  1E15               	comf	___aodiv@quotient+2,f,c
  2452  000C3E  1E14               	comf	___aodiv@quotient+1,f,c
  2453  000C40  6C13               	negf	___aodiv@quotient,c
  2454  000C42  0E00               	movlw	0
  2455  000C44  2214               	addwfc	___aodiv@quotient+1,f,c
  2456  000C46  2215               	addwfc	___aodiv@quotient+2,f,c
  2457  000C48  2216               	addwfc	___aodiv@quotient+3,f,c
  2458  000C4A  2217               	addwfc	___aodiv@quotient+4,f,c
  2459  000C4C  2218               	addwfc	___aodiv@quotient+5,f,c
  2460  000C4E  2219               	addwfc	___aodiv@quotient+6,f,c
  2461  000C50  221A               	addwfc	___aodiv@quotient+7,f,c
  2462  000C52                     l1531:
  2463  000C52  C013  F001         	movff	___aodiv@quotient,?___aodiv
  2464  000C56  C014  F002         	movff	___aodiv@quotient+1,?___aodiv+1
  2465  000C5A  C015  F003         	movff	___aodiv@quotient+2,?___aodiv+2
  2466  000C5E  C016  F004         	movff	___aodiv@quotient+3,?___aodiv+3
  2467  000C62  C017  F005         	movff	___aodiv@quotient+4,?___aodiv+4
  2468  000C66  C018  F006         	movff	___aodiv@quotient+5,?___aodiv+5
  2469  000C6A  C019  F007         	movff	___aodiv@quotient+6,?___aodiv+6
  2470  000C6E  C01A  F008         	movff	___aodiv@quotient+7,?___aodiv+7
  2471  000C72  0012               	return		;funcret
  2472  000C74                     __end_of___aodiv:
  2473                           	opt callstack 0
  2474                           
  2475 ;; *************** function _atoi *****************
  2476 ;; Defined at:
  2477 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\atoi.c"
  2478 ;; Parameters:    Size  Location     Type
  2479 ;;  s               2    7[COMRAM] PTR const unsigned char 
  2480 ;;		 -> STR_2(5), STR_1(14), 
  2481 ;; Auto vars:     Size  Location     Type
  2482 ;;  n               2   20[COMRAM] int 
  2483 ;;  neg             2   13[COMRAM] int 
  2484 ;; Return value:  Size  Location     Type
  2485 ;;                  2    7[COMRAM] int 
  2486 ;; Registers used:
  2487 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2488 ;; Tracked objects:
  2489 ;;		On entry : 0/0
  2490 ;;		On exit  : 0/0
  2491 ;;		Unchanged: 0/0
  2492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2493 ;;      Params:         2       0       0       0       0       0       0
  2494 ;;      Locals:         9       0       0       0       0       0       0
  2495 ;;      Temps:          4       0       0       0       0       0       0
  2496 ;;      Totals:        15       0       0       0       0       0       0
  2497 ;;Total ram usage:       15 bytes
  2498 ;; Hardware stack levels used:    1
  2499 ;; Hardware stack levels required when called:    1
  2500 ;; This function calls:
  2501 ;;		___wmul
  2502 ;;		_isdigit
  2503 ;;		_isspace
  2504 ;; This function is called by:
  2505 ;;		_vfpfcnvrt
  2506 ;; This function uses a non-reentrant model
  2507 ;;
  2508                           
  2509                           	psect	text13
  2510  000C74                     __ptext13:
  2511                           	opt callstack 0
  2512  000C74                     _atoi:
  2513                           	opt callstack 26
  2514                           
  2515                           ;incstack = 0
  2516  000C74  0E00               	movlw	0
  2517  000C76  6E16               	movwf	atoi@n+1,c
  2518  000C78  0E00               	movlw	0
  2519  000C7A  6E15               	movwf	atoi@n,c
  2520  000C7C  0E00               	movlw	0
  2521  000C7E  6E0F               	movwf	atoi@neg+1,c
  2522  000C80  0E00               	movlw	0
  2523  000C82  6E0E               	movwf	atoi@neg,c
  2524  000C84  D002               	goto	l1661
  2525  000C86                     l1659:
  2526  000C86  4A08               	infsnz	atoi@s,f,c
  2527  000C88  2A09               	incf	atoi@s+1,f,c
  2528  000C8A                     l1661:
  2529  000C8A  0E01               	movlw	1
  2530  000C8C  6E14               	movwf	_atoi$817,c
  2531  000C8E  C008  FFF6         	movff	atoi@s,tblptrl
  2532  000C92  C009  FFF7         	movff	atoi@s+1,tblptrh
  2533  000C96                     	if	0	;tblptru may be non-zero
  2534  000C96                     	endif
  2535  000C96                     	if	0	;tblptru may be non-zero
  2536  000C96                     	endif
  2537  000C96  0008               	tblrd		*
  2538  000C98  50F5               	movf	tablat,w,c
  2539  000C9A  0A20               	xorlw	32
  2540  000C9C  B4D8               	btfsc	status,2,c
  2541  000C9E  D018               	goto	l1669
  2542  000CA0  0EF7               	movlw	247
  2543  000CA2  6E0A               	movwf	??_atoi& (0+255),c
  2544  000CA4  0EFF               	movlw	255
  2545  000CA6  6E0B               	movwf	(??_atoi+1)& (0+255),c
  2546  000CA8  C008  FFF6         	movff	atoi@s,tblptrl
  2547  000CAC  C009  FFF7         	movff	atoi@s+1,tblptrh
  2548  000CB0                     	if	0	;tblptru may be non-zero
  2549  000CB0                     	endif
  2550  000CB0                     	if	0	;tblptru may be non-zero
  2551  000CB0                     	endif
  2552  000CB0  0008               	tblrd		*
  2553  000CB2  50F5               	movf	tablat,w,c
  2554  000CB4  6E0C               	movwf	(??_atoi+2)& (0+255),c
  2555  000CB6  6A0D               	clrf	(??_atoi+3)& (0+255),c
  2556  000CB8  500A               	movf	??_atoi,w,c
  2557  000CBA  260C               	addwf	??_atoi+2,f,c
  2558  000CBC  500B               	movf	??_atoi+1,w,c
  2559  000CBE  220D               	addwfc	??_atoi+3,f,c
  2560  000CC0  500D               	movf	??_atoi+3,w,c
  2561  000CC2  E104               	bnz	u1130
  2562  000CC4  0E05               	movlw	5
  2563  000CC6  5C0C               	subwf	??_atoi+2,w,c
  2564  000CC8  A0D8               	btfss	status,0,c
  2565  000CCA  D002               	goto	l1669
  2566  000CCC                     u1130:
  2567  000CCC  0E00               	movlw	0
  2568  000CCE  6E14               	movwf	_atoi$817,c
  2569  000CD0                     l1669:
  2570  000CD0  C014  F010         	movff	_atoi$817,_atoi$816
  2571  000CD4  6A11               	clrf	_atoi$816+1,c
  2572  000CD6  5010               	movf	_atoi$816,w,c
  2573  000CD8  1011               	iorwf	_atoi$816+1,w,c
  2574  000CDA  B4D8               	btfsc	status,2,c
  2575  000CDC  D008               	goto	l1679
  2576  000CDE  D7D3               	goto	l1659
  2577  000CE0                     l1675:
  2578  000CE0  0E00               	movlw	0
  2579  000CE2  6E0F               	movwf	atoi@neg+1,c
  2580  000CE4  0E01               	movlw	1
  2581  000CE6  6E0E               	movwf	atoi@neg,c
  2582  000CE8                     l1677:
  2583  000CE8  4A08               	infsnz	atoi@s,f,c
  2584  000CEA  2A09               	incf	atoi@s+1,f,c
  2585  000CEC  D02E               	goto	l1685
  2586  000CEE                     l1679:
  2587  000CEE  C008  FFF6         	movff	atoi@s,tblptrl
  2588  000CF2  C009  FFF7         	movff	atoi@s+1,tblptrh
  2589  000CF6                     	if	0	;tblptru may be non-zero
  2590  000CF6                     	endif
  2591  000CF6                     	if	0	;tblptru may be non-zero
  2592  000CF6                     	endif
  2593  000CF6  0008               	tblrd		*
  2594  000CF8  50F5               	movf	tablat,w,c
  2595  000CFA  6E0A               	movwf	??_atoi& (0+255),c
  2596  000CFC  6A0B               	clrf	(??_atoi+1)& (0+255),c
  2597                           
  2598                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2599                           ; Switch size 1, requested type "simple"
  2600                           ; Number of cases is 1, Range of values is 0 to 0
  2601                           ; switch strategies available:
  2602                           ; Name         Instructions Cycles
  2603                           ; simple_byte            4     3 (average)
  2604                           ;	Chosen strategy is simple_byte
  2605  000CFE  500B               	movf	??_atoi+1,w,c
  2606  000D00  0A00               	xorlw	0	; case 0
  2607  000D02  A4D8               	btfss	status,2,c
  2608  000D04  D022               	goto	l1685
  2609                           
  2610                           ; Switch size 1, requested type "simple"
  2611                           ; Number of cases is 2, Range of values is 43 to 45
  2612                           ; switch strategies available:
  2613                           ; Name         Instructions Cycles
  2614                           ; simple_byte            7     4 (average)
  2615                           ;	Chosen strategy is simple_byte
  2616  000D06  500A               	movf	??_atoi,w,c
  2617  000D08  0A2B               	xorlw	43	; case 43
  2618  000D0A  B4D8               	btfsc	status,2,c
  2619  000D0C  D7ED               	goto	l1677
  2620  000D0E  0A06               	xorlw	6	; case 45
  2621  000D10  B4D8               	btfsc	status,2,c
  2622  000D12  D7E6               	goto	l1675
  2623  000D14  D01A               	goto	l1685
  2624  000D16                     l1681:
  2625  000D16  C015  F001         	movff	atoi@n,___wmul@multiplier
  2626  000D1A  C016  F002         	movff	atoi@n+1,___wmul@multiplier+1
  2627  000D1E  0E00               	movlw	0
  2628  000D20  6E04               	movwf	___wmul@multiplicand+1,c
  2629  000D22  0E0A               	movlw	10
  2630  000D24  6E03               	movwf	___wmul@multiplicand,c
  2631  000D26  ECF2  F009         	call	___wmul	;wreg free
  2632  000D2A  C008  FFF6         	movff	atoi@s,tblptrl
  2633  000D2E  C009  FFF7         	movff	atoi@s+1,tblptrh
  2634  000D32                     	if	0	;tblptru may be non-zero
  2635  000D32                     	endif
  2636  000D32                     	if	0	;tblptru may be non-zero
  2637  000D32                     	endif
  2638  000D32  0008               	tblrd		*
  2639  000D34  50F5               	movf	tablat,w,c
  2640  000D36  5E01               	subwf	?___wmul,f,c
  2641  000D38  0E00               	movlw	0
  2642  000D3A  5A02               	subwfb	?___wmul+1,f,c
  2643  000D3C  0E30               	movlw	48
  2644  000D3E  2401               	addwf	?___wmul,w,c
  2645  000D40  6E15               	movwf	atoi@n,c
  2646  000D42  0E00               	movlw	0
  2647  000D44  2002               	addwfc	?___wmul+1,w,c
  2648  000D46  6E16               	movwf	atoi@n+1,c
  2649  000D48  D7CF               	goto	l1677
  2650  000D4A                     l1685:
  2651  000D4A  0ED0               	movlw	208
  2652  000D4C  6E0A               	movwf	??_atoi& (0+255),c
  2653  000D4E  0EFF               	movlw	255
  2654  000D50  6E0B               	movwf	(??_atoi+1)& (0+255),c
  2655  000D52  C008  FFF6         	movff	atoi@s,tblptrl
  2656  000D56  C009  FFF7         	movff	atoi@s+1,tblptrh
  2657  000D5A                     	if	0	;tblptru may be non-zero
  2658  000D5A                     	endif
  2659  000D5A                     	if	0	;tblptru may be non-zero
  2660  000D5A                     	endif
  2661  000D5A  0008               	tblrd		*
  2662  000D5C  50F5               	movf	tablat,w,c
  2663  000D5E  6E0C               	movwf	(??_atoi+2)& (0+255),c
  2664  000D60  6A0D               	clrf	(??_atoi+3)& (0+255),c
  2665  000D62  500A               	movf	??_atoi,w,c
  2666  000D64  260C               	addwf	??_atoi+2,f,c
  2667  000D66  500B               	movf	??_atoi+1,w,c
  2668  000D68  220D               	addwfc	??_atoi+3,f,c
  2669  000D6A  500D               	movf	??_atoi+3,w,c
  2670  000D6C  E106               	bnz	u1150
  2671  000D6E  0E0A               	movlw	10
  2672  000D70  5C0C               	subwf	??_atoi+2,w,c
  2673  000D72  B0D8               	btfsc	status,0,c
  2674  000D74  D002               	goto	u1150
  2675  000D76  0E01               	movlw	1
  2676  000D78  D001               	goto	u1160
  2677  000D7A                     u1150:
  2678  000D7A  0E00               	movlw	0
  2679  000D7C                     u1160:
  2680  000D7C  6E12               	movwf	_atoi$818,c
  2681  000D7E  6A13               	clrf	_atoi$818+1,c
  2682  000D80  5012               	movf	_atoi$818,w,c
  2683  000D82  1013               	iorwf	_atoi$818+1,w,c
  2684  000D84  A4D8               	btfss	status,2,c
  2685  000D86  D7C7               	goto	l1681
  2686  000D88  500E               	movf	atoi@neg,w,c
  2687  000D8A  100F               	iorwf	atoi@neg+1,w,c
  2688  000D8C  A4D8               	btfss	status,2,c
  2689  000D8E  D00D               	goto	l868
  2690  000D90  C015  F00A         	movff	atoi@n,??_atoi
  2691  000D94  C016  F00B         	movff	atoi@n+1,??_atoi+1
  2692  000D98  1E0A               	comf	??_atoi,f,c
  2693  000D9A  1E0B               	comf	??_atoi+1,f,c
  2694  000D9C  4A0A               	infsnz	??_atoi,f,c
  2695  000D9E  2A0B               	incf	??_atoi+1,f,c
  2696  000DA0  C00A  F008         	movff	??_atoi,?_atoi
  2697  000DA4  C00B  F009         	movff	??_atoi+1,?_atoi+1
  2698  000DA8  0012               	return	
  2699  000DAA                     l868:
  2700  000DAA  C015  F008         	movff	atoi@n,?_atoi
  2701  000DAE  C016  F009         	movff	atoi@n+1,?_atoi+1
  2702  000DB2  0012               	return		;funcret
  2703  000DB4                     __end_of_atoi:
  2704                           	opt callstack 0
  2705                           
  2706 ;; *************** function _isspace *****************
  2707 ;; Defined at:
  2708 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\isspace.c"
  2709 ;; Parameters:    Size  Location     Type
  2710 ;;  c               2    0[COMRAM] int 
  2711 ;; Auto vars:     Size  Location     Type
  2712 ;;		None
  2713 ;; Return value:  Size  Location     Type
  2714 ;;                  2    0[COMRAM] int 
  2715 ;; Registers used:
  2716 ;;		wreg, status,2, status,0
  2717 ;; Tracked objects:
  2718 ;;		On entry : 0/0
  2719 ;;		On exit  : 0/0
  2720 ;;		Unchanged: 0/0
  2721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2722 ;;      Params:         2       0       0       0       0       0       0
  2723 ;;      Locals:         1       0       0       0       0       0       0
  2724 ;;      Temps:          4       0       0       0       0       0       0
  2725 ;;      Totals:         7       0       0       0       0       0       0
  2726 ;;Total ram usage:        7 bytes
  2727 ;; Hardware stack levels used:    1
  2728 ;; This function calls:
  2729 ;;		Nothing
  2730 ;; This function is called by:
  2731 ;;		_atoi
  2732 ;; This function uses a non-reentrant model
  2733 ;;
  2734                           
  2735                           	psect	text14
  2736  0012BA                     __ptext14:
  2737                           	opt callstack 0
  2738  0012BA                     _isspace:
  2739                           	opt callstack 26
  2740                           
  2741                           ;incstack = 0
  2742  0012BA  0E01               	movlw	1
  2743  0012BC  6E07               	movwf	_isspace$834,c
  2744  0012BE  0E20               	movlw	32
  2745  0012C0  1801               	xorwf	isspace@c,w,c
  2746  0012C2  1002               	iorwf	isspace@c+1,w,c
  2747  0012C4  B4D8               	btfsc	status,2,c
  2748  0012C6  D014               	goto	l1579
  2749  0012C8  0EF7               	movlw	247
  2750  0012CA  6E03               	movwf	??_isspace& (0+255),c
  2751  0012CC  0EFF               	movlw	255
  2752  0012CE  6E04               	movwf	(??_isspace+1)& (0+255),c
  2753  0012D0  C001  F005         	movff	isspace@c,??_isspace+2
  2754  0012D4  C002  F006         	movff	isspace@c+1,??_isspace+3
  2755  0012D8  5003               	movf	??_isspace,w,c
  2756  0012DA  2605               	addwf	??_isspace+2,f,c
  2757  0012DC  5004               	movf	??_isspace+1,w,c
  2758  0012DE  2206               	addwfc	??_isspace+3,f,c
  2759  0012E0  5006               	movf	??_isspace+3,w,c
  2760  0012E2  E104               	bnz	u950
  2761  0012E4  0E05               	movlw	5
  2762  0012E6  5C05               	subwf	??_isspace+2,w,c
  2763  0012E8  A0D8               	btfss	status,0,c
  2764  0012EA  D002               	goto	l1579
  2765  0012EC                     u950:
  2766  0012EC  0E00               	movlw	0
  2767  0012EE  6E07               	movwf	_isspace$834,c
  2768  0012F0                     l1579:
  2769  0012F0  C007  F001         	movff	_isspace$834,?_isspace
  2770  0012F4  6A02               	clrf	?_isspace+1,c
  2771  0012F6  0012               	return		;funcret
  2772  0012F8                     __end_of_isspace:
  2773                           	opt callstack 0
  2774                           
  2775 ;; *************** function _isdigit *****************
  2776 ;; Defined at:
  2777 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\isdigit.c"
  2778 ;; Parameters:    Size  Location     Type
  2779 ;;  c               2    0[COMRAM] int 
  2780 ;; Auto vars:     Size  Location     Type
  2781 ;;		None
  2782 ;; Return value:  Size  Location     Type
  2783 ;;                  2    0[COMRAM] int 
  2784 ;; Registers used:
  2785 ;;		wreg, status,2, status,0
  2786 ;; Tracked objects:
  2787 ;;		On entry : 0/0
  2788 ;;		On exit  : 0/0
  2789 ;;		Unchanged: 0/0
  2790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2791 ;;      Params:         2       0       0       0       0       0       0
  2792 ;;      Locals:         0       0       0       0       0       0       0
  2793 ;;      Temps:          4       0       0       0       0       0       0
  2794 ;;      Totals:         6       0       0       0       0       0       0
  2795 ;;Total ram usage:        6 bytes
  2796 ;; Hardware stack levels used:    1
  2797 ;; This function calls:
  2798 ;;		Nothing
  2799 ;; This function is called by:
  2800 ;;		_vfpfcnvrt
  2801 ;;		_atoi
  2802 ;; This function uses a non-reentrant model
  2803 ;;
  2804                           
  2805                           	psect	text15
  2806  001362                     __ptext15:
  2807                           	opt callstack 0
  2808  001362                     _isdigit:
  2809                           	opt callstack 27
  2810                           
  2811                           ;incstack = 0
  2812  001362  0ED0               	movlw	208
  2813  001364  6E03               	movwf	??_isdigit& (0+255),c
  2814  001366  0EFF               	movlw	255
  2815  001368  6E04               	movwf	(??_isdigit+1)& (0+255),c
  2816  00136A  C001  F005         	movff	isdigit@c,??_isdigit+2
  2817  00136E  C002  F006         	movff	isdigit@c+1,??_isdigit+3
  2818  001372  5003               	movf	??_isdigit,w,c
  2819  001374  2605               	addwf	??_isdigit+2,f,c
  2820  001376  5004               	movf	??_isdigit+1,w,c
  2821  001378  2206               	addwfc	??_isdigit+3,f,c
  2822  00137A  5006               	movf	??_isdigit+3,w,c
  2823  00137C  E106               	bnz	u790
  2824  00137E  0E0A               	movlw	10
  2825  001380  5C05               	subwf	??_isdigit+2,w,c
  2826  001382  B0D8               	btfsc	status,0,c
  2827  001384  D002               	goto	u790
  2828  001386  0E01               	movlw	1
  2829  001388  D001               	goto	u800
  2830  00138A                     u790:
  2831  00138A  0E00               	movlw	0
  2832  00138C                     u800:
  2833  00138C  6E01               	movwf	?_isdigit,c
  2834  00138E  6A02               	clrf	?_isdigit+1,c
  2835  001390  0012               	return		;funcret
  2836  001392                     __end_of_isdigit:
  2837                           	opt callstack 0
  2838                           
  2839 ;; *************** function ___wmul *****************
  2840 ;; Defined at:
  2841 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
  2842 ;; Parameters:    Size  Location     Type
  2843 ;;  multiplier      2    0[COMRAM] unsigned int 
  2844 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2845 ;; Auto vars:     Size  Location     Type
  2846 ;;  product         2    4[COMRAM] unsigned int 
  2847 ;; Return value:  Size  Location     Type
  2848 ;;                  2    0[COMRAM] unsigned int 
  2849 ;; Registers used:
  2850 ;;		wreg, status,2, status,0, prodl, prodh
  2851 ;; Tracked objects:
  2852 ;;		On entry : 0/0
  2853 ;;		On exit  : 0/0
  2854 ;;		Unchanged: 0/0
  2855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2856 ;;      Params:         4       0       0       0       0       0       0
  2857 ;;      Locals:         2       0       0       0       0       0       0
  2858 ;;      Temps:          0       0       0       0       0       0       0
  2859 ;;      Totals:         6       0       0       0       0       0       0
  2860 ;;Total ram usage:        6 bytes
  2861 ;; Hardware stack levels used:    1
  2862 ;; This function calls:
  2863 ;;		Nothing
  2864 ;; This function is called by:
  2865 ;;		_atoi
  2866 ;; This function uses a non-reentrant model
  2867 ;;
  2868                           
  2869                           	psect	text16
  2870  0013E4                     __ptext16:
  2871                           	opt callstack 0
  2872  0013E4                     ___wmul:
  2873                           	opt callstack 26
  2874                           
  2875                           ;incstack = 0
  2876  0013E4  5001               	movf	___wmul@multiplier,w,c
  2877  0013E6  0203               	mulwf	___wmul@multiplicand,c
  2878  0013E8  CFF3 F005          	movff	prodl,___wmul@product
  2879  0013EC  CFF4 F006          	movff	prodh,___wmul@product+1
  2880  0013F0  5001               	movf	___wmul@multiplier,w,c
  2881  0013F2  0204               	mulwf	___wmul@multiplicand+1,c
  2882  0013F4  50F3               	movf	prodl,w,c
  2883  0013F6  2606               	addwf	___wmul@product+1,f,c
  2884  0013F8  5002               	movf	___wmul@multiplier+1,w,c
  2885  0013FA  0203               	mulwf	___wmul@multiplicand,c
  2886  0013FC  50F3               	movf	prodl,w,c
  2887  0013FE  2606               	addwf	___wmul@product+1,f,c
  2888  001400  C005  F001         	movff	___wmul@product,?___wmul
  2889  001404  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2890  001408  0012               	return		;funcret
  2891  00140A                     __end_of___wmul:
  2892                           	opt callstack 0
  2893                           
  2894 ;; *************** function _lcd_ini *****************
  2895 ;; Defined at:
  2896 ;;		line 3 in file "../Bibliotecas/LCD4b.c"
  2897 ;; Parameters:    Size  Location     Type
  2898 ;;		None
  2899 ;; Auto vars:     Size  Location     Type
  2900 ;;  i               1    5[COMRAM] unsigned char 
  2901 ;; Return value:  Size  Location     Type
  2902 ;;                  1    wreg      void 
  2903 ;; Registers used:
  2904 ;;		wreg, status,2, status,0, cstack
  2905 ;; Tracked objects:
  2906 ;;		On entry : 0/0
  2907 ;;		On exit  : 0/0
  2908 ;;		Unchanged: 0/0
  2909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2910 ;;      Params:         0       0       0       0       0       0       0
  2911 ;;      Locals:         1       0       0       0       0       0       0
  2912 ;;      Temps:          1       0       0       0       0       0       0
  2913 ;;      Totals:         2       0       0       0       0       0       0
  2914 ;;Total ram usage:        2 bytes
  2915 ;; Hardware stack levels used:    1
  2916 ;; Hardware stack levels required when called:    2
  2917 ;; This function calls:
  2918 ;;		_lcd_cmd
  2919 ;; This function is called by:
  2920 ;;		_main
  2921 ;; This function uses a non-reentrant model
  2922 ;;
  2923                           
  2924                           	psect	text17
  2925  00118A                     __ptext17:
  2926                           	opt callstack 0
  2927  00118A                     _lcd_ini:
  2928                           	opt callstack 28
  2929                           
  2930                           ;../Bibliotecas/LCD4b.c: 5: char i;;../Bibliotecas/LCD4b.c: 7: TRISD = 0b00000000;
  2931                           
  2932                           ;incstack = 0
  2933  00118A  0E00               	movlw	0
  2934  00118C  6E95               	movwf	3989,c	;volatile
  2935                           
  2936                           ;../Bibliotecas/LCD4b.c: 8: TRISEbits.TRISE1 = 0;
  2937  00118E  9296               	bcf	3990,1,c	;volatile
  2938                           
  2939                           ;../Bibliotecas/LCD4b.c: 9: TRISEbits.TRISE0 = 0;
  2940  001190  9096               	bcf	3990,0,c	;volatile
  2941                           
  2942                           ;../Bibliotecas/LCD4b.c: 11: PORTD = 0b00000000;
  2943  001192  0E00               	movlw	0
  2944  001194  6E83               	movwf	3971,c	;volatile
  2945                           
  2946                           ;../Bibliotecas/LCD4b.c: 12: PORTEbits.RE0 = 0;
  2947  001196  9084               	bcf	3972,0,c	;volatile
  2948                           
  2949                           ;../Bibliotecas/LCD4b.c: 13: PORTEbits.RE1 = 0;
  2950  001198  9284               	bcf	3972,1,c	;volatile
  2951                           
  2952                           ;../Bibliotecas/LCD4b.c: 15: _delay((unsigned long)((15)*(8000000/4000.0)));
  2953  00119A  0E27               	movlw	39
  2954  00119C  6E05               	movwf	??_lcd_ini& (0+255),c
  2955  00119E  0EF5               	movlw	245
  2956  0011A0                     u1367:
  2957  0011A0  2EE8               	decfsz	wreg,f,c
  2958  0011A2  D7FE               	bra	u1367
  2959  0011A4  2E05               	decfsz	??_lcd_ini& (0+255),f,c
  2960  0011A6  D7FC               	bra	u1367
  2961  0011A8  F000               	nop	
  2962                           
  2963                           ;../Bibliotecas/LCD4b.c: 18: for(i=0;i<=2;i++)
  2964  0011AA  0E00               	movlw	0
  2965  0011AC  6E06               	movwf	lcd_ini@i,c
  2966  0011AE                     l1849:
  2967                           
  2968                           ;../Bibliotecas/LCD4b.c: 19:    {;../Bibliotecas/LCD4b.c: 20:    lcd_cmd(0x30);
  2969  0011AE  0E30               	movlw	48
  2970  0011B0  EC6C  F007         	call	_lcd_cmd
  2971                           
  2972                           ;../Bibliotecas/LCD4b.c: 21:    _delay((unsigned long)((5)*(8000000/4000.0)));
  2973  0011B4  0E0D               	movlw	13
  2974  0011B6  6E05               	movwf	??_lcd_ini& (0+255),c
  2975  0011B8  0EFC               	movlw	252
  2976  0011BA                     u1377:
  2977  0011BA  2EE8               	decfsz	wreg,f,c
  2978  0011BC  D7FE               	bra	u1377
  2979  0011BE  2E05               	decfsz	??_lcd_ini& (0+255),f,c
  2980  0011C0  D7FC               	bra	u1377
  2981                           
  2982                           ;../Bibliotecas/LCD4b.c: 22:    }
  2983  0011C2  2A06               	incf	lcd_ini@i,f,c
  2984  0011C4  0E02               	movlw	2
  2985  0011C6  6406               	cpfsgt	lcd_ini@i,c
  2986  0011C8  D7F2               	goto	l1849
  2987                           
  2988                           ;../Bibliotecas/LCD4b.c: 24:    lcd_cmd(0x02);
  2989  0011CA  0E02               	movlw	2
  2990  0011CC  EC6C  F007         	call	_lcd_cmd
  2991                           
  2992                           ;../Bibliotecas/LCD4b.c: 25:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  2993  0011D0  0E1A               	movlw	26
  2994  0011D2                     u1387:
  2995  0011D2  2EE8               	decfsz	wreg,f,c
  2996  0011D4  D7FE               	bra	u1387
  2997  0011D6  D000               	nop2	
  2998                           
  2999                           ;../Bibliotecas/LCD4b.c: 26:    lcd_cmd(0x28);
  3000  0011D8  0E28               	movlw	40
  3001  0011DA  EC6C  F007         	call	_lcd_cmd
  3002                           
  3003                           ;../Bibliotecas/LCD4b.c: 27:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3004  0011DE  0E1A               	movlw	26
  3005  0011E0                     u1397:
  3006  0011E0  2EE8               	decfsz	wreg,f,c
  3007  0011E2  D7FE               	bra	u1397
  3008  0011E4  D000               	nop2	
  3009                           
  3010                           ;../Bibliotecas/LCD4b.c: 28:    lcd_cmd(0x01);
  3011  0011E6  0E01               	movlw	1
  3012  0011E8  EC6C  F007         	call	_lcd_cmd
  3013                           
  3014                           ;../Bibliotecas/LCD4b.c: 29:    _delay((unsigned long)((2)*(8000000/4000.0)));
  3015  0011EC  0E06               	movlw	6
  3016  0011EE  6E05               	movwf	??_lcd_ini& (0+255),c
  3017  0011F0  0E30               	movlw	48
  3018  0011F2                     u1407:
  3019  0011F2  2EE8               	decfsz	wreg,f,c
  3020  0011F4  D7FE               	bra	u1407
  3021  0011F6  2E05               	decfsz	??_lcd_ini& (0+255),f,c
  3022  0011F8  D7FC               	bra	u1407
  3023  0011FA  D000               	nop2	
  3024                           
  3025                           ;../Bibliotecas/LCD4b.c: 30:    lcd_cmd(0x0C);
  3026  0011FC  0E0C               	movlw	12
  3027  0011FE  EC6C  F007         	call	_lcd_cmd
  3028                           
  3029                           ;../Bibliotecas/LCD4b.c: 31:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3030  001202  0E1A               	movlw	26
  3031  001204                     u1417:
  3032  001204  2EE8               	decfsz	wreg,f,c
  3033  001206  D7FE               	bra	u1417
  3034  001208  D000               	nop2	
  3035                           
  3036                           ;../Bibliotecas/LCD4b.c: 32:    lcd_cmd(0x06);
  3037  00120A  0E06               	movlw	6
  3038  00120C  EC6C  F007         	call	_lcd_cmd
  3039                           
  3040                           ;../Bibliotecas/LCD4b.c: 33:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3041  001210  0E1A               	movlw	26
  3042  001212                     u1427:
  3043  001212  2EE8               	decfsz	wreg,f,c
  3044  001214  D7FE               	bra	u1427
  3045  001216  D000               	nop2	
  3046  001218  0012               	return		;funcret
  3047  00121A                     __end_of_lcd_ini:
  3048                           	opt callstack 0
  3049                           
  3050 ;; *************** function _lcd_escreve_bf *****************
  3051 ;; Defined at:
  3052 ;;		line 82 in file "../Bibliotecas/LCD4b.c"
  3053 ;; Parameters:    Size  Location     Type
  3054 ;;  str             2    6[COMRAM] PTR unsigned char 
  3055 ;;		 -> bufferLCD(16), 
  3056 ;; Auto vars:     Size  Location     Type
  3057 ;;		None
  3058 ;; Return value:  Size  Location     Type
  3059 ;;                  1    wreg      void 
  3060 ;; Registers used:
  3061 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3062 ;; Tracked objects:
  3063 ;;		On entry : 0/0
  3064 ;;		On exit  : 0/0
  3065 ;;		Unchanged: 0/0
  3066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3067 ;;      Params:         2       0       0       0       0       0       0
  3068 ;;      Locals:         0       0       0       0       0       0       0
  3069 ;;      Temps:          0       0       0       0       0       0       0
  3070 ;;      Totals:         2       0       0       0       0       0       0
  3071 ;;Total ram usage:        2 bytes
  3072 ;; Hardware stack levels used:    1
  3073 ;; Hardware stack levels required when called:    3
  3074 ;; This function calls:
  3075 ;;		_lcd_envia_byte
  3076 ;; This function is called by:
  3077 ;;		_main
  3078 ;; This function uses a non-reentrant model
  3079 ;;
  3080                           
  3081                           	psect	text18
  3082  0013BC                     __ptext18:
  3083                           	opt callstack 0
  3084  0013BC                     _lcd_escreve_bf:
  3085                           	opt callstack 27
  3086                           
  3087                           ;../Bibliotecas/LCD4b.c: 82: void lcd_escreve_bf(char *str);../Bibliotecas/LCD4b.c: 83: 
      +                          {;../Bibliotecas/LCD4b.c: 86:     while (*str){
  3088                           
  3089                           ;incstack = 0
  3090  0013BC  D00B               	goto	l1889
  3091  0013BE                     l1885:
  3092                           
  3093                           ;../Bibliotecas/LCD4b.c: 87:         lcd_envia_byte(1,*str);
  3094  0013BE  C007  FFD9         	movff	lcd_escreve_bf@str,fsr2l
  3095  0013C2  C008  FFDA         	movff	lcd_escreve_bf@str+1,fsr2h
  3096  0013C6  50DF               	movf	indf2,w,c
  3097  0013C8  6E05               	movwf	lcd_envia_byte@dado,c
  3098  0013CA  0E01               	movlw	1
  3099  0013CC  EC16  F00A         	call	_lcd_envia_byte
  3100                           
  3101                           ;../Bibliotecas/LCD4b.c: 88:         str++;
  3102  0013D0  4A07               	infsnz	lcd_escreve_bf@str,f,c
  3103  0013D2  2A08               	incf	lcd_escreve_bf@str+1,f,c
  3104  0013D4                     l1889:
  3105                           
  3106                           ;../Bibliotecas/LCD4b.c: 86:     while (*str){
  3107  0013D4  C007  FFD9         	movff	lcd_escreve_bf@str,fsr2l
  3108  0013D8  C008  FFDA         	movff	lcd_escreve_bf@str+1,fsr2h
  3109  0013DC  50DF               	movf	indf2,w,c
  3110  0013DE  B4D8               	btfsc	status,2,c
  3111  0013E0  0012               	return	
  3112  0013E2  D7ED               	goto	l1885
  3113  0013E4                     __end_of_lcd_escreve_bf:
  3114                           	opt callstack 0
  3115                           
  3116 ;; *************** function _lcd_envia_byte *****************
  3117 ;; Defined at:
  3118 ;;		line 74 in file "../Bibliotecas/LCD4b.c"
  3119 ;; Parameters:    Size  Location     Type
  3120 ;;  nivel           1    wreg     unsigned char 
  3121 ;;  dado            1    4[COMRAM] unsigned char 
  3122 ;; Auto vars:     Size  Location     Type
  3123 ;;  nivel           1    5[COMRAM] unsigned char 
  3124 ;; Return value:  Size  Location     Type
  3125 ;;                  1    wreg      void 
  3126 ;; Registers used:
  3127 ;;		wreg, status,2, status,0, cstack
  3128 ;; Tracked objects:
  3129 ;;		On entry : 0/0
  3130 ;;		On exit  : 0/0
  3131 ;;		Unchanged: 0/0
  3132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3133 ;;      Params:         1       0       0       0       0       0       0
  3134 ;;      Locals:         1       0       0       0       0       0       0
  3135 ;;      Temps:          0       0       0       0       0       0       0
  3136 ;;      Totals:         2       0       0       0       0       0       0
  3137 ;;Total ram usage:        2 bytes
  3138 ;; Hardware stack levels used:    1
  3139 ;; Hardware stack levels required when called:    2
  3140 ;; This function calls:
  3141 ;;		_lcd_cmd
  3142 ;; This function is called by:
  3143 ;;		_main
  3144 ;;		_lcd_escreve_bf
  3145 ;; This function uses a non-reentrant model
  3146 ;;
  3147                           
  3148                           	psect	text19
  3149  00142C                     __ptext19:
  3150                           	opt callstack 0
  3151  00142C                     _lcd_envia_byte:
  3152                           	opt callstack 27
  3153                           
  3154                           ;incstack = 0
  3155                           ;lcd_envia_byte@nivel stored from wreg
  3156  00142C  6E06               	movwf	lcd_envia_byte@nivel,c
  3157                           
  3158                           ;../Bibliotecas/LCD4b.c: 74: void lcd_envia_byte(char nivel, char dado);../Bibliotecas/L
      +                          CD4b.c: 75: {;../Bibliotecas/LCD4b.c: 76:     PORTEbits.RE0 = nivel;
  3159  00142E  B006               	btfsc	lcd_envia_byte@nivel,0,c
  3160  001430  D002               	bra	u1305
  3161  001432  9084               	bcf	3972,0,c	;volatile
  3162  001434  D001               	bra	u1306
  3163  001436                     u1305:
  3164  001436  8084               	bsf	3972,0,c	;volatile
  3165  001438                     u1306:
  3166                           
  3167                           ;../Bibliotecas/LCD4b.c: 77:     _delay((unsigned long)((100)*(8000000/4000000.0)));
  3168  001438  0E42               	movlw	66
  3169  00143A                     u1437:
  3170  00143A  2EE8               	decfsz	wreg,f,c
  3171  00143C  D7FE               	bra	u1437
  3172  00143E  D000               	nop2	
  3173                           
  3174                           ;../Bibliotecas/LCD4b.c: 78:     PORTEbits.RE1 = 0;
  3175  001440  9284               	bcf	3972,1,c	;volatile
  3176                           
  3177                           ;../Bibliotecas/LCD4b.c: 79:     lcd_cmd(dado);
  3178  001442  5005               	movf	lcd_envia_byte@dado,w,c
  3179  001444  EC6C  F007         	call	_lcd_cmd
  3180  001448  0012               	return		;funcret
  3181  00144A                     __end_of_lcd_envia_byte:
  3182                           	opt callstack 0
  3183                           
  3184 ;; *************** function _lcd_cmd *****************
  3185 ;; Defined at:
  3186 ;;		line 48 in file "../Bibliotecas/LCD4b.c"
  3187 ;; Parameters:    Size  Location     Type
  3188 ;;  cmd             1    wreg     unsigned char 
  3189 ;; Auto vars:     Size  Location     Type
  3190 ;;  cmd             1    3[COMRAM] unsigned char 
  3191 ;; Return value:  Size  Location     Type
  3192 ;;                  1    wreg      void 
  3193 ;; Registers used:
  3194 ;;		wreg, status,2, status,0, cstack
  3195 ;; Tracked objects:
  3196 ;;		On entry : 0/0
  3197 ;;		On exit  : 0/0
  3198 ;;		Unchanged: 0/0
  3199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3200 ;;      Params:         0       0       0       0       0       0       0
  3201 ;;      Locals:         1       0       0       0       0       0       0
  3202 ;;      Temps:          1       0       0       0       0       0       0
  3203 ;;      Totals:         2       0       0       0       0       0       0
  3204 ;;Total ram usage:        2 bytes
  3205 ;; Hardware stack levels used:    1
  3206 ;; Hardware stack levels required when called:    1
  3207 ;; This function calls:
  3208 ;;		_set_bit
  3209 ;; This function is called by:
  3210 ;;		_lcd_ini
  3211 ;;		_lcd_envia_byte
  3212 ;; This function uses a non-reentrant model
  3213 ;;
  3214                           
  3215                           	psect	text20
  3216  000ED8                     __ptext20:
  3217                           	opt callstack 0
  3218  000ED8                     _lcd_cmd:
  3219                           	opt callstack 28
  3220                           
  3221                           ;incstack = 0
  3222                           ;lcd_cmd@cmd stored from wreg
  3223  000ED8  6E04               	movwf	lcd_cmd@cmd,c
  3224                           
  3225                           ;../Bibliotecas/LCD4b.c: 48: void lcd_cmd(char cmd);../Bibliotecas/LCD4b.c: 49: {;../Bib
      +                          liotecas/LCD4b.c: 52:     PORTDbits.RD4 = set_bit(cmd,0b00010000);
  3226  000EDA  0E10               	movlw	16
  3227  000EDC  6E01               	movwf	set_bit@comp,c
  3228  000EDE  5004               	movf	lcd_cmd@cmd,w,c
  3229  000EE0  EC25  F00A         	call	_set_bit
  3230  000EE4  6E03               	movwf	??_lcd_cmd& (0+255),c
  3231  000EE6  3A03               	swapf	??_lcd_cmd,f,c
  3232  000EE8  5083               	movf	3971,w,c	;volatile
  3233  000EEA  1803               	xorwf	??_lcd_cmd,w,c
  3234  000EEC  0BEF               	andlw	-17
  3235  000EEE  1803               	xorwf	??_lcd_cmd,w,c
  3236  000EF0  6E83               	movwf	3971,c	;volatile
  3237                           
  3238                           ;../Bibliotecas/LCD4b.c: 53:     PORTDbits.RD5 = set_bit(cmd,0b00100000);
  3239  000EF2  0E20               	movlw	32
  3240  000EF4  6E01               	movwf	set_bit@comp,c
  3241  000EF6  5004               	movf	lcd_cmd@cmd,w,c
  3242  000EF8  EC25  F00A         	call	_set_bit
  3243  000EFC  6E03               	movwf	??_lcd_cmd& (0+255),c
  3244  000EFE  3A03               	swapf	??_lcd_cmd,f,c
  3245  000F00  4603               	rlncf	??_lcd_cmd,f,c
  3246  000F02  5083               	movf	3971,w,c	;volatile
  3247  000F04  1803               	xorwf	??_lcd_cmd,w,c
  3248  000F06  0BDF               	andlw	-33
  3249  000F08  1803               	xorwf	??_lcd_cmd,w,c
  3250  000F0A  6E83               	movwf	3971,c	;volatile
  3251                           
  3252                           ;../Bibliotecas/LCD4b.c: 54:     PORTDbits.RD6 = set_bit(cmd,0b01000000);
  3253  000F0C  0E40               	movlw	64
  3254  000F0E  6E01               	movwf	set_bit@comp,c
  3255  000F10  5004               	movf	lcd_cmd@cmd,w,c
  3256  000F12  EC25  F00A         	call	_set_bit
  3257  000F16  6E03               	movwf	??_lcd_cmd& (0+255),c
  3258  000F18  3A03               	swapf	??_lcd_cmd,f,c
  3259  000F1A  4603               	rlncf	??_lcd_cmd,f,c
  3260  000F1C  4603               	rlncf	??_lcd_cmd,f,c
  3261  000F1E  5083               	movf	3971,w,c	;volatile
  3262  000F20  1803               	xorwf	??_lcd_cmd,w,c
  3263  000F22  0BBF               	andlw	-65
  3264  000F24  1803               	xorwf	??_lcd_cmd,w,c
  3265  000F26  6E83               	movwf	3971,c	;volatile
  3266                           
  3267                           ;../Bibliotecas/LCD4b.c: 55:     PORTDbits.RD7 = set_bit(cmd,0b10000000);
  3268  000F28  0E80               	movlw	128
  3269  000F2A  6E01               	movwf	set_bit@comp,c
  3270  000F2C  5004               	movf	lcd_cmd@cmd,w,c
  3271  000F2E  EC25  F00A         	call	_set_bit
  3272  000F32  6E03               	movwf	??_lcd_cmd& (0+255),c
  3273  000F34  3203               	rrcf	??_lcd_cmd,f,c
  3274  000F36  3203               	rrcf	??_lcd_cmd,f,c
  3275  000F38  5083               	movf	3971,w,c	;volatile
  3276  000F3A  1803               	xorwf	??_lcd_cmd,w,c
  3277  000F3C  0B7F               	andlw	-129
  3278  000F3E  1803               	xorwf	??_lcd_cmd,w,c
  3279  000F40  6E83               	movwf	3971,c	;volatile
  3280                           
  3281                           ;../Bibliotecas/LCD4b.c: 57:     PORTEbits.RE1 = 1;
  3282  000F42  8284               	bsf	3972,1,c	;volatile
  3283                           
  3284                           ;../Bibliotecas/LCD4b.c: 58:     PORTEbits.RE1 = 0;
  3285  000F44  9284               	bcf	3972,1,c	;volatile
  3286                           
  3287                           ;../Bibliotecas/LCD4b.c: 60:     _delay((unsigned long)((100)*(8000000/4000000.0)));
  3288  000F46  0E42               	movlw	66
  3289  000F48                     u1447:
  3290  000F48  2EE8               	decfsz	wreg,f,c
  3291  000F4A  D7FE               	bra	u1447
  3292  000F4C  D000               	nop2	
  3293                           
  3294                           ;../Bibliotecas/LCD4b.c: 64:     PORTDbits.RD4 = set_bit(cmd,0b00000001);
  3295  000F4E  0E01               	movlw	1
  3296  000F50  6E01               	movwf	set_bit@comp,c
  3297  000F52  5004               	movf	lcd_cmd@cmd,w,c
  3298  000F54  EC25  F00A         	call	_set_bit
  3299  000F58  6E03               	movwf	??_lcd_cmd& (0+255),c
  3300  000F5A  3A03               	swapf	??_lcd_cmd,f,c
  3301  000F5C  5083               	movf	3971,w,c	;volatile
  3302  000F5E  1803               	xorwf	??_lcd_cmd,w,c
  3303  000F60  0BEF               	andlw	-17
  3304  000F62  1803               	xorwf	??_lcd_cmd,w,c
  3305  000F64  6E83               	movwf	3971,c	;volatile
  3306                           
  3307                           ;../Bibliotecas/LCD4b.c: 65:     PORTDbits.RD5 = set_bit(cmd,0b00000010);
  3308  000F66  0E02               	movlw	2
  3309  000F68  6E01               	movwf	set_bit@comp,c
  3310  000F6A  5004               	movf	lcd_cmd@cmd,w,c
  3311  000F6C  EC25  F00A         	call	_set_bit
  3312  000F70  6E03               	movwf	??_lcd_cmd& (0+255),c
  3313  000F72  3A03               	swapf	??_lcd_cmd,f,c
  3314  000F74  4603               	rlncf	??_lcd_cmd,f,c
  3315  000F76  5083               	movf	3971,w,c	;volatile
  3316  000F78  1803               	xorwf	??_lcd_cmd,w,c
  3317  000F7A  0BDF               	andlw	-33
  3318  000F7C  1803               	xorwf	??_lcd_cmd,w,c
  3319  000F7E  6E83               	movwf	3971,c	;volatile
  3320                           
  3321                           ;../Bibliotecas/LCD4b.c: 66:     PORTDbits.RD6 = set_bit(cmd,0b00000100);
  3322  000F80  0E04               	movlw	4
  3323  000F82  6E01               	movwf	set_bit@comp,c
  3324  000F84  5004               	movf	lcd_cmd@cmd,w,c
  3325  000F86  EC25  F00A         	call	_set_bit
  3326  000F8A  6E03               	movwf	??_lcd_cmd& (0+255),c
  3327  000F8C  3A03               	swapf	??_lcd_cmd,f,c
  3328  000F8E  4603               	rlncf	??_lcd_cmd,f,c
  3329  000F90  4603               	rlncf	??_lcd_cmd,f,c
  3330  000F92  5083               	movf	3971,w,c	;volatile
  3331  000F94  1803               	xorwf	??_lcd_cmd,w,c
  3332  000F96  0BBF               	andlw	-65
  3333  000F98  1803               	xorwf	??_lcd_cmd,w,c
  3334  000F9A  6E83               	movwf	3971,c	;volatile
  3335                           
  3336                           ;../Bibliotecas/LCD4b.c: 67:     PORTDbits.RD7 = set_bit(cmd,0b00001000);
  3337  000F9C  0E08               	movlw	8
  3338  000F9E  6E01               	movwf	set_bit@comp,c
  3339  000FA0  5004               	movf	lcd_cmd@cmd,w,c
  3340  000FA2  EC25  F00A         	call	_set_bit
  3341  000FA6  6E03               	movwf	??_lcd_cmd& (0+255),c
  3342  000FA8  3203               	rrcf	??_lcd_cmd,f,c
  3343  000FAA  3203               	rrcf	??_lcd_cmd,f,c
  3344  000FAC  5083               	movf	3971,w,c	;volatile
  3345  000FAE  1803               	xorwf	??_lcd_cmd,w,c
  3346  000FB0  0B7F               	andlw	-129
  3347  000FB2  1803               	xorwf	??_lcd_cmd,w,c
  3348  000FB4  6E83               	movwf	3971,c	;volatile
  3349                           
  3350                           ;../Bibliotecas/LCD4b.c: 69:     PORTEbits.RE1 = 1;
  3351  000FB6  8284               	bsf	3972,1,c	;volatile
  3352                           
  3353                           ;../Bibliotecas/LCD4b.c: 70:     PORTEbits.RE1 = 0;
  3354  000FB8  9284               	bcf	3972,1,c	;volatile
  3355  000FBA  0012               	return		;funcret
  3356  000FBC                     __end_of_lcd_cmd:
  3357                           	opt callstack 0
  3358                           
  3359 ;; *************** function _set_bit *****************
  3360 ;; Defined at:
  3361 ;;		line 38 in file "../Bibliotecas/LCD4b.c"
  3362 ;; Parameters:    Size  Location     Type
  3363 ;;  cmd             1    wreg     unsigned char 
  3364 ;;  comp            1    0[COMRAM] unsigned char 
  3365 ;; Auto vars:     Size  Location     Type
  3366 ;;  cmd             1    1[COMRAM] unsigned char 
  3367 ;; Return value:  Size  Location     Type
  3368 ;;                  1    wreg      unsigned char 
  3369 ;; Registers used:
  3370 ;;		wreg, status,2, status,0
  3371 ;; Tracked objects:
  3372 ;;		On entry : 0/0
  3373 ;;		On exit  : 0/0
  3374 ;;		Unchanged: 0/0
  3375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3376 ;;      Params:         1       0       0       0       0       0       0
  3377 ;;      Locals:         1       0       0       0       0       0       0
  3378 ;;      Temps:          0       0       0       0       0       0       0
  3379 ;;      Totals:         2       0       0       0       0       0       0
  3380 ;;Total ram usage:        2 bytes
  3381 ;; Hardware stack levels used:    1
  3382 ;; This function calls:
  3383 ;;		Nothing
  3384 ;; This function is called by:
  3385 ;;		_lcd_cmd
  3386 ;; This function uses a non-reentrant model
  3387 ;;
  3388                           
  3389                           	psect	text21
  3390  00144A                     __ptext21:
  3391                           	opt callstack 0
  3392  00144A                     _set_bit:
  3393                           	opt callstack 28
  3394                           
  3395                           ;incstack = 0
  3396                           ;set_bit@cmd stored from wreg
  3397  00144A  6E02               	movwf	set_bit@cmd,c
  3398                           
  3399                           ;../Bibliotecas/LCD4b.c: 38: char set_bit(char cmd, char comp);../Bibliotecas/LCD4b.c: 3
      +                          9: {;../Bibliotecas/LCD4b.c: 41:     if ((cmd & comp) >= 1)
  3400  00144C  5002               	movf	set_bit@cmd,w,c
  3401  00144E  1401               	andwf	set_bit@comp,w,c
  3402  001450  0900               	iorlw	0
  3403  001452  B4D8               	btfsc	status,2,c
  3404  001454  D002               	goto	l1591
  3405                           
  3406                           ;../Bibliotecas/LCD4b.c: 42:         return 1;
  3407  001456  0E01               	movlw	1
  3408  001458  0012               	return	
  3409  00145A                     l1591:
  3410                           
  3411                           ;../Bibliotecas/LCD4b.c: 44:         return 0;
  3412  00145A  0E00               	movlw	0
  3413  00145C  0012               	return		;funcret
  3414  00145E                     __end_of_set_bit:
  3415                           	opt callstack 0
  3416                           
  3417                           	psect	rparam
  3418  0000                     tosu	equ	0xFFF
  3419                           tosh	equ	0xFFE
  3420                           tosl	equ	0xFFD
  3421                           stkptr	equ	0xFFC
  3422                           pclatu	equ	0xFFB
  3423                           pclath	equ	0xFFA
  3424                           pcl	equ	0xFF9
  3425                           tblptru	equ	0xFF8
  3426                           tblptrh	equ	0xFF7
  3427                           tblptrl	equ	0xFF6
  3428                           tablat	equ	0xFF5
  3429                           prodh	equ	0xFF4
  3430                           prodl	equ	0xFF3
  3431                           indf0	equ	0xFEF
  3432                           postinc0	equ	0xFEE
  3433                           postdec0	equ	0xFED
  3434                           preinc0	equ	0xFEC
  3435                           plusw0	equ	0xFEB
  3436                           fsr0h	equ	0xFEA
  3437                           fsr0l	equ	0xFE9
  3438                           wreg	equ	0xFE8
  3439                           indf1	equ	0xFE7
  3440                           postinc1	equ	0xFE6
  3441                           postdec1	equ	0xFE5
  3442                           preinc1	equ	0xFE4
  3443                           plusw1	equ	0xFE3
  3444                           fsr1h	equ	0xFE2
  3445                           fsr1l	equ	0xFE1
  3446                           bsr	equ	0xFE0
  3447                           indf2	equ	0xFDF
  3448                           postinc2	equ	0xFDE
  3449                           postdec2	equ	0xFDD
  3450                           preinc2	equ	0xFDC
  3451                           plusw2	equ	0xFDB
  3452                           fsr2h	equ	0xFDA
  3453                           fsr2l	equ	0xFD9
  3454                           status	equ	0xFD8


Data Sizes:
    Strings     19
    Constant    0
    Data        0
    BSS         58
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    111     121
    BANK0           128      0      48
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_2(CODE[5]), STR_1(CODE[14]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    S838_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_2(CODE[5]), STR_1(CODE[14]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_2(CODE[5]), STR_1(CODE[14]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 14
		 -> STR_2(CODE[5]), STR_1(CODE[14]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    lcd_escreve_bf@str	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _atoi->_isspace
    _lcd_ini->_lcd_cmd
    _lcd_escreve_bf->_lcd_envia_byte
    _lcd_envia_byte->_lcd_cmd
    _lcd_cmd->_set_bit

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   11715
                                            109 COMRAM     2     2      0
                     _lcd_envia_byte
                     _lcd_escreve_bf
                            _lcd_ini
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             16    10      6    8444
                                             93 COMRAM    16    10      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    7939
                                             85 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           46    40      6    7566
                                             63 COMRAM    22    16      6
                               _atoi
                               _dtoa
                              _fputc
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                36    26     10    4358
                                             27 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    2709
                                             16 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     166
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1235
                                              9 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     834
                                              0 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                             18 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     448
                                              0 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     452
                                              0 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (4) _atoi                                                15    13      2    1244
                                              7 COMRAM    15    13      2
                             ___wmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (5) _isspace                                              7     5      2     207
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              6     4      2     237
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     403
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _lcd_ini                                              2     2      0     874
                                              4 COMRAM     2     2      0
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (1) _lcd_escreve_bf                                       2     0      2    1297
                                              6 COMRAM     2     0      2
                     _lcd_envia_byte
 ---------------------------------------------------------------------------------
 (2) _lcd_envia_byte                                       2     1      1    1100
                                              4 COMRAM     2     1      1
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (2) _lcd_cmd                                              2     2      0     828
                                              2 COMRAM     2     2      0
                            _set_bit
 ---------------------------------------------------------------------------------
 (3) _set_bit                                              2     1      1     652
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _lcd_envia_byte
     _lcd_cmd
       _set_bit
   _lcd_escreve_bf
     _lcd_envia_byte
       _lcd_cmd
         _set_bit
   _lcd_ini
     _lcd_cmd
       _set_bit
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _atoi
           ___wmul
           _isdigit
           _isspace
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
                 _putch
             _strlen
         _fputc
           _putch
         _isdigit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      30       5       37.5%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     6F      79       1       95.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A9      15        0.0%
DATA                 0      0      A9       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Wed Apr 03 14:02:08 2019

                     l92 1122      ___wmul@multiplicand 0003              __CFG_BORV$3 000000  
           __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000  
           __CFG_CP3$OFF 000000              __CFG_OSC$HS 000000                      l103 095C  
                    l105 0964                      l837 1358                      l868 0DAA  
           __CFG_CPB$OFF 000000             __CFG_CPD$OFF 000000                      u710 1014  
                    u800 138C                      u910 0E36                      u831 0B86  
                    u850 0BBE                      u690 0FCC                      u780 133E  
                    u790 138A                      u950 12EC                      u970 0912  
                    u980 0914                      _abs 1330                      _pad 10F4  
                    wreg 000FE8             __CFG_LVP$OFF 000000             __CFG_WDT$OFF 000000  
                   ?_abs 0013                     l1511 0BA6                     l1513 0BBA  
                   l1505 0B80                     l1601 0940                     l1531 0C52  
                   l1523 0C16                     l1443 1318                     l1429 0FD4  
                   l1527 0C2C                     l1551 0E1E                     l1543 0DE0  
                   l1439 1302                     l1447 139C                     l1463 111A  
                   l1615 097E                     l1553 0E32                     l1449 13A0  
                   l1473 1170                     l1465 112C                     l1563 0E90  
                   l1547 0E04                     l1459 110C                     l1619 098E  
                   l1731 065C                     l1803 08B6                     l1661 0C8A  
                   l1469 1144                     l1653 0B02                     l1629 0A86  
                   l1741 0674                     l1733 066C                     l1901 108E  
                   l1591 145A                     l1567 0EB6                     l1559 0E7A  
                   l1681 0D16                     l1649 0AEA                     l1753 0686  
                   l1745 0678                     l1737 0670                     l1729 065A  
                   l1913 10DC                     l1579 12F0                     l1675 0CE0  
                   l1659 0C86                     l1499 0B58                     l1771 0760  
                   l1755 06C8                     l1827 122C                     l1685 0D4A  
                   l1677 0CE8                     l1669 0CD0                     l1749 067C  
                   l1829 1250                     l1679 0CEE                     l1767 0734  
                   l1849 11AE                     l1793 0894                     l1769 0752  
                   l1787 0858                     l1885 13BE                     l1797 089E  
                   ?_pad 0011                     l1889 13D4                     STR_1 0601  
                   STR_2 060F                     u1010 0952                     u1100 0AD4  
                   u1030 0978                     u1040 0A94                     u1130 0CCC  
                   u1060 0AB6                     u1061 0AB4                     u1150 0D7A  
                   u1070 0AC4                     u1160 0D7C                     u1080 0AC8  
                   u1240 0798                     u1305 1436                     u1306 1438  
                   u1250 079A                     u1260 07A6                     u1407 11F2  
                   u1280 07DA                     u1417 1204                     u1427 1212  
                   u1437 143A                     u1357 10E6                     u1447 0F48  
                   u1367 11A0                     u1377 11BA                     u1387 11D2  
                   u1397 11E0             __CFG_PWRT$ON 000000                     abs@a 0013  
                   _dbuf 0080                     _atoi 0C74                     _main 105C  
                   _dtoa 08EA                     _prec 0074                     _nout 0070  
                   pad@i 0018                     pad@p 0015                     fsr1h 000FE2  
                   fsr2h 000FDA                     indf2 000FDF                     fsr1l 000FE1  
                   pad@w 001A                     fsr2l 000FD9                     prodh 000FF4  
                   prodl 000FF3                     start 0000            __CFG_IESO$OFF 000000  
          __CFG_MCLRE$ON 000000             ___param_bank 000000                    ??_abs 0015  
                  ??_pad 0017          __end_of___aodiv 0C74                    ?_atoi 0008  
                  ?_main 0001                    ?_dtoa 001C          __end_of___aomod 0ED8  
           vfpfcnvrt@fmt 0042                    _PORTD 000F83                    _TRISD 000F95  
          __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000  
          __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000  
         __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000  
        __end_of_lcd_cmd 0FBC          __end_of_lcd_ini 121A            __CFG_WRTB$OFF 000000  
          __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000  
                  _flags 0076                    _conta 0078                    _fputc 0FBC  
                  _fputs 12F8          __end_of_isdigit 1392                    atoi@n 0015  
                  pad@fp 0011                    atoi@s 0008                    _width 0072  
                  _putch 145E                    dtoa@d 001E                    dtoa@i 003E  
                  dtoa@n 0036                    dtoa@p 0030                    dtoa@s 0034  
                  dtoa@w 0032          __end_of_isspace 12F8           __CFG_BOREN$OFF 000000  
        __end_of_set_bit 145E                    tablat 000FF5                    status 000FD8  
        __end_of_sprintf 12BA          __initialization 140A             __end_of_atoi 0DB4  
           __end_of_main 10F4             __end_of_dtoa 0B2C                   ??_atoi 000A  
                 ??_main 006E                   ??_dtoa 0026            __activetblptr 000002  
                 _ADCON1 000FC1                   ?_fputc 0001                   ?_fputs 000A  
                 ?_putch 0001            vfpfcnvrt@done 0052           __CFG_XINST$OFF 000000  
           vfprintf@cfmt 005C                ??___aodiv 0011                ??___aomod 0011  
                 ___wmul 13E4           __CFG_STVREN$ON 000000         ??_lcd_escreve_bf 0009  
                 clear_0 1410                   clear_1 141C         ??_lcd_envia_byte 0006  
                 pad@buf 0013                ??_lcd_cmd 0003                   dtoa@fp 001C  
              ??_lcd_ini 0005                   _strlen 1392                   fputc@c 0001  
                 fputs@c 000E                   fputs@i 000F                   fputs@s 000A  
              ??_isdigit 0003             __mediumconst 0000                ??_isspace 0003  
              ??_set_bit 0002                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8                   putch@c 0001         __end_of_vfprintf 126C  
              ??_sprintf 0064               __accesstop 0080  __end_of__initialization 1422  
        __CFG_PBADEN$OFF 000000            ___rparam_used 000001           __pcstackCOMRAM 0001  
          __end_of_fputc 105C            __end_of_fputs 1330            __end_of_putch 1460  
                ??_fputc 0005                  ??_fputs 000E                  ??_putch 0001  
             __pbssBANK0 0080                  ?___wmul 0001                  ?_strlen 0001  
     __size_of_vfpfcnvrt 02D4                  __Hparam 0000                  __Lparam 0000  
                ___aodiv 0B2C                  ___aomod 0DB4          __size_of___wmul 0026  
              ?_vfprintf 0056              set_bit@comp 0001             __psmallconst 0600  
                __pcinit 140A                  __ramtop 0600                  __ptext0 105C  
                __ptext1 126C                  __ptext2 121A                  __ptext3 0616  
                __ptext4 08EA                  __ptext5 10F4                  __ptext6 1392  
                __ptext7 12F8                  __ptext8 0FBC                  __ptext9 145E  
                _lcd_cmd 0ED8                  _lcd_ini 118A          __size_of_strlen 002A  
           __size_of_abs 0032             __size_of_pad 0096                  _isdigit 1362  
                _isspace 12BA                  _set_bit 144A                  atoi@neg 000E  
                _sprintf 126C     end_of_initialization 1422       lcd_envia_byte@dado 0005  
                fputc@fp 0003            __Lmediumconst 0000                  fputs@fp 000C  
      __end_of_vfpfcnvrt 08EA                  postdec2 000FDD                  postinc0 000FEE  
                postinc1 000FE6                  postinc2 000FDE               ??_vfprintf 005C  
                strlen@a 0003                  strlen@s 0001                _PORTDbits 000F83  
              _PORTEbits 000F84                _TRISEbits 000F96               lcd_cmd@cmd 0004  
            vfpfcnvrt@ap 0044              vfpfcnvrt@fp 0040              vfpfcnvrt@ll 004A  
         __end_of___wmul 140A           __end_of_strlen 13BC      start_initialization 140A  
            __end_of_abs 1362              __end_of_pad 118A              vfprintf@fmt 0058  
               ??___wmul 0005         __CFG_LPT1OSC$OFF 000000                 ??_strlen 0003  
            __pbssCOMRAM 0070         ___aodiv@dividend 0001  __size_of_lcd_escreve_bf 0028  
__size_of_lcd_envia_byte 001E        __CFG_CCP2MX$PORTC 000000                 ?___aodiv 0001  
               ?___aomod 0001         ___aodiv@quotient 0013        lcd_escreve_bf@str 0007  
              _bufferLCD 00A0                 ?_lcd_cmd 0001        __size_of_vfprintf 0052  
               ?_lcd_ini 0001              __smallconst 0600                 ?_isdigit 0001  
               ?_isspace 0001                 ?_set_bit 0001               set_bit@cmd 0002  
               ?_sprintf 005E           __size_of_fputc 00A0           __size_of_fputs 0038  
         __size_of_putch 0002           ___wmul@product 0005         __CFG_WDTPS$32768 000000  
              _vfpfcnvrt 0616        ___wmul@multiplier 0001                 __Hrparam 0000  
             vfprintf@ap 005A                 __Lrparam 0000               vfprintf@fp 0056  
       __size_of___aodiv 0148         __size_of___aomod 0124               ?_vfpfcnvrt 0040  
        ___aodiv@divisor 0009          ___aodiv@counter 0011         __size_of_lcd_cmd 00E4  
       __size_of_lcd_ini 0090               sprintf@fmt 0060                 _atoi$816 0010  
               _atoi$817 0014                 _atoi$818 0012         __size_of_isdigit 0030  
               _dtoa$344 002E           _lcd_escreve_bf 13BC         __size_of_isspace 003E  
               __ptext10 1330                 __ptext11 0DB4                 __ptext20 0ED8  
               __ptext12 0B2C                 __ptext21 144A                 __ptext13 0C74  
               __ptext14 12BA                 __ptext15 1362                 __ptext16 13E4  
               __ptext17 118A                 __ptext18 13BC                 __ptext19 142C  
       __size_of_set_bit 0014           _lcd_envia_byte 142C         __size_of_sprintf 004E  
          __size_of_atoi 0140            __size_of_main 0098            __size_of_dtoa 0242  
               lcd_ini@i 0006                 _vfprintf 121A              _isspace$834 0007  
       ___aomod@dividend 0001   __end_of_lcd_escreve_bf 13E4   __end_of_lcd_envia_byte 144A  
    lcd_envia_byte@nivel 0006                 isdigit@c 0001                sprintf@ap 0066  
               isspace@c 0001          ___aomod@divisor 0009              ??_vfpfcnvrt 0046  
          _vfpfcnvrt$359 0054          ___aomod@counter 0011                 sprintf@f 0068  
               sprintf@s 005E          ?_lcd_escreve_bf 0007          ?_lcd_envia_byte 0005  
           ___aodiv@sign 0012             ___aomod@sign 0012  
