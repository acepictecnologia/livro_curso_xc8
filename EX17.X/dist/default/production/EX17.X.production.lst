

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Mon Apr 08 07:51:40 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    33                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    34                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    35                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    36                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    37  0000                     
    38                           ; Version 2.05
    39                           ; Generated 20/12/2018 GMT
    40                           ; 
    41                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    42                           ; All rights reserved.
    43                           ; 
    44                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    45                           ; 
    46                           ; Redistribution and use in source and binary forms, with or without modification, are
    47                           ; permitted provided that the following conditions are met:
    48                           ; 
    49                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    50                           ;        conditions and the following disclaimer.
    51                           ; 
    52                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    53                           ;        of conditions and the following disclaimer in the documentation and/or other
    54                           ;        materials provided with the distribution.
    55                           ; 
    56                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    57                           ;        software without specific prior written permission.
    58                           ; 
    59                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    60                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    61                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    62                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    63                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    64                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    65                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    66                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    67                           ; 
    68                           ; 
    69                           ; Code-generator required, PIC18F4520 Definitions
    70                           ; 
    71                           ; SFR Addresses
    72  0000                     _PORTDbits	set	3971
    73  0000                     _PORTEbits	set	3972
    74  0000                     _PORTD	set	3971
    75  0000                     _TRISEbits	set	3990
    76  0000                     _TRISD	set	3989
    77  0000                     _PORTBbits	set	3969
    78  0000                     _PIE1bits	set	3997
    79  0000                     _T1CON	set	4045
    80  0000                     _INTCON	set	4082
    81  0000                     _ADCON1	set	4033
    82  0000                     _PORTB	set	3969
    83  0000                     _TRISB	set	3987
    84  0000                     _TMR1L	set	4046
    85  0000                     _TMR1H	set	4047
    86  0000                     _TMR1IF	set	31984
    87                           
    88                           	psect	smallconst
    89  000600                     __psmallconst:
    90                           	opt callstack 0
    91  000600  00                 	db	0
    92  000601                     STR_1:
    93  000601  54                 	db	84	;'T'
    94  000602  49                 	db	73	;'I'
    95  000603  4D                 	db	77	;'M'
    96  000604  45                 	db	69	;'E'
    97  000605  52                 	db	82	;'R'
    98  000606  31                 	db	49	;'1'
    99  000607  00                 	db	0
   100  000608                     STR_3:
   101  000608  25                 	db	37
   102  000609  30                 	db	48	;'0'
   103  00060A  32                 	db	50	;'2'
   104  00060B  64                 	db	100	;'d'
   105  00060C  00                 	db	0
   106  00060D                     STR_2:
   107  00060D  30                 	db	48	;'0'
   108  00060E  30                 	db	48	;'0'
   109  00060F  00                 	db	0
   110                           
   111                           ; #config settings
   112  000610  00                 	db	0	; dummy byte at the end
   113  0000                     
   114                           	psect	cinit
   115  00146C                     __pcinit:
   116                           	opt callstack 0
   117  00146C                     start_initialization:
   118                           	opt callstack 0
   119  00146C                     __initialization:
   120                           	opt callstack 0
   121                           
   122                           ; Clear objects allocated to BANK0 (48 bytes)
   123  00146C  EE00  F080         	lfsr	0,__pbssBANK0
   124  001470  0E30               	movlw	48
   125  001472                     clear_0:
   126  001472  6AEE               	clrf	postinc0,c
   127  001474  06E8               	decf	wreg,f,c
   128  001476  E1FD               	bnz	clear_0
   129                           
   130                           ; Clear objects allocated to COMRAM (10 bytes)
   131  001478  EE00  F070         	lfsr	0,__pbssCOMRAM
   132  00147C  0E0A               	movlw	10
   133  00147E                     clear_1:
   134  00147E  6AEE               	clrf	postinc0,c
   135  001480  06E8               	decf	wreg,f,c
   136  001482  E1FD               	bnz	clear_1
   137  001484                     end_of_initialization:
   138                           	opt callstack 0
   139  001484                     __end_of__initialization:
   140                           	opt callstack 0
   141  001484  907A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   142  001486  927A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   143  001488  0E00               	movlw	low (__Lmediumconst shr (0+16))
   144  00148A  6EF8               	movwf	tblptru,c
   145  00148C  0100               	movlb	0
   146  00148E  EFDC  F007         	goto	_main	;jump to C main() function
   147                           
   148                           	psect	bssCOMRAM
   149  000070                     __pbssCOMRAM:
   150                           	opt callstack 0
   151  000070                     _nout:
   152                           	opt callstack 0
   153  000070                     	ds	2
   154  000072                     _width:
   155                           	opt callstack 0
   156  000072                     	ds	2
   157  000074                     _prec:
   158                           	opt callstack 0
   159  000074                     	ds	2
   160  000076                     _flags:
   161                           	opt callstack 0
   162  000076                     	ds	2
   163  000078                     _T1_cnt:
   164                           	opt callstack 0
   165  000078                     	ds	2
   166                           
   167                           	psect	bssBANK0
   168  000080                     __pbssBANK0:
   169                           	opt callstack 0
   170  000080                     _dbuf:
   171                           	opt callstack 0
   172  000080                     	ds	32
   173  0000A0                     _bufferLCD:
   174                           	opt callstack 0
   175  0000A0                     	ds	16
   176                           
   177                           	psect	cstackCOMRAM
   178  000001                     __pcstackCOMRAM:
   179                           	opt callstack 0
   180  000001                     ?_strlen:
   181                           	opt callstack 0
   182  000001                     ?_isdigit:
   183                           	opt callstack 0
   184  000001                     ?_isspace:
   185                           	opt callstack 0
   186  000001                     ?___wmul:
   187                           	opt callstack 0
   188  000001                     ?___aodiv:
   189                           	opt callstack 0
   190  000001                     ?___aomod:
   191                           	opt callstack 0
   192  000001                     set_bit@comp:
   193                           	opt callstack 0
   194  000001                     ___wmul@multiplier:
   195                           	opt callstack 0
   196  000001                     isdigit@c:
   197                           	opt callstack 0
   198  000001                     isspace@c:
   199                           	opt callstack 0
   200  000001                     fputc@c:
   201                           	opt callstack 0
   202  000001                     strlen@s:
   203                           	opt callstack 0
   204  000001                     ___aodiv@dividend:
   205                           	opt callstack 0
   206  000001                     ___aomod@dividend:
   207                           	opt callstack 0
   208                           
   209                           ; 8 bytes @ 0x0
   210  000001                     	ds	1
   211  000002                     set_bit@cmd:
   212                           	opt callstack 0
   213                           
   214                           ; 1 bytes @ 0x1
   215  000002                     	ds	1
   216  000003                     ??_lcd_cmd:
   217  000003                     ??_isdigit:
   218  000003                     ??_isspace:
   219  000003                     ___wmul@multiplicand:
   220                           	opt callstack 0
   221  000003                     fputc@fp:
   222                           	opt callstack 0
   223  000003                     strlen@a:
   224                           	opt callstack 0
   225                           
   226                           ; 2 bytes @ 0x2
   227  000003                     	ds	1
   228  000004                     lcd_cmd@cmd:
   229                           	opt callstack 0
   230                           
   231                           ; 1 bytes @ 0x3
   232  000004                     	ds	1
   233  000005                     ??_lcd_ini:
   234  000005                     ??_fputc:
   235  000005                     lcd_envia_byte@dado:
   236                           	opt callstack 0
   237  000005                     ___wmul@product:
   238                           	opt callstack 0
   239                           
   240                           ; 2 bytes @ 0x4
   241  000005                     	ds	1
   242  000006                     lcd_ini@i:
   243                           	opt callstack 0
   244  000006                     lcd_envia_byte@nivel:
   245                           	opt callstack 0
   246                           
   247                           ; 1 bytes @ 0x5
   248  000006                     	ds	1
   249  000007                     lcd_escreve_bf@col:
   250                           	opt callstack 0
   251  000007                     _isspace$964:
   252                           	opt callstack 0
   253                           
   254                           ; 1 bytes @ 0x6
   255  000007                     	ds	1
   256  000008                     ?_atoi:
   257                           	opt callstack 0
   258  000008                     lcd_escreve_bf@str:
   259                           	opt callstack 0
   260  000008                     atoi@s:
   261                           	opt callstack 0
   262                           
   263                           ; 2 bytes @ 0x7
   264  000008                     	ds	1
   265  000009                     ___aodiv@divisor:
   266                           	opt callstack 0
   267  000009                     ___aomod@divisor:
   268                           	opt callstack 0
   269                           
   270                           ; 8 bytes @ 0x8
   271  000009                     	ds	1
   272  00000A                     ??_atoi:
   273  00000A                     lcd_escreve_bf@end:
   274                           	opt callstack 0
   275  00000A                     fputs@s:
   276                           	opt callstack 0
   277                           
   278                           ; 2 bytes @ 0x9
   279  00000A                     	ds	1
   280  00000B                     lcd_escreve_bf@lin:
   281                           	opt callstack 0
   282                           
   283                           ; 1 bytes @ 0xA
   284  00000B                     	ds	1
   285  00000C                     fputs@fp:
   286                           	opt callstack 0
   287                           
   288                           ; 2 bytes @ 0xB
   289  00000C                     	ds	2
   290  00000E                     fputs@c:
   291                           	opt callstack 0
   292  00000E                     atoi@neg:
   293                           	opt callstack 0
   294                           
   295                           ; 2 bytes @ 0xD
   296  00000E                     	ds	1
   297  00000F                     fputs@i:
   298                           	opt callstack 0
   299                           
   300                           ; 2 bytes @ 0xE
   301  00000F                     	ds	1
   302  000010                     _atoi$946:
   303                           	opt callstack 0
   304                           
   305                           ; 2 bytes @ 0xF
   306  000010                     	ds	1
   307  000011                     ?_pad:
   308                           	opt callstack 0
   309  000011                     ___aodiv@counter:
   310                           	opt callstack 0
   311  000011                     ___aomod@counter:
   312                           	opt callstack 0
   313  000011                     pad@fp:
   314                           	opt callstack 0
   315                           
   316                           ; 2 bytes @ 0x10
   317  000011                     	ds	1
   318  000012                     ___aodiv@sign:
   319                           	opt callstack 0
   320  000012                     ___aomod@sign:
   321                           	opt callstack 0
   322  000012                     _atoi$948:
   323                           	opt callstack 0
   324                           
   325                           ; 2 bytes @ 0x11
   326  000012                     	ds	1
   327  000013                     ?_abs:
   328                           	opt callstack 0
   329  000013                     pad@buf:
   330                           	opt callstack 0
   331  000013                     abs@a:
   332                           	opt callstack 0
   333  000013                     ___aodiv@quotient:
   334                           	opt callstack 0
   335                           
   336                           ; 8 bytes @ 0x12
   337  000013                     	ds	1
   338  000014                     _atoi$947:
   339                           	opt callstack 0
   340                           
   341                           ; 1 bytes @ 0x13
   342  000014                     	ds	1
   343  000015                     ??_abs:
   344  000015                     pad@p:
   345                           	opt callstack 0
   346  000015                     atoi@n:
   347                           	opt callstack 0
   348                           
   349                           ; 2 bytes @ 0x14
   350  000015                     	ds	2
   351  000017                     ??_pad:
   352                           
   353                           ; 1 bytes @ 0x16
   354  000017                     	ds	1
   355  000018                     pad@i:
   356                           	opt callstack 0
   357                           
   358                           ; 2 bytes @ 0x17
   359  000018                     	ds	2
   360  00001A                     pad@w:
   361                           	opt callstack 0
   362                           
   363                           ; 2 bytes @ 0x19
   364  00001A                     	ds	2
   365  00001C                     ?_dtoa:
   366                           	opt callstack 0
   367  00001C                     dtoa@fp:
   368                           	opt callstack 0
   369                           
   370                           ; 2 bytes @ 0x1B
   371  00001C                     	ds	2
   372  00001E                     dtoa@d:
   373                           	opt callstack 0
   374                           
   375                           ; 8 bytes @ 0x1D
   376  00001E                     	ds	8
   377  000026                     ??_dtoa:
   378                           
   379                           ; 1 bytes @ 0x25
   380  000026                     	ds	8
   381  00002E                     _dtoa$474:
   382                           	opt callstack 0
   383                           
   384                           ; 2 bytes @ 0x2D
   385  00002E                     	ds	2
   386  000030                     dtoa@p:
   387                           	opt callstack 0
   388                           
   389                           ; 2 bytes @ 0x2F
   390  000030                     	ds	2
   391  000032                     dtoa@w:
   392                           	opt callstack 0
   393                           
   394                           ; 2 bytes @ 0x31
   395  000032                     	ds	2
   396  000034                     dtoa@s:
   397                           	opt callstack 0
   398                           
   399                           ; 2 bytes @ 0x33
   400  000034                     	ds	2
   401  000036                     dtoa@n:
   402                           	opt callstack 0
   403                           
   404                           ; 8 bytes @ 0x35
   405  000036                     	ds	8
   406  00003E                     dtoa@i:
   407                           	opt callstack 0
   408                           
   409                           ; 2 bytes @ 0x3D
   410  00003E                     	ds	2
   411  000040                     ?_vfpfcnvrt:
   412                           	opt callstack 0
   413  000040                     vfpfcnvrt@fp:
   414                           	opt callstack 0
   415                           
   416                           ; 2 bytes @ 0x3F
   417  000040                     	ds	2
   418  000042                     vfpfcnvrt@fmt:
   419                           	opt callstack 0
   420                           
   421                           ; 2 bytes @ 0x41
   422  000042                     	ds	2
   423  000044                     vfpfcnvrt@ap:
   424                           	opt callstack 0
   425                           
   426                           ; 2 bytes @ 0x43
   427  000044                     	ds	2
   428  000046                     ??_vfpfcnvrt:
   429                           
   430                           ; 1 bytes @ 0x45
   431  000046                     	ds	4
   432  00004A                     vfpfcnvrt@ll:
   433                           	opt callstack 0
   434                           
   435                           ; 8 bytes @ 0x49
   436  00004A                     	ds	8
   437  000052                     vfpfcnvrt@done:
   438                           	opt callstack 0
   439                           
   440                           ; 2 bytes @ 0x51
   441  000052                     	ds	2
   442  000054                     _vfpfcnvrt$489:
   443                           	opt callstack 0
   444                           
   445                           ; 2 bytes @ 0x53
   446  000054                     	ds	2
   447  000056                     ?_vfprintf:
   448                           	opt callstack 0
   449  000056                     vfprintf@fp:
   450                           	opt callstack 0
   451                           
   452                           ; 2 bytes @ 0x55
   453  000056                     	ds	2
   454  000058                     vfprintf@fmt:
   455                           	opt callstack 0
   456                           
   457                           ; 2 bytes @ 0x57
   458  000058                     	ds	2
   459  00005A                     vfprintf@ap:
   460                           	opt callstack 0
   461                           
   462                           ; 2 bytes @ 0x59
   463  00005A                     	ds	2
   464  00005C                     vfprintf@cfmt:
   465                           	opt callstack 0
   466                           
   467                           ; 2 bytes @ 0x5B
   468  00005C                     	ds	2
   469  00005E                     ?_sprintf:
   470                           	opt callstack 0
   471  00005E                     sprintf@s:
   472                           	opt callstack 0
   473                           
   474                           ; 2 bytes @ 0x5D
   475  00005E                     	ds	2
   476  000060                     sprintf@fmt:
   477                           	opt callstack 0
   478                           
   479                           ; 2 bytes @ 0x5F
   480  000060                     	ds	4
   481  000064                     
   482                           ; 1 bytes @ 0x63
   483  000064                     	ds	2
   484  000066                     sprintf@ap:
   485                           	opt callstack 0
   486                           
   487                           ; 2 bytes @ 0x65
   488  000066                     	ds	2
   489  000068                     sprintf@f:
   490                           	opt callstack 0
   491                           
   492                           ; 6 bytes @ 0x67
   493  000068                     	ds	6
   494  00006E                     ??_main:
   495                           
   496                           ; 1 bytes @ 0x6D
   497  00006E                     	ds	2
   498                           
   499 ;;
   500 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   501 ;;
   502 ;; *************** function _main *****************
   503 ;; Defined at:
   504 ;;		line 26 in file "EX17.c"
   505 ;; Parameters:    Size  Location     Type
   506 ;;		None
   507 ;; Auto vars:     Size  Location     Type
   508 ;;		None
   509 ;; Return value:  Size  Location     Type
   510 ;;                  1    wreg      void 
   511 ;; Registers used:
   512 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   513 ;; Tracked objects:
   514 ;;		On entry : 0/0
   515 ;;		On exit  : 0/0
   516 ;;		Unchanged: 0/0
   517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   518 ;;      Params:         0       0       0       0       0       0       0
   519 ;;      Locals:         0       0       0       0       0       0       0
   520 ;;      Temps:          2       0       0       0       0       0       0
   521 ;;      Totals:         2       0       0       0       0       0       0
   522 ;;Total ram usage:        2 bytes
   523 ;; Hardware stack levels required when called:    9
   524 ;; This function calls:
   525 ;;		_lcd_escreve_bf
   526 ;;		_lcd_ini
   527 ;;		_sprintf
   528 ;; This function is called by:
   529 ;;		Startup code after reset
   530 ;; This function uses a non-reentrant model
   531 ;;
   532                           
   533                           	psect	text0
   534  000FB8                     __ptext0:
   535                           	opt callstack 0
   536  000FB8                     _main:
   537                           	opt callstack 22
   538                           
   539                           ;EX17.c: 28:     TRISB = 0b00000000;
   540                           
   541                           ;incstack = 0
   542  000FB8  0E00               	movlw	0
   543  000FBA  6E93               	movwf	3987,c	;volatile
   544                           
   545                           ;EX17.c: 29:     PORTB = 0b00000000;
   546  000FBC  0E00               	movlw	0
   547  000FBE  6E81               	movwf	3969,c	;volatile
   548                           
   549                           ;EX17.c: 30:     ADCON1 = 0x0F;
   550  000FC0  0E0F               	movlw	15
   551  000FC2  6EC1               	movwf	4033,c	;volatile
   552                           
   553                           ;EX17.c: 32:     INTCON = 0b11000000;
   554  000FC4  0EC0               	movlw	192
   555  000FC6  6EF2               	movwf	4082,c	;volatile
   556                           
   557                           ;EX17.c: 42:     T1CON = 0b00000111;
   558  000FC8  0E07               	movlw	7
   559  000FCA  6ECD               	movwf	4045,c	;volatile
   560                           
   561                           ;EX17.c: 51:     PIE1bits.TMR1IE = 1;
   562  000FCC  809D               	bsf	3997,0,c	;volatile
   563                           
   564                           ;EX17.c: 53:     TMR1H = 0xFF;
   565  000FCE  68CF               	setf	4047,c	;volatile
   566                           
   567                           ;EX17.c: 54:     TMR1L = 0xF4;
   568  000FD0  0EF4               	movlw	244
   569  000FD2  6ECE               	movwf	4046,c	;volatile
   570                           
   571                           ;EX17.c: 56:     lcd_ini();
   572  000FD4  ECC8  F008         	call	_lcd_ini	;wreg free
   573                           
   574                           ;EX17.c: 59:     lcd_escreve_bf(1, 6,"TIMER1");
   575  000FD8  0E06               	movlw	6
   576  000FDA  6E07               	movwf	lcd_escreve_bf@col,c
   577  000FDC  0E01               	movlw	low STR_1
   578  000FDE  6E08               	movwf	lcd_escreve_bf@str,c
   579  000FE0  0E06               	movlw	high STR_1
   580  000FE2  6E09               	movwf	lcd_escreve_bf@str+1,c
   581  000FE4  0E01               	movlw	1
   582  000FE6  EC10  F009         	call	_lcd_escreve_bf
   583                           
   584                           ;EX17.c: 62:     lcd_escreve_bf(2, 8, "00");
   585  000FEA  0E08               	movlw	8
   586  000FEC  6E07               	movwf	lcd_escreve_bf@col,c
   587  000FEE  0E0D               	movlw	low STR_2
   588  000FF0  6E08               	movwf	lcd_escreve_bf@str,c
   589  000FF2  0E06               	movlw	high STR_2
   590  000FF4  6E09               	movwf	lcd_escreve_bf@str+1,c
   591  000FF6  0E02               	movlw	2
   592  000FF8  EC10  F009         	call	_lcd_escreve_bf
   593  000FFC                     l1952:
   594                           
   595                           ;EX17.c: 65:     {;EX17.c: 66:         _delay((unsigned long)((500)*(8000000/4000.0)));
   596  000FFC  0E06               	movlw	6
   597  000FFE  6E6F               	movwf	(??_main+1)& (0+255),c
   598  001000  0E13               	movlw	19
   599  001002  6E6E               	movwf	??_main& (0+255),c
   600  001004  0EAE               	movlw	174
   601  001006                     u1457:
   602  001006  2EE8               	decfsz	wreg,f,c
   603  001008  D7FE               	bra	u1457
   604  00100A  2E6E               	decfsz	??_main& (0+255),f,c
   605  00100C  D7FC               	bra	u1457
   606  00100E  2E6F               	decfsz	(??_main+1)& (0+255),f,c
   607  001010  D7FA               	bra	u1457
   608                           
   609                           ;EX17.c: 68:         PORTBbits.RB0 = ~PORTBbits.RB0;
   610  001012  A081               	btfss	3969,0,c	;volatile
   611  001014  D002               	goto	u1440
   612  001016  0E01               	movlw	1
   613  001018  D001               	goto	u1446
   614  00101A                     u1440:
   615  00101A  0E00               	movlw	0
   616  00101C                     u1446:
   617  00101C  0AFF               	xorlw	255
   618  00101E  6E6E               	movwf	??_main& (0+255),c
   619  001020  5081               	movf	3969,w,c	;volatile
   620  001022  186E               	xorwf	??_main,w,c
   621  001024  0BFE               	andlw	-2
   622  001026  186E               	xorwf	??_main,w,c
   623  001028  6E81               	movwf	3969,c	;volatile
   624                           
   625                           ;EX17.c: 71:         sprintf(bufferLCD, "%02d", T1_cnt);
   626  00102A  0EA0               	movlw	low _bufferLCD
   627  00102C  6E5E               	movwf	sprintf@s,c
   628  00102E  0E00               	movlw	high _bufferLCD
   629  001030  6E5F               	movwf	sprintf@s+1,c
   630  001032  0E08               	movlw	low STR_3
   631  001034  6E60               	movwf	sprintf@fmt,c
   632  001036  0E06               	movlw	high STR_3
   633  001038  6E61               	movwf	sprintf@fmt+1,c
   634  00103A  C078  F062         	movff	_T1_cnt,?_sprintf+4
   635  00103E  C079  F063         	movff	_T1_cnt+1,?_sprintf+5
   636  001042  EC77  F009         	call	_sprintf	;wreg free
   637                           
   638                           ;EX17.c: 74:         lcd_escreve_bf(2, 8, bufferLCD);
   639  001046  0E08               	movlw	8
   640  001048  6E07               	movwf	lcd_escreve_bf@col,c
   641  00104A  0EA0               	movlw	low _bufferLCD
   642  00104C  6E08               	movwf	lcd_escreve_bf@str,c
   643  00104E  0E00               	movlw	high _bufferLCD
   644  001050  6E09               	movwf	lcd_escreve_bf@str+1,c
   645  001052  0E02               	movlw	2
   646  001054  EC10  F009         	call	_lcd_escreve_bf
   647  001058  D7D1               	goto	l1952
   648  00105A                     __end_of_main:
   649                           	opt callstack 0
   650                           
   651 ;; *************** function _sprintf *****************
   652 ;; Defined at:
   653 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_sprintf.c"
   654 ;; Parameters:    Size  Location     Type
   655 ;;  s               2   93[COMRAM] PTR unsigned char 
   656 ;;		 -> bufferLCD(16), 
   657 ;;  fmt             2   95[COMRAM] PTR const unsigned char 
   658 ;;		 -> STR_3(5), 
   659 ;; Auto vars:     Size  Location     Type
   660 ;;  f               6  103[COMRAM] struct _IO_FILE
   661 ;;  ap              2  101[COMRAM] PTR void [1]
   662 ;;		 -> ?_sprintf(2), 
   663 ;;  ret             2    0        int 
   664 ;; Return value:  Size  Location     Type
   665 ;;                  2   93[COMRAM] int 
   666 ;; Registers used:
   667 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   668 ;; Tracked objects:
   669 ;;		On entry : 0/0
   670 ;;		On exit  : 0/0
   671 ;;		Unchanged: 0/0
   672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   673 ;;      Params:         6       0       0       0       0       0       0
   674 ;;      Locals:        10       0       0       0       0       0       0
   675 ;;      Temps:          0       0       0       0       0       0       0
   676 ;;      Totals:        16       0       0       0       0       0       0
   677 ;;Total ram usage:       16 bytes
   678 ;; Hardware stack levels used:    1
   679 ;; Hardware stack levels required when called:    8
   680 ;; This function calls:
   681 ;;		_vfprintf
   682 ;; This function is called by:
   683 ;;		_main
   684 ;; This function uses a non-reentrant model
   685 ;;
   686                           
   687                           	psect	text1
   688  0012EE                     __ptext1:
   689                           	opt callstack 0
   690  0012EE                     _sprintf:
   691                           	opt callstack 22
   692                           
   693                           ;incstack = 0
   694  0012EE  0E62               	movlw	low (?_sprintf+4)
   695  0012F0  6E66               	movwf	sprintf@ap,c
   696  0012F2  0E00               	movlw	high (?_sprintf+4)
   697  0012F4  6E67               	movwf	sprintf@ap+1,c
   698  0012F6  C05E  F068         	movff	sprintf@s,sprintf@f
   699  0012FA  C05F  F069         	movff	sprintf@s+1,sprintf@f+1
   700  0012FE  0E00               	movlw	0
   701  001300  6E6B               	movwf	sprintf@f+3,c
   702  001302  0E00               	movlw	0
   703  001304  6E6A               	movwf	sprintf@f+2,c
   704  001306  0E00               	movlw	0
   705  001308  6E6D               	movwf	sprintf@f+5,c
   706  00130A  0E00               	movlw	0
   707  00130C  6E6C               	movwf	sprintf@f+4,c
   708  00130E  0E68               	movlw	low sprintf@f
   709  001310  6E56               	movwf	vfprintf@fp,c
   710  001312  0E00               	movlw	high sprintf@f
   711  001314  6E57               	movwf	vfprintf@fp+1,c
   712  001316  C060  F058         	movff	sprintf@fmt,vfprintf@fmt
   713  00131A  C061  F059         	movff	sprintf@fmt+1,vfprintf@fmt+1
   714  00131E  0E66               	movlw	low sprintf@ap
   715  001320  6E5A               	movwf	vfprintf@ap,c
   716  001322  0E00               	movlw	high sprintf@ap
   717  001324  6E5B               	movwf	vfprintf@ap+1,c
   718  001326  EC4E  F009         	call	_vfprintf	;wreg free
   719  00132A  506A               	movf	sprintf@f+2,w,c
   720  00132C  245E               	addwf	sprintf@s,w,c
   721  00132E  6ED9               	movwf	fsr2l,c
   722  001330  506B               	movf	sprintf@f+3,w,c
   723  001332  205F               	addwfc	sprintf@s+1,w,c
   724  001334  6EDA               	movwf	fsr2h,c
   725  001336  0E00               	movlw	0
   726  001338  6EDF               	movwf	indf2,c
   727  00133A  0012               	return		;funcret
   728  00133C                     __end_of_sprintf:
   729                           	opt callstack 0
   730                           
   731 ;; *************** function _vfprintf *****************
   732 ;; Defined at:
   733 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
   734 ;; Parameters:    Size  Location     Type
   735 ;;  fp              2   85[COMRAM] PTR struct _IO_FILE
   736 ;;		 -> sprintf@f(6), 
   737 ;;  fmt             2   87[COMRAM] PTR const unsigned char 
   738 ;;		 -> STR_3(5), 
   739 ;;  ap              2   89[COMRAM] PTR PTR void 
   740 ;;		 -> sprintf@ap(2), 
   741 ;; Auto vars:     Size  Location     Type
   742 ;;  cfmt            2   91[COMRAM] PTR unsigned char 
   743 ;;		 -> STR_3(5), 
   744 ;; Return value:  Size  Location     Type
   745 ;;                  2   85[COMRAM] int 
   746 ;; Registers used:
   747 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   748 ;; Tracked objects:
   749 ;;		On entry : 0/0
   750 ;;		On exit  : 0/0
   751 ;;		Unchanged: 0/0
   752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   753 ;;      Params:         6       0       0       0       0       0       0
   754 ;;      Locals:         2       0       0       0       0       0       0
   755 ;;      Temps:          0       0       0       0       0       0       0
   756 ;;      Totals:         8       0       0       0       0       0       0
   757 ;;Total ram usage:        8 bytes
   758 ;; Hardware stack levels used:    1
   759 ;; Hardware stack levels required when called:    7
   760 ;; This function calls:
   761 ;;		_vfpfcnvrt
   762 ;; This function is called by:
   763 ;;		_sprintf
   764 ;; This function uses a non-reentrant model
   765 ;;
   766                           
   767                           	psect	text2
   768  00129C                     __ptext2:
   769                           	opt callstack 0
   770  00129C                     _vfprintf:
   771                           	opt callstack 22
   772                           
   773                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.05\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
   774                           
   775                           ;incstack = 0
   776  00129C  C058  F05C         	movff	vfprintf@fmt,vfprintf@cfmt
   777  0012A0  C059  F05D         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
   778                           
   779                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
   780  0012A4  0E00               	movlw	0
   781  0012A6  6E71               	movwf	_nout+1,c
   782  0012A8  0E00               	movlw	0
   783  0012AA  6E70               	movwf	_nout,c
   784                           
   785                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
   786  0012AC  D012               	goto	l1870
   787  0012AE                     l1868:
   788                           
   789                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
   790  0012AE  C056  F040         	movff	vfprintf@fp,vfpfcnvrt@fp
   791  0012B2  C057  F041         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
   792  0012B6  0E5C               	movlw	low vfprintf@cfmt
   793  0012B8  6E42               	movwf	vfpfcnvrt@fmt,c
   794  0012BA  0E00               	movlw	high vfprintf@cfmt
   795  0012BC  6E43               	movwf	vfpfcnvrt@fmt+1,c
   796  0012BE  C05A  F044         	movff	vfprintf@ap,vfpfcnvrt@ap
   797  0012C2  C05B  F045         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
   798  0012C6  EC09  F003         	call	_vfpfcnvrt	;wreg free
   799  0012CA  5040               	movf	?_vfpfcnvrt,w,c
   800  0012CC  2670               	addwf	_nout,f,c
   801  0012CE  5041               	movf	?_vfpfcnvrt+1,w,c
   802  0012D0  2271               	addwfc	_nout+1,f,c
   803  0012D2                     l1870:
   804                           
   805                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
   806  0012D2  C05C  FFF6         	movff	vfprintf@cfmt,tblptrl
   807  0012D6  C05D  FFF7         	movff	vfprintf@cfmt+1,tblptrh
   808  0012DA                     	if	0	;tblptru may be non-zero
   809  0012DA                     	endif
   810  0012DA                     	if	0	;tblptru may be non-zero
   811  0012DA                     	endif
   812  0012DA  0008               	tblrd		*
   813  0012DC  50F5               	movf	tablat,w,c
   814  0012DE  0900               	iorlw	0
   815  0012E0  A4D8               	btfss	status,2,c
   816  0012E2  D7E5               	goto	l1868
   817                           
   818                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
   819  0012E4  C070  F056         	movff	_nout,?_vfprintf
   820  0012E8  C071  F057         	movff	_nout+1,?_vfprintf+1
   821  0012EC  0012               	return		;funcret
   822  0012EE                     __end_of_vfprintf:
   823                           	opt callstack 0
   824                           
   825 ;; *************** function _vfpfcnvrt *****************
   826 ;; Defined at:
   827 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
   828 ;; Parameters:    Size  Location     Type
   829 ;;  fp              2   63[COMRAM] PTR struct _IO_FILE
   830 ;;		 -> sprintf@f(6), 
   831 ;;  fmt             2   65[COMRAM] PTR PTR unsigned char 
   832 ;;		 -> vfprintf@cfmt(2), 
   833 ;;  ap              2   67[COMRAM] PTR PTR void 
   834 ;;		 -> sprintf@ap(2), 
   835 ;; Auto vars:     Size  Location     Type
   836 ;;  ll              8   73[COMRAM] long long 
   837 ;;  llu             8    0        unsigned long long 
   838 ;;  f               4    0        unsigned long long 
   839 ;;  vp              3    0        PTR void 
   840 ;;  ct              3    0        unsigned char [3]
   841 ;;  cp              3    0        PTR unsigned char 
   842 ;;  done            2   81[COMRAM] int 
   843 ;;  i               2    0        int 
   844 ;;  c               1    0        unsigned char 
   845 ;; Return value:  Size  Location     Type
   846 ;;                  2   63[COMRAM] int 
   847 ;; Registers used:
   848 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   849 ;; Tracked objects:
   850 ;;		On entry : 0/0
   851 ;;		On exit  : 0/0
   852 ;;		Unchanged: 0/0
   853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   854 ;;      Params:         6       0       0       0       0       0       0
   855 ;;      Locals:        12       0       0       0       0       0       0
   856 ;;      Temps:          4       0       0       0       0       0       0
   857 ;;      Totals:        22       0       0       0       0       0       0
   858 ;;Total ram usage:       22 bytes
   859 ;; Hardware stack levels used:    1
   860 ;; Hardware stack levels required when called:    6
   861 ;; This function calls:
   862 ;;		_atoi
   863 ;;		_dtoa
   864 ;;		_fputc
   865 ;;		_isdigit
   866 ;; This function is called by:
   867 ;;		_vfprintf
   868 ;; This function uses a non-reentrant model
   869 ;;
   870                           
   871                           	psect	text3
   872  000612                     __ptext3:
   873                           	opt callstack 0
   874  000612                     _vfpfcnvrt:
   875                           	opt callstack 22
   876                           
   877                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 674:     long long ll;
   878                           
   879                           ;incstack = 0
   880  000612  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   881  000616  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   882  00061A  CFDE FFF6          	movff	postinc2,tblptrl
   883  00061E  CFDD FFF7          	movff	postdec2,tblptrh
   884  000622                     	if	0	;tblptru may be non-zero
   885  000622                     	endif
   886  000622                     	if	0	;tblptru may be non-zero
   887  000622                     	endif
   888  000622  0008               	tblrd		*
   889  000624  50F5               	movf	tablat,w,c
   890  000626  0A25               	xorlw	37
   891  000628  A4D8               	btfss	status,2,c
   892  00062A  D143               	goto	l1844
   893                           
   894                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
   895  00062C  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   896  000630  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   897  000634  2ADE               	incf	postinc2,f,c
   898  000636  0E00               	movlw	0
   899  000638  22DD               	addwfc	postdec2,f,c
   900                           
   901                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
   902  00063A  0E00               	movlw	0
   903  00063C  6E73               	movwf	_width+1,c
   904  00063E  0E00               	movlw	0
   905  000640  6E72               	movwf	_width,c
   906  000642  C072  F076         	movff	_width,_flags
   907  000646  C073  F077         	movff	_width+1,_flags+1
   908                           
   909                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
   910  00064A  6874               	setf	_prec,c
   911  00064C  6875               	setf	_prec+1,c
   912                           
   913                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 688:       
      +                            done = 0;
   914  00064E  0E00               	movlw	0
   915  000650  6E53               	movwf	vfpfcnvrt@done+1,c
   916  000652  0E00               	movlw	0
   917  000654  D014               	goto	L1
   918  000656                     l1770:
   919                           
   920                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 692:       
      +                                        flags |= (1 << 0);
   921  000656  8076               	bsf	_flags,0,c
   922  000658                     l1772:
   923                           
   924                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 693:       
      +                                        ++*fmt;
   925  000658  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   926  00065C  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   927  000660  2ADE               	incf	postinc2,f,c
   928  000662  0E00               	movlw	0
   929  000664  22DD               	addwfc	postdec2,f,c
   930                           
   931                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 694:       
      +                                        break;
   932  000666  D02E               	goto	l1796
   933  000668                     l1774:
   934                           
   935                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 696:       
      +                                        flags |= (1 << 1);
   936  000668  8276               	bsf	_flags,1,c
   937  00066A  D7F6               	goto	l1772
   938  00066C                     l1778:
   939                           
   940                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 700:       
      +                                        flags |= (1 << 2);
   941  00066C  8476               	bsf	_flags,2,c
   942  00066E  D7F4               	goto	l1772
   943  000670                     l1782:
   944                           
   945                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 704:       
      +                                        flags |= (1 << 3);
   946  000670  8676               	bsf	_flags,3,c
   947  000672  D7F2               	goto	l1772
   948  000674                     l1786:
   949                           
   950                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 708:       
      +                                        flags |= (1 << 4);
   951  000674  8876               	bsf	_flags,4,c
   952  000676  D7F0               	goto	l1772
   953  000678                     l1790:
   954                           
   955                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 712:       
      +                                        done = 1;
   956  000678  0E00               	movlw	0
   957  00067A  6E53               	movwf	vfpfcnvrt@done+1,c
   958  00067C  0E01               	movlw	1
   959  00067E                     L1:
   960  00067E  6E52               	movwf	vfpfcnvrt@done,c
   961                           
   962                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 713:       
      +                                        break;
   963  000680  D021               	goto	l1796
   964  000682                     l1794:
   965  000682  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   966  000686  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   967  00068A  CFDE FFF6          	movff	postinc2,tblptrl
   968  00068E  CFDD FFF7          	movff	postdec2,tblptrh
   969  000692                     	if	0	;tblptru may be non-zero
   970  000692                     	endif
   971  000692                     	if	0	;tblptru may be non-zero
   972  000692                     	endif
   973  000692  0008               	tblrd		*
   974  000694  50F5               	movf	tablat,w,c
   975  000696  6E46               	movwf	??_vfpfcnvrt& (0+255),c
   976  000698  6A47               	clrf	(??_vfpfcnvrt+1)& (0+255),c
   977                           
   978                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   979                           ; Switch size 1, requested type "simple"
   980                           ; Number of cases is 1, Range of values is 0 to 0
   981                           ; switch strategies available:
   982                           ; Name         Instructions Cycles
   983                           ; simple_byte            4     3 (average)
   984                           ;	Chosen strategy is simple_byte
   985  00069A  5047               	movf	??_vfpfcnvrt+1,w,c
   986  00069C  0A00               	xorlw	0	; case 0
   987  00069E  A4D8               	btfss	status,2,c
   988  0006A0  D7EB               	goto	l1790
   989                           
   990                           ; Switch size 1, requested type "simple"
   991                           ; Number of cases is 5, Range of values is 32 to 48
   992                           ; switch strategies available:
   993                           ; Name         Instructions Cycles
   994                           ; simple_byte           16     9 (average)
   995                           ;	Chosen strategy is simple_byte
   996  0006A2  5046               	movf	??_vfpfcnvrt,w,c
   997  0006A4  0A20               	xorlw	32	; case 32
   998  0006A6  B4D8               	btfsc	status,2,c
   999  0006A8  D7E3               	goto	l1782
  1000  0006AA  0A03               	xorlw	3	; case 35
  1001  0006AC  B4D8               	btfsc	status,2,c
  1002  0006AE  D7E2               	goto	l1786
  1003  0006B0  0A08               	xorlw	8	; case 43
  1004  0006B2  B4D8               	btfsc	status,2,c
  1005  0006B4  D7DB               	goto	l1778
  1006  0006B6  0A06               	xorlw	6	; case 45
  1007  0006B8  B4D8               	btfsc	status,2,c
  1008  0006BA  D7CD               	goto	l1770
  1009  0006BC  0A1D               	xorlw	29	; case 48
  1010  0006BE  B4D8               	btfsc	status,2,c
  1011  0006C0  D7D3               	goto	l1774
  1012  0006C2  D7DA               	goto	l1790
  1013  0006C4                     l1796:
  1014                           
  1015                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 689:       
      +                            while (!done) {
  1016  0006C4  5052               	movf	vfpfcnvrt@done,w,c
  1017  0006C6  1053               	iorwf	vfpfcnvrt@done+1,w,c
  1018  0006C8  B4D8               	btfsc	status,2,c
  1019  0006CA  D7DB               	goto	l1794
  1020                           
  1021                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 716:       
      +                            if (flags & (1 << 0)) {
  1022  0006CC  B076               	btfsc	_flags,0,c
  1023                           
  1024                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 717:       
      +                                flags &= ~(1 << 1);
  1025  0006CE  9276               	bcf	_flags,1,c
  1026                           
  1027                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 723:       
      +                            if ((*fmt)[0] == '*') {
  1028  0006D0  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1029  0006D4  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1030  0006D8  CFDE FFF6          	movff	postinc2,tblptrl
  1031  0006DC  CFDD FFF7          	movff	postdec2,tblptrh
  1032  0006E0                     	if	0	;tblptru may be non-zero
  1033  0006E0                     	endif
  1034  0006E0                     	if	0	;tblptru may be non-zero
  1035  0006E0                     	endif
  1036  0006E0  0008               	tblrd		*
  1037  0006E2  50F5               	movf	tablat,w,c
  1038  0006E4  0A2A               	xorlw	42
  1039  0006E6  A4D8               	btfss	status,2,c
  1040  0006E8  D023               	goto	l1808
  1041                           
  1042                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 724:       
      +                                ++*fmt;
  1043  0006EA  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1044  0006EE  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1045  0006F2  2ADE               	incf	postinc2,f,c
  1046  0006F4  0E00               	movlw	0
  1047  0006F6  22DD               	addwfc	postdec2,f,c
  1048                           
  1049                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 725:       
      +                                width = (*(int *)__va_arg(*(int **)ap, (int)0));
  1050  0006F8  C044  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1051  0006FC  C045  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1052  000700  CFDF F046          	movff	indf2,??_vfpfcnvrt
  1053  000704  0E02               	movlw	2
  1054  000706  26DE               	addwf	postinc2,f,c
  1055  000708  CFDF F047          	movff	indf2,??_vfpfcnvrt+1
  1056  00070C  0E00               	movlw	0
  1057  00070E  22DD               	addwfc	postdec2,f,c
  1058  000710  C046  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1059  000714  C047  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1060  000718  CFDE F072          	movff	postinc2,_width
  1061  00071C  CFDD F073          	movff	postdec2,_width+1
  1062                           
  1063                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 726:       
      +                                if (width < 0) {
  1064  000720  AE73               	btfss	_width+1,7,c
  1065  000722  D03F               	goto	u1320
  1066                           
  1067                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 727:       
      +                                    flags |= (1 << 0);
  1068  000724  8076               	bsf	_flags,0,c
  1069                           
  1070                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 728:       
      +                                    width = -width;
  1071  000726  6C72               	negf	_width,c
  1072  000728  1E73               	comf	_width+1,f,c
  1073  00072A  B0D8               	btfsc	status,0,c
  1074  00072C  2A73               	incf	_width+1,f,c
  1075  00072E  D039               	goto	u1320
  1076  000730                     l1808:
  1077                           
  1078                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 731:       
      +                                width = atoi(*fmt);
  1079  000730  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1080  000734  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1081  000738  CFDE F008          	movff	postinc2,atoi@s
  1082  00073C  CFDD F009          	movff	postdec2,atoi@s+1
  1083  000740  EC38  F006         	call	_atoi	;wreg free
  1084  000744  C008  F072         	movff	?_atoi,_width
  1085  000748  C009  F073         	movff	?_atoi+1,_width+1
  1086                           
  1087                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 732:       
      +                                while ((0 ? isdigit((*fmt)[0]) : ((unsigned)((*fmt)[0])-'0') < 10)) {
  1088  00074C  D007               	goto	l1812
  1089  00074E                     l1810:
  1090                           
  1091                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 733:       
      +                                    ++*fmt;
  1092  00074E  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1093  000752  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1094  000756  2ADE               	incf	postinc2,f,c
  1095  000758  0E00               	movlw	0
  1096  00075A  22DD               	addwfc	postdec2,f,c
  1097  00075C                     l1812:
  1098  00075C  0ED0               	movlw	208
  1099  00075E  6E46               	movwf	??_vfpfcnvrt& (0+255),c
  1100  000760  0EFF               	movlw	255
  1101  000762  6E47               	movwf	(??_vfpfcnvrt+1)& (0+255),c
  1102  000764  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1103  000768  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1104  00076C  CFDE FFF6          	movff	postinc2,tblptrl
  1105  000770  CFDD FFF7          	movff	postdec2,tblptrh
  1106  000774                     	if	0	;tblptru may be non-zero
  1107  000774                     	endif
  1108  000774                     	if	0	;tblptru may be non-zero
  1109  000774                     	endif
  1110  000774  0008               	tblrd		*
  1111  000776  50F5               	movf	tablat,w,c
  1112  000778  6E48               	movwf	(??_vfpfcnvrt+2)& (0+255),c
  1113  00077A  6A49               	clrf	(??_vfpfcnvrt+3)& (0+255),c
  1114  00077C  5046               	movf	??_vfpfcnvrt,w,c
  1115  00077E  2648               	addwf	??_vfpfcnvrt+2,f,c
  1116  000780  5047               	movf	??_vfpfcnvrt+1,w,c
  1117  000782  2249               	addwfc	??_vfpfcnvrt+3,f,c
  1118  000784  5049               	movf	??_vfpfcnvrt+3,w,c
  1119  000786  E106               	bnz	u1300
  1120  000788  0E0A               	movlw	10
  1121  00078A  5C48               	subwf	??_vfpfcnvrt+2,w,c
  1122  00078C  B0D8               	btfsc	status,0,c
  1123  00078E  D002               	goto	u1300
  1124  000790  0E01               	movlw	1
  1125  000792  D001               	goto	u1310
  1126  000794                     u1300:
  1127  000794  0E00               	movlw	0
  1128  000796                     u1310:
  1129  000796  6E54               	movwf	_vfpfcnvrt$489,c
  1130  000798  6A55               	clrf	_vfpfcnvrt$489+1,c
  1131  00079A  5054               	movf	_vfpfcnvrt$489,w,c
  1132  00079C  1055               	iorwf	_vfpfcnvrt$489+1,w,c
  1133  00079E  A4D8               	btfss	status,2,c
  1134  0007A0  D7D6               	goto	l1810
  1135  0007A2                     u1320:
  1136                           
  1137                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 825:       
      +                            if ((*fmt[0] == 'd') || (*fmt[0] == 'i')) {
  1138  0007A2  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1139  0007A6  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1140  0007AA  CFDE FFF6          	movff	postinc2,tblptrl
  1141  0007AE  CFDD FFF7          	movff	postdec2,tblptrh
  1142  0007B2                     	if	0	;tblptru may be non-zero
  1143  0007B2                     	endif
  1144  0007B2                     	if	0	;tblptru may be non-zero
  1145  0007B2                     	endif
  1146  0007B2  0008               	tblrd		*
  1147  0007B4  50F5               	movf	tablat,w,c
  1148  0007B6  0A64               	xorlw	100
  1149  0007B8  B4D8               	btfsc	status,2,c
  1150  0007BA  D00D               	goto	u1340
  1151  0007BC  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1152  0007C0  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1153  0007C4  CFDE FFF6          	movff	postinc2,tblptrl
  1154  0007C8  CFDD FFF7          	movff	postdec2,tblptrh
  1155  0007CC                     	if	0	;tblptru may be non-zero
  1156  0007CC                     	endif
  1157  0007CC                     	if	0	;tblptru may be non-zero
  1158  0007CC                     	endif
  1159  0007CC  0008               	tblrd		*
  1160  0007CE  50F5               	movf	tablat,w,c
  1161  0007D0  0A69               	xorlw	105
  1162  0007D2  A4D8               	btfss	status,2,c
  1163  0007D4  D03F               	goto	l1828
  1164  0007D6                     u1340:
  1165                           
  1166                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 827:       
      +                                ++*fmt;
  1167  0007D6  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1168  0007DA  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1169  0007DE  2ADE               	incf	postinc2,f,c
  1170  0007E0  0E00               	movlw	0
  1171  0007E2  22DD               	addwfc	postdec2,f,c
  1172                           
  1173                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 828:       
      +                                ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  1174  0007E4  C044  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1175  0007E8  C045  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1176  0007EC  CFDF F046          	movff	indf2,??_vfpfcnvrt
  1177  0007F0  0E02               	movlw	2
  1178  0007F2  26DE               	addwf	postinc2,f,c
  1179  0007F4  CFDF F047          	movff	indf2,??_vfpfcnvrt+1
  1180  0007F8  0E00               	movlw	0
  1181  0007FA  22DD               	addwfc	postdec2,f,c
  1182  0007FC  C046  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1183  000800  C047  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1184  000804  CFDE F04A          	movff	postinc2,vfpfcnvrt@ll
  1185  000808  CFDD F04B          	movff	postdec2,vfpfcnvrt@ll+1
  1186  00080C  0E00               	movlw	0
  1187  00080E  BE4B               	btfsc	vfpfcnvrt@ll+1,7,c
  1188  000810  0EFF               	movlw	-1
  1189  000812  6E4C               	movwf	vfpfcnvrt@ll+2,c
  1190  000814  6E4D               	movwf	vfpfcnvrt@ll+3,c
  1191  000816  6E4E               	movwf	vfpfcnvrt@ll+4,c
  1192  000818  6E4F               	movwf	vfpfcnvrt@ll+5,c
  1193  00081A  6E50               	movwf	vfpfcnvrt@ll+6,c
  1194  00081C  6E51               	movwf	vfpfcnvrt@ll+7,c
  1195                           
  1196                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 830:       
      +                                return dtoa(fp, ll);
  1197  00081E  C040  F01C         	movff	vfpfcnvrt@fp,dtoa@fp
  1198  000822  C041  F01D         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  1199  000826  C04A  F01E         	movff	vfpfcnvrt@ll,dtoa@d
  1200  00082A  C04B  F01F         	movff	vfpfcnvrt@ll+1,dtoa@d+1
  1201  00082E  C04C  F020         	movff	vfpfcnvrt@ll+2,dtoa@d+2
  1202  000832  C04D  F021         	movff	vfpfcnvrt@ll+3,dtoa@d+3
  1203  000836  C04E  F022         	movff	vfpfcnvrt@ll+4,dtoa@d+4
  1204  00083A  C04F  F023         	movff	vfpfcnvrt@ll+5,dtoa@d+5
  1205  00083E  C050  F024         	movff	vfpfcnvrt@ll+6,dtoa@d+6
  1206  000842  C051  F025         	movff	vfpfcnvrt@ll+7,dtoa@d+7
  1207  000846  EC73  F004         	call	_dtoa	;wreg free
  1208  00084A  C01C  F040         	movff	?_dtoa,?_vfpfcnvrt
  1209  00084E  C01D  F041         	movff	?_dtoa+1,?_vfpfcnvrt+1
  1210  000852  0012               	return	
  1211  000854                     l1828:
  1212                           
  1213                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
  1214  000854  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1215  000858  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1216  00085C  CFDE FFF6          	movff	postinc2,tblptrl
  1217  000860  CFDD FFF7          	movff	postdec2,tblptrh
  1218  000864                     	if	0	;tblptru may be non-zero
  1219  000864                     	endif
  1220  000864                     	if	0	;tblptru may be non-zero
  1221  000864                     	endif
  1222  000864  0008               	tblrd		*
  1223  000866  50F5               	movf	tablat,w,c
  1224  000868  0A25               	xorlw	37
  1225  00086A  A4D8               	btfss	status,2,c
  1226  00086C  D016               	goto	l1838
  1227                           
  1228                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
  1229  00086E  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1230  000872  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1231  000876  2ADE               	incf	postinc2,f,c
  1232  000878  0E00               	movlw	0
  1233  00087A  22DD               	addwfc	postdec2,f,c
  1234                           
  1235                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
  1236  00087C  0E00               	movlw	0
  1237  00087E  6E02               	movwf	fputc@c+1,c
  1238  000880  0E25               	movlw	37
  1239  000882  6E01               	movwf	fputc@c,c
  1240  000884  C040  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1241  000888  C041  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1242  00088C  EC2D  F008         	call	_fputc	;wreg free
  1243  000890                     l1834:
  1244                           
  1245                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
  1246  000890  0E00               	movlw	0
  1247  000892  6E41               	movwf	?_vfpfcnvrt+1,c
  1248  000894  0E01               	movlw	1
  1249  000896  6E40               	movwf	?_vfpfcnvrt,c
  1250  000898  0012               	return	
  1251  00089A                     l1838:
  1252                           
  1253                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
  1254  00089A  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1255  00089E  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1256  0008A2  2ADE               	incf	postinc2,f,c
  1257  0008A4  0E00               	movlw	0
  1258  0008A6  22DD               	addwfc	postdec2,f,c
  1259                           
  1260                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
  1261  0008A8  0E00               	movlw	0
  1262  0008AA  6E41               	movwf	?_vfpfcnvrt+1,c
  1263  0008AC  0E00               	movlw	0
  1264  0008AE  6E40               	movwf	?_vfpfcnvrt,c
  1265  0008B0  0012               	return	
  1266  0008B2                     l1844:
  1267                           
  1268                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
  1269  0008B2  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1270  0008B6  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1271  0008BA  CFDE FFF6          	movff	postinc2,tblptrl
  1272  0008BE  CFDD FFF7          	movff	postdec2,tblptrh
  1273  0008C2                     	if	0	;tblptru may be non-zero
  1274  0008C2                     	endif
  1275  0008C2                     	if	0	;tblptru may be non-zero
  1276  0008C2                     	endif
  1277  0008C2  0008               	tblrd		*
  1278  0008C4  50F5               	movf	tablat,w,c
  1279  0008C6  6E01               	movwf	fputc@c,c
  1280  0008C8  6A02               	clrf	fputc@c+1,c
  1281  0008CA  C040  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1282  0008CE  C041  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1283  0008D2  EC2D  F008         	call	_fputc	;wreg free
  1284                           
  1285                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
  1286  0008D6  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1287  0008DA  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1288  0008DE  2ADE               	incf	postinc2,f,c
  1289  0008E0  0E00               	movlw	0
  1290  0008E2  22DD               	addwfc	postdec2,f,c
  1291  0008E4  D7D5               	goto	l1834
  1292  0008E6                     __end_of_vfpfcnvrt:
  1293                           	opt callstack 0
  1294                           
  1295 ;; *************** function _dtoa *****************
  1296 ;; Defined at:
  1297 ;;		line 274 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1298 ;; Parameters:    Size  Location     Type
  1299 ;;  fp              2   27[COMRAM] PTR struct _IO_FILE
  1300 ;;		 -> sprintf@f(6), 
  1301 ;;  d               8   29[COMRAM] long long 
  1302 ;; Auto vars:     Size  Location     Type
  1303 ;;  n               8   53[COMRAM] long long 
  1304 ;;  i               2   61[COMRAM] int 
  1305 ;;  s               2   51[COMRAM] int 
  1306 ;;  w               2   49[COMRAM] int 
  1307 ;;  p               2   47[COMRAM] int 
  1308 ;; Return value:  Size  Location     Type
  1309 ;;                  2   27[COMRAM] int 
  1310 ;; Registers used:
  1311 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1312 ;; Tracked objects:
  1313 ;;		On entry : 0/0
  1314 ;;		On exit  : 0/0
  1315 ;;		Unchanged: 0/0
  1316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1317 ;;      Params:        10       0       0       0       0       0       0
  1318 ;;      Locals:        18       0       0       0       0       0       0
  1319 ;;      Temps:          8       0       0       0       0       0       0
  1320 ;;      Totals:        36       0       0       0       0       0       0
  1321 ;;Total ram usage:       36 bytes
  1322 ;; Hardware stack levels used:    1
  1323 ;; Hardware stack levels required when called:    5
  1324 ;; This function calls:
  1325 ;;		___aodiv
  1326 ;;		___aomod
  1327 ;;		_abs
  1328 ;;		_pad
  1329 ;; This function is called by:
  1330 ;;		_vfpfcnvrt
  1331 ;; This function uses a non-reentrant model
  1332 ;;
  1333                           
  1334                           	psect	text4
  1335  0008E6                     __ptext4:
  1336                           	opt callstack 0
  1337  0008E6                     _dtoa:
  1338                           	opt callstack 22
  1339                           
  1340                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 274: static
      +                           int dtoa(FILE *fp, long long d);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\
      +                          c99\common\doprnt.c: 275: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\c
      +                          ommon\doprnt.c: 276:     int i, p, s, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\
      +                          sources\c99\common\doprnt.c: 277:     long long n;;C:\Program Files (x86)\Microchip\xc8\
      +                          v2.05\pic\sources\c99\common\doprnt.c: 280:     n = d;
  1341                           
  1342                           ;incstack = 0
  1343  0008E6  C01E  F036         	movff	dtoa@d,dtoa@n
  1344  0008EA  C01F  F037         	movff	dtoa@d+1,dtoa@n+1
  1345  0008EE  C020  F038         	movff	dtoa@d+2,dtoa@n+2
  1346  0008F2  C021  F039         	movff	dtoa@d+3,dtoa@n+3
  1347  0008F6  C022  F03A         	movff	dtoa@d+4,dtoa@n+4
  1348  0008FA  C023  F03B         	movff	dtoa@d+5,dtoa@n+5
  1349  0008FE  C024  F03C         	movff	dtoa@d+6,dtoa@n+6
  1350  000902  C025  F03D         	movff	dtoa@d+7,dtoa@n+7
  1351                           
  1352                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 281:     s 
      +                          = n < 0 ? 1 : 0;
  1353  000906  AE3D               	btfss	dtoa@n+7,7,c
  1354  000908  D002               	goto	u1030
  1355  00090A  0E01               	movlw	1
  1356  00090C  D001               	goto	u1040
  1357  00090E                     u1030:
  1358  00090E  0E00               	movlw	0
  1359  000910                     u1040:
  1360  000910  6E34               	movwf	dtoa@s,c
  1361  000912  6A35               	clrf	dtoa@s+1,c
  1362                           
  1363                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 282:     if
      +                           (s) {
  1364  000914  5034               	movf	dtoa@s,w,c
  1365  000916  1035               	iorwf	dtoa@s+1,w,c
  1366  000918  B4D8               	btfsc	status,2,c
  1367  00091A  D010               	goto	l1642
  1368                           
  1369                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 283:       
      +                            n = -n;
  1370  00091C  1E3D               	comf	dtoa@n+7,f,c
  1371  00091E  1E3C               	comf	dtoa@n+6,f,c
  1372  000920  1E3B               	comf	dtoa@n+5,f,c
  1373  000922  1E3A               	comf	dtoa@n+4,f,c
  1374  000924  1E39               	comf	dtoa@n+3,f,c
  1375  000926  1E38               	comf	dtoa@n+2,f,c
  1376  000928  1E37               	comf	dtoa@n+1,f,c
  1377  00092A  6C36               	negf	dtoa@n,c
  1378  00092C  0E00               	movlw	0
  1379  00092E  2237               	addwfc	dtoa@n+1,f,c
  1380  000930  2238               	addwfc	dtoa@n+2,f,c
  1381  000932  2239               	addwfc	dtoa@n+3,f,c
  1382  000934  223A               	addwfc	dtoa@n+4,f,c
  1383  000936  223B               	addwfc	dtoa@n+5,f,c
  1384  000938  223C               	addwfc	dtoa@n+6,f,c
  1385  00093A  223D               	addwfc	dtoa@n+7,f,c
  1386  00093C                     l1642:
  1387                           
  1388                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 287:     if
      +                           (!(prec < 0)) {
  1389  00093C  AE75               	btfss	_prec+1,7,c
  1390                           
  1391                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 288:       
      +                            flags &= ~(1 << 1);
  1392  00093E  9276               	bcf	_flags,1,c
  1393                           
  1394                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 290:     p 
      +                          = (0 < prec) ? prec : 1;
  1395  000940  BE75               	btfsc	_prec+1,7,c
  1396  000942  D005               	goto	u1070
  1397  000944  5075               	movf	_prec+1,w,c
  1398  000946  E108               	bnz	l128
  1399  000948  0474               	decf	_prec,w,c
  1400  00094A  B0D8               	btfsc	status,0,c
  1401  00094C  D005               	goto	l128
  1402  00094E                     u1070:
  1403  00094E  0E00               	movlw	0
  1404  000950  6E31               	movwf	dtoa@p+1,c
  1405  000952  0E01               	movlw	1
  1406  000954  6E30               	movwf	dtoa@p,c
  1407  000956  D004               	goto	l130
  1408  000958                     l128:
  1409  000958  C074  F030         	movff	_prec,dtoa@p
  1410  00095C  C075  F031         	movff	_prec+1,dtoa@p+1
  1411  000960                     l130:
  1412                           
  1413                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 291:     w 
      +                          = width;
  1414  000960  C072  F032         	movff	_width,dtoa@w
  1415  000964  C073  F033         	movff	_width+1,dtoa@w+1
  1416                           
  1417                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 292:     if
      +                           (s || (flags & (1 << 2))) {
  1418  000968  5034               	movf	dtoa@s,w,c
  1419  00096A  1035               	iorwf	dtoa@s+1,w,c
  1420  00096C  A4D8               	btfss	status,2,c
  1421  00096E  D002               	goto	u1090
  1422  000970  A476               	btfss	_flags,2,c
  1423  000972  D003               	goto	l1656
  1424  000974                     u1090:
  1425                           
  1426                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 293:       
      +                            --w;
  1427  000974  0632               	decf	dtoa@w,f,c
  1428  000976  A0D8               	btfss	status,0,c
  1429  000978  0633               	decf	dtoa@w+1,f,c
  1430  00097A                     l1656:
  1431                           
  1432                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 297:     i 
      +                          = sizeof(dbuf) - 1;
  1433  00097A  0E00               	movlw	0
  1434  00097C  6E3F               	movwf	dtoa@i+1,c
  1435  00097E  0E1F               	movlw	31
  1436  000980  6E3E               	movwf	dtoa@i,c
  1437                           
  1438                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 298:     db
      +                          uf[i] = '\0';
  1439  000982  0E00               	movlw	0
  1440  000984  0100               	movlb	0	; () banked
  1441  000986  6F9F               	movwf	(_dbuf+31)& (0+255),b
  1442                           
  1443                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1444  000988  D07C               	goto	l1670
  1445  00098A                     l1660:
  1446                           
  1447                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 300:       
      +                            --i;
  1448  00098A  063E               	decf	dtoa@i,f,c
  1449  00098C  A0D8               	btfss	status,0,c
  1450  00098E  063F               	decf	dtoa@i+1,f,c
  1451                           
  1452                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 301:       
      +                            dbuf[i] = '0' + abs(n % 10);
  1453  000990  0E80               	movlw	low _dbuf
  1454  000992  243E               	addwf	dtoa@i,w,c
  1455  000994  6ED9               	movwf	fsr2l,c
  1456  000996  0E00               	movlw	high _dbuf
  1457  000998  203F               	addwfc	dtoa@i+1,w,c
  1458  00099A  6EDA               	movwf	fsr2h,c
  1459  00099C  C036  F001         	movff	dtoa@n,___aomod@dividend
  1460  0009A0  C037  F002         	movff	dtoa@n+1,___aomod@dividend+1
  1461  0009A4  C038  F003         	movff	dtoa@n+2,___aomod@dividend+2
  1462  0009A8  C039  F004         	movff	dtoa@n+3,___aomod@dividend+3
  1463  0009AC  C03A  F005         	movff	dtoa@n+4,___aomod@dividend+4
  1464  0009B0  C03B  F006         	movff	dtoa@n+5,___aomod@dividend+5
  1465  0009B4  C03C  F007         	movff	dtoa@n+6,___aomod@dividend+6
  1466  0009B8  C03D  F008         	movff	dtoa@n+7,___aomod@dividend+7
  1467  0009BC  0E0A               	movlw	10
  1468  0009BE  6E09               	movwf	___aomod@divisor,c
  1469  0009C0  0E00               	movlw	0
  1470  0009C2  6E0A               	movwf	___aomod@divisor+1,c
  1471  0009C4  0E00               	movlw	0
  1472  0009C6  6E0B               	movwf	___aomod@divisor+2,c
  1473  0009C8  0E00               	movlw	0
  1474  0009CA  6E0C               	movwf	___aomod@divisor+3,c
  1475  0009CC  0E00               	movlw	0
  1476  0009CE  6E0D               	movwf	___aomod@divisor+4,c
  1477  0009D0  0E00               	movlw	0
  1478  0009D2  6E0E               	movwf	___aomod@divisor+5,c
  1479  0009D4  0E00               	movlw	0
  1480  0009D6  6E0F               	movwf	___aomod@divisor+6,c
  1481  0009D8  0E00               	movlw	0
  1482  0009DA  6E10               	movwf	___aomod@divisor+7,c
  1483  0009DC  ECD8  F006         	call	___aomod	;wreg free
  1484  0009E0  C001  F026         	movff	?___aomod,??_dtoa
  1485  0009E4  C002  F027         	movff	?___aomod+1,??_dtoa+1
  1486  0009E8  C003  F028         	movff	?___aomod+2,??_dtoa+2
  1487  0009EC  C004  F029         	movff	?___aomod+3,??_dtoa+3
  1488  0009F0  C005  F02A         	movff	?___aomod+4,??_dtoa+4
  1489  0009F4  C006  F02B         	movff	?___aomod+5,??_dtoa+5
  1490  0009F8  C007  F02C         	movff	?___aomod+6,??_dtoa+6
  1491  0009FC  C008  F02D         	movff	?___aomod+7,??_dtoa+7
  1492  000A00  C026  F013         	movff	??_dtoa,abs@a
  1493  000A04  C028  F014         	movff	??_dtoa+2,abs@a+1
  1494  000A08  ECD9  F009         	call	_abs	;wreg free
  1495  000A0C  5013               	movf	?_abs,w,c
  1496  000A0E  0F30               	addlw	48
  1497  000A10  6EDF               	movwf	indf2,c
  1498                           
  1499                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 302:       
      +                            --p;
  1500  000A12  0630               	decf	dtoa@p,f,c
  1501  000A14  A0D8               	btfss	status,0,c
  1502  000A16  0631               	decf	dtoa@p+1,f,c
  1503                           
  1504                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 303:       
      +                            --w;
  1505  000A18  0632               	decf	dtoa@w,f,c
  1506  000A1A  A0D8               	btfss	status,0,c
  1507  000A1C  0633               	decf	dtoa@w+1,f,c
  1508                           
  1509                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 304:       
      +                            n = n / 10;
  1510  000A1E  C036  F001         	movff	dtoa@n,___aodiv@dividend
  1511  000A22  C037  F002         	movff	dtoa@n+1,___aodiv@dividend+1
  1512  000A26  C038  F003         	movff	dtoa@n+2,___aodiv@dividend+2
  1513  000A2A  C039  F004         	movff	dtoa@n+3,___aodiv@dividend+3
  1514  000A2E  C03A  F005         	movff	dtoa@n+4,___aodiv@dividend+4
  1515  000A32  C03B  F006         	movff	dtoa@n+5,___aodiv@dividend+5
  1516  000A36  C03C  F007         	movff	dtoa@n+6,___aodiv@dividend+6
  1517  000A3A  C03D  F008         	movff	dtoa@n+7,___aodiv@dividend+7
  1518  000A3E  0E0A               	movlw	10
  1519  000A40  6E09               	movwf	___aodiv@divisor,c
  1520  000A42  0E00               	movlw	0
  1521  000A44  6E0A               	movwf	___aodiv@divisor+1,c
  1522  000A46  0E00               	movlw	0
  1523  000A48  6E0B               	movwf	___aodiv@divisor+2,c
  1524  000A4A  0E00               	movlw	0
  1525  000A4C  6E0C               	movwf	___aodiv@divisor+3,c
  1526  000A4E  0E00               	movlw	0
  1527  000A50  6E0D               	movwf	___aodiv@divisor+4,c
  1528  000A52  0E00               	movlw	0
  1529  000A54  6E0E               	movwf	___aodiv@divisor+5,c
  1530  000A56  0E00               	movlw	0
  1531  000A58  6E0F               	movwf	___aodiv@divisor+6,c
  1532  000A5A  0E00               	movlw	0
  1533  000A5C  6E10               	movwf	___aodiv@divisor+7,c
  1534  000A5E  EC94  F005         	call	___aodiv	;wreg free
  1535  000A62  C001  F036         	movff	?___aodiv,dtoa@n
  1536  000A66  C002  F037         	movff	?___aodiv+1,dtoa@n+1
  1537  000A6A  C003  F038         	movff	?___aodiv+2,dtoa@n+2
  1538  000A6E  C004  F039         	movff	?___aodiv+3,dtoa@n+3
  1539  000A72  C005  F03A         	movff	?___aodiv+4,dtoa@n+4
  1540  000A76  C006  F03B         	movff	?___aodiv+5,dtoa@n+5
  1541  000A7A  C007  F03C         	movff	?___aodiv+6,dtoa@n+6
  1542  000A7E  C008  F03D         	movff	?___aodiv+7,dtoa@n+7
  1543  000A82                     l1670:
  1544                           
  1545                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1546  000A82  BE3F               	btfsc	dtoa@i+1,7,c
  1547  000A84  D01F               	goto	u1140
  1548  000A86  503F               	movf	dtoa@i+1,w,c
  1549  000A88  E103               	bnz	u1100
  1550  000A8A  043E               	decf	dtoa@i,w,c
  1551  000A8C  A0D8               	btfss	status,0,c
  1552  000A8E  D01A               	goto	u1140
  1553  000A90                     u1100:
  1554  000A90  5036               	movf	dtoa@n,w,c
  1555  000A92  1037               	iorwf	dtoa@n+1,w,c
  1556  000A94  1038               	iorwf	dtoa@n+2,w,c
  1557  000A96  1039               	iorwf	dtoa@n+3,w,c
  1558  000A98  103A               	iorwf	dtoa@n+4,w,c
  1559  000A9A  103B               	iorwf	dtoa@n+5,w,c
  1560  000A9C  103C               	iorwf	dtoa@n+6,w,c
  1561  000A9E  103D               	iorwf	dtoa@n+7,w,c
  1562  000AA0  A4D8               	btfss	status,2,c
  1563  000AA2  D773               	goto	l1660
  1564  000AA4  BE31               	btfsc	dtoa@p+1,7,c
  1565  000AA6  D005               	goto	u1120
  1566  000AA8  5031               	movf	dtoa@p+1,w,c
  1567  000AAA  E102               	bnz	u1121
  1568  000AAC  0430               	decf	dtoa@p,w,c
  1569  000AAE  B0D8               	btfsc	status,0,c
  1570  000AB0                     u1121:
  1571  000AB0  D76C               	goto	l1660
  1572  000AB2                     u1120:
  1573  000AB2  BE33               	btfsc	dtoa@w+1,7,c
  1574  000AB4  D007               	goto	u1140
  1575  000AB6  5033               	movf	dtoa@w+1,w,c
  1576  000AB8  E103               	bnz	u1130
  1577  000ABA  0432               	decf	dtoa@w,w,c
  1578  000ABC  A0D8               	btfss	status,0,c
  1579  000ABE  D002               	goto	u1140
  1580  000AC0                     u1130:
  1581  000AC0  B276               	btfsc	_flags,1,c
  1582  000AC2  D763               	goto	l1660
  1583  000AC4                     u1140:
  1584                           
  1585                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 308:     if
      +                           (s || (flags & (1 << 2))) {
  1586  000AC4  5034               	movf	dtoa@s,w,c
  1587  000AC6  1035               	iorwf	dtoa@s+1,w,c
  1588  000AC8  A4D8               	btfss	status,2,c
  1589  000ACA  D002               	goto	u1160
  1590  000ACC  A476               	btfss	_flags,2,c
  1591  000ACE  D017               	goto	l1694
  1592  000AD0                     u1160:
  1593                           
  1594                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 309:       
      +                            --i;
  1595  000AD0  063E               	decf	dtoa@i,f,c
  1596  000AD2  A0D8               	btfss	status,0,c
  1597  000AD4  063F               	decf	dtoa@i+1,f,c
  1598                           
  1599                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 310:       
      +                            dbuf[i] = s ? '-' : '+';
  1600  000AD6  5034               	movf	dtoa@s,w,c
  1601  000AD8  1035               	iorwf	dtoa@s+1,w,c
  1602  000ADA  A4D8               	btfss	status,2,c
  1603  000ADC  D004               	goto	l1690
  1604  000ADE  0E00               	movlw	0
  1605  000AE0  6E2F               	movwf	_dtoa$474+1,c
  1606  000AE2  0E2B               	movlw	43
  1607  000AE4  D003               	goto	L2
  1608  000AE6                     l1690:
  1609  000AE6  0E00               	movlw	0
  1610  000AE8  6E2F               	movwf	_dtoa$474+1,c
  1611  000AEA  0E2D               	movlw	45
  1612  000AEC                     L2:
  1613  000AEC  6E2E               	movwf	_dtoa$474,c
  1614  000AEE  0E80               	movlw	low _dbuf
  1615  000AF0  243E               	addwf	dtoa@i,w,c
  1616  000AF2  6ED9               	movwf	fsr2l,c
  1617  000AF4  0E00               	movlw	high _dbuf
  1618  000AF6  203F               	addwfc	dtoa@i+1,w,c
  1619  000AF8  6EDA               	movwf	fsr2h,c
  1620  000AFA  C02E  FFDF         	movff	_dtoa$474,indf2
  1621  000AFE                     l1694:
  1622                           
  1623                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 314:     re
      +                          turn pad(fp, &dbuf[i], w);
  1624  000AFE  C01C  F011         	movff	dtoa@fp,pad@fp
  1625  000B02  C01D  F012         	movff	dtoa@fp+1,pad@fp+1
  1626  000B06  0E80               	movlw	low _dbuf
  1627  000B08  243E               	addwf	dtoa@i,w,c
  1628  000B0A  6E13               	movwf	pad@buf,c
  1629  000B0C  0E00               	movlw	high _dbuf
  1630  000B0E  203F               	addwfc	dtoa@i+1,w,c
  1631  000B10  6E14               	movwf	pad@buf+1,c
  1632  000B12  C032  F015         	movff	dtoa@w,pad@p
  1633  000B16  C033  F016         	movff	dtoa@w+1,pad@p+1
  1634  000B1A  EC7D  F008         	call	_pad	;wreg free
  1635  000B1E  C011  F01C         	movff	?_pad,?_dtoa
  1636  000B22  C012  F01D         	movff	?_pad+1,?_dtoa+1
  1637  000B26  0012               	return		;funcret
  1638  000B28                     __end_of_dtoa:
  1639                           	opt callstack 0
  1640                           
  1641 ;; *************** function _pad *****************
  1642 ;; Defined at:
  1643 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1644 ;; Parameters:    Size  Location     Type
  1645 ;;  fp              2   16[COMRAM] PTR struct _IO_FILE
  1646 ;;		 -> sprintf@f(6), 
  1647 ;;  buf             2   18[COMRAM] PTR unsigned char 
  1648 ;;		 -> dbuf(32), 
  1649 ;;  p               2   20[COMRAM] int 
  1650 ;; Auto vars:     Size  Location     Type
  1651 ;;  w               2   25[COMRAM] int 
  1652 ;;  i               2   23[COMRAM] int 
  1653 ;; Return value:  Size  Location     Type
  1654 ;;                  2   16[COMRAM] int 
  1655 ;; Registers used:
  1656 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1657 ;; Tracked objects:
  1658 ;;		On entry : 0/0
  1659 ;;		On exit  : 0/0
  1660 ;;		Unchanged: 0/0
  1661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1662 ;;      Params:         6       0       0       0       0       0       0
  1663 ;;      Locals:         4       0       0       0       0       0       0
  1664 ;;      Temps:          1       0       0       0       0       0       0
  1665 ;;      Totals:        11       0       0       0       0       0       0
  1666 ;;Total ram usage:       11 bytes
  1667 ;; Hardware stack levels used:    1
  1668 ;; Hardware stack levels required when called:    4
  1669 ;; This function calls:
  1670 ;;		_fputc
  1671 ;;		_fputs
  1672 ;;		_strlen
  1673 ;; This function is called by:
  1674 ;;		_dtoa
  1675 ;; This function uses a non-reentrant model
  1676 ;;
  1677                           
  1678                           	psect	text5
  1679  0010FA                     __ptext5:
  1680                           	opt callstack 0
  1681  0010FA                     _pad:
  1682                           	opt callstack 22
  1683                           
  1684                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
  1685                           
  1686                           ;incstack = 0
  1687  0010FA  A076               	btfss	_flags,0,c
  1688  0010FC  D00A               	goto	l1500
  1689                           
  1690                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
  1691  0010FE  C013  F00A         	movff	pad@buf,fputs@s
  1692  001102  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1693  001106  C011  F00C         	movff	pad@fp,fputs@fp
  1694  00110A  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1695  00110E  ECBD  F009         	call	_fputs	;wreg free
  1696  001112                     l1500:
  1697                           
  1698                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
  1699  001112  BE16               	btfsc	pad@p+1,7,c
  1700  001114  D005               	goto	l1504
  1701  001116  C015  F01A         	movff	pad@p,pad@w
  1702  00111A  C016  F01B         	movff	pad@p+1,pad@w+1
  1703  00111E  D004               	goto	l117
  1704  001120                     l1504:
  1705  001120  0E00               	movlw	0
  1706  001122  6E1B               	movwf	pad@w+1,c
  1707  001124  0E00               	movlw	0
  1708  001126  6E1A               	movwf	pad@w,c
  1709  001128                     l117:
  1710                           
  1711                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
  1712  001128  0E00               	movlw	0
  1713  00112A  6E19               	movwf	pad@i+1,c
  1714  00112C  0E00               	movlw	0
  1715  00112E  6E18               	movwf	pad@i,c
  1716                           
  1717                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  1718  001130  D00C               	goto	l1510
  1719  001132                     l1506:
  1720                           
  1721                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
  1722  001132  0E00               	movlw	0
  1723  001134  6E02               	movwf	fputc@c+1,c
  1724  001136  0E20               	movlw	32
  1725  001138  6E01               	movwf	fputc@c,c
  1726  00113A  C011  F003         	movff	pad@fp,fputc@fp
  1727  00113E  C012  F004         	movff	pad@fp+1,fputc@fp+1
  1728  001142  EC2D  F008         	call	_fputc	;wreg free
  1729                           
  1730                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
  1731  001146  4A18               	infsnz	pad@i,f,c
  1732  001148  2A19               	incf	pad@i+1,f,c
  1733  00114A                     l1510:
  1734                           
  1735                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  1736  00114A  501A               	movf	pad@w,w,c
  1737  00114C  5C18               	subwf	pad@i,w,c
  1738  00114E  5019               	movf	pad@i+1,w,c
  1739  001150  0A80               	xorlw	128
  1740  001152  6E17               	movwf	??_pad& (0+255),c
  1741  001154  501B               	movf	pad@w+1,w,c
  1742  001156  0A80               	xorlw	128
  1743  001158  5817               	subwfb	??_pad& (0+255),w,c
  1744  00115A  A0D8               	btfss	status,0,c
  1745  00115C  D7EA               	goto	l1506
  1746                           
  1747                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
  1748  00115E  B076               	btfsc	_flags,0,c
  1749  001160  D00A               	goto	l1514
  1750                           
  1751                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
  1752  001162  C013  F00A         	movff	pad@buf,fputs@s
  1753  001166  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1754  00116A  C011  F00C         	movff	pad@fp,fputs@fp
  1755  00116E  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1756  001172  ECBD  F009         	call	_fputs	;wreg free
  1757  001176                     l1514:
  1758                           
  1759                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
  1760  001176  C013  F001         	movff	pad@buf,strlen@s
  1761  00117A  C014  F002         	movff	pad@buf+1,strlen@s+1
  1762  00117E  EC21  F00A         	call	_strlen	;wreg free
  1763  001182  501A               	movf	pad@w,w,c
  1764  001184  2401               	addwf	?_strlen,w,c
  1765  001186  6E11               	movwf	?_pad,c
  1766  001188  501B               	movf	pad@w+1,w,c
  1767  00118A  2002               	addwfc	?_strlen+1,w,c
  1768  00118C  6E12               	movwf	?_pad+1,c
  1769  00118E  0012               	return		;funcret
  1770  001190                     __end_of_pad:
  1771                           	opt callstack 0
  1772                           
  1773 ;; *************** function _strlen *****************
  1774 ;; Defined at:
  1775 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
  1776 ;; Parameters:    Size  Location     Type
  1777 ;;  s               2    0[COMRAM] PTR const unsigned char 
  1778 ;;		 -> dbuf(32), 
  1779 ;; Auto vars:     Size  Location     Type
  1780 ;;  a               2    2[COMRAM] PTR const unsigned char 
  1781 ;;		 -> dbuf(32), 
  1782 ;; Return value:  Size  Location     Type
  1783 ;;                  2    0[COMRAM] unsigned int 
  1784 ;; Registers used:
  1785 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1786 ;; Tracked objects:
  1787 ;;		On entry : 0/0
  1788 ;;		On exit  : 0/0
  1789 ;;		Unchanged: 0/0
  1790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1791 ;;      Params:         2       0       0       0       0       0       0
  1792 ;;      Locals:         2       0       0       0       0       0       0
  1793 ;;      Temps:          0       0       0       0       0       0       0
  1794 ;;      Totals:         4       0       0       0       0       0       0
  1795 ;;Total ram usage:        4 bytes
  1796 ;; Hardware stack levels used:    1
  1797 ;; Hardware stack levels required when called:    1
  1798 ;; This function calls:
  1799 ;;		Nothing
  1800 ;; This function is called by:
  1801 ;;		_pad
  1802 ;; This function uses a non-reentrant model
  1803 ;;
  1804                           
  1805                           	psect	text6
  1806  001442                     __ptext6:
  1807                           	opt callstack 0
  1808  001442                     _strlen:
  1809                           	opt callstack 24
  1810                           
  1811                           ;incstack = 0
  1812  001442  C001  F003         	movff	strlen@s,strlen@a
  1813  001446  C002  F004         	movff	strlen@s+1,strlen@a+1
  1814  00144A  D002               	goto	l1490
  1815  00144C                     l1488:
  1816  00144C  4A01               	infsnz	strlen@s,f,c
  1817  00144E  2A02               	incf	strlen@s+1,f,c
  1818  001450                     l1490:
  1819  001450  C001  FFD9         	movff	strlen@s,fsr2l
  1820  001454  C002  FFDA         	movff	strlen@s+1,fsr2h
  1821  001458  50DF               	movf	indf2,w,c
  1822  00145A  A4D8               	btfss	status,2,c
  1823  00145C  D7F7               	goto	l1488
  1824  00145E  5003               	movf	strlen@a,w,c
  1825  001460  5C01               	subwf	strlen@s,w,c
  1826  001462  6E01               	movwf	?_strlen,c
  1827  001464  5004               	movf	strlen@a+1,w,c
  1828  001466  5802               	subwfb	strlen@s+1,w,c
  1829  001468  6E02               	movwf	?_strlen+1,c
  1830  00146A  0012               	return		;funcret
  1831  00146C                     __end_of_strlen:
  1832                           	opt callstack 0
  1833                           
  1834 ;; *************** function _fputs *****************
  1835 ;; Defined at:
  1836 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputs.c"
  1837 ;; Parameters:    Size  Location     Type
  1838 ;;  s               2    9[COMRAM] PTR const unsigned char 
  1839 ;;		 -> dbuf(32), 
  1840 ;;  fp              2   11[COMRAM] PTR struct _IO_FILE
  1841 ;;		 -> sprintf@f(6), 
  1842 ;; Auto vars:     Size  Location     Type
  1843 ;;  i               2   14[COMRAM] int 
  1844 ;;  c               1   13[COMRAM] unsigned char 
  1845 ;; Return value:  Size  Location     Type
  1846 ;;                  2    9[COMRAM] int 
  1847 ;; Registers used:
  1848 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1849 ;; Tracked objects:
  1850 ;;		On entry : 0/0
  1851 ;;		On exit  : 0/0
  1852 ;;		Unchanged: 0/0
  1853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1854 ;;      Params:         4       0       0       0       0       0       0
  1855 ;;      Locals:         3       0       0       0       0       0       0
  1856 ;;      Temps:          0       0       0       0       0       0       0
  1857 ;;      Totals:         7       0       0       0       0       0       0
  1858 ;;Total ram usage:        7 bytes
  1859 ;; Hardware stack levels used:    1
  1860 ;; Hardware stack levels required when called:    3
  1861 ;; This function calls:
  1862 ;;		_fputc
  1863 ;; This function is called by:
  1864 ;;		_pad
  1865 ;; This function uses a non-reentrant model
  1866 ;;
  1867                           
  1868                           	psect	text7
  1869  00137A                     __ptext7:
  1870                           	opt callstack 0
  1871  00137A                     _fputs:
  1872                           	opt callstack 22
  1873                           
  1874                           ;incstack = 0
  1875  00137A  0E00               	movlw	0
  1876  00137C  6E10               	movwf	fputs@i+1,c
  1877  00137E  0E00               	movlw	0
  1878  001380  6E0F               	movwf	fputs@i,c
  1879  001382  D00B               	goto	l1484
  1880  001384                     l1480:
  1881  001384  C00E  F001         	movff	fputs@c,fputc@c
  1882  001388  6A02               	clrf	fputc@c+1,c
  1883  00138A  C00C  F003         	movff	fputs@fp,fputc@fp
  1884  00138E  C00D  F004         	movff	fputs@fp+1,fputc@fp+1
  1885  001392  EC2D  F008         	call	_fputc	;wreg free
  1886  001396  4A0F               	infsnz	fputs@i,f,c
  1887  001398  2A10               	incf	fputs@i+1,f,c
  1888  00139A                     l1484:
  1889  00139A  500F               	movf	fputs@i,w,c
  1890  00139C  240A               	addwf	fputs@s,w,c
  1891  00139E  6ED9               	movwf	fsr2l,c
  1892  0013A0  5010               	movf	fputs@i+1,w,c
  1893  0013A2  200B               	addwfc	fputs@s+1,w,c
  1894  0013A4  6EDA               	movwf	fsr2h,c
  1895  0013A6  50DF               	movf	indf2,w,c
  1896  0013A8  6E0E               	movwf	fputs@c,c
  1897  0013AA  500E               	movf	fputs@c,w,c
  1898  0013AC  B4D8               	btfsc	status,2,c
  1899  0013AE  0012               	return	
  1900  0013B0  D7E9               	goto	l1480
  1901  0013B2                     __end_of_fputs:
  1902                           	opt callstack 0
  1903                           
  1904 ;; *************** function _fputc *****************
  1905 ;; Defined at:
  1906 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputc.c"
  1907 ;; Parameters:    Size  Location     Type
  1908 ;;  c               2    0[COMRAM] int 
  1909 ;;  fp              2    2[COMRAM] PTR struct _IO_FILE
  1910 ;;		 -> sprintf@f(6), 
  1911 ;; Auto vars:     Size  Location     Type
  1912 ;;		None
  1913 ;; Return value:  Size  Location     Type
  1914 ;;                  2    0[COMRAM] int 
  1915 ;; Registers used:
  1916 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1917 ;; Tracked objects:
  1918 ;;		On entry : 0/0
  1919 ;;		On exit  : 0/0
  1920 ;;		Unchanged: 0/0
  1921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1922 ;;      Params:         4       0       0       0       0       0       0
  1923 ;;      Locals:         0       0       0       0       0       0       0
  1924 ;;      Temps:          5       0       0       0       0       0       0
  1925 ;;      Totals:         9       0       0       0       0       0       0
  1926 ;;Total ram usage:        9 bytes
  1927 ;; Hardware stack levels used:    1
  1928 ;; Hardware stack levels required when called:    2
  1929 ;; This function calls:
  1930 ;;		_putch
  1931 ;; This function is called by:
  1932 ;;		_pad
  1933 ;;		_vfpfcnvrt
  1934 ;;		_fputs
  1935 ;; This function uses a non-reentrant model
  1936 ;;
  1937                           
  1938                           	psect	text8
  1939  00105A                     __ptext8:
  1940                           	opt callstack 0
  1941  00105A                     _fputc:
  1942                           	opt callstack 25
  1943                           
  1944                           ;incstack = 0
  1945  00105A  5003               	movf	fputc@fp,w,c
  1946  00105C  1004               	iorwf	fputc@fp+1,w,c
  1947  00105E  B4D8               	btfsc	status,2,c
  1948  001060  D004               	goto	u750
  1949  001062  5003               	movf	fputc@fp,w,c
  1950  001064  1004               	iorwf	fputc@fp+1,w,c
  1951  001066  A4D8               	btfss	status,2,c
  1952  001068  D004               	goto	l1470
  1953  00106A                     u750:
  1954  00106A  5001               	movf	fputc@c,w,c
  1955  00106C  EC75  F00A         	call	_putch
  1956  001070  0012               	return	
  1957  001072                     l1470:
  1958  001072  EE20 F004          	lfsr	2,4
  1959  001076  5003               	movf	fputc@fp,w,c
  1960  001078  26D9               	addwf	fsr2l,f,c
  1961  00107A  5004               	movf	fputc@fp+1,w,c
  1962  00107C  22DA               	addwfc	fsr2h,f,c
  1963  00107E  50DE               	movf	postinc2,w,c
  1964  001080  10DE               	iorwf	postinc2,w,c
  1965  001082  B4D8               	btfsc	status,2,c
  1966  001084  D016               	goto	u770
  1967  001086  EE20 F004          	lfsr	2,4
  1968  00108A  5003               	movf	fputc@fp,w,c
  1969  00108C  26D9               	addwf	fsr2l,f,c
  1970  00108E  5004               	movf	fputc@fp+1,w,c
  1971  001090  22DA               	addwfc	fsr2h,f,c
  1972  001092  EE10 F002          	lfsr	1,2
  1973  001096  5003               	movf	fputc@fp,w,c
  1974  001098  26E1               	addwf	fsr1l,f,c
  1975  00109A  5004               	movf	fputc@fp+1,w,c
  1976  00109C  22E2               	addwfc	fsr1h,f,c
  1977  00109E  50DE               	movf	postinc2,w,c
  1978  0010A0  5CE6               	subwf	postinc1,w,c
  1979  0010A2  50E6               	movf	postinc1,w,c
  1980  0010A4  0A80               	xorlw	128
  1981  0010A6  6E09               	movwf	(??_fputc+4)& (0+255),c
  1982  0010A8  50DE               	movf	postinc2,w,c
  1983  0010AA  0A80               	xorlw	128
  1984  0010AC  5809               	subwfb	(??_fputc+4)& (0+255),w,c
  1985  0010AE  B0D8               	btfsc	status,0,c
  1986  0010B0  0012               	return	
  1987  0010B2                     u770:
  1988  0010B2  EE20 F002          	lfsr	2,2
  1989  0010B6  5003               	movf	fputc@fp,w,c
  1990  0010B8  26D9               	addwf	fsr2l,f,c
  1991  0010BA  5004               	movf	fputc@fp+1,w,c
  1992  0010BC  22DA               	addwfc	fsr2h,f,c
  1993  0010BE  CFDE F005          	movff	postinc2,??_fputc
  1994  0010C2  CFDD F006          	movff	postdec2,??_fputc+1
  1995  0010C6  C003  FFD9         	movff	fputc@fp,fsr2l
  1996  0010CA  C004  FFDA         	movff	fputc@fp+1,fsr2h
  1997  0010CE  CFDE F007          	movff	postinc2,??_fputc+2
  1998  0010D2  CFDD F008          	movff	postdec2,??_fputc+3
  1999  0010D6  5005               	movf	??_fputc,w,c
  2000  0010D8  2407               	addwf	??_fputc+2,w,c
  2001  0010DA  6ED9               	movwf	fsr2l,c
  2002  0010DC  5006               	movf	??_fputc+1,w,c
  2003  0010DE  2008               	addwfc	??_fputc+3,w,c
  2004  0010E0  6EDA               	movwf	fsr2h,c
  2005  0010E2  C001  FFDF         	movff	fputc@c,indf2
  2006  0010E6  EE20 F002          	lfsr	2,2
  2007  0010EA  5003               	movf	fputc@fp,w,c
  2008  0010EC  26D9               	addwf	fsr2l,f,c
  2009  0010EE  5004               	movf	fputc@fp+1,w,c
  2010  0010F0  22DA               	addwfc	fsr2h,f,c
  2011  0010F2  2ADE               	incf	postinc2,f,c
  2012  0010F4  0E00               	movlw	0
  2013  0010F6  22DD               	addwfc	postdec2,f,c
  2014  0010F8  0012               	return		;funcret
  2015  0010FA                     __end_of_fputc:
  2016                           	opt callstack 0
  2017                           
  2018 ;; *************** function _putch *****************
  2019 ;; Defined at:
  2020 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\putch.c"
  2021 ;; Parameters:    Size  Location     Type
  2022 ;;  c               1    wreg     unsigned char 
  2023 ;; Auto vars:     Size  Location     Type
  2024 ;;  c               1    0[COMRAM] unsigned char 
  2025 ;; Return value:  Size  Location     Type
  2026 ;;                  1    wreg      void 
  2027 ;; Registers used:
  2028 ;;		wreg
  2029 ;; Tracked objects:
  2030 ;;		On entry : 0/0
  2031 ;;		On exit  : 0/0
  2032 ;;		Unchanged: 0/0
  2033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2034 ;;      Params:         0       0       0       0       0       0       0
  2035 ;;      Locals:         0       0       0       0       0       0       0
  2036 ;;      Temps:          0       0       0       0       0       0       0
  2037 ;;      Totals:         0       0       0       0       0       0       0
  2038 ;;Total ram usage:        0 bytes
  2039 ;; Hardware stack levels used:    1
  2040 ;; Hardware stack levels required when called:    1
  2041 ;; This function calls:
  2042 ;;		Nothing
  2043 ;; This function is called by:
  2044 ;;		_fputc
  2045 ;; This function uses a non-reentrant model
  2046 ;;
  2047                           
  2048                           	psect	text9
  2049  0014EA                     __ptext9:
  2050                           	opt callstack 0
  2051  0014EA                     _putch:
  2052                           	opt callstack 25
  2053                           
  2054                           ;incstack = 0
  2055  0014EA  0012               	return		;funcret
  2056  0014EC                     __end_of_putch:
  2057                           	opt callstack 0
  2058                           
  2059 ;; *************** function _abs *****************
  2060 ;; Defined at:
  2061 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\abs.c"
  2062 ;; Parameters:    Size  Location     Type
  2063 ;;  a               2   18[COMRAM] int 
  2064 ;; Auto vars:     Size  Location     Type
  2065 ;;		None
  2066 ;; Return value:  Size  Location     Type
  2067 ;;                  2   18[COMRAM] int 
  2068 ;; Registers used:
  2069 ;;		wreg, status,2, status,0
  2070 ;; Tracked objects:
  2071 ;;		On entry : 0/0
  2072 ;;		On exit  : 0/0
  2073 ;;		Unchanged: 0/0
  2074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2075 ;;      Params:         2       0       0       0       0       0       0
  2076 ;;      Locals:         0       0       0       0       0       0       0
  2077 ;;      Temps:          2       0       0       0       0       0       0
  2078 ;;      Totals:         4       0       0       0       0       0       0
  2079 ;;Total ram usage:        4 bytes
  2080 ;; Hardware stack levels used:    1
  2081 ;; Hardware stack levels required when called:    1
  2082 ;; This function calls:
  2083 ;;		Nothing
  2084 ;; This function is called by:
  2085 ;;		_dtoa
  2086 ;; This function uses a non-reentrant model
  2087 ;;
  2088                           
  2089                           	psect	text10
  2090  0013B2                     __ptext10:
  2091                           	opt callstack 0
  2092  0013B2                     _abs:
  2093                           	opt callstack 25
  2094                           
  2095                           ;incstack = 0
  2096  0013B2  BE14               	btfsc	abs@a+1,7,c
  2097  0013B4  D005               	goto	u840
  2098  0013B6  5014               	movf	abs@a+1,w,c
  2099  0013B8  E110               	bnz	l862
  2100  0013BA  0413               	decf	abs@a,w,c
  2101  0013BC  B0D8               	btfsc	status,0,c
  2102  0013BE  D00D               	goto	l862
  2103  0013C0                     u840:
  2104  0013C0  C013  F015         	movff	abs@a,??_abs
  2105  0013C4  C014  F016         	movff	abs@a+1,??_abs+1
  2106  0013C8  1E15               	comf	??_abs,f,c
  2107  0013CA  1E16               	comf	??_abs+1,f,c
  2108  0013CC  4A15               	infsnz	??_abs,f,c
  2109  0013CE  2A16               	incf	??_abs+1,f,c
  2110  0013D0  C015  F013         	movff	??_abs,?_abs
  2111  0013D4  C016  F014         	movff	??_abs+1,?_abs+1
  2112  0013D8  0012               	return	
  2113  0013DA                     l862:
  2114  0013DA  C013  F013         	movff	abs@a,?_abs
  2115  0013DE  C014  F014         	movff	abs@a+1,?_abs+1
  2116  0013E2  0012               	return		;funcret
  2117  0013E4                     __end_of_abs:
  2118                           	opt callstack 0
  2119                           
  2120 ;; *************** function ___aomod *****************
  2121 ;; Defined at:
  2122 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aomod.c"
  2123 ;; Parameters:    Size  Location     Type
  2124 ;;  dividend        8    0[COMRAM] long long 
  2125 ;;  divisor         8    8[COMRAM] long long 
  2126 ;; Auto vars:     Size  Location     Type
  2127 ;;  sign            1   17[COMRAM] unsigned char 
  2128 ;;  counter         1   16[COMRAM] unsigned char 
  2129 ;; Return value:  Size  Location     Type
  2130 ;;                  8    0[COMRAM] long long 
  2131 ;; Registers used:
  2132 ;;		wreg, status,2, status,0
  2133 ;; Tracked objects:
  2134 ;;		On entry : 0/0
  2135 ;;		On exit  : 0/0
  2136 ;;		Unchanged: 0/0
  2137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2138 ;;      Params:        16       0       0       0       0       0       0
  2139 ;;      Locals:         2       0       0       0       0       0       0
  2140 ;;      Temps:          0       0       0       0       0       0       0
  2141 ;;      Totals:        18       0       0       0       0       0       0
  2142 ;;Total ram usage:       18 bytes
  2143 ;; Hardware stack levels used:    1
  2144 ;; Hardware stack levels required when called:    1
  2145 ;; This function calls:
  2146 ;;		Nothing
  2147 ;; This function is called by:
  2148 ;;		_dtoa
  2149 ;; This function uses a non-reentrant model
  2150 ;;
  2151                           
  2152                           	psect	text11
  2153  000DB0                     __ptext11:
  2154                           	opt callstack 0
  2155  000DB0                     ___aomod:
  2156                           	opt callstack 25
  2157                           
  2158                           ;incstack = 0
  2159  000DB0  0E00               	movlw	0
  2160  000DB2  6E12               	movwf	___aomod@sign,c
  2161  000DB4  AE08               	btfss	___aomod@dividend+7,7,c
  2162  000DB6  D012               	goto	l1584
  2163  000DB8  1E08               	comf	___aomod@dividend+7,f,c
  2164  000DBA  1E07               	comf	___aomod@dividend+6,f,c
  2165  000DBC  1E06               	comf	___aomod@dividend+5,f,c
  2166  000DBE  1E05               	comf	___aomod@dividend+4,f,c
  2167  000DC0  1E04               	comf	___aomod@dividend+3,f,c
  2168  000DC2  1E03               	comf	___aomod@dividend+2,f,c
  2169  000DC4  1E02               	comf	___aomod@dividend+1,f,c
  2170  000DC6  6C01               	negf	___aomod@dividend,c
  2171  000DC8  0E00               	movlw	0
  2172  000DCA  2202               	addwfc	___aomod@dividend+1,f,c
  2173  000DCC  2203               	addwfc	___aomod@dividend+2,f,c
  2174  000DCE  2204               	addwfc	___aomod@dividend+3,f,c
  2175  000DD0  2205               	addwfc	___aomod@dividend+4,f,c
  2176  000DD2  2206               	addwfc	___aomod@dividend+5,f,c
  2177  000DD4  2207               	addwfc	___aomod@dividend+6,f,c
  2178  000DD6  2208               	addwfc	___aomod@dividend+7,f,c
  2179  000DD8  0E01               	movlw	1
  2180  000DDA  6E12               	movwf	___aomod@sign,c
  2181  000DDC                     l1584:
  2182  000DDC  AE10               	btfss	___aomod@divisor+7,7,c
  2183  000DDE  D010               	goto	l1588
  2184  000DE0  1E10               	comf	___aomod@divisor+7,f,c
  2185  000DE2  1E0F               	comf	___aomod@divisor+6,f,c
  2186  000DE4  1E0E               	comf	___aomod@divisor+5,f,c
  2187  000DE6  1E0D               	comf	___aomod@divisor+4,f,c
  2188  000DE8  1E0C               	comf	___aomod@divisor+3,f,c
  2189  000DEA  1E0B               	comf	___aomod@divisor+2,f,c
  2190  000DEC  1E0A               	comf	___aomod@divisor+1,f,c
  2191  000DEE  6C09               	negf	___aomod@divisor,c
  2192  000DF0  0E00               	movlw	0
  2193  000DF2  220A               	addwfc	___aomod@divisor+1,f,c
  2194  000DF4  220B               	addwfc	___aomod@divisor+2,f,c
  2195  000DF6  220C               	addwfc	___aomod@divisor+3,f,c
  2196  000DF8  220D               	addwfc	___aomod@divisor+4,f,c
  2197  000DFA  220E               	addwfc	___aomod@divisor+5,f,c
  2198  000DFC  220F               	addwfc	___aomod@divisor+6,f,c
  2199  000DFE  2210               	addwfc	___aomod@divisor+7,f,c
  2200  000E00                     l1588:
  2201  000E00  5009               	movf	___aomod@divisor,w,c
  2202  000E02  100A               	iorwf	___aomod@divisor+1,w,c
  2203  000E04  100B               	iorwf	___aomod@divisor+2,w,c
  2204  000E06  100C               	iorwf	___aomod@divisor+3,w,c
  2205  000E08  100D               	iorwf	___aomod@divisor+4,w,c
  2206  000E0A  100E               	iorwf	___aomod@divisor+5,w,c
  2207  000E0C  100F               	iorwf	___aomod@divisor+6,w,c
  2208  000E0E  1010               	iorwf	___aomod@divisor+7,w,c
  2209  000E10  B4D8               	btfsc	status,2,c
  2210  000E12  D03C               	goto	l1604
  2211  000E14  0E01               	movlw	1
  2212  000E16  6E11               	movwf	___aomod@counter,c
  2213  000E18  D00A               	goto	l1594
  2214  000E1A                     l1592:
  2215  000E1A  90D8               	bcf	status,0,c
  2216  000E1C  3609               	rlcf	___aomod@divisor,f,c
  2217  000E1E  360A               	rlcf	___aomod@divisor+1,f,c
  2218  000E20  360B               	rlcf	___aomod@divisor+2,f,c
  2219  000E22  360C               	rlcf	___aomod@divisor+3,f,c
  2220  000E24  360D               	rlcf	___aomod@divisor+4,f,c
  2221  000E26  360E               	rlcf	___aomod@divisor+5,f,c
  2222  000E28  360F               	rlcf	___aomod@divisor+6,f,c
  2223  000E2A  3610               	rlcf	___aomod@divisor+7,f,c
  2224  000E2C  2A11               	incf	___aomod@counter,f,c
  2225  000E2E                     l1594:
  2226  000E2E  AE10               	btfss	___aomod@divisor+7,7,c
  2227  000E30  D7F4               	goto	l1592
  2228  000E32                     u970:
  2229  000E32  5009               	movf	___aomod@divisor,w,c
  2230  000E34  5C01               	subwf	___aomod@dividend,w,c
  2231  000E36  500A               	movf	___aomod@divisor+1,w,c
  2232  000E38  5802               	subwfb	___aomod@dividend+1,w,c
  2233  000E3A  500B               	movf	___aomod@divisor+2,w,c
  2234  000E3C  5803               	subwfb	___aomod@dividend+2,w,c
  2235  000E3E  500C               	movf	___aomod@divisor+3,w,c
  2236  000E40  5804               	subwfb	___aomod@dividend+3,w,c
  2237  000E42  500D               	movf	___aomod@divisor+4,w,c
  2238  000E44  5805               	subwfb	___aomod@dividend+4,w,c
  2239  000E46  500E               	movf	___aomod@divisor+5,w,c
  2240  000E48  5806               	subwfb	___aomod@dividend+5,w,c
  2241  000E4A  500F               	movf	___aomod@divisor+6,w,c
  2242  000E4C  5807               	subwfb	___aomod@dividend+6,w,c
  2243  000E4E  5010               	movf	___aomod@divisor+7,w,c
  2244  000E50  5808               	subwfb	___aomod@dividend+7,w,c
  2245  000E52  A0D8               	btfss	status,0,c
  2246  000E54  D010               	goto	l1600
  2247  000E56  5009               	movf	___aomod@divisor,w,c
  2248  000E58  5E01               	subwf	___aomod@dividend,f,c
  2249  000E5A  500A               	movf	___aomod@divisor+1,w,c
  2250  000E5C  5A02               	subwfb	___aomod@dividend+1,f,c
  2251  000E5E  500B               	movf	___aomod@divisor+2,w,c
  2252  000E60  5A03               	subwfb	___aomod@dividend+2,f,c
  2253  000E62  500C               	movf	___aomod@divisor+3,w,c
  2254  000E64  5A04               	subwfb	___aomod@dividend+3,f,c
  2255  000E66  500D               	movf	___aomod@divisor+4,w,c
  2256  000E68  5A05               	subwfb	___aomod@dividend+4,f,c
  2257  000E6A  500E               	movf	___aomod@divisor+5,w,c
  2258  000E6C  5A06               	subwfb	___aomod@dividend+5,f,c
  2259  000E6E  500F               	movf	___aomod@divisor+6,w,c
  2260  000E70  5A07               	subwfb	___aomod@dividend+6,f,c
  2261  000E72  5010               	movf	___aomod@divisor+7,w,c
  2262  000E74  5A08               	subwfb	___aomod@dividend+7,f,c
  2263  000E76                     l1600:
  2264  000E76  90D8               	bcf	status,0,c
  2265  000E78  3210               	rrcf	___aomod@divisor+7,f,c
  2266  000E7A  320F               	rrcf	___aomod@divisor+6,f,c
  2267  000E7C  320E               	rrcf	___aomod@divisor+5,f,c
  2268  000E7E  320D               	rrcf	___aomod@divisor+4,f,c
  2269  000E80  320C               	rrcf	___aomod@divisor+3,f,c
  2270  000E82  320B               	rrcf	___aomod@divisor+2,f,c
  2271  000E84  320A               	rrcf	___aomod@divisor+1,f,c
  2272  000E86  3209               	rrcf	___aomod@divisor,f,c
  2273  000E88  2E11               	decfsz	___aomod@counter,f,c
  2274  000E8A  D7D3               	goto	u970
  2275  000E8C                     l1604:
  2276  000E8C  5012               	movf	___aomod@sign,w,c
  2277  000E8E  B4D8               	btfsc	status,2,c
  2278  000E90  D010               	goto	l1608
  2279  000E92  1E08               	comf	___aomod@dividend+7,f,c
  2280  000E94  1E07               	comf	___aomod@dividend+6,f,c
  2281  000E96  1E06               	comf	___aomod@dividend+5,f,c
  2282  000E98  1E05               	comf	___aomod@dividend+4,f,c
  2283  000E9A  1E04               	comf	___aomod@dividend+3,f,c
  2284  000E9C  1E03               	comf	___aomod@dividend+2,f,c
  2285  000E9E  1E02               	comf	___aomod@dividend+1,f,c
  2286  000EA0  6C01               	negf	___aomod@dividend,c
  2287  000EA2  0E00               	movlw	0
  2288  000EA4  2202               	addwfc	___aomod@dividend+1,f,c
  2289  000EA6  2203               	addwfc	___aomod@dividend+2,f,c
  2290  000EA8  2204               	addwfc	___aomod@dividend+3,f,c
  2291  000EAA  2205               	addwfc	___aomod@dividend+4,f,c
  2292  000EAC  2206               	addwfc	___aomod@dividend+5,f,c
  2293  000EAE  2207               	addwfc	___aomod@dividend+6,f,c
  2294  000EB0  2208               	addwfc	___aomod@dividend+7,f,c
  2295  000EB2                     l1608:
  2296  000EB2  C001  F001         	movff	___aomod@dividend,?___aomod
  2297  000EB6  C002  F002         	movff	___aomod@dividend+1,?___aomod+1
  2298  000EBA  C003  F003         	movff	___aomod@dividend+2,?___aomod+2
  2299  000EBE  C004  F004         	movff	___aomod@dividend+3,?___aomod+3
  2300  000EC2  C005  F005         	movff	___aomod@dividend+4,?___aomod+4
  2301  000EC6  C006  F006         	movff	___aomod@dividend+5,?___aomod+5
  2302  000ECA  C007  F007         	movff	___aomod@dividend+6,?___aomod+6
  2303  000ECE  C008  F008         	movff	___aomod@dividend+7,?___aomod+7
  2304  000ED2  0012               	return		;funcret
  2305  000ED4                     __end_of___aomod:
  2306                           	opt callstack 0
  2307                           
  2308 ;; *************** function ___aodiv *****************
  2309 ;; Defined at:
  2310 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aodiv.c"
  2311 ;; Parameters:    Size  Location     Type
  2312 ;;  dividend        8    0[COMRAM] long long 
  2313 ;;  divisor         8    8[COMRAM] long long 
  2314 ;; Auto vars:     Size  Location     Type
  2315 ;;  quotient        8   18[COMRAM] long long 
  2316 ;;  sign            1   17[COMRAM] unsigned char 
  2317 ;;  counter         1   16[COMRAM] unsigned char 
  2318 ;; Return value:  Size  Location     Type
  2319 ;;                  8    0[COMRAM] long long 
  2320 ;; Registers used:
  2321 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2322 ;; Tracked objects:
  2323 ;;		On entry : 0/0
  2324 ;;		On exit  : 0/0
  2325 ;;		Unchanged: 0/0
  2326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2327 ;;      Params:        16       0       0       0       0       0       0
  2328 ;;      Locals:        10       0       0       0       0       0       0
  2329 ;;      Temps:          0       0       0       0       0       0       0
  2330 ;;      Totals:        26       0       0       0       0       0       0
  2331 ;;Total ram usage:       26 bytes
  2332 ;; Hardware stack levels used:    1
  2333 ;; Hardware stack levels required when called:    1
  2334 ;; This function calls:
  2335 ;;		Nothing
  2336 ;; This function is called by:
  2337 ;;		_dtoa
  2338 ;; This function uses a non-reentrant model
  2339 ;;
  2340                           
  2341                           	psect	text12
  2342  000B28                     __ptext12:
  2343                           	opt callstack 0
  2344  000B28                     ___aodiv:
  2345                           	opt callstack 25
  2346                           
  2347                           ;incstack = 0
  2348  000B28  0E00               	movlw	0
  2349  000B2A  6E12               	movwf	___aodiv@sign,c
  2350  000B2C  AE10               	btfss	___aodiv@divisor+7,7,c
  2351  000B2E  D012               	goto	l1540
  2352  000B30  1E10               	comf	___aodiv@divisor+7,f,c
  2353  000B32  1E0F               	comf	___aodiv@divisor+6,f,c
  2354  000B34  1E0E               	comf	___aodiv@divisor+5,f,c
  2355  000B36  1E0D               	comf	___aodiv@divisor+4,f,c
  2356  000B38  1E0C               	comf	___aodiv@divisor+3,f,c
  2357  000B3A  1E0B               	comf	___aodiv@divisor+2,f,c
  2358  000B3C  1E0A               	comf	___aodiv@divisor+1,f,c
  2359  000B3E  6C09               	negf	___aodiv@divisor,c
  2360  000B40  0E00               	movlw	0
  2361  000B42  220A               	addwfc	___aodiv@divisor+1,f,c
  2362  000B44  220B               	addwfc	___aodiv@divisor+2,f,c
  2363  000B46  220C               	addwfc	___aodiv@divisor+3,f,c
  2364  000B48  220D               	addwfc	___aodiv@divisor+4,f,c
  2365  000B4A  220E               	addwfc	___aodiv@divisor+5,f,c
  2366  000B4C  220F               	addwfc	___aodiv@divisor+6,f,c
  2367  000B4E  2210               	addwfc	___aodiv@divisor+7,f,c
  2368  000B50  0E01               	movlw	1
  2369  000B52  6E12               	movwf	___aodiv@sign,c
  2370  000B54                     l1540:
  2371  000B54  AE08               	btfss	___aodiv@dividend+7,7,c
  2372  000B56  D012               	goto	l1546
  2373  000B58  1E08               	comf	___aodiv@dividend+7,f,c
  2374  000B5A  1E07               	comf	___aodiv@dividend+6,f,c
  2375  000B5C  1E06               	comf	___aodiv@dividend+5,f,c
  2376  000B5E  1E05               	comf	___aodiv@dividend+4,f,c
  2377  000B60  1E04               	comf	___aodiv@dividend+3,f,c
  2378  000B62  1E03               	comf	___aodiv@dividend+2,f,c
  2379  000B64  1E02               	comf	___aodiv@dividend+1,f,c
  2380  000B66  6C01               	negf	___aodiv@dividend,c
  2381  000B68  0E00               	movlw	0
  2382  000B6A  2202               	addwfc	___aodiv@dividend+1,f,c
  2383  000B6C  2203               	addwfc	___aodiv@dividend+2,f,c
  2384  000B6E  2204               	addwfc	___aodiv@dividend+3,f,c
  2385  000B70  2205               	addwfc	___aodiv@dividend+4,f,c
  2386  000B72  2206               	addwfc	___aodiv@dividend+5,f,c
  2387  000B74  2207               	addwfc	___aodiv@dividend+6,f,c
  2388  000B76  2208               	addwfc	___aodiv@dividend+7,f,c
  2389  000B78  0E01               	movlw	1
  2390  000B7A  1A12               	xorwf	___aodiv@sign,f,c
  2391  000B7C                     l1546:
  2392  000B7C  EE20  F013         	lfsr	2,___aodiv@quotient
  2393  000B80  0E07               	movlw	7
  2394  000B82                     u891:
  2395  000B82  6ADE               	clrf	postinc2,c
  2396  000B84  06E8               	decf	wreg,f,c
  2397  000B86  E2FD               	bc	u891
  2398  000B88  5009               	movf	___aodiv@divisor,w,c
  2399  000B8A  100A               	iorwf	___aodiv@divisor+1,w,c
  2400  000B8C  100B               	iorwf	___aodiv@divisor+2,w,c
  2401  000B8E  100C               	iorwf	___aodiv@divisor+3,w,c
  2402  000B90  100D               	iorwf	___aodiv@divisor+4,w,c
  2403  000B92  100E               	iorwf	___aodiv@divisor+5,w,c
  2404  000B94  100F               	iorwf	___aodiv@divisor+6,w,c
  2405  000B96  1010               	iorwf	___aodiv@divisor+7,w,c
  2406  000B98  B4D8               	btfsc	status,2,c
  2407  000B9A  D046               	goto	l1568
  2408  000B9C  0E01               	movlw	1
  2409  000B9E  6E11               	movwf	___aodiv@counter,c
  2410  000BA0  D00A               	goto	l1554
  2411  000BA2                     l1552:
  2412  000BA2  90D8               	bcf	status,0,c
  2413  000BA4  3609               	rlcf	___aodiv@divisor,f,c
  2414  000BA6  360A               	rlcf	___aodiv@divisor+1,f,c
  2415  000BA8  360B               	rlcf	___aodiv@divisor+2,f,c
  2416  000BAA  360C               	rlcf	___aodiv@divisor+3,f,c
  2417  000BAC  360D               	rlcf	___aodiv@divisor+4,f,c
  2418  000BAE  360E               	rlcf	___aodiv@divisor+5,f,c
  2419  000BB0  360F               	rlcf	___aodiv@divisor+6,f,c
  2420  000BB2  3610               	rlcf	___aodiv@divisor+7,f,c
  2421  000BB4  2A11               	incf	___aodiv@counter,f,c
  2422  000BB6                     l1554:
  2423  000BB6  AE10               	btfss	___aodiv@divisor+7,7,c
  2424  000BB8  D7F4               	goto	l1552
  2425  000BBA                     u910:
  2426  000BBA  90D8               	bcf	status,0,c
  2427  000BBC  3613               	rlcf	___aodiv@quotient,f,c
  2428  000BBE  3614               	rlcf	___aodiv@quotient+1,f,c
  2429  000BC0  3615               	rlcf	___aodiv@quotient+2,f,c
  2430  000BC2  3616               	rlcf	___aodiv@quotient+3,f,c
  2431  000BC4  3617               	rlcf	___aodiv@quotient+4,f,c
  2432  000BC6  3618               	rlcf	___aodiv@quotient+5,f,c
  2433  000BC8  3619               	rlcf	___aodiv@quotient+6,f,c
  2434  000BCA  361A               	rlcf	___aodiv@quotient+7,f,c
  2435  000BCC  5009               	movf	___aodiv@divisor,w,c
  2436  000BCE  5C01               	subwf	___aodiv@dividend,w,c
  2437  000BD0  500A               	movf	___aodiv@divisor+1,w,c
  2438  000BD2  5802               	subwfb	___aodiv@dividend+1,w,c
  2439  000BD4  500B               	movf	___aodiv@divisor+2,w,c
  2440  000BD6  5803               	subwfb	___aodiv@dividend+2,w,c
  2441  000BD8  500C               	movf	___aodiv@divisor+3,w,c
  2442  000BDA  5804               	subwfb	___aodiv@dividend+3,w,c
  2443  000BDC  500D               	movf	___aodiv@divisor+4,w,c
  2444  000BDE  5805               	subwfb	___aodiv@dividend+4,w,c
  2445  000BE0  500E               	movf	___aodiv@divisor+5,w,c
  2446  000BE2  5806               	subwfb	___aodiv@dividend+5,w,c
  2447  000BE4  500F               	movf	___aodiv@divisor+6,w,c
  2448  000BE6  5807               	subwfb	___aodiv@dividend+6,w,c
  2449  000BE8  5010               	movf	___aodiv@divisor+7,w,c
  2450  000BEA  5808               	subwfb	___aodiv@dividend+7,w,c
  2451  000BEC  A0D8               	btfss	status,0,c
  2452  000BEE  D011               	goto	l1564
  2453  000BF0  5009               	movf	___aodiv@divisor,w,c
  2454  000BF2  5E01               	subwf	___aodiv@dividend,f,c
  2455  000BF4  500A               	movf	___aodiv@divisor+1,w,c
  2456  000BF6  5A02               	subwfb	___aodiv@dividend+1,f,c
  2457  000BF8  500B               	movf	___aodiv@divisor+2,w,c
  2458  000BFA  5A03               	subwfb	___aodiv@dividend+2,f,c
  2459  000BFC  500C               	movf	___aodiv@divisor+3,w,c
  2460  000BFE  5A04               	subwfb	___aodiv@dividend+3,f,c
  2461  000C00  500D               	movf	___aodiv@divisor+4,w,c
  2462  000C02  5A05               	subwfb	___aodiv@dividend+4,f,c
  2463  000C04  500E               	movf	___aodiv@divisor+5,w,c
  2464  000C06  5A06               	subwfb	___aodiv@dividend+5,f,c
  2465  000C08  500F               	movf	___aodiv@divisor+6,w,c
  2466  000C0A  5A07               	subwfb	___aodiv@dividend+6,f,c
  2467  000C0C  5010               	movf	___aodiv@divisor+7,w,c
  2468  000C0E  5A08               	subwfb	___aodiv@dividend+7,f,c
  2469  000C10  8013               	bsf	___aodiv@quotient,0,c
  2470  000C12                     l1564:
  2471  000C12  90D8               	bcf	status,0,c
  2472  000C14  3210               	rrcf	___aodiv@divisor+7,f,c
  2473  000C16  320F               	rrcf	___aodiv@divisor+6,f,c
  2474  000C18  320E               	rrcf	___aodiv@divisor+5,f,c
  2475  000C1A  320D               	rrcf	___aodiv@divisor+4,f,c
  2476  000C1C  320C               	rrcf	___aodiv@divisor+3,f,c
  2477  000C1E  320B               	rrcf	___aodiv@divisor+2,f,c
  2478  000C20  320A               	rrcf	___aodiv@divisor+1,f,c
  2479  000C22  3209               	rrcf	___aodiv@divisor,f,c
  2480  000C24  2E11               	decfsz	___aodiv@counter,f,c
  2481  000C26  D7C9               	goto	u910
  2482  000C28                     l1568:
  2483  000C28  5012               	movf	___aodiv@sign,w,c
  2484  000C2A  B4D8               	btfsc	status,2,c
  2485  000C2C  D010               	goto	l1572
  2486  000C2E  1E1A               	comf	___aodiv@quotient+7,f,c
  2487  000C30  1E19               	comf	___aodiv@quotient+6,f,c
  2488  000C32  1E18               	comf	___aodiv@quotient+5,f,c
  2489  000C34  1E17               	comf	___aodiv@quotient+4,f,c
  2490  000C36  1E16               	comf	___aodiv@quotient+3,f,c
  2491  000C38  1E15               	comf	___aodiv@quotient+2,f,c
  2492  000C3A  1E14               	comf	___aodiv@quotient+1,f,c
  2493  000C3C  6C13               	negf	___aodiv@quotient,c
  2494  000C3E  0E00               	movlw	0
  2495  000C40  2214               	addwfc	___aodiv@quotient+1,f,c
  2496  000C42  2215               	addwfc	___aodiv@quotient+2,f,c
  2497  000C44  2216               	addwfc	___aodiv@quotient+3,f,c
  2498  000C46  2217               	addwfc	___aodiv@quotient+4,f,c
  2499  000C48  2218               	addwfc	___aodiv@quotient+5,f,c
  2500  000C4A  2219               	addwfc	___aodiv@quotient+6,f,c
  2501  000C4C  221A               	addwfc	___aodiv@quotient+7,f,c
  2502  000C4E                     l1572:
  2503  000C4E  C013  F001         	movff	___aodiv@quotient,?___aodiv
  2504  000C52  C014  F002         	movff	___aodiv@quotient+1,?___aodiv+1
  2505  000C56  C015  F003         	movff	___aodiv@quotient+2,?___aodiv+2
  2506  000C5A  C016  F004         	movff	___aodiv@quotient+3,?___aodiv+3
  2507  000C5E  C017  F005         	movff	___aodiv@quotient+4,?___aodiv+4
  2508  000C62  C018  F006         	movff	___aodiv@quotient+5,?___aodiv+5
  2509  000C66  C019  F007         	movff	___aodiv@quotient+6,?___aodiv+6
  2510  000C6A  C01A  F008         	movff	___aodiv@quotient+7,?___aodiv+7
  2511  000C6E  0012               	return		;funcret
  2512  000C70                     __end_of___aodiv:
  2513                           	opt callstack 0
  2514                           
  2515 ;; *************** function _atoi *****************
  2516 ;; Defined at:
  2517 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\atoi.c"
  2518 ;; Parameters:    Size  Location     Type
  2519 ;;  s               2    7[COMRAM] PTR const unsigned char 
  2520 ;;		 -> STR_3(5), 
  2521 ;; Auto vars:     Size  Location     Type
  2522 ;;  n               2   20[COMRAM] int 
  2523 ;;  neg             2   13[COMRAM] int 
  2524 ;; Return value:  Size  Location     Type
  2525 ;;                  2    7[COMRAM] int 
  2526 ;; Registers used:
  2527 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2528 ;; Tracked objects:
  2529 ;;		On entry : 0/0
  2530 ;;		On exit  : 0/0
  2531 ;;		Unchanged: 0/0
  2532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2533 ;;      Params:         2       0       0       0       0       0       0
  2534 ;;      Locals:         9       0       0       0       0       0       0
  2535 ;;      Temps:          4       0       0       0       0       0       0
  2536 ;;      Totals:        15       0       0       0       0       0       0
  2537 ;;Total ram usage:       15 bytes
  2538 ;; Hardware stack levels used:    1
  2539 ;; Hardware stack levels required when called:    2
  2540 ;; This function calls:
  2541 ;;		___wmul
  2542 ;;		_isdigit
  2543 ;;		_isspace
  2544 ;; This function is called by:
  2545 ;;		_vfpfcnvrt
  2546 ;; This function uses a non-reentrant model
  2547 ;;
  2548                           
  2549                           	psect	text13
  2550  000C70                     __ptext13:
  2551                           	opt callstack 0
  2552  000C70                     _atoi:
  2553                           	opt callstack 25
  2554                           
  2555                           ;incstack = 0
  2556  000C70  0E00               	movlw	0
  2557  000C72  6E16               	movwf	atoi@n+1,c
  2558  000C74  0E00               	movlw	0
  2559  000C76  6E15               	movwf	atoi@n,c
  2560  000C78  0E00               	movlw	0
  2561  000C7A  6E0F               	movwf	atoi@neg+1,c
  2562  000C7C  0E00               	movlw	0
  2563  000C7E  6E0E               	movwf	atoi@neg,c
  2564  000C80  D002               	goto	l1702
  2565  000C82                     l1700:
  2566  000C82  4A08               	infsnz	atoi@s,f,c
  2567  000C84  2A09               	incf	atoi@s+1,f,c
  2568  000C86                     l1702:
  2569  000C86  0E01               	movlw	1
  2570  000C88  6E14               	movwf	_atoi$947,c
  2571  000C8A  C008  FFF6         	movff	atoi@s,tblptrl
  2572  000C8E  C009  FFF7         	movff	atoi@s+1,tblptrh
  2573  000C92                     	if	0	;tblptru may be non-zero
  2574  000C92                     	endif
  2575  000C92                     	if	0	;tblptru may be non-zero
  2576  000C92                     	endif
  2577  000C92  0008               	tblrd		*
  2578  000C94  50F5               	movf	tablat,w,c
  2579  000C96  0A20               	xorlw	32
  2580  000C98  B4D8               	btfsc	status,2,c
  2581  000C9A  D018               	goto	l1710
  2582  000C9C  0EF7               	movlw	247
  2583  000C9E  6E0A               	movwf	??_atoi& (0+255),c
  2584  000CA0  0EFF               	movlw	255
  2585  000CA2  6E0B               	movwf	(??_atoi+1)& (0+255),c
  2586  000CA4  C008  FFF6         	movff	atoi@s,tblptrl
  2587  000CA8  C009  FFF7         	movff	atoi@s+1,tblptrh
  2588  000CAC                     	if	0	;tblptru may be non-zero
  2589  000CAC                     	endif
  2590  000CAC                     	if	0	;tblptru may be non-zero
  2591  000CAC                     	endif
  2592  000CAC  0008               	tblrd		*
  2593  000CAE  50F5               	movf	tablat,w,c
  2594  000CB0  6E0C               	movwf	(??_atoi+2)& (0+255),c
  2595  000CB2  6A0D               	clrf	(??_atoi+3)& (0+255),c
  2596  000CB4  500A               	movf	??_atoi,w,c
  2597  000CB6  260C               	addwf	??_atoi+2,f,c
  2598  000CB8  500B               	movf	??_atoi+1,w,c
  2599  000CBA  220D               	addwfc	??_atoi+3,f,c
  2600  000CBC  500D               	movf	??_atoi+3,w,c
  2601  000CBE  E104               	bnz	u1190
  2602  000CC0  0E05               	movlw	5
  2603  000CC2  5C0C               	subwf	??_atoi+2,w,c
  2604  000CC4  A0D8               	btfss	status,0,c
  2605  000CC6  D002               	goto	l1710
  2606  000CC8                     u1190:
  2607  000CC8  0E00               	movlw	0
  2608  000CCA  6E14               	movwf	_atoi$947,c
  2609  000CCC                     l1710:
  2610  000CCC  C014  F010         	movff	_atoi$947,_atoi$946
  2611  000CD0  6A11               	clrf	_atoi$946+1,c
  2612  000CD2  5010               	movf	_atoi$946,w,c
  2613  000CD4  1011               	iorwf	_atoi$946+1,w,c
  2614  000CD6  B4D8               	btfsc	status,2,c
  2615  000CD8  D008               	goto	l1720
  2616  000CDA  D7D3               	goto	l1700
  2617  000CDC                     l1716:
  2618  000CDC  0E00               	movlw	0
  2619  000CDE  6E0F               	movwf	atoi@neg+1,c
  2620  000CE0  0E01               	movlw	1
  2621  000CE2  6E0E               	movwf	atoi@neg,c
  2622  000CE4                     l1718:
  2623  000CE4  4A08               	infsnz	atoi@s,f,c
  2624  000CE6  2A09               	incf	atoi@s+1,f,c
  2625  000CE8  D02E               	goto	l1726
  2626  000CEA                     l1720:
  2627  000CEA  C008  FFF6         	movff	atoi@s,tblptrl
  2628  000CEE  C009  FFF7         	movff	atoi@s+1,tblptrh
  2629  000CF2                     	if	0	;tblptru may be non-zero
  2630  000CF2                     	endif
  2631  000CF2                     	if	0	;tblptru may be non-zero
  2632  000CF2                     	endif
  2633  000CF2  0008               	tblrd		*
  2634  000CF4  50F5               	movf	tablat,w,c
  2635  000CF6  6E0A               	movwf	??_atoi& (0+255),c
  2636  000CF8  6A0B               	clrf	(??_atoi+1)& (0+255),c
  2637                           
  2638                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2639                           ; Switch size 1, requested type "simple"
  2640                           ; Number of cases is 1, Range of values is 0 to 0
  2641                           ; switch strategies available:
  2642                           ; Name         Instructions Cycles
  2643                           ; simple_byte            4     3 (average)
  2644                           ;	Chosen strategy is simple_byte
  2645  000CFA  500B               	movf	??_atoi+1,w,c
  2646  000CFC  0A00               	xorlw	0	; case 0
  2647  000CFE  A4D8               	btfss	status,2,c
  2648  000D00  D022               	goto	l1726
  2649                           
  2650                           ; Switch size 1, requested type "simple"
  2651                           ; Number of cases is 2, Range of values is 43 to 45
  2652                           ; switch strategies available:
  2653                           ; Name         Instructions Cycles
  2654                           ; simple_byte            7     4 (average)
  2655                           ;	Chosen strategy is simple_byte
  2656  000D02  500A               	movf	??_atoi,w,c
  2657  000D04  0A2B               	xorlw	43	; case 43
  2658  000D06  B4D8               	btfsc	status,2,c
  2659  000D08  D7ED               	goto	l1718
  2660  000D0A  0A06               	xorlw	6	; case 45
  2661  000D0C  B4D8               	btfsc	status,2,c
  2662  000D0E  D7E6               	goto	l1716
  2663  000D10  D01A               	goto	l1726
  2664  000D12                     l1722:
  2665  000D12  C015  F001         	movff	atoi@n,___wmul@multiplier
  2666  000D16  C016  F002         	movff	atoi@n+1,___wmul@multiplier+1
  2667  000D1A  0E00               	movlw	0
  2668  000D1C  6E04               	movwf	___wmul@multiplicand+1,c
  2669  000D1E  0E0A               	movlw	10
  2670  000D20  6E03               	movwf	___wmul@multiplicand,c
  2671  000D22  EC49  F00A         	call	___wmul	;wreg free
  2672  000D26  C008  FFF6         	movff	atoi@s,tblptrl
  2673  000D2A  C009  FFF7         	movff	atoi@s+1,tblptrh
  2674  000D2E                     	if	0	;tblptru may be non-zero
  2675  000D2E                     	endif
  2676  000D2E                     	if	0	;tblptru may be non-zero
  2677  000D2E                     	endif
  2678  000D2E  0008               	tblrd		*
  2679  000D30  50F5               	movf	tablat,w,c
  2680  000D32  5E01               	subwf	?___wmul,f,c
  2681  000D34  0E00               	movlw	0
  2682  000D36  5A02               	subwfb	?___wmul+1,f,c
  2683  000D38  0E30               	movlw	48
  2684  000D3A  2401               	addwf	?___wmul,w,c
  2685  000D3C  6E15               	movwf	atoi@n,c
  2686  000D3E  0E00               	movlw	0
  2687  000D40  2002               	addwfc	?___wmul+1,w,c
  2688  000D42  6E16               	movwf	atoi@n+1,c
  2689  000D44  D7CF               	goto	l1718
  2690  000D46                     l1726:
  2691  000D46  0ED0               	movlw	208
  2692  000D48  6E0A               	movwf	??_atoi& (0+255),c
  2693  000D4A  0EFF               	movlw	255
  2694  000D4C  6E0B               	movwf	(??_atoi+1)& (0+255),c
  2695  000D4E  C008  FFF6         	movff	atoi@s,tblptrl
  2696  000D52  C009  FFF7         	movff	atoi@s+1,tblptrh
  2697  000D56                     	if	0	;tblptru may be non-zero
  2698  000D56                     	endif
  2699  000D56                     	if	0	;tblptru may be non-zero
  2700  000D56                     	endif
  2701  000D56  0008               	tblrd		*
  2702  000D58  50F5               	movf	tablat,w,c
  2703  000D5A  6E0C               	movwf	(??_atoi+2)& (0+255),c
  2704  000D5C  6A0D               	clrf	(??_atoi+3)& (0+255),c
  2705  000D5E  500A               	movf	??_atoi,w,c
  2706  000D60  260C               	addwf	??_atoi+2,f,c
  2707  000D62  500B               	movf	??_atoi+1,w,c
  2708  000D64  220D               	addwfc	??_atoi+3,f,c
  2709  000D66  500D               	movf	??_atoi+3,w,c
  2710  000D68  E106               	bnz	u1210
  2711  000D6A  0E0A               	movlw	10
  2712  000D6C  5C0C               	subwf	??_atoi+2,w,c
  2713  000D6E  B0D8               	btfsc	status,0,c
  2714  000D70  D002               	goto	u1210
  2715  000D72  0E01               	movlw	1
  2716  000D74  D001               	goto	u1220
  2717  000D76                     u1210:
  2718  000D76  0E00               	movlw	0
  2719  000D78                     u1220:
  2720  000D78  6E12               	movwf	_atoi$948,c
  2721  000D7A  6A13               	clrf	_atoi$948+1,c
  2722  000D7C  5012               	movf	_atoi$948,w,c
  2723  000D7E  1013               	iorwf	_atoi$948+1,w,c
  2724  000D80  A4D8               	btfss	status,2,c
  2725  000D82  D7C7               	goto	l1722
  2726  000D84  500E               	movf	atoi@neg,w,c
  2727  000D86  100F               	iorwf	atoi@neg+1,w,c
  2728  000D88  A4D8               	btfss	status,2,c
  2729  000D8A  D00D               	goto	l893
  2730  000D8C  C015  F00A         	movff	atoi@n,??_atoi
  2731  000D90  C016  F00B         	movff	atoi@n+1,??_atoi+1
  2732  000D94  1E0A               	comf	??_atoi,f,c
  2733  000D96  1E0B               	comf	??_atoi+1,f,c
  2734  000D98  4A0A               	infsnz	??_atoi,f,c
  2735  000D9A  2A0B               	incf	??_atoi+1,f,c
  2736  000D9C  C00A  F008         	movff	??_atoi,?_atoi
  2737  000DA0  C00B  F009         	movff	??_atoi+1,?_atoi+1
  2738  000DA4  0012               	return	
  2739  000DA6                     l893:
  2740  000DA6  C015  F008         	movff	atoi@n,?_atoi
  2741  000DAA  C016  F009         	movff	atoi@n+1,?_atoi+1
  2742  000DAE  0012               	return		;funcret
  2743  000DB0                     __end_of_atoi:
  2744                           	opt callstack 0
  2745                           
  2746 ;; *************** function _isspace *****************
  2747 ;; Defined at:
  2748 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\isspace.c"
  2749 ;; Parameters:    Size  Location     Type
  2750 ;;  c               2    0[COMRAM] int 
  2751 ;; Auto vars:     Size  Location     Type
  2752 ;;		None
  2753 ;; Return value:  Size  Location     Type
  2754 ;;                  2    0[COMRAM] int 
  2755 ;; Registers used:
  2756 ;;		wreg, status,2, status,0
  2757 ;; Tracked objects:
  2758 ;;		On entry : 0/0
  2759 ;;		On exit  : 0/0
  2760 ;;		Unchanged: 0/0
  2761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2762 ;;      Params:         2       0       0       0       0       0       0
  2763 ;;      Locals:         1       0       0       0       0       0       0
  2764 ;;      Temps:          4       0       0       0       0       0       0
  2765 ;;      Totals:         7       0       0       0       0       0       0
  2766 ;;Total ram usage:        7 bytes
  2767 ;; Hardware stack levels used:    1
  2768 ;; Hardware stack levels required when called:    1
  2769 ;; This function calls:
  2770 ;;		Nothing
  2771 ;; This function is called by:
  2772 ;;		_atoi
  2773 ;; This function uses a non-reentrant model
  2774 ;;
  2775                           
  2776                           	psect	text14
  2777  00133C                     __ptext14:
  2778                           	opt callstack 0
  2779  00133C                     _isspace:
  2780                           	opt callstack 25
  2781                           
  2782                           ;incstack = 0
  2783  00133C  0E01               	movlw	1
  2784  00133E  6E07               	movwf	_isspace$964,c
  2785  001340  0E20               	movlw	32
  2786  001342  1801               	xorwf	isspace@c,w,c
  2787  001344  1002               	iorwf	isspace@c+1,w,c
  2788  001346  B4D8               	btfsc	status,2,c
  2789  001348  D014               	goto	l1620
  2790  00134A  0EF7               	movlw	247
  2791  00134C  6E03               	movwf	??_isspace& (0+255),c
  2792  00134E  0EFF               	movlw	255
  2793  001350  6E04               	movwf	(??_isspace+1)& (0+255),c
  2794  001352  C001  F005         	movff	isspace@c,??_isspace+2
  2795  001356  C002  F006         	movff	isspace@c+1,??_isspace+3
  2796  00135A  5003               	movf	??_isspace,w,c
  2797  00135C  2605               	addwf	??_isspace+2,f,c
  2798  00135E  5004               	movf	??_isspace+1,w,c
  2799  001360  2206               	addwfc	??_isspace+3,f,c
  2800  001362  5006               	movf	??_isspace+3,w,c
  2801  001364  E104               	bnz	u1010
  2802  001366  0E05               	movlw	5
  2803  001368  5C05               	subwf	??_isspace+2,w,c
  2804  00136A  A0D8               	btfss	status,0,c
  2805  00136C  D002               	goto	l1620
  2806  00136E                     u1010:
  2807  00136E  0E00               	movlw	0
  2808  001370  6E07               	movwf	_isspace$964,c
  2809  001372                     l1620:
  2810  001372  C007  F001         	movff	_isspace$964,?_isspace
  2811  001376  6A02               	clrf	?_isspace+1,c
  2812  001378  0012               	return		;funcret
  2813  00137A                     __end_of_isspace:
  2814                           	opt callstack 0
  2815                           
  2816 ;; *************** function _isdigit *****************
  2817 ;; Defined at:
  2818 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\isdigit.c"
  2819 ;; Parameters:    Size  Location     Type
  2820 ;;  c               2    0[COMRAM] int 
  2821 ;; Auto vars:     Size  Location     Type
  2822 ;;		None
  2823 ;; Return value:  Size  Location     Type
  2824 ;;                  2    0[COMRAM] int 
  2825 ;; Registers used:
  2826 ;;		wreg, status,2, status,0
  2827 ;; Tracked objects:
  2828 ;;		On entry : 0/0
  2829 ;;		On exit  : 0/0
  2830 ;;		Unchanged: 0/0
  2831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2832 ;;      Params:         2       0       0       0       0       0       0
  2833 ;;      Locals:         0       0       0       0       0       0       0
  2834 ;;      Temps:          4       0       0       0       0       0       0
  2835 ;;      Totals:         6       0       0       0       0       0       0
  2836 ;;Total ram usage:        6 bytes
  2837 ;; Hardware stack levels used:    1
  2838 ;; Hardware stack levels required when called:    1
  2839 ;; This function calls:
  2840 ;;		Nothing
  2841 ;; This function is called by:
  2842 ;;		_vfpfcnvrt
  2843 ;;		_atoi
  2844 ;; This function uses a non-reentrant model
  2845 ;;
  2846                           
  2847                           	psect	text15
  2848  0013E4                     __ptext15:
  2849                           	opt callstack 0
  2850  0013E4                     _isdigit:
  2851                           	opt callstack 26
  2852                           
  2853                           ;incstack = 0
  2854  0013E4  0ED0               	movlw	208
  2855  0013E6  6E03               	movwf	??_isdigit& (0+255),c
  2856  0013E8  0EFF               	movlw	255
  2857  0013EA  6E04               	movwf	(??_isdigit+1)& (0+255),c
  2858  0013EC  C001  F005         	movff	isdigit@c,??_isdigit+2
  2859  0013F0  C002  F006         	movff	isdigit@c+1,??_isdigit+3
  2860  0013F4  5003               	movf	??_isdigit,w,c
  2861  0013F6  2605               	addwf	??_isdigit+2,f,c
  2862  0013F8  5004               	movf	??_isdigit+1,w,c
  2863  0013FA  2206               	addwfc	??_isdigit+3,f,c
  2864  0013FC  5006               	movf	??_isdigit+3,w,c
  2865  0013FE  E106               	bnz	u850
  2866  001400  0E0A               	movlw	10
  2867  001402  5C05               	subwf	??_isdigit+2,w,c
  2868  001404  B0D8               	btfsc	status,0,c
  2869  001406  D002               	goto	u850
  2870  001408  0E01               	movlw	1
  2871  00140A  D001               	goto	u860
  2872  00140C                     u850:
  2873  00140C  0E00               	movlw	0
  2874  00140E                     u860:
  2875  00140E  6E01               	movwf	?_isdigit,c
  2876  001410  6A02               	clrf	?_isdigit+1,c
  2877  001412  0012               	return		;funcret
  2878  001414                     __end_of_isdigit:
  2879                           	opt callstack 0
  2880                           
  2881 ;; *************** function ___wmul *****************
  2882 ;; Defined at:
  2883 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
  2884 ;; Parameters:    Size  Location     Type
  2885 ;;  multiplier      2    0[COMRAM] unsigned int 
  2886 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2887 ;; Auto vars:     Size  Location     Type
  2888 ;;  product         2    4[COMRAM] unsigned int 
  2889 ;; Return value:  Size  Location     Type
  2890 ;;                  2    0[COMRAM] unsigned int 
  2891 ;; Registers used:
  2892 ;;		wreg, status,2, status,0, prodl, prodh
  2893 ;; Tracked objects:
  2894 ;;		On entry : 0/0
  2895 ;;		On exit  : 0/0
  2896 ;;		Unchanged: 0/0
  2897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2898 ;;      Params:         4       0       0       0       0       0       0
  2899 ;;      Locals:         2       0       0       0       0       0       0
  2900 ;;      Temps:          0       0       0       0       0       0       0
  2901 ;;      Totals:         6       0       0       0       0       0       0
  2902 ;;Total ram usage:        6 bytes
  2903 ;; Hardware stack levels used:    1
  2904 ;; Hardware stack levels required when called:    1
  2905 ;; This function calls:
  2906 ;;		Nothing
  2907 ;; This function is called by:
  2908 ;;		_atoi
  2909 ;; This function uses a non-reentrant model
  2910 ;;
  2911                           
  2912                           	psect	text16
  2913  001492                     __ptext16:
  2914                           	opt callstack 0
  2915  001492                     ___wmul:
  2916                           	opt callstack 25
  2917                           
  2918                           ;incstack = 0
  2919  001492  5001               	movf	___wmul@multiplier,w,c
  2920  001494  0203               	mulwf	___wmul@multiplicand,c
  2921  001496  CFF3 F005          	movff	prodl,___wmul@product
  2922  00149A  CFF4 F006          	movff	prodh,___wmul@product+1
  2923  00149E  5001               	movf	___wmul@multiplier,w,c
  2924  0014A0  0204               	mulwf	___wmul@multiplicand+1,c
  2925  0014A2  50F3               	movf	prodl,w,c
  2926  0014A4  2606               	addwf	___wmul@product+1,f,c
  2927  0014A6  5002               	movf	___wmul@multiplier+1,w,c
  2928  0014A8  0203               	mulwf	___wmul@multiplicand,c
  2929  0014AA  50F3               	movf	prodl,w,c
  2930  0014AC  2606               	addwf	___wmul@product+1,f,c
  2931  0014AE  C005  F001         	movff	___wmul@product,?___wmul
  2932  0014B2  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2933  0014B6  0012               	return		;funcret
  2934  0014B8                     __end_of___wmul:
  2935                           	opt callstack 0
  2936                           
  2937 ;; *************** function _lcd_ini *****************
  2938 ;; Defined at:
  2939 ;;		line 3 in file "../Bibliotecas/LCD4b.c"
  2940 ;; Parameters:    Size  Location     Type
  2941 ;;		None
  2942 ;; Auto vars:     Size  Location     Type
  2943 ;;  i               1    5[COMRAM] unsigned char 
  2944 ;; Return value:  Size  Location     Type
  2945 ;;                  1    wreg      void 
  2946 ;; Registers used:
  2947 ;;		wreg, status,2, status,0, cstack
  2948 ;; Tracked objects:
  2949 ;;		On entry : 0/0
  2950 ;;		On exit  : 0/0
  2951 ;;		Unchanged: 0/0
  2952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2953 ;;      Params:         0       0       0       0       0       0       0
  2954 ;;      Locals:         1       0       0       0       0       0       0
  2955 ;;      Temps:          1       0       0       0       0       0       0
  2956 ;;      Totals:         2       0       0       0       0       0       0
  2957 ;;Total ram usage:        2 bytes
  2958 ;; Hardware stack levels used:    1
  2959 ;; Hardware stack levels required when called:    3
  2960 ;; This function calls:
  2961 ;;		_lcd_cmd
  2962 ;; This function is called by:
  2963 ;;		_main
  2964 ;; This function uses a non-reentrant model
  2965 ;;
  2966                           
  2967                           	psect	text17
  2968  001190                     __ptext17:
  2969                           	opt callstack 0
  2970  001190                     _lcd_ini:
  2971                           	opt callstack 27
  2972                           
  2973                           ;../Bibliotecas/LCD4b.c: 5: char i;;../Bibliotecas/LCD4b.c: 7: TRISD = 0b00000000;
  2974                           
  2975                           ;incstack = 0
  2976  001190  0E00               	movlw	0
  2977  001192  6E95               	movwf	3989,c	;volatile
  2978                           
  2979                           ;../Bibliotecas/LCD4b.c: 8: TRISEbits.TRISE1 = 0;
  2980  001194  9296               	bcf	3990,1,c	;volatile
  2981                           
  2982                           ;../Bibliotecas/LCD4b.c: 9: TRISEbits.TRISE0 = 0;
  2983  001196  9096               	bcf	3990,0,c	;volatile
  2984                           
  2985                           ;../Bibliotecas/LCD4b.c: 11: PORTD = 0b00000000;
  2986  001198  0E00               	movlw	0
  2987  00119A  6E83               	movwf	3971,c	;volatile
  2988                           
  2989                           ;../Bibliotecas/LCD4b.c: 12: PORTEbits.RE0 = 0;
  2990  00119C  9084               	bcf	3972,0,c	;volatile
  2991                           
  2992                           ;../Bibliotecas/LCD4b.c: 13: PORTEbits.RE1 = 0;
  2993  00119E  9284               	bcf	3972,1,c	;volatile
  2994                           
  2995                           ;../Bibliotecas/LCD4b.c: 15: _delay((unsigned long)((15)*(8000000/4000.0)));
  2996  0011A0  0E27               	movlw	39
  2997  0011A2  6E05               	movwf	??_lcd_ini& (0+255),c
  2998  0011A4  0EF5               	movlw	245
  2999  0011A6                     u1467:
  3000  0011A6  2EE8               	decfsz	wreg,f,c
  3001  0011A8  D7FE               	bra	u1467
  3002  0011AA  2E05               	decfsz	??_lcd_ini& (0+255),f,c
  3003  0011AC  D7FC               	bra	u1467
  3004  0011AE  F000               	nop	
  3005                           
  3006                           ;../Bibliotecas/LCD4b.c: 18: for(i=0;i<=2;i++)
  3007  0011B0  0E00               	movlw	0
  3008  0011B2  6E06               	movwf	lcd_ini@i,c
  3009  0011B4                     l1890:
  3010                           
  3011                           ;../Bibliotecas/LCD4b.c: 19:    {;../Bibliotecas/LCD4b.c: 20:    lcd_cmd(0x30);
  3012  0011B4  0E30               	movlw	48
  3013  0011B6  EC6A  F007         	call	_lcd_cmd
  3014                           
  3015                           ;../Bibliotecas/LCD4b.c: 21:    _delay((unsigned long)((5)*(8000000/4000.0)));
  3016  0011BA  0E0D               	movlw	13
  3017  0011BC  6E05               	movwf	??_lcd_ini& (0+255),c
  3018  0011BE  0EFC               	movlw	252
  3019  0011C0                     u1477:
  3020  0011C0  2EE8               	decfsz	wreg,f,c
  3021  0011C2  D7FE               	bra	u1477
  3022  0011C4  2E05               	decfsz	??_lcd_ini& (0+255),f,c
  3023  0011C6  D7FC               	bra	u1477
  3024                           
  3025                           ;../Bibliotecas/LCD4b.c: 22:    }
  3026  0011C8  2A06               	incf	lcd_ini@i,f,c
  3027  0011CA  0E02               	movlw	2
  3028  0011CC  6406               	cpfsgt	lcd_ini@i,c
  3029  0011CE  D7F2               	goto	l1890
  3030                           
  3031                           ;../Bibliotecas/LCD4b.c: 24:    lcd_cmd(0x02);
  3032  0011D0  0E02               	movlw	2
  3033  0011D2  EC6A  F007         	call	_lcd_cmd
  3034                           
  3035                           ;../Bibliotecas/LCD4b.c: 25:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3036  0011D6  0E1A               	movlw	26
  3037  0011D8                     u1487:
  3038  0011D8  2EE8               	decfsz	wreg,f,c
  3039  0011DA  D7FE               	bra	u1487
  3040  0011DC  D000               	nop2	
  3041                           
  3042                           ;../Bibliotecas/LCD4b.c: 26:    lcd_cmd(0x28);
  3043  0011DE  0E28               	movlw	40
  3044  0011E0  EC6A  F007         	call	_lcd_cmd
  3045                           
  3046                           ;../Bibliotecas/LCD4b.c: 27:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3047  0011E4  0E1A               	movlw	26
  3048  0011E6                     u1497:
  3049  0011E6  2EE8               	decfsz	wreg,f,c
  3050  0011E8  D7FE               	bra	u1497
  3051  0011EA  D000               	nop2	
  3052                           
  3053                           ;../Bibliotecas/LCD4b.c: 28:    lcd_cmd(0x01);
  3054  0011EC  0E01               	movlw	1
  3055  0011EE  EC6A  F007         	call	_lcd_cmd
  3056                           
  3057                           ;../Bibliotecas/LCD4b.c: 29:    _delay((unsigned long)((2)*(8000000/4000.0)));
  3058  0011F2  0E06               	movlw	6
  3059  0011F4  6E05               	movwf	??_lcd_ini& (0+255),c
  3060  0011F6  0E30               	movlw	48
  3061  0011F8                     u1507:
  3062  0011F8  2EE8               	decfsz	wreg,f,c
  3063  0011FA  D7FE               	bra	u1507
  3064  0011FC  2E05               	decfsz	??_lcd_ini& (0+255),f,c
  3065  0011FE  D7FC               	bra	u1507
  3066  001200  D000               	nop2	
  3067                           
  3068                           ;../Bibliotecas/LCD4b.c: 30:    lcd_cmd(0x0C);
  3069  001202  0E0C               	movlw	12
  3070  001204  EC6A  F007         	call	_lcd_cmd
  3071                           
  3072                           ;../Bibliotecas/LCD4b.c: 31:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3073  001208  0E1A               	movlw	26
  3074  00120A                     u1517:
  3075  00120A  2EE8               	decfsz	wreg,f,c
  3076  00120C  D7FE               	bra	u1517
  3077  00120E  D000               	nop2	
  3078                           
  3079                           ;../Bibliotecas/LCD4b.c: 32:    lcd_cmd(0x06);
  3080  001210  0E06               	movlw	6
  3081  001212  EC6A  F007         	call	_lcd_cmd
  3082                           
  3083                           ;../Bibliotecas/LCD4b.c: 33:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3084  001216  0E1A               	movlw	26
  3085  001218                     u1527:
  3086  001218  2EE8               	decfsz	wreg,f,c
  3087  00121A  D7FE               	bra	u1527
  3088  00121C  D000               	nop2	
  3089  00121E  0012               	return		;funcret
  3090  001220                     __end_of_lcd_ini:
  3091                           	opt callstack 0
  3092                           
  3093 ;; *************** function _lcd_escreve_bf *****************
  3094 ;; Defined at:
  3095 ;;		line 82 in file "../Bibliotecas/LCD4b.c"
  3096 ;; Parameters:    Size  Location     Type
  3097 ;;  lin             1    wreg     unsigned char 
  3098 ;;  col             1    6[COMRAM] unsigned char 
  3099 ;;  str             2    7[COMRAM] PTR unsigned char 
  3100 ;;		 -> bufferLCD(16), STR_2(3), STR_1(7), 
  3101 ;; Auto vars:     Size  Location     Type
  3102 ;;  lin             1   10[COMRAM] unsigned char 
  3103 ;;  end             1    9[COMRAM] unsigned char 
  3104 ;; Return value:  Size  Location     Type
  3105 ;;                  1    wreg      void 
  3106 ;; Registers used:
  3107 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3108 ;; Tracked objects:
  3109 ;;		On entry : 0/0
  3110 ;;		On exit  : 0/0
  3111 ;;		Unchanged: 0/0
  3112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3113 ;;      Params:         3       0       0       0       0       0       0
  3114 ;;      Locals:         2       0       0       0       0       0       0
  3115 ;;      Temps:          0       0       0       0       0       0       0
  3116 ;;      Totals:         5       0       0       0       0       0       0
  3117 ;;Total ram usage:        5 bytes
  3118 ;; Hardware stack levels used:    1
  3119 ;; Hardware stack levels required when called:    4
  3120 ;; This function calls:
  3121 ;;		_lcd_envia_byte
  3122 ;; This function is called by:
  3123 ;;		_main
  3124 ;; This function uses a non-reentrant model
  3125 ;;
  3126                           
  3127                           	psect	text18
  3128  001220                     __ptext18:
  3129                           	opt callstack 0
  3130  001220                     _lcd_escreve_bf:
  3131                           	opt callstack 26
  3132                           
  3133                           ;incstack = 0
  3134                           ;lcd_escreve_bf@lin stored from wreg
  3135  001220  6E0B               	movwf	lcd_escreve_bf@lin,c
  3136                           
  3137                           ;../Bibliotecas/LCD4b.c: 82: void lcd_escreve_bf(char lin, char col, char *str);../Bibli
      +                          otecas/LCD4b.c: 83: {;../Bibliotecas/LCD4b.c: 84:     char end;;../Bibliotecas/LCD4b.c: 
      +                          87:     if (lin == 1) {
  3138  001222  040B               	decf	lcd_escreve_bf@lin,w,c
  3139  001224  A4D8               	btfss	status,2,c
  3140  001226  D003               	goto	l1916
  3141                           
  3142                           ;../Bibliotecas/LCD4b.c: 88:         end = col + 0x80 - 1;
  3143  001228  5007               	movf	lcd_escreve_bf@col,w,c
  3144  00122A  0F7F               	addlw	127
  3145  00122C  D006               	goto	L3
  3146  00122E                     l1916:
  3147  00122E  0E02               	movlw	2
  3148  001230  180B               	xorwf	lcd_escreve_bf@lin,w,c
  3149  001232  A4D8               	btfss	status,2,c
  3150  001234  D003               	goto	l1920
  3151                           
  3152                           ;../Bibliotecas/LCD4b.c: 91:         end = col + 0xC0 - 1;
  3153  001236  5007               	movf	lcd_escreve_bf@col,w,c
  3154  001238  0FBF               	addlw	191
  3155  00123A                     L3:
  3156  00123A  6E0A               	movwf	lcd_escreve_bf@end,c
  3157  00123C                     l1920:
  3158                           
  3159                           ;../Bibliotecas/LCD4b.c: 94:     lcd_envia_byte(0,end);
  3160  00123C  C00A  F005         	movff	lcd_escreve_bf@end,lcd_envia_byte@dado
  3161  001240  0E00               	movlw	0
  3162  001242  EC5C  F00A         	call	_lcd_envia_byte
  3163                           
  3164                           ;../Bibliotecas/LCD4b.c: 98:     while (*str){
  3165  001246  D016               	goto	l1926
  3166  001248                     l1922:
  3167                           
  3168                           ;../Bibliotecas/LCD4b.c: 99:         lcd_envia_byte(1,*str);
  3169  001248  C008  FFF6         	movff	lcd_escreve_bf@str,tblptrl
  3170  00124C  C009  FFF7         	movff	lcd_escreve_bf@str+1,tblptrh
  3171  001250  6AF8               	clrf	tblptru,c
  3172  001252  0E05               	movlw	(high __ramtop+-1)
  3173  001254  64F7               	cpfsgt	tblptrh,c
  3174  001256  D003               	bra	u1417
  3175  001258  0008               	tblrd		*
  3176  00125A  50F5               	movf	tablat,w,c
  3177  00125C  D005               	bra	u1410
  3178  00125E                     u1417:
  3179  00125E  CFF6 FFE1          	movff	tblptrl,fsr1l
  3180  001262  CFF7 FFE2          	movff	tblptrh,fsr1h
  3181  001266  50E7               	movf	indf1,w,c
  3182  001268                     u1410:
  3183  001268  6E05               	movwf	lcd_envia_byte@dado,c
  3184  00126A  0E01               	movlw	1
  3185  00126C  EC5C  F00A         	call	_lcd_envia_byte
  3186                           
  3187                           ;../Bibliotecas/LCD4b.c: 100:         str++;
  3188  001270  4A08               	infsnz	lcd_escreve_bf@str,f,c
  3189  001272  2A09               	incf	lcd_escreve_bf@str+1,f,c
  3190  001274                     l1926:
  3191                           
  3192                           ;../Bibliotecas/LCD4b.c: 98:     while (*str){
  3193  001274  C008  FFF6         	movff	lcd_escreve_bf@str,tblptrl
  3194  001278  C009  FFF7         	movff	lcd_escreve_bf@str+1,tblptrh
  3195  00127C  6AF8               	clrf	tblptru,c
  3196  00127E  0E05               	movlw	(high __ramtop+-1)
  3197  001280  64F7               	cpfsgt	tblptrh,c
  3198  001282  D003               	bra	u1427
  3199  001284  0008               	tblrd		*
  3200  001286  50F5               	movf	tablat,w,c
  3201  001288  D005               	bra	u1420
  3202  00128A                     u1427:
  3203  00128A  CFF6 FFE1          	movff	tblptrl,fsr1l
  3204  00128E  CFF7 FFE2          	movff	tblptrh,fsr1h
  3205  001292  50E7               	movf	indf1,w,c
  3206  001294                     u1420:
  3207  001294  0900               	iorlw	0
  3208  001296  B4D8               	btfsc	status,2,c
  3209  001298  0012               	return	
  3210  00129A  D7D6               	goto	l1922
  3211  00129C                     __end_of_lcd_escreve_bf:
  3212                           	opt callstack 0
  3213                           
  3214 ;; *************** function _lcd_envia_byte *****************
  3215 ;; Defined at:
  3216 ;;		line 74 in file "../Bibliotecas/LCD4b.c"
  3217 ;; Parameters:    Size  Location     Type
  3218 ;;  nivel           1    wreg     unsigned char 
  3219 ;;  dado            1    4[COMRAM] unsigned char 
  3220 ;; Auto vars:     Size  Location     Type
  3221 ;;  nivel           1    5[COMRAM] unsigned char 
  3222 ;; Return value:  Size  Location     Type
  3223 ;;                  1    wreg      void 
  3224 ;; Registers used:
  3225 ;;		wreg, status,2, status,0, cstack
  3226 ;; Tracked objects:
  3227 ;;		On entry : 0/0
  3228 ;;		On exit  : 0/0
  3229 ;;		Unchanged: 0/0
  3230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3231 ;;      Params:         1       0       0       0       0       0       0
  3232 ;;      Locals:         1       0       0       0       0       0       0
  3233 ;;      Temps:          0       0       0       0       0       0       0
  3234 ;;      Totals:         2       0       0       0       0       0       0
  3235 ;;Total ram usage:        2 bytes
  3236 ;; Hardware stack levels used:    1
  3237 ;; Hardware stack levels required when called:    3
  3238 ;; This function calls:
  3239 ;;		_lcd_cmd
  3240 ;; This function is called by:
  3241 ;;		_lcd_escreve_bf
  3242 ;; This function uses a non-reentrant model
  3243 ;;
  3244                           
  3245                           	psect	text19
  3246  0014B8                     __ptext19:
  3247                           	opt callstack 0
  3248  0014B8                     _lcd_envia_byte:
  3249                           	opt callstack 26
  3250                           
  3251                           ;incstack = 0
  3252                           ;lcd_envia_byte@nivel stored from wreg
  3253  0014B8  6E06               	movwf	lcd_envia_byte@nivel,c
  3254                           
  3255                           ;../Bibliotecas/LCD4b.c: 74: void lcd_envia_byte(char nivel, char dado);../Bibliotecas/L
      +                          CD4b.c: 75: {;../Bibliotecas/LCD4b.c: 76:     PORTEbits.RE0 = nivel;
  3256  0014BA  B006               	btfsc	lcd_envia_byte@nivel,0,c
  3257  0014BC  D002               	bra	u1365
  3258  0014BE  9084               	bcf	3972,0,c	;volatile
  3259  0014C0  D001               	bra	u1366
  3260  0014C2                     u1365:
  3261  0014C2  8084               	bsf	3972,0,c	;volatile
  3262  0014C4                     u1366:
  3263                           
  3264                           ;../Bibliotecas/LCD4b.c: 77:     _delay((unsigned long)((100)*(8000000/4000000.0)));
  3265  0014C4  0E42               	movlw	66
  3266  0014C6                     u1537:
  3267  0014C6  2EE8               	decfsz	wreg,f,c
  3268  0014C8  D7FE               	bra	u1537
  3269  0014CA  D000               	nop2	
  3270                           
  3271                           ;../Bibliotecas/LCD4b.c: 78:     PORTEbits.RE1 = 0;
  3272  0014CC  9284               	bcf	3972,1,c	;volatile
  3273                           
  3274                           ;../Bibliotecas/LCD4b.c: 79:     lcd_cmd(dado);
  3275  0014CE  5005               	movf	lcd_envia_byte@dado,w,c
  3276  0014D0  EC6A  F007         	call	_lcd_cmd
  3277  0014D4  0012               	return		;funcret
  3278  0014D6                     __end_of_lcd_envia_byte:
  3279                           	opt callstack 0
  3280                           
  3281 ;; *************** function _lcd_cmd *****************
  3282 ;; Defined at:
  3283 ;;		line 48 in file "../Bibliotecas/LCD4b.c"
  3284 ;; Parameters:    Size  Location     Type
  3285 ;;  cmd             1    wreg     unsigned char 
  3286 ;; Auto vars:     Size  Location     Type
  3287 ;;  cmd             1    3[COMRAM] unsigned char 
  3288 ;; Return value:  Size  Location     Type
  3289 ;;                  1    wreg      void 
  3290 ;; Registers used:
  3291 ;;		wreg, status,2, status,0, cstack
  3292 ;; Tracked objects:
  3293 ;;		On entry : 0/0
  3294 ;;		On exit  : 0/0
  3295 ;;		Unchanged: 0/0
  3296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3297 ;;      Params:         0       0       0       0       0       0       0
  3298 ;;      Locals:         1       0       0       0       0       0       0
  3299 ;;      Temps:          1       0       0       0       0       0       0
  3300 ;;      Totals:         2       0       0       0       0       0       0
  3301 ;;Total ram usage:        2 bytes
  3302 ;; Hardware stack levels used:    1
  3303 ;; Hardware stack levels required when called:    2
  3304 ;; This function calls:
  3305 ;;		_set_bit
  3306 ;; This function is called by:
  3307 ;;		_lcd_ini
  3308 ;;		_lcd_envia_byte
  3309 ;; This function uses a non-reentrant model
  3310 ;;
  3311                           
  3312                           	psect	text20
  3313  000ED4                     __ptext20:
  3314                           	opt callstack 0
  3315  000ED4                     _lcd_cmd:
  3316                           	opt callstack 27
  3317                           
  3318                           ;incstack = 0
  3319                           ;lcd_cmd@cmd stored from wreg
  3320  000ED4  6E04               	movwf	lcd_cmd@cmd,c
  3321                           
  3322                           ;../Bibliotecas/LCD4b.c: 48: void lcd_cmd(char cmd);../Bibliotecas/LCD4b.c: 49: {;../Bib
      +                          liotecas/LCD4b.c: 52:     PORTDbits.RD4 = set_bit(cmd,0b00010000);
  3323  000ED6  0E10               	movlw	16
  3324  000ED8  6E01               	movwf	set_bit@comp,c
  3325  000EDA  5004               	movf	lcd_cmd@cmd,w,c
  3326  000EDC  EC6B  F00A         	call	_set_bit
  3327  000EE0  6E03               	movwf	??_lcd_cmd& (0+255),c
  3328  000EE2  3A03               	swapf	??_lcd_cmd,f,c
  3329  000EE4  5083               	movf	3971,w,c	;volatile
  3330  000EE6  1803               	xorwf	??_lcd_cmd,w,c
  3331  000EE8  0BEF               	andlw	-17
  3332  000EEA  1803               	xorwf	??_lcd_cmd,w,c
  3333  000EEC  6E83               	movwf	3971,c	;volatile
  3334                           
  3335                           ;../Bibliotecas/LCD4b.c: 53:     PORTDbits.RD5 = set_bit(cmd,0b00100000);
  3336  000EEE  0E20               	movlw	32
  3337  000EF0  6E01               	movwf	set_bit@comp,c
  3338  000EF2  5004               	movf	lcd_cmd@cmd,w,c
  3339  000EF4  EC6B  F00A         	call	_set_bit
  3340  000EF8  6E03               	movwf	??_lcd_cmd& (0+255),c
  3341  000EFA  3A03               	swapf	??_lcd_cmd,f,c
  3342  000EFC  4603               	rlncf	??_lcd_cmd,f,c
  3343  000EFE  5083               	movf	3971,w,c	;volatile
  3344  000F00  1803               	xorwf	??_lcd_cmd,w,c
  3345  000F02  0BDF               	andlw	-33
  3346  000F04  1803               	xorwf	??_lcd_cmd,w,c
  3347  000F06  6E83               	movwf	3971,c	;volatile
  3348                           
  3349                           ;../Bibliotecas/LCD4b.c: 54:     PORTDbits.RD6 = set_bit(cmd,0b01000000);
  3350  000F08  0E40               	movlw	64
  3351  000F0A  6E01               	movwf	set_bit@comp,c
  3352  000F0C  5004               	movf	lcd_cmd@cmd,w,c
  3353  000F0E  EC6B  F00A         	call	_set_bit
  3354  000F12  6E03               	movwf	??_lcd_cmd& (0+255),c
  3355  000F14  3A03               	swapf	??_lcd_cmd,f,c
  3356  000F16  4603               	rlncf	??_lcd_cmd,f,c
  3357  000F18  4603               	rlncf	??_lcd_cmd,f,c
  3358  000F1A  5083               	movf	3971,w,c	;volatile
  3359  000F1C  1803               	xorwf	??_lcd_cmd,w,c
  3360  000F1E  0BBF               	andlw	-65
  3361  000F20  1803               	xorwf	??_lcd_cmd,w,c
  3362  000F22  6E83               	movwf	3971,c	;volatile
  3363                           
  3364                           ;../Bibliotecas/LCD4b.c: 55:     PORTDbits.RD7 = set_bit(cmd,0b10000000);
  3365  000F24  0E80               	movlw	128
  3366  000F26  6E01               	movwf	set_bit@comp,c
  3367  000F28  5004               	movf	lcd_cmd@cmd,w,c
  3368  000F2A  EC6B  F00A         	call	_set_bit
  3369  000F2E  6E03               	movwf	??_lcd_cmd& (0+255),c
  3370  000F30  3203               	rrcf	??_lcd_cmd,f,c
  3371  000F32  3203               	rrcf	??_lcd_cmd,f,c
  3372  000F34  5083               	movf	3971,w,c	;volatile
  3373  000F36  1803               	xorwf	??_lcd_cmd,w,c
  3374  000F38  0B7F               	andlw	-129
  3375  000F3A  1803               	xorwf	??_lcd_cmd,w,c
  3376  000F3C  6E83               	movwf	3971,c	;volatile
  3377                           
  3378                           ;../Bibliotecas/LCD4b.c: 57:     PORTEbits.RE1 = 1;
  3379  000F3E  8284               	bsf	3972,1,c	;volatile
  3380                           
  3381                           ;../Bibliotecas/LCD4b.c: 58:     PORTEbits.RE1 = 0;
  3382  000F40  9284               	bcf	3972,1,c	;volatile
  3383                           
  3384                           ;../Bibliotecas/LCD4b.c: 60:     _delay((unsigned long)((100)*(8000000/4000000.0)));
  3385  000F42  0E42               	movlw	66
  3386  000F44                     u1547:
  3387  000F44  2EE8               	decfsz	wreg,f,c
  3388  000F46  D7FE               	bra	u1547
  3389  000F48  D000               	nop2	
  3390                           
  3391                           ;../Bibliotecas/LCD4b.c: 64:     PORTDbits.RD4 = set_bit(cmd,0b00000001);
  3392  000F4A  0E01               	movlw	1
  3393  000F4C  6E01               	movwf	set_bit@comp,c
  3394  000F4E  5004               	movf	lcd_cmd@cmd,w,c
  3395  000F50  EC6B  F00A         	call	_set_bit
  3396  000F54  6E03               	movwf	??_lcd_cmd& (0+255),c
  3397  000F56  3A03               	swapf	??_lcd_cmd,f,c
  3398  000F58  5083               	movf	3971,w,c	;volatile
  3399  000F5A  1803               	xorwf	??_lcd_cmd,w,c
  3400  000F5C  0BEF               	andlw	-17
  3401  000F5E  1803               	xorwf	??_lcd_cmd,w,c
  3402  000F60  6E83               	movwf	3971,c	;volatile
  3403                           
  3404                           ;../Bibliotecas/LCD4b.c: 65:     PORTDbits.RD5 = set_bit(cmd,0b00000010);
  3405  000F62  0E02               	movlw	2
  3406  000F64  6E01               	movwf	set_bit@comp,c
  3407  000F66  5004               	movf	lcd_cmd@cmd,w,c
  3408  000F68  EC6B  F00A         	call	_set_bit
  3409  000F6C  6E03               	movwf	??_lcd_cmd& (0+255),c
  3410  000F6E  3A03               	swapf	??_lcd_cmd,f,c
  3411  000F70  4603               	rlncf	??_lcd_cmd,f,c
  3412  000F72  5083               	movf	3971,w,c	;volatile
  3413  000F74  1803               	xorwf	??_lcd_cmd,w,c
  3414  000F76  0BDF               	andlw	-33
  3415  000F78  1803               	xorwf	??_lcd_cmd,w,c
  3416  000F7A  6E83               	movwf	3971,c	;volatile
  3417                           
  3418                           ;../Bibliotecas/LCD4b.c: 66:     PORTDbits.RD6 = set_bit(cmd,0b00000100);
  3419  000F7C  0E04               	movlw	4
  3420  000F7E  6E01               	movwf	set_bit@comp,c
  3421  000F80  5004               	movf	lcd_cmd@cmd,w,c
  3422  000F82  EC6B  F00A         	call	_set_bit
  3423  000F86  6E03               	movwf	??_lcd_cmd& (0+255),c
  3424  000F88  3A03               	swapf	??_lcd_cmd,f,c
  3425  000F8A  4603               	rlncf	??_lcd_cmd,f,c
  3426  000F8C  4603               	rlncf	??_lcd_cmd,f,c
  3427  000F8E  5083               	movf	3971,w,c	;volatile
  3428  000F90  1803               	xorwf	??_lcd_cmd,w,c
  3429  000F92  0BBF               	andlw	-65
  3430  000F94  1803               	xorwf	??_lcd_cmd,w,c
  3431  000F96  6E83               	movwf	3971,c	;volatile
  3432                           
  3433                           ;../Bibliotecas/LCD4b.c: 67:     PORTDbits.RD7 = set_bit(cmd,0b00001000);
  3434  000F98  0E08               	movlw	8
  3435  000F9A  6E01               	movwf	set_bit@comp,c
  3436  000F9C  5004               	movf	lcd_cmd@cmd,w,c
  3437  000F9E  EC6B  F00A         	call	_set_bit
  3438  000FA2  6E03               	movwf	??_lcd_cmd& (0+255),c
  3439  000FA4  3203               	rrcf	??_lcd_cmd,f,c
  3440  000FA6  3203               	rrcf	??_lcd_cmd,f,c
  3441  000FA8  5083               	movf	3971,w,c	;volatile
  3442  000FAA  1803               	xorwf	??_lcd_cmd,w,c
  3443  000FAC  0B7F               	andlw	-129
  3444  000FAE  1803               	xorwf	??_lcd_cmd,w,c
  3445  000FB0  6E83               	movwf	3971,c	;volatile
  3446                           
  3447                           ;../Bibliotecas/LCD4b.c: 69:     PORTEbits.RE1 = 1;
  3448  000FB2  8284               	bsf	3972,1,c	;volatile
  3449                           
  3450                           ;../Bibliotecas/LCD4b.c: 70:     PORTEbits.RE1 = 0;
  3451  000FB4  9284               	bcf	3972,1,c	;volatile
  3452  000FB6  0012               	return		;funcret
  3453  000FB8                     __end_of_lcd_cmd:
  3454                           	opt callstack 0
  3455                           
  3456 ;; *************** function _set_bit *****************
  3457 ;; Defined at:
  3458 ;;		line 38 in file "../Bibliotecas/LCD4b.c"
  3459 ;; Parameters:    Size  Location     Type
  3460 ;;  cmd             1    wreg     unsigned char 
  3461 ;;  comp            1    0[COMRAM] unsigned char 
  3462 ;; Auto vars:     Size  Location     Type
  3463 ;;  cmd             1    1[COMRAM] unsigned char 
  3464 ;; Return value:  Size  Location     Type
  3465 ;;                  1    wreg      unsigned char 
  3466 ;; Registers used:
  3467 ;;		wreg, status,2, status,0
  3468 ;; Tracked objects:
  3469 ;;		On entry : 0/0
  3470 ;;		On exit  : 0/0
  3471 ;;		Unchanged: 0/0
  3472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3473 ;;      Params:         1       0       0       0       0       0       0
  3474 ;;      Locals:         1       0       0       0       0       0       0
  3475 ;;      Temps:          0       0       0       0       0       0       0
  3476 ;;      Totals:         2       0       0       0       0       0       0
  3477 ;;Total ram usage:        2 bytes
  3478 ;; Hardware stack levels used:    1
  3479 ;; Hardware stack levels required when called:    1
  3480 ;; This function calls:
  3481 ;;		Nothing
  3482 ;; This function is called by:
  3483 ;;		_lcd_cmd
  3484 ;; This function uses a non-reentrant model
  3485 ;;
  3486                           
  3487                           	psect	text21
  3488  0014D6                     __ptext21:
  3489                           	opt callstack 0
  3490  0014D6                     _set_bit:
  3491                           	opt callstack 27
  3492                           
  3493                           ;incstack = 0
  3494                           ;set_bit@cmd stored from wreg
  3495  0014D6  6E02               	movwf	set_bit@cmd,c
  3496                           
  3497                           ;../Bibliotecas/LCD4b.c: 38: char set_bit(char cmd, char comp);../Bibliotecas/LCD4b.c: 3
      +                          9: {;../Bibliotecas/LCD4b.c: 41:     if ((cmd & comp) >= 1)
  3498  0014D8  5002               	movf	set_bit@cmd,w,c
  3499  0014DA  1401               	andwf	set_bit@comp,w,c
  3500  0014DC  0900               	iorlw	0
  3501  0014DE  B4D8               	btfsc	status,2,c
  3502  0014E0  D002               	goto	l1632
  3503                           
  3504                           ;../Bibliotecas/LCD4b.c: 42:         return 1;
  3505  0014E2  0E01               	movlw	1
  3506  0014E4  0012               	return	
  3507  0014E6                     l1632:
  3508                           
  3509                           ;../Bibliotecas/LCD4b.c: 44:         return 0;
  3510  0014E6  0E00               	movlw	0
  3511  0014E8  0012               	return		;funcret
  3512  0014EA                     __end_of_set_bit:
  3513                           	opt callstack 0
  3514                           
  3515 ;; *************** function _int_TMR *****************
  3516 ;; Defined at:
  3517 ;;		line 12 in file "EX17.c"
  3518 ;; Parameters:    Size  Location     Type
  3519 ;;		None
  3520 ;; Auto vars:     Size  Location     Type
  3521 ;;		None
  3522 ;; Return value:  Size  Location     Type
  3523 ;;                  1    wreg      void 
  3524 ;; Registers used:
  3525 ;;		wreg, status,2, status,0
  3526 ;; Tracked objects:
  3527 ;;		On entry : 0/0
  3528 ;;		On exit  : 0/0
  3529 ;;		Unchanged: 0/0
  3530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3531 ;;      Params:         0       0       0       0       0       0       0
  3532 ;;      Locals:         0       0       0       0       0       0       0
  3533 ;;      Temps:          0       0       0       0       0       0       0
  3534 ;;      Totals:         0       0       0       0       0       0       0
  3535 ;;Total ram usage:        0 bytes
  3536 ;; Hardware stack levels used:    1
  3537 ;; This function calls:
  3538 ;;		Nothing
  3539 ;; This function is called by:
  3540 ;;		Interrupt level 2
  3541 ;; This function uses a non-reentrant model
  3542 ;;
  3543                           
  3544                           	psect	intcode
  3545  000008                     __pintcode:
  3546                           	opt callstack 0
  3547  000008                     _int_TMR:
  3548                           	opt callstack 22
  3549                           
  3550                           ;incstack = 0
  3551  000008  827A               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3552  00000A  ED0A  F00A         	call	int_func,f	;refresh shadow registers
  3553                           
  3554                           	psect	intcode_body
  3555  001414                     __pintcode_body:
  3556                           	opt callstack 22
  3557  001414                     int_func:
  3558                           	opt callstack 22
  3559  001414  0006               	pop		; remove dummy address from shadow register refresh
  3560                           
  3561                           ;EX17.c: 14:     if (TMR1IF)
  3562  001416  A09E               	btfss	3998,0,c	;volatile
  3563  001418  D012               	goto	i2l39
  3564                           
  3565                           ;EX17.c: 15:     {;EX17.c: 16:      T1_cnt++;
  3566  00141A  4A78               	infsnz	_T1_cnt,f,c
  3567  00141C  2A79               	incf	_T1_cnt+1,f,c
  3568                           
  3569                           ;EX17.c: 17:      if (T1_cnt >= 100)
  3570  00141E  BE79               	btfsc	_T1_cnt+1,7,c
  3571  001420  D00A               	goto	i2l1432
  3572  001422  5079               	movf	_T1_cnt+1,w,c
  3573  001424  E104               	bnz	i2u72_40
  3574  001426  0E64               	movlw	100
  3575  001428  5C78               	subwf	_T1_cnt,w,c
  3576  00142A  A0D8               	btfss	status,0,c
  3577  00142C  D004               	goto	i2l1432
  3578  00142E                     i2u72_40:
  3579                           
  3580                           ;EX17.c: 18:          T1_cnt = 0;
  3581  00142E  0E00               	movlw	0
  3582  001430  6E79               	movwf	_T1_cnt+1,c
  3583  001432  0E00               	movlw	0
  3584  001434  6E78               	movwf	_T1_cnt,c
  3585  001436                     i2l1432:
  3586                           
  3587                           ;EX17.c: 20:     TMR1H = 0xFF;
  3588  001436  68CF               	setf	4047,c	;volatile
  3589                           
  3590                           ;EX17.c: 21:     TMR1L = 0xF4;
  3591  001438  0EF4               	movlw	244
  3592  00143A  6ECE               	movwf	4046,c	;volatile
  3593                           
  3594                           ;EX17.c: 22:     TMR1IF = 0;
  3595  00143C  909E               	bcf	3998,0,c	;volatile
  3596  00143E                     i2l39:
  3597  00143E  927A               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3598  001440  0011               	retfie		f
  3599  001442                     __end_of_int_TMR:
  3600                           	opt callstack 0
  3601                           
  3602                           	psect	rparam
  3603  0000                     
  3604                           	psect	temp
  3605  00007A                     btemp:
  3606                           	opt callstack 0
  3607  00007A                     	ds	1
  3608  0000                     int$flags	set	btemp
  3609  0000                     wtemp8	set	btemp+1
  3610  0000                     ttemp5	set	btemp+1
  3611  0000                     ttemp6	set	btemp+4
  3612  0000                     ttemp7	set	btemp+8
  3613                           tosu	equ	0xFFF
  3614                           tosh	equ	0xFFE
  3615                           tosl	equ	0xFFD
  3616                           stkptr	equ	0xFFC
  3617                           pclatu	equ	0xFFB
  3618                           pclath	equ	0xFFA
  3619                           pcl	equ	0xFF9
  3620                           tblptru	equ	0xFF8
  3621                           tblptrh	equ	0xFF7
  3622                           tblptrl	equ	0xFF6
  3623                           tablat	equ	0xFF5
  3624                           prodh	equ	0xFF4
  3625                           prodl	equ	0xFF3
  3626                           indf0	equ	0xFEF
  3627                           postinc0	equ	0xFEE
  3628                           postdec0	equ	0xFED
  3629                           preinc0	equ	0xFEC
  3630                           plusw0	equ	0xFEB
  3631                           fsr0h	equ	0xFEA
  3632                           fsr0l	equ	0xFE9
  3633                           wreg	equ	0xFE8
  3634                           indf1	equ	0xFE7
  3635                           postinc1	equ	0xFE6
  3636                           postdec1	equ	0xFE5
  3637                           preinc1	equ	0xFE4
  3638                           plusw1	equ	0xFE3
  3639                           fsr1h	equ	0xFE2
  3640                           fsr1l	equ	0xFE1
  3641                           bsr	equ	0xFE0
  3642                           indf2	equ	0xFDF
  3643                           postinc2	equ	0xFDE
  3644                           postdec2	equ	0xFDD
  3645                           preinc2	equ	0xFDC
  3646                           plusw2	equ	0xFDB
  3647                           fsr2h	equ	0xFDA
  3648                           fsr2l	equ	0xFD9
  3649                           status	equ	0xFD8


Data Sizes:
    Strings     15
    Constant    0
    Data        0
    BSS         58
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    111     121
    BANK0           128      0      48
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_3(CODE[5]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    S968_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_3(CODE[5]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_3(CODE[5]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 5
		 -> STR_3(CODE[5]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    lcd_escreve_bf@str	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), STR_2(CODE[3]), STR_1(CODE[7]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _atoi->_isspace
    _lcd_ini->_lcd_cmd
    _lcd_escreve_bf->_lcd_envia_byte
    _lcd_envia_byte->_lcd_cmd
    _lcd_cmd->_set_bit

Critical Paths under _int_TMR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _int_TMR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _int_TMR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _int_TMR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _int_TMR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _int_TMR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _int_TMR in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   10803
                                            109 COMRAM     2     2      0
                     _lcd_escreve_bf
                            _lcd_ini
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             16    10      6    8292
                                             93 COMRAM    16    10      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    7939
                                             85 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           46    40      6    7566
                                             63 COMRAM    22    16      6
                               _atoi
                               _dtoa
                              _fputc
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                36    26     10    4358
                                             27 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    2709
                                             16 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     166
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1235
                                              9 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     834
                                              0 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                             18 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     448
                                              0 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     452
                                              0 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (4) _atoi                                                15    13      2    1244
                                              7 COMRAM    15    13      2
                             ___wmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (5) _isspace                                              7     5      2     207
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              6     4      2     237
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     403
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _lcd_ini                                              2     2      0     874
                                              4 COMRAM     2     2      0
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (1) _lcd_escreve_bf                                       5     2      3    1637
                                              6 COMRAM     5     2      3
                     _lcd_envia_byte
 ---------------------------------------------------------------------------------
 (2) _lcd_envia_byte                                       2     1      1    1024
                                              4 COMRAM     2     1      1
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (2) _lcd_cmd                                              2     2      0     828
                                              2 COMRAM     2     2      0
                            _set_bit
 ---------------------------------------------------------------------------------
 (3) _set_bit                                              2     1      1     652
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _int_TMR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _lcd_escreve_bf
     _lcd_envia_byte
       _lcd_cmd
         _set_bit
   _lcd_ini
     _lcd_cmd
       _set_bit
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _atoi
           ___wmul
           _isdigit
           _isspace
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
                 _putch
             _strlen
         _fputc
           _putch
         _isdigit

 _int_TMR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      30       5       37.5%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     6F      79       1       96.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A9      15        0.0%
DATA                 0      0      A9       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Mon Apr 08 07:51:40 2019

    ___wmul@multiplicand 0003              __CFG_BORV$3 000000             __CFG_CP0$OFF 000000  
           __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000  
            __CFG_OSC$HS 000000                      l130 0960                      l117 1128  
                    l128 0958                      l862 13DA                      l893 0DA6  
           __CFG_CPB$OFF 000000             __CFG_CPD$OFF 000000                      u910 0BBA  
                    u750 106A                      u840 13C0                      u850 140C  
                    u770 10B2                      u860 140E                      u970 0E32  
                    u891 0B82                      _abs 13B2                      _pad 10FA  
                    wreg 000FE8             __CFG_LVP$OFF 000000             __CFG_WDT$OFF 000000  
                   ?_abs 0013                     l1500 1112                     l1510 114A  
                   l1600 0E76                     l1504 1120                     l1514 1176  
                   l1506 1132                     l1620 1372                     l1700 0C82  
                   l1540 0B54                     l1604 0E8C                     l1710 0CCC  
                   l1702 0C86                     l1470 1072                     l1632 14E6  
                   l1720 0CEA                     l1552 0BA2                     l1608 0EB2  
                   l1480 1384                     l1722 0D12                     l1554 0BB6  
                   l1546 0B7C                     l1490 1450                     l1642 093C  
                   l1810 074E                     l1716 0CDC                     l1572 0C4E  
                   l1564 0C12                     l1484 139A                     l1660 098A  
                   l1812 075C                     l1726 0D46                     l1718 0CE4  
                   l1670 0A82                     l1920 123C                     l1568 0C28  
                   l1592 0E1A                     l1584 0DDC                     l1488 144C  
                   l1656 097A                     l1808 0730                     l1922 1248  
                   l1594 0E2E                     l1690 0AE6                     l1834 0890  
                   l1770 0656                     l1916 122E                     l1588 0E00  
                   l1828 0854                     l1772 0658                     l1844 08B2  
                   l1926 1274                     l1694 0AFE                     l1838 089A  
                   l1790 0678                     l1782 0670                     l1774 0668  
                   l1870 12D2                     l1952 0FFC                     l1890 11B4  
                   l1794 0682                     l1786 0674                     l1778 066C  
                   l1796 06C4                     l1868 12AE                     ?_pad 0011  
                   STR_1 0601                     STR_2 060D                     STR_3 0608  
                   u1010 136E                     u1100 0A90                     u1030 090E  
                   u1120 0AB2                     u1040 0910                     u1121 0AB0  
                   u1210 0D76                     u1130 0AC0                     u1220 0D78  
                   u1140 0AC4                     u1300 0794                     u1070 094E  
                   u1310 0796                     u1160 0AD0                     u1320 07A2  
                   u1410 1268                     u1090 0974                     u1420 1294  
                   u1340 07D6                     u1190 0CC8                     u1440 101A  
                   u1417 125E                     u1427 128A                     u1507 11F8  
                   u1365 14C2                     u1517 120A                     u1366 14C4  
                   u1446 101C                     u1527 1218                     u1537 14C6  
                   u1457 1006                     u1547 0F44                     u1467 11A6  
                   u1477 11C0                     u1487 11D8                     u1497 11E6  
                   i2l39 143E             __CFG_PWRT$ON 000000                     abs@a 0013  
                   _dbuf 0080                     _atoi 0C70                     _main 0FB8  
                   _dtoa 08E6                     _prec 0074                     _nout 0070  
                   pad@i 0018                     pad@p 0015                     fsr1h 000FE2  
                   fsr2h 000FDA                     indf1 000FE7                     indf2 000FDF  
                   fsr1l 000FE1                     pad@w 001A                     fsr2l 000FD9  
                   btemp 007A                     prodh 000FF4                     prodl 000FF3  
                   start 000E            __CFG_IESO$OFF 000000            __CFG_MCLRE$ON 000000  
           ___param_bank 000000                    ??_abs 0015                    ??_pad 0017  
        __end_of___aodiv 0C70                    ?_atoi 0008                    ?_main 0001  
                  ?_dtoa 001C          __end_of___aomod 0ED4                    _T1CON 000FCD  
           vfpfcnvrt@fmt 0042                    _TMR1H 000FCF                    _TMR1L 000FCE  
                  _PORTB 000F81                    _PORTD 000F83                    _TRISB 000F93  
                  _TRISD 000F95            __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000  
          __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000  
         __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000  
         __CFG_EBTR3$OFF 000000          __end_of_lcd_cmd 0FB8          __end_of_lcd_ini 1220  
          __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000  
         __CFG_EBTRB$OFF 000000          __end_of_int_TMR 1442                    _flags 0076  
                  _fputc 105A                    _fputs 137A          __end_of_isdigit 1414  
                  atoi@n 0015                    pad@fp 0011                    atoi@s 0008  
                  _width 0072                    _putch 14EA                    dtoa@d 001E  
                  dtoa@i 003E                    dtoa@n 0036                    dtoa@p 0030  
                  dtoa@s 0034                    dtoa@w 0032          __end_of_isspace 137A  
         __CFG_BOREN$OFF 000000          __end_of_set_bit 14EA                    tablat 000FF5  
                  ttemp5 007B                    ttemp6 007E                    ttemp7 0082  
                  status 000FD8                    wtemp8 007B          __end_of_sprintf 133C  
        __initialization 146C             __end_of_atoi 0DB0             __end_of_main 105A  
           __end_of_dtoa 0B28                   ??_atoi 000A                   ??_main 006E  
                 ??_dtoa 0026            __activetblptr 000002                   _ADCON1 000FC1  
                 ?_fputc 0001                   ?_fputs 000A                   ?_putch 0001  
                 i2l1432 1436                   _INTCON 000FF2            vfpfcnvrt@done 0052  
                 _T1_cnt 0078                   _TMR1IF 007CF0           __CFG_XINST$OFF 000000  
           vfprintf@cfmt 005C                ??___aodiv 0011                ??___aomod 0011  
                 ___wmul 1492           __CFG_STVREN$ON 000000         ??_lcd_escreve_bf 000A  
                 clear_0 1472                   clear_1 147E         ??_lcd_envia_byte 0006  
                 pad@buf 0013                ??_lcd_cmd 0003                   dtoa@fp 001C  
              ??_lcd_ini 0005                   _strlen 1442                ??_int_TMR 0001  
                 fputc@c 0001                   fputs@c 000E                   fputs@i 000F  
                 fputs@s 000A                ??_isdigit 0003             __mediumconst 0000  
              ??_isspace 0003                ??_set_bit 0002                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8                   putch@c 0001  
       __end_of_vfprintf 12EE                ??_sprintf 0064               __accesstop 0080  
__end_of__initialization 1484          __CFG_PBADEN$OFF 000000            ___rparam_used 000001  
         __pcstackCOMRAM 0001            __end_of_fputc 10FA            __end_of_fputs 13B2  
          __end_of_putch 14EC                  ??_fputc 0005                  ??_fputs 000E  
                ??_putch 0001               __pbssBANK0 0080                  ?___wmul 0001  
                ?_strlen 0001       __size_of_vfpfcnvrt 02D4                  i2u72_40 142E  
                __Hparam 0000                  __Lparam 0000                  ___aodiv 0B28  
                ___aomod 0DB0          __size_of___wmul 0026                ?_vfprintf 0056  
            set_bit@comp 0001             __psmallconst 0600                  __pcinit 146C  
                __ramtop 0600                  __ptext0 0FB8                  __ptext1 12EE  
                __ptext2 129C                  __ptext3 0612                  __ptext4 08E6  
                __ptext5 10FA                  __ptext6 1442                  __ptext7 137A  
                __ptext8 105A                  __ptext9 14EA                  _lcd_cmd 0ED4  
                _lcd_ini 1190          __size_of_strlen 002A                  _int_TMR 0008  
           __size_of_abs 0032             __size_of_pad 0096                  _isdigit 13E4  
                _isspace 133C                  _set_bit 14D6                  atoi@neg 000E  
                _sprintf 12EE           __pintcode_body 1414     end_of_initialization 1484  
     lcd_envia_byte@dado 0005                  fputc@fp 0003            __Lmediumconst 0000  
                int_func 1414                  fputs@fp 000C        __end_of_vfpfcnvrt 08E6  
                postdec2 000FDD                  postinc0 000FEE                  postinc1 000FE6  
                postinc2 000FDE               ??_vfprintf 005C                  strlen@a 0003  
                strlen@s 0001                _PORTBbits 000F81                _PORTDbits 000F83  
              _PORTEbits 000F84                _TRISEbits 000F96               lcd_cmd@cmd 0004  
            vfpfcnvrt@ap 0044              vfpfcnvrt@fp 0040              vfpfcnvrt@ll 004A  
         __end_of___wmul 14B8           __end_of_strlen 146C      start_initialization 146C  
            __end_of_abs 13E4              __end_of_pad 1190              vfprintf@fmt 0058  
               ??___wmul 0005         __CFG_LPT1OSC$OFF 000000                 ??_strlen 0003  
            __pbssCOMRAM 0070         ___aodiv@dividend 0001  __size_of_lcd_escreve_bf 007C  
__size_of_lcd_envia_byte 001E        __CFG_CCP2MX$PORTC 000000                __pintcode 0008  
               ?___aodiv 0001                 ?___aomod 0001        lcd_escreve_bf@end 000A  
      lcd_escreve_bf@col 0007        lcd_escreve_bf@lin 000B         ___aodiv@quotient 0013  
      lcd_escreve_bf@str 0008                _bufferLCD 00A0                 ?_lcd_cmd 0001  
      __size_of_vfprintf 0052                 ?_lcd_ini 0001              __smallconst 0600  
               ?_int_TMR 0001                 ?_isdigit 0001                 ?_isspace 0001  
               ?_set_bit 0001               set_bit@cmd 0002                 ?_sprintf 005E  
         __size_of_fputc 00A0           __size_of_fputs 0038           __size_of_putch 0002  
         ___wmul@product 0005                 _PIE1bits 000F9D         __CFG_WDTPS$32768 000000  
              _vfpfcnvrt 0612        ___wmul@multiplier 0001                 __Hrparam 0000  
             vfprintf@ap 005A                 __Lrparam 0000               vfprintf@fp 0056  
       __size_of___aodiv 0148         __size_of___aomod 0124               ?_vfpfcnvrt 0040  
        ___aodiv@divisor 0009          ___aodiv@counter 0011         __size_of_lcd_cmd 00E4  
       __size_of_lcd_ini 0090               sprintf@fmt 0060                 _atoi$946 0010  
               _atoi$947 0014                 _atoi$948 0012         __size_of_int_TMR 143A  
       __size_of_isdigit 0030                 _dtoa$474 002E           _lcd_escreve_bf 1220  
       __size_of_isspace 003E                 __ptext10 13B2                 __ptext11 0DB0  
               __ptext20 0ED4                 __ptext12 0B28                 __ptext21 14D6  
               __ptext13 0C70                 __ptext14 133C                 __ptext15 13E4  
               __ptext16 1492                 __ptext17 1190                 __ptext18 1220  
               __ptext19 14B8         __size_of_set_bit 0014           _lcd_envia_byte 14B8  
       __size_of_sprintf 004E            __size_of_atoi 0140            __size_of_main 00A2  
          __size_of_dtoa 0242                 int$flags 007A                 lcd_ini@i 0006  
               _vfprintf 129C              _isspace$964 0007         ___aomod@dividend 0001  
 __end_of_lcd_escreve_bf 129C   __end_of_lcd_envia_byte 14D6      lcd_envia_byte@nivel 0006  
               isdigit@c 0001                 intlevel2 0000                sprintf@ap 0066  
               isspace@c 0001          ___aomod@divisor 0009              ??_vfpfcnvrt 0046  
        ___aomod@counter 0011            _vfpfcnvrt$489 0054                 sprintf@f 0068  
               sprintf@s 005E          ?_lcd_escreve_bf 0007          ?_lcd_envia_byte 0005  
           ___aodiv@sign 0012             ___aomod@sign 0012  
