

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Thu Apr 04 08:30:27 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    33                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    34  0000                     
    35                           ; Version 2.05
    36                           ; Generated 20/12/2018 GMT
    37                           ; 
    38                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    39                           ; All rights reserved.
    40                           ; 
    41                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    42                           ; 
    43                           ; Redistribution and use in source and binary forms, with or without modification, are
    44                           ; permitted provided that the following conditions are met:
    45                           ; 
    46                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    47                           ;        conditions and the following disclaimer.
    48                           ; 
    49                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    50                           ;        of conditions and the following disclaimer in the documentation and/or other
    51                           ;        materials provided with the distribution.
    52                           ; 
    53                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    54                           ;        software without specific prior written permission.
    55                           ; 
    56                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    57                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    58                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    59                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    60                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    61                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    62                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    63                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    64                           ; 
    65                           ; 
    66                           ; Code-generator required, PIC18F4520 Definitions
    67                           ; 
    68                           ; SFR Addresses
    69  0000                     _PORTDbits	set	3971
    70  0000                     _PORTEbits	set	3972
    71  0000                     _PORTD	set	3971
    72  0000                     _TRISEbits	set	3990
    73  0000                     _TRISD	set	3989
    74  0000                     _ADCON1	set	4033
    75                           
    76                           	psect	smallconst
    77  000600                     __psmallconst:
    78                           	opt callstack 0
    79  000600  00                 	db	0
    80  000601                     STR_1:
    81  000601  43                 	db	67	;'C'
    82  000602  4F                 	db	79	;'O'
    83  000603  4E                 	db	78	;'N'
    84  000604  54                 	db	84	;'T'
    85  000605  41                 	db	65	;'A'
    86  000606  47                 	db	71	;'G'
    87  000607  45                 	db	69	;'E'
    88  000608  4D                 	db	77	;'M'
    89  000609  3A                 	db	58	;':'
    90  00060A  20                 	db	32
    91  00060B  30                 	db	48	;'0'
    92  00060C  30                 	db	48	;'0'
    93  00060D  30                 	db	48	;'0'
    94  00060E  00                 	db	0
    95  00060F                     STR_2:
    96  00060F  25                 	db	37
    97  000610  30                 	db	48	;'0'
    98  000611  33                 	db	51	;'3'
    99  000612  64                 	db	100	;'d'
   100  000613  00                 	db	0
   101                           
   102                           ; #config settings
   103  000614  00                 	db	0	; dummy byte at the end
   104  0000                     
   105                           	psect	cinit
   106  001442                     __pcinit:
   107                           	opt callstack 0
   108  001442                     start_initialization:
   109                           	opt callstack 0
   110  001442                     __initialization:
   111                           	opt callstack 0
   112                           
   113                           ; Clear objects allocated to BANK0 (48 bytes)
   114  001442  EE00  F080         	lfsr	0,__pbssBANK0
   115  001446  0E30               	movlw	48
   116  001448                     clear_0:
   117  001448  6AEE               	clrf	postinc0,c
   118  00144A  06E8               	decf	wreg,f,c
   119  00144C  E1FD               	bnz	clear_0
   120                           
   121                           ; Clear objects allocated to COMRAM (10 bytes)
   122  00144E  EE00  F070         	lfsr	0,__pbssCOMRAM
   123  001452  0E0A               	movlw	10
   124  001454                     clear_1:
   125  001454  6AEE               	clrf	postinc0,c
   126  001456  06E8               	decf	wreg,f,c
   127  001458  E1FD               	bnz	clear_1
   128  00145A                     end_of_initialization:
   129                           	opt callstack 0
   130  00145A                     __end_of__initialization:
   131                           	opt callstack 0
   132  00145A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   133  00145C  6EF8               	movwf	tblptru,c
   134  00145E  0100               	movlb	0
   135  001460  EFC1  F008         	goto	_main	;jump to C main() function
   136                           
   137                           	psect	bssCOMRAM
   138  000070                     __pbssCOMRAM:
   139                           	opt callstack 0
   140  000070                     _nout:
   141                           	opt callstack 0
   142  000070                     	ds	2
   143  000072                     _width:
   144                           	opt callstack 0
   145  000072                     	ds	2
   146  000074                     _prec:
   147                           	opt callstack 0
   148  000074                     	ds	2
   149  000076                     _flags:
   150                           	opt callstack 0
   151  000076                     	ds	2
   152  000078                     _conta:
   153                           	opt callstack 0
   154  000078                     	ds	2
   155                           
   156                           	psect	bssBANK0
   157  000080                     __pbssBANK0:
   158                           	opt callstack 0
   159  000080                     _dbuf:
   160                           	opt callstack 0
   161  000080                     	ds	32
   162  0000A0                     _bufferLCD:
   163                           	opt callstack 0
   164  0000A0                     	ds	16
   165                           
   166                           	psect	cstackCOMRAM
   167  000001                     __pcstackCOMRAM:
   168                           	opt callstack 0
   169  000001                     ?_strlen:
   170                           	opt callstack 0
   171  000001                     ?_isdigit:
   172                           	opt callstack 0
   173  000001                     ?_isspace:
   174                           	opt callstack 0
   175  000001                     ?___wmul:
   176                           	opt callstack 0
   177  000001                     ?___aodiv:
   178                           	opt callstack 0
   179  000001                     ?___aomod:
   180                           	opt callstack 0
   181  000001                     set_bit@comp:
   182                           	opt callstack 0
   183  000001                     ___wmul@multiplier:
   184                           	opt callstack 0
   185  000001                     isdigit@c:
   186                           	opt callstack 0
   187  000001                     isspace@c:
   188                           	opt callstack 0
   189  000001                     fputc@c:
   190                           	opt callstack 0
   191  000001                     strlen@s:
   192                           	opt callstack 0
   193  000001                     ___aodiv@dividend:
   194                           	opt callstack 0
   195  000001                     ___aomod@dividend:
   196                           	opt callstack 0
   197                           
   198                           ; 8 bytes @ 0x0
   199  000001                     	ds	1
   200  000002                     set_bit@cmd:
   201                           	opt callstack 0
   202                           
   203                           ; 1 bytes @ 0x1
   204  000002                     	ds	1
   205  000003                     ??_lcd_cmd:
   206  000003                     ??_isdigit:
   207  000003                     ??_isspace:
   208  000003                     ___wmul@multiplicand:
   209                           	opt callstack 0
   210  000003                     fputc@fp:
   211                           	opt callstack 0
   212  000003                     strlen@a:
   213                           	opt callstack 0
   214                           
   215                           ; 2 bytes @ 0x2
   216  000003                     	ds	1
   217  000004                     lcd_cmd@cmd:
   218                           	opt callstack 0
   219                           
   220                           ; 1 bytes @ 0x3
   221  000004                     	ds	1
   222  000005                     ??_lcd_ini:
   223  000005                     ??_fputc:
   224  000005                     lcd_envia_byte@dado:
   225                           	opt callstack 0
   226  000005                     ___wmul@product:
   227                           	opt callstack 0
   228                           
   229                           ; 2 bytes @ 0x4
   230  000005                     	ds	1
   231  000006                     lcd_ini@i:
   232                           	opt callstack 0
   233  000006                     lcd_envia_byte@nivel:
   234                           	opt callstack 0
   235                           
   236                           ; 1 bytes @ 0x5
   237  000006                     	ds	1
   238  000007                     lcd_escreve_bf@col:
   239                           	opt callstack 0
   240  000007                     _isspace$834:
   241                           	opt callstack 0
   242                           
   243                           ; 1 bytes @ 0x6
   244  000007                     	ds	1
   245  000008                     ?_atoi:
   246                           	opt callstack 0
   247  000008                     lcd_escreve_bf@str:
   248                           	opt callstack 0
   249  000008                     atoi@s:
   250                           	opt callstack 0
   251                           
   252                           ; 2 bytes @ 0x7
   253  000008                     	ds	1
   254  000009                     ___aodiv@divisor:
   255                           	opt callstack 0
   256  000009                     ___aomod@divisor:
   257                           	opt callstack 0
   258                           
   259                           ; 8 bytes @ 0x8
   260  000009                     	ds	1
   261  00000A                     ??_atoi:
   262  00000A                     lcd_escreve_bf@end:
   263                           	opt callstack 0
   264  00000A                     fputs@s:
   265                           	opt callstack 0
   266                           
   267                           ; 2 bytes @ 0x9
   268  00000A                     	ds	1
   269  00000B                     lcd_escreve_bf@lin:
   270                           	opt callstack 0
   271                           
   272                           ; 1 bytes @ 0xA
   273  00000B                     	ds	1
   274  00000C                     fputs@fp:
   275                           	opt callstack 0
   276                           
   277                           ; 2 bytes @ 0xB
   278  00000C                     	ds	2
   279  00000E                     fputs@c:
   280                           	opt callstack 0
   281  00000E                     atoi@neg:
   282                           	opt callstack 0
   283                           
   284                           ; 2 bytes @ 0xD
   285  00000E                     	ds	1
   286  00000F                     fputs@i:
   287                           	opt callstack 0
   288                           
   289                           ; 2 bytes @ 0xE
   290  00000F                     	ds	1
   291  000010                     _atoi$816:
   292                           	opt callstack 0
   293                           
   294                           ; 2 bytes @ 0xF
   295  000010                     	ds	1
   296  000011                     ?_pad:
   297                           	opt callstack 0
   298  000011                     ___aodiv@counter:
   299                           	opt callstack 0
   300  000011                     ___aomod@counter:
   301                           	opt callstack 0
   302  000011                     pad@fp:
   303                           	opt callstack 0
   304                           
   305                           ; 2 bytes @ 0x10
   306  000011                     	ds	1
   307  000012                     ___aodiv@sign:
   308                           	opt callstack 0
   309  000012                     ___aomod@sign:
   310                           	opt callstack 0
   311  000012                     _atoi$818:
   312                           	opt callstack 0
   313                           
   314                           ; 2 bytes @ 0x11
   315  000012                     	ds	1
   316  000013                     ?_abs:
   317                           	opt callstack 0
   318  000013                     pad@buf:
   319                           	opt callstack 0
   320  000013                     abs@a:
   321                           	opt callstack 0
   322  000013                     ___aodiv@quotient:
   323                           	opt callstack 0
   324                           
   325                           ; 8 bytes @ 0x12
   326  000013                     	ds	1
   327  000014                     _atoi$817:
   328                           	opt callstack 0
   329                           
   330                           ; 1 bytes @ 0x13
   331  000014                     	ds	1
   332  000015                     ??_abs:
   333  000015                     pad@p:
   334                           	opt callstack 0
   335  000015                     atoi@n:
   336                           	opt callstack 0
   337                           
   338                           ; 2 bytes @ 0x14
   339  000015                     	ds	2
   340  000017                     ??_pad:
   341                           
   342                           ; 1 bytes @ 0x16
   343  000017                     	ds	1
   344  000018                     pad@i:
   345                           	opt callstack 0
   346                           
   347                           ; 2 bytes @ 0x17
   348  000018                     	ds	2
   349  00001A                     pad@w:
   350                           	opt callstack 0
   351                           
   352                           ; 2 bytes @ 0x19
   353  00001A                     	ds	2
   354  00001C                     ?_dtoa:
   355                           	opt callstack 0
   356  00001C                     dtoa@fp:
   357                           	opt callstack 0
   358                           
   359                           ; 2 bytes @ 0x1B
   360  00001C                     	ds	2
   361  00001E                     dtoa@d:
   362                           	opt callstack 0
   363                           
   364                           ; 8 bytes @ 0x1D
   365  00001E                     	ds	8
   366  000026                     ??_dtoa:
   367                           
   368                           ; 1 bytes @ 0x25
   369  000026                     	ds	8
   370  00002E                     _dtoa$344:
   371                           	opt callstack 0
   372                           
   373                           ; 2 bytes @ 0x2D
   374  00002E                     	ds	2
   375  000030                     dtoa@p:
   376                           	opt callstack 0
   377                           
   378                           ; 2 bytes @ 0x2F
   379  000030                     	ds	2
   380  000032                     dtoa@w:
   381                           	opt callstack 0
   382                           
   383                           ; 2 bytes @ 0x31
   384  000032                     	ds	2
   385  000034                     dtoa@s:
   386                           	opt callstack 0
   387                           
   388                           ; 2 bytes @ 0x33
   389  000034                     	ds	2
   390  000036                     dtoa@n:
   391                           	opt callstack 0
   392                           
   393                           ; 8 bytes @ 0x35
   394  000036                     	ds	8
   395  00003E                     dtoa@i:
   396                           	opt callstack 0
   397                           
   398                           ; 2 bytes @ 0x3D
   399  00003E                     	ds	2
   400  000040                     ?_vfpfcnvrt:
   401                           	opt callstack 0
   402  000040                     vfpfcnvrt@fp:
   403                           	opt callstack 0
   404                           
   405                           ; 2 bytes @ 0x3F
   406  000040                     	ds	2
   407  000042                     vfpfcnvrt@fmt:
   408                           	opt callstack 0
   409                           
   410                           ; 2 bytes @ 0x41
   411  000042                     	ds	2
   412  000044                     vfpfcnvrt@ap:
   413                           	opt callstack 0
   414                           
   415                           ; 2 bytes @ 0x43
   416  000044                     	ds	2
   417  000046                     ??_vfpfcnvrt:
   418                           
   419                           ; 1 bytes @ 0x45
   420  000046                     	ds	4
   421  00004A                     vfpfcnvrt@ll:
   422                           	opt callstack 0
   423                           
   424                           ; 8 bytes @ 0x49
   425  00004A                     	ds	8
   426  000052                     vfpfcnvrt@done:
   427                           	opt callstack 0
   428                           
   429                           ; 2 bytes @ 0x51
   430  000052                     	ds	2
   431  000054                     _vfpfcnvrt$359:
   432                           	opt callstack 0
   433                           
   434                           ; 2 bytes @ 0x53
   435  000054                     	ds	2
   436  000056                     ?_vfprintf:
   437                           	opt callstack 0
   438  000056                     vfprintf@fp:
   439                           	opt callstack 0
   440                           
   441                           ; 2 bytes @ 0x55
   442  000056                     	ds	2
   443  000058                     vfprintf@fmt:
   444                           	opt callstack 0
   445                           
   446                           ; 2 bytes @ 0x57
   447  000058                     	ds	2
   448  00005A                     vfprintf@ap:
   449                           	opt callstack 0
   450                           
   451                           ; 2 bytes @ 0x59
   452  00005A                     	ds	2
   453  00005C                     vfprintf@cfmt:
   454                           	opt callstack 0
   455                           
   456                           ; 2 bytes @ 0x5B
   457  00005C                     	ds	2
   458  00005E                     ?_sprintf:
   459                           	opt callstack 0
   460  00005E                     sprintf@s:
   461                           	opt callstack 0
   462                           
   463                           ; 2 bytes @ 0x5D
   464  00005E                     	ds	2
   465  000060                     sprintf@fmt:
   466                           	opt callstack 0
   467                           
   468                           ; 2 bytes @ 0x5F
   469  000060                     	ds	4
   470  000064                     
   471                           ; 1 bytes @ 0x63
   472  000064                     	ds	2
   473  000066                     sprintf@ap:
   474                           	opt callstack 0
   475                           
   476                           ; 2 bytes @ 0x65
   477  000066                     	ds	2
   478  000068                     sprintf@f:
   479                           	opt callstack 0
   480                           
   481                           ; 6 bytes @ 0x67
   482  000068                     	ds	6
   483  00006E                     ??_main:
   484                           
   485                           ; 1 bytes @ 0x6D
   486  00006E                     	ds	2
   487                           
   488 ;;
   489 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   490 ;;
   491 ;; *************** function _main *****************
   492 ;; Defined at:
   493 ;;		line 10 in file "EX11.c"
   494 ;; Parameters:    Size  Location     Type
   495 ;;		None
   496 ;; Auto vars:     Size  Location     Type
   497 ;;		None
   498 ;; Return value:  Size  Location     Type
   499 ;;                  1    wreg      void 
   500 ;; Registers used:
   501 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   502 ;; Tracked objects:
   503 ;;		On entry : 0/0
   504 ;;		On exit  : 0/0
   505 ;;		Unchanged: 0/0
   506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   507 ;;      Params:         0       0       0       0       0       0       0
   508 ;;      Locals:         0       0       0       0       0       0       0
   509 ;;      Temps:          2       0       0       0       0       0       0
   510 ;;      Totals:         2       0       0       0       0       0       0
   511 ;;Total ram usage:        2 bytes
   512 ;; Hardware stack levels required when called:    8
   513 ;; This function calls:
   514 ;;		_lcd_escreve_bf
   515 ;;		_lcd_ini
   516 ;;		_sprintf
   517 ;; This function is called by:
   518 ;;		Startup code after reset
   519 ;; This function uses a non-reentrant model
   520 ;;
   521                           
   522                           	psect	text0
   523  001182                     __ptext0:
   524                           	opt callstack 0
   525  001182                     _main:
   526                           	opt callstack 23
   527                           
   528                           ;EX11.c: 12:     ADCON1 = 0x0F;
   529                           
   530                           ;incstack = 0
   531  001182  0E0F               	movlw	15
   532  001184  6EC1               	movwf	4033,c	;volatile
   533                           
   534                           ;EX11.c: 14:     lcd_ini();
   535  001186  EC79  F008         	call	_lcd_ini	;wreg free
   536                           
   537                           ;EX11.c: 17:         lcd_escreve_bf(1, 1, "CONTAGEM: 000");
   538  00118A  0E01               	movlw	1
   539  00118C  6E07               	movwf	lcd_escreve_bf@col,c
   540  00118E  0E01               	movlw	low STR_1
   541  001190  6E08               	movwf	lcd_escreve_bf@str,c
   542  001192  0E06               	movlw	high STR_1
   543  001194  6E09               	movwf	lcd_escreve_bf@str+1,c
   544  001196  0E01               	movlw	1
   545  001198  ECFF  F008         	call	_lcd_escreve_bf
   546  00119C                     l1908:
   547                           
   548                           ;EX11.c: 20:     {;EX11.c: 22:         sprintf(bufferLCD, "%03d", conta);
   549  00119C  0EA0               	movlw	low _bufferLCD
   550  00119E  6E5E               	movwf	sprintf@s,c
   551  0011A0  0E00               	movlw	high _bufferLCD
   552  0011A2  6E5F               	movwf	sprintf@s+1,c
   553  0011A4  0E0F               	movlw	low STR_2
   554  0011A6  6E60               	movwf	sprintf@fmt,c
   555  0011A8  0E06               	movlw	high STR_2
   556  0011AA  6E61               	movwf	sprintf@fmt+1,c
   557  0011AC  C078  F062         	movff	_conta,?_sprintf+4
   558  0011B0  C079  F063         	movff	_conta+1,?_sprintf+5
   559  0011B4  EC66  F009         	call	_sprintf	;wreg free
   560                           
   561                           ;EX11.c: 25:         lcd_escreve_bf(1, 11, bufferLCD);
   562  0011B8  0E0B               	movlw	11
   563  0011BA  6E07               	movwf	lcd_escreve_bf@col,c
   564  0011BC  0EA0               	movlw	low _bufferLCD
   565  0011BE  6E08               	movwf	lcd_escreve_bf@str,c
   566  0011C0  0E00               	movlw	high _bufferLCD
   567  0011C2  6E09               	movwf	lcd_escreve_bf@str+1,c
   568  0011C4  0E01               	movlw	1
   569  0011C6  ECFF  F008         	call	_lcd_escreve_bf
   570                           
   571                           ;EX11.c: 27:         conta++;
   572  0011CA  4A78               	infsnz	_conta,f,c
   573  0011CC  2A79               	incf	_conta+1,f,c
   574                           
   575                           ;EX11.c: 30:         if (conta >= 1000) conta = 0;
   576  0011CE  BE79               	btfsc	_conta+1,7,c
   577  0011D0  D00A               	goto	l1918
   578  0011D2  0EE8               	movlw	232
   579  0011D4  5C78               	subwf	_conta,w,c
   580  0011D6  0E03               	movlw	3
   581  0011D8  5879               	subwfb	_conta+1,w,c
   582  0011DA  A0D8               	btfss	status,0,c
   583  0011DC  D004               	goto	l1918
   584  0011DE  0E00               	movlw	0
   585  0011E0  6E79               	movwf	_conta+1,c
   586  0011E2  0E00               	movlw	0
   587  0011E4  6E78               	movwf	_conta,c
   588  0011E6                     l1918:
   589                           
   590                           ;EX11.c: 32:         _delay((unsigned long)((1000)*(8000000/4000.0)));
   591  0011E6  0E0B               	movlw	11
   592  0011E8  6E6F               	movwf	(??_main+1)& (0+255),c
   593  0011EA  0E26               	movlw	38
   594  0011EC  6E6E               	movwf	??_main& (0+255),c
   595  0011EE  0E5E               	movlw	94
   596  0011F0                     u1437:
   597  0011F0  2EE8               	decfsz	wreg,f,c
   598  0011F2  D7FE               	bra	u1437
   599  0011F4  2E6E               	decfsz	??_main& (0+255),f,c
   600  0011F6  D7FC               	bra	u1437
   601  0011F8  2E6F               	decfsz	(??_main+1)& (0+255),f,c
   602  0011FA  D7FA               	bra	u1437
   603  0011FC  D7CF               	goto	l1908
   604  0011FE                     __end_of_main:
   605                           	opt callstack 0
   606                           
   607 ;; *************** function _sprintf *****************
   608 ;; Defined at:
   609 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_sprintf.c"
   610 ;; Parameters:    Size  Location     Type
   611 ;;  s               2   93[COMRAM] PTR unsigned char 
   612 ;;		 -> bufferLCD(16), 
   613 ;;  fmt             2   95[COMRAM] PTR const unsigned char 
   614 ;;		 -> STR_2(5), 
   615 ;; Auto vars:     Size  Location     Type
   616 ;;  f               6  103[COMRAM] struct _IO_FILE
   617 ;;  ap              2  101[COMRAM] PTR void [1]
   618 ;;		 -> ?_sprintf(2), 
   619 ;;  ret             2    0        int 
   620 ;; Return value:  Size  Location     Type
   621 ;;                  2   93[COMRAM] int 
   622 ;; Registers used:
   623 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   624 ;; Tracked objects:
   625 ;;		On entry : 0/0
   626 ;;		On exit  : 0/0
   627 ;;		Unchanged: 0/0
   628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   629 ;;      Params:         6       0       0       0       0       0       0
   630 ;;      Locals:        10       0       0       0       0       0       0
   631 ;;      Temps:          0       0       0       0       0       0       0
   632 ;;      Totals:        16       0       0       0       0       0       0
   633 ;;Total ram usage:       16 bytes
   634 ;; Hardware stack levels used:    1
   635 ;; Hardware stack levels required when called:    7
   636 ;; This function calls:
   637 ;;		_vfprintf
   638 ;; This function is called by:
   639 ;;		_main
   640 ;; This function uses a non-reentrant model
   641 ;;
   642                           
   643                           	psect	text1
   644  0012CC                     __ptext1:
   645                           	opt callstack 0
   646  0012CC                     _sprintf:
   647                           	opt callstack 23
   648                           
   649                           ;incstack = 0
   650  0012CC  0E62               	movlw	low (?_sprintf+4)
   651  0012CE  6E66               	movwf	sprintf@ap,c
   652  0012D0  0E00               	movlw	high (?_sprintf+4)
   653  0012D2  6E67               	movwf	sprintf@ap+1,c
   654  0012D4  C05E  F068         	movff	sprintf@s,sprintf@f
   655  0012D8  C05F  F069         	movff	sprintf@s+1,sprintf@f+1
   656  0012DC  0E00               	movlw	0
   657  0012DE  6E6B               	movwf	sprintf@f+3,c
   658  0012E0  0E00               	movlw	0
   659  0012E2  6E6A               	movwf	sprintf@f+2,c
   660  0012E4  0E00               	movlw	0
   661  0012E6  6E6D               	movwf	sprintf@f+5,c
   662  0012E8  0E00               	movlw	0
   663  0012EA  6E6C               	movwf	sprintf@f+4,c
   664  0012EC  0E68               	movlw	low sprintf@f
   665  0012EE  6E56               	movwf	vfprintf@fp,c
   666  0012F0  0E00               	movlw	high sprintf@f
   667  0012F2  6E57               	movwf	vfprintf@fp+1,c
   668  0012F4  C060  F058         	movff	sprintf@fmt,vfprintf@fmt
   669  0012F8  C061  F059         	movff	sprintf@fmt+1,vfprintf@fmt+1
   670  0012FC  0E66               	movlw	low sprintf@ap
   671  0012FE  6E5A               	movwf	vfprintf@ap,c
   672  001300  0E00               	movlw	high sprintf@ap
   673  001302  6E5B               	movwf	vfprintf@ap+1,c
   674  001304  EC3D  F009         	call	_vfprintf	;wreg free
   675  001308  506A               	movf	sprintf@f+2,w,c
   676  00130A  245E               	addwf	sprintf@s,w,c
   677  00130C  6ED9               	movwf	fsr2l,c
   678  00130E  506B               	movf	sprintf@f+3,w,c
   679  001310  205F               	addwfc	sprintf@s+1,w,c
   680  001312  6EDA               	movwf	fsr2h,c
   681  001314  0E00               	movlw	0
   682  001316  6EDF               	movwf	indf2,c
   683  001318  0012               	return		;funcret
   684  00131A                     __end_of_sprintf:
   685                           	opt callstack 0
   686                           
   687 ;; *************** function _vfprintf *****************
   688 ;; Defined at:
   689 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
   690 ;; Parameters:    Size  Location     Type
   691 ;;  fp              2   85[COMRAM] PTR struct _IO_FILE
   692 ;;		 -> sprintf@f(6), 
   693 ;;  fmt             2   87[COMRAM] PTR const unsigned char 
   694 ;;		 -> STR_2(5), 
   695 ;;  ap              2   89[COMRAM] PTR PTR void 
   696 ;;		 -> sprintf@ap(2), 
   697 ;; Auto vars:     Size  Location     Type
   698 ;;  cfmt            2   91[COMRAM] PTR unsigned char 
   699 ;;		 -> STR_2(5), 
   700 ;; Return value:  Size  Location     Type
   701 ;;                  2   85[COMRAM] int 
   702 ;; Registers used:
   703 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   704 ;; Tracked objects:
   705 ;;		On entry : 0/0
   706 ;;		On exit  : 0/0
   707 ;;		Unchanged: 0/0
   708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   709 ;;      Params:         6       0       0       0       0       0       0
   710 ;;      Locals:         2       0       0       0       0       0       0
   711 ;;      Temps:          0       0       0       0       0       0       0
   712 ;;      Totals:         8       0       0       0       0       0       0
   713 ;;Total ram usage:        8 bytes
   714 ;; Hardware stack levels used:    1
   715 ;; Hardware stack levels required when called:    6
   716 ;; This function calls:
   717 ;;		_vfpfcnvrt
   718 ;; This function is called by:
   719 ;;		_sprintf
   720 ;; This function uses a non-reentrant model
   721 ;;
   722                           
   723                           	psect	text2
   724  00127A                     __ptext2:
   725                           	opt callstack 0
   726  00127A                     _vfprintf:
   727                           	opt callstack 23
   728                           
   729                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.05\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
   730                           
   731                           ;incstack = 0
   732  00127A  C058  F05C         	movff	vfprintf@fmt,vfprintf@cfmt
   733  00127E  C059  F05D         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
   734                           
   735                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
   736  001282  0E00               	movlw	0
   737  001284  6E71               	movwf	_nout+1,c
   738  001286  0E00               	movlw	0
   739  001288  6E70               	movwf	_nout,c
   740                           
   741                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
   742  00128A  D012               	goto	l1832
   743  00128C                     l1830:
   744                           
   745                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
   746  00128C  C056  F040         	movff	vfprintf@fp,vfpfcnvrt@fp
   747  001290  C057  F041         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
   748  001294  0E5C               	movlw	low vfprintf@cfmt
   749  001296  6E42               	movwf	vfpfcnvrt@fmt,c
   750  001298  0E00               	movlw	high vfprintf@cfmt
   751  00129A  6E43               	movwf	vfpfcnvrt@fmt+1,c
   752  00129C  C05A  F044         	movff	vfprintf@ap,vfpfcnvrt@ap
   753  0012A0  C05B  F045         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
   754  0012A4  EC0B  F003         	call	_vfpfcnvrt	;wreg free
   755  0012A8  5040               	movf	?_vfpfcnvrt,w,c
   756  0012AA  2670               	addwf	_nout,f,c
   757  0012AC  5041               	movf	?_vfpfcnvrt+1,w,c
   758  0012AE  2271               	addwfc	_nout+1,f,c
   759  0012B0                     l1832:
   760                           
   761                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
   762  0012B0  C05C  FFF6         	movff	vfprintf@cfmt,tblptrl
   763  0012B4  C05D  FFF7         	movff	vfprintf@cfmt+1,tblptrh
   764  0012B8                     	if	0	;tblptru may be non-zero
   765  0012B8                     	endif
   766  0012B8                     	if	0	;tblptru may be non-zero
   767  0012B8                     	endif
   768  0012B8  0008               	tblrd		*
   769  0012BA  50F5               	movf	tablat,w,c
   770  0012BC  0900               	iorlw	0
   771  0012BE  A4D8               	btfss	status,2,c
   772  0012C0  D7E5               	goto	l1830
   773                           
   774                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
   775  0012C2  C070  F056         	movff	_nout,?_vfprintf
   776  0012C6  C071  F057         	movff	_nout+1,?_vfprintf+1
   777  0012CA  0012               	return		;funcret
   778  0012CC                     __end_of_vfprintf:
   779                           	opt callstack 0
   780                           
   781 ;; *************** function _vfpfcnvrt *****************
   782 ;; Defined at:
   783 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
   784 ;; Parameters:    Size  Location     Type
   785 ;;  fp              2   63[COMRAM] PTR struct _IO_FILE
   786 ;;		 -> sprintf@f(6), 
   787 ;;  fmt             2   65[COMRAM] PTR PTR unsigned char 
   788 ;;		 -> vfprintf@cfmt(2), 
   789 ;;  ap              2   67[COMRAM] PTR PTR void 
   790 ;;		 -> sprintf@ap(2), 
   791 ;; Auto vars:     Size  Location     Type
   792 ;;  ll              8   73[COMRAM] long long 
   793 ;;  llu             8    0        unsigned long long 
   794 ;;  f               4    0        unsigned long long 
   795 ;;  vp              3    0        PTR void 
   796 ;;  ct              3    0        unsigned char [3]
   797 ;;  cp              3    0        PTR unsigned char 
   798 ;;  done            2   81[COMRAM] int 
   799 ;;  i               2    0        int 
   800 ;;  c               1    0        unsigned char 
   801 ;; Return value:  Size  Location     Type
   802 ;;                  2   63[COMRAM] int 
   803 ;; Registers used:
   804 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   805 ;; Tracked objects:
   806 ;;		On entry : 0/0
   807 ;;		On exit  : 0/0
   808 ;;		Unchanged: 0/0
   809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   810 ;;      Params:         6       0       0       0       0       0       0
   811 ;;      Locals:        12       0       0       0       0       0       0
   812 ;;      Temps:          4       0       0       0       0       0       0
   813 ;;      Totals:        22       0       0       0       0       0       0
   814 ;;Total ram usage:       22 bytes
   815 ;; Hardware stack levels used:    1
   816 ;; Hardware stack levels required when called:    5
   817 ;; This function calls:
   818 ;;		_atoi
   819 ;;		_dtoa
   820 ;;		_fputc
   821 ;;		_isdigit
   822 ;; This function is called by:
   823 ;;		_vfprintf
   824 ;; This function uses a non-reentrant model
   825 ;;
   826                           
   827                           	psect	text3
   828  000616                     __ptext3:
   829                           	opt callstack 0
   830  000616                     _vfpfcnvrt:
   831                           	opt callstack 23
   832                           
   833                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 674:     long long ll;
   834                           
   835                           ;incstack = 0
   836  000616  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   837  00061A  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   838  00061E  CFDE FFF6          	movff	postinc2,tblptrl
   839  000622  CFDD FFF7          	movff	postdec2,tblptrh
   840  000626                     	if	0	;tblptru may be non-zero
   841  000626                     	endif
   842  000626                     	if	0	;tblptru may be non-zero
   843  000626                     	endif
   844  000626  0008               	tblrd		*
   845  000628  50F5               	movf	tablat,w,c
   846  00062A  0A25               	xorlw	37
   847  00062C  A4D8               	btfss	status,2,c
   848  00062E  D143               	goto	l1806
   849                           
   850                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
   851  000630  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   852  000634  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   853  000638  2ADE               	incf	postinc2,f,c
   854  00063A  0E00               	movlw	0
   855  00063C  22DD               	addwfc	postdec2,f,c
   856                           
   857                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
   858  00063E  0E00               	movlw	0
   859  000640  6E73               	movwf	_width+1,c
   860  000642  0E00               	movlw	0
   861  000644  6E72               	movwf	_width,c
   862  000646  C072  F076         	movff	_width,_flags
   863  00064A  C073  F077         	movff	_width+1,_flags+1
   864                           
   865                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
   866  00064E  6874               	setf	_prec,c
   867  000650  6875               	setf	_prec+1,c
   868                           
   869                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 688:       
      +                            done = 0;
   870  000652  0E00               	movlw	0
   871  000654  6E53               	movwf	vfpfcnvrt@done+1,c
   872  000656  0E00               	movlw	0
   873  000658  D014               	goto	L1
   874  00065A                     l1732:
   875                           
   876                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 692:       
      +                                        flags |= (1 << 0);
   877  00065A  8076               	bsf	_flags,0,c
   878  00065C                     l1734:
   879                           
   880                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 693:       
      +                                        ++*fmt;
   881  00065C  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   882  000660  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   883  000664  2ADE               	incf	postinc2,f,c
   884  000666  0E00               	movlw	0
   885  000668  22DD               	addwfc	postdec2,f,c
   886                           
   887                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 694:       
      +                                        break;
   888  00066A  D02E               	goto	l1758
   889  00066C                     l1736:
   890                           
   891                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 696:       
      +                                        flags |= (1 << 1);
   892  00066C  8276               	bsf	_flags,1,c
   893  00066E  D7F6               	goto	l1734
   894  000670                     l1740:
   895                           
   896                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 700:       
      +                                        flags |= (1 << 2);
   897  000670  8476               	bsf	_flags,2,c
   898  000672  D7F4               	goto	l1734
   899  000674                     l1744:
   900                           
   901                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 704:       
      +                                        flags |= (1 << 3);
   902  000674  8676               	bsf	_flags,3,c
   903  000676  D7F2               	goto	l1734
   904  000678                     l1748:
   905                           
   906                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 708:       
      +                                        flags |= (1 << 4);
   907  000678  8876               	bsf	_flags,4,c
   908  00067A  D7F0               	goto	l1734
   909  00067C                     l1752:
   910                           
   911                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 712:       
      +                                        done = 1;
   912  00067C  0E00               	movlw	0
   913  00067E  6E53               	movwf	vfpfcnvrt@done+1,c
   914  000680  0E01               	movlw	1
   915  000682                     L1:
   916  000682  6E52               	movwf	vfpfcnvrt@done,c
   917                           
   918                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 713:       
      +                                        break;
   919  000684  D021               	goto	l1758
   920  000686                     l1756:
   921  000686  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   922  00068A  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   923  00068E  CFDE FFF6          	movff	postinc2,tblptrl
   924  000692  CFDD FFF7          	movff	postdec2,tblptrh
   925  000696                     	if	0	;tblptru may be non-zero
   926  000696                     	endif
   927  000696                     	if	0	;tblptru may be non-zero
   928  000696                     	endif
   929  000696  0008               	tblrd		*
   930  000698  50F5               	movf	tablat,w,c
   931  00069A  6E46               	movwf	??_vfpfcnvrt& (0+255),c
   932  00069C  6A47               	clrf	(??_vfpfcnvrt+1)& (0+255),c
   933                           
   934                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   935                           ; Switch size 1, requested type "simple"
   936                           ; Number of cases is 1, Range of values is 0 to 0
   937                           ; switch strategies available:
   938                           ; Name         Instructions Cycles
   939                           ; simple_byte            4     3 (average)
   940                           ;	Chosen strategy is simple_byte
   941  00069E  5047               	movf	??_vfpfcnvrt+1,w,c
   942  0006A0  0A00               	xorlw	0	; case 0
   943  0006A2  A4D8               	btfss	status,2,c
   944  0006A4  D7EB               	goto	l1752
   945                           
   946                           ; Switch size 1, requested type "simple"
   947                           ; Number of cases is 5, Range of values is 32 to 48
   948                           ; switch strategies available:
   949                           ; Name         Instructions Cycles
   950                           ; simple_byte           16     9 (average)
   951                           ;	Chosen strategy is simple_byte
   952  0006A6  5046               	movf	??_vfpfcnvrt,w,c
   953  0006A8  0A20               	xorlw	32	; case 32
   954  0006AA  B4D8               	btfsc	status,2,c
   955  0006AC  D7E3               	goto	l1744
   956  0006AE  0A03               	xorlw	3	; case 35
   957  0006B0  B4D8               	btfsc	status,2,c
   958  0006B2  D7E2               	goto	l1748
   959  0006B4  0A08               	xorlw	8	; case 43
   960  0006B6  B4D8               	btfsc	status,2,c
   961  0006B8  D7DB               	goto	l1740
   962  0006BA  0A06               	xorlw	6	; case 45
   963  0006BC  B4D8               	btfsc	status,2,c
   964  0006BE  D7CD               	goto	l1732
   965  0006C0  0A1D               	xorlw	29	; case 48
   966  0006C2  B4D8               	btfsc	status,2,c
   967  0006C4  D7D3               	goto	l1736
   968  0006C6  D7DA               	goto	l1752
   969  0006C8                     l1758:
   970                           
   971                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 689:       
      +                            while (!done) {
   972  0006C8  5052               	movf	vfpfcnvrt@done,w,c
   973  0006CA  1053               	iorwf	vfpfcnvrt@done+1,w,c
   974  0006CC  B4D8               	btfsc	status,2,c
   975  0006CE  D7DB               	goto	l1756
   976                           
   977                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 716:       
      +                            if (flags & (1 << 0)) {
   978  0006D0  B076               	btfsc	_flags,0,c
   979                           
   980                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 717:       
      +                                flags &= ~(1 << 1);
   981  0006D2  9276               	bcf	_flags,1,c
   982                           
   983                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 723:       
      +                            if ((*fmt)[0] == '*') {
   984  0006D4  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   985  0006D8  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   986  0006DC  CFDE FFF6          	movff	postinc2,tblptrl
   987  0006E0  CFDD FFF7          	movff	postdec2,tblptrh
   988  0006E4                     	if	0	;tblptru may be non-zero
   989  0006E4                     	endif
   990  0006E4                     	if	0	;tblptru may be non-zero
   991  0006E4                     	endif
   992  0006E4  0008               	tblrd		*
   993  0006E6  50F5               	movf	tablat,w,c
   994  0006E8  0A2A               	xorlw	42
   995  0006EA  A4D8               	btfss	status,2,c
   996  0006EC  D023               	goto	l1770
   997                           
   998                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 724:       
      +                                ++*fmt;
   999  0006EE  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1000  0006F2  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1001  0006F6  2ADE               	incf	postinc2,f,c
  1002  0006F8  0E00               	movlw	0
  1003  0006FA  22DD               	addwfc	postdec2,f,c
  1004                           
  1005                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 725:       
      +                                width = (*(int *)__va_arg(*(int **)ap, (int)0));
  1006  0006FC  C044  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1007  000700  C045  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1008  000704  CFDF F046          	movff	indf2,??_vfpfcnvrt
  1009  000708  0E02               	movlw	2
  1010  00070A  26DE               	addwf	postinc2,f,c
  1011  00070C  CFDF F047          	movff	indf2,??_vfpfcnvrt+1
  1012  000710  0E00               	movlw	0
  1013  000712  22DD               	addwfc	postdec2,f,c
  1014  000714  C046  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1015  000718  C047  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1016  00071C  CFDE F072          	movff	postinc2,_width
  1017  000720  CFDD F073          	movff	postdec2,_width+1
  1018                           
  1019                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 726:       
      +                                if (width < 0) {
  1020  000724  AE73               	btfss	_width+1,7,c
  1021  000726  D03F               	goto	u1300
  1022                           
  1023                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 727:       
      +                                    flags |= (1 << 0);
  1024  000728  8076               	bsf	_flags,0,c
  1025                           
  1026                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 728:       
      +                                    width = -width;
  1027  00072A  6C72               	negf	_width,c
  1028  00072C  1E73               	comf	_width+1,f,c
  1029  00072E  B0D8               	btfsc	status,0,c
  1030  000730  2A73               	incf	_width+1,f,c
  1031  000732  D039               	goto	u1300
  1032  000734                     l1770:
  1033                           
  1034                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 731:       
      +                                width = atoi(*fmt);
  1035  000734  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1036  000738  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1037  00073C  CFDE F008          	movff	postinc2,atoi@s
  1038  000740  CFDD F009          	movff	postdec2,atoi@s+1
  1039  000744  EC3A  F006         	call	_atoi	;wreg free
  1040  000748  C008  F072         	movff	?_atoi,_width
  1041  00074C  C009  F073         	movff	?_atoi+1,_width+1
  1042                           
  1043                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 732:       
      +                                while ((0 ? isdigit((*fmt)[0]) : ((unsigned)((*fmt)[0])-'0') < 10)) {
  1044  000750  D007               	goto	l1774
  1045  000752                     l1772:
  1046                           
  1047                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 733:       
      +                                    ++*fmt;
  1048  000752  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1049  000756  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1050  00075A  2ADE               	incf	postinc2,f,c
  1051  00075C  0E00               	movlw	0
  1052  00075E  22DD               	addwfc	postdec2,f,c
  1053  000760                     l1774:
  1054  000760  0ED0               	movlw	208
  1055  000762  6E46               	movwf	??_vfpfcnvrt& (0+255),c
  1056  000764  0EFF               	movlw	255
  1057  000766  6E47               	movwf	(??_vfpfcnvrt+1)& (0+255),c
  1058  000768  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1059  00076C  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1060  000770  CFDE FFF6          	movff	postinc2,tblptrl
  1061  000774  CFDD FFF7          	movff	postdec2,tblptrh
  1062  000778                     	if	0	;tblptru may be non-zero
  1063  000778                     	endif
  1064  000778                     	if	0	;tblptru may be non-zero
  1065  000778                     	endif
  1066  000778  0008               	tblrd		*
  1067  00077A  50F5               	movf	tablat,w,c
  1068  00077C  6E48               	movwf	(??_vfpfcnvrt+2)& (0+255),c
  1069  00077E  6A49               	clrf	(??_vfpfcnvrt+3)& (0+255),c
  1070  000780  5046               	movf	??_vfpfcnvrt,w,c
  1071  000782  2648               	addwf	??_vfpfcnvrt+2,f,c
  1072  000784  5047               	movf	??_vfpfcnvrt+1,w,c
  1073  000786  2249               	addwfc	??_vfpfcnvrt+3,f,c
  1074  000788  5049               	movf	??_vfpfcnvrt+3,w,c
  1075  00078A  E106               	bnz	u1280
  1076  00078C  0E0A               	movlw	10
  1077  00078E  5C48               	subwf	??_vfpfcnvrt+2,w,c
  1078  000790  B0D8               	btfsc	status,0,c
  1079  000792  D002               	goto	u1280
  1080  000794  0E01               	movlw	1
  1081  000796  D001               	goto	u1290
  1082  000798                     u1280:
  1083  000798  0E00               	movlw	0
  1084  00079A                     u1290:
  1085  00079A  6E54               	movwf	_vfpfcnvrt$359,c
  1086  00079C  6A55               	clrf	_vfpfcnvrt$359+1,c
  1087  00079E  5054               	movf	_vfpfcnvrt$359,w,c
  1088  0007A0  1055               	iorwf	_vfpfcnvrt$359+1,w,c
  1089  0007A2  A4D8               	btfss	status,2,c
  1090  0007A4  D7D6               	goto	l1772
  1091  0007A6                     u1300:
  1092                           
  1093                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 825:       
      +                            if ((*fmt[0] == 'd') || (*fmt[0] == 'i')) {
  1094  0007A6  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1095  0007AA  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1096  0007AE  CFDE FFF6          	movff	postinc2,tblptrl
  1097  0007B2  CFDD FFF7          	movff	postdec2,tblptrh
  1098  0007B6                     	if	0	;tblptru may be non-zero
  1099  0007B6                     	endif
  1100  0007B6                     	if	0	;tblptru may be non-zero
  1101  0007B6                     	endif
  1102  0007B6  0008               	tblrd		*
  1103  0007B8  50F5               	movf	tablat,w,c
  1104  0007BA  0A64               	xorlw	100
  1105  0007BC  B4D8               	btfsc	status,2,c
  1106  0007BE  D00D               	goto	u1320
  1107  0007C0  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1108  0007C4  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1109  0007C8  CFDE FFF6          	movff	postinc2,tblptrl
  1110  0007CC  CFDD FFF7          	movff	postdec2,tblptrh
  1111  0007D0                     	if	0	;tblptru may be non-zero
  1112  0007D0                     	endif
  1113  0007D0                     	if	0	;tblptru may be non-zero
  1114  0007D0                     	endif
  1115  0007D0  0008               	tblrd		*
  1116  0007D2  50F5               	movf	tablat,w,c
  1117  0007D4  0A69               	xorlw	105
  1118  0007D6  A4D8               	btfss	status,2,c
  1119  0007D8  D03F               	goto	l1790
  1120  0007DA                     u1320:
  1121                           
  1122                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 827:       
      +                                ++*fmt;
  1123  0007DA  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1124  0007DE  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1125  0007E2  2ADE               	incf	postinc2,f,c
  1126  0007E4  0E00               	movlw	0
  1127  0007E6  22DD               	addwfc	postdec2,f,c
  1128                           
  1129                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 828:       
      +                                ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  1130  0007E8  C044  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1131  0007EC  C045  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1132  0007F0  CFDF F046          	movff	indf2,??_vfpfcnvrt
  1133  0007F4  0E02               	movlw	2
  1134  0007F6  26DE               	addwf	postinc2,f,c
  1135  0007F8  CFDF F047          	movff	indf2,??_vfpfcnvrt+1
  1136  0007FC  0E00               	movlw	0
  1137  0007FE  22DD               	addwfc	postdec2,f,c
  1138  000800  C046  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1139  000804  C047  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1140  000808  CFDE F04A          	movff	postinc2,vfpfcnvrt@ll
  1141  00080C  CFDD F04B          	movff	postdec2,vfpfcnvrt@ll+1
  1142  000810  0E00               	movlw	0
  1143  000812  BE4B               	btfsc	vfpfcnvrt@ll+1,7,c
  1144  000814  0EFF               	movlw	-1
  1145  000816  6E4C               	movwf	vfpfcnvrt@ll+2,c
  1146  000818  6E4D               	movwf	vfpfcnvrt@ll+3,c
  1147  00081A  6E4E               	movwf	vfpfcnvrt@ll+4,c
  1148  00081C  6E4F               	movwf	vfpfcnvrt@ll+5,c
  1149  00081E  6E50               	movwf	vfpfcnvrt@ll+6,c
  1150  000820  6E51               	movwf	vfpfcnvrt@ll+7,c
  1151                           
  1152                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 830:       
      +                                return dtoa(fp, ll);
  1153  000822  C040  F01C         	movff	vfpfcnvrt@fp,dtoa@fp
  1154  000826  C041  F01D         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  1155  00082A  C04A  F01E         	movff	vfpfcnvrt@ll,dtoa@d
  1156  00082E  C04B  F01F         	movff	vfpfcnvrt@ll+1,dtoa@d+1
  1157  000832  C04C  F020         	movff	vfpfcnvrt@ll+2,dtoa@d+2
  1158  000836  C04D  F021         	movff	vfpfcnvrt@ll+3,dtoa@d+3
  1159  00083A  C04E  F022         	movff	vfpfcnvrt@ll+4,dtoa@d+4
  1160  00083E  C04F  F023         	movff	vfpfcnvrt@ll+5,dtoa@d+5
  1161  000842  C050  F024         	movff	vfpfcnvrt@ll+6,dtoa@d+6
  1162  000846  C051  F025         	movff	vfpfcnvrt@ll+7,dtoa@d+7
  1163  00084A  EC75  F004         	call	_dtoa	;wreg free
  1164  00084E  C01C  F040         	movff	?_dtoa,?_vfpfcnvrt
  1165  000852  C01D  F041         	movff	?_dtoa+1,?_vfpfcnvrt+1
  1166  000856  0012               	return	
  1167  000858                     l1790:
  1168                           
  1169                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
  1170  000858  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1171  00085C  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1172  000860  CFDE FFF6          	movff	postinc2,tblptrl
  1173  000864  CFDD FFF7          	movff	postdec2,tblptrh
  1174  000868                     	if	0	;tblptru may be non-zero
  1175  000868                     	endif
  1176  000868                     	if	0	;tblptru may be non-zero
  1177  000868                     	endif
  1178  000868  0008               	tblrd		*
  1179  00086A  50F5               	movf	tablat,w,c
  1180  00086C  0A25               	xorlw	37
  1181  00086E  A4D8               	btfss	status,2,c
  1182  000870  D016               	goto	l1800
  1183                           
  1184                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
  1185  000872  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1186  000876  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1187  00087A  2ADE               	incf	postinc2,f,c
  1188  00087C  0E00               	movlw	0
  1189  00087E  22DD               	addwfc	postdec2,f,c
  1190                           
  1191                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
  1192  000880  0E00               	movlw	0
  1193  000882  6E02               	movwf	fputc@c+1,c
  1194  000884  0E25               	movlw	37
  1195  000886  6E01               	movwf	fputc@c,c
  1196  000888  C040  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1197  00088C  C041  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1198  000890  ECDE  F007         	call	_fputc	;wreg free
  1199  000894                     l1796:
  1200                           
  1201                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
  1202  000894  0E00               	movlw	0
  1203  000896  6E41               	movwf	?_vfpfcnvrt+1,c
  1204  000898  0E01               	movlw	1
  1205  00089A  6E40               	movwf	?_vfpfcnvrt,c
  1206  00089C  0012               	return	
  1207  00089E                     l1800:
  1208                           
  1209                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
  1210  00089E  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1211  0008A2  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1212  0008A6  2ADE               	incf	postinc2,f,c
  1213  0008A8  0E00               	movlw	0
  1214  0008AA  22DD               	addwfc	postdec2,f,c
  1215                           
  1216                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
  1217  0008AC  0E00               	movlw	0
  1218  0008AE  6E41               	movwf	?_vfpfcnvrt+1,c
  1219  0008B0  0E00               	movlw	0
  1220  0008B2  6E40               	movwf	?_vfpfcnvrt,c
  1221  0008B4  0012               	return	
  1222  0008B6                     l1806:
  1223                           
  1224                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
  1225  0008B6  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1226  0008BA  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1227  0008BE  CFDE FFF6          	movff	postinc2,tblptrl
  1228  0008C2  CFDD FFF7          	movff	postdec2,tblptrh
  1229  0008C6                     	if	0	;tblptru may be non-zero
  1230  0008C6                     	endif
  1231  0008C6                     	if	0	;tblptru may be non-zero
  1232  0008C6                     	endif
  1233  0008C6  0008               	tblrd		*
  1234  0008C8  50F5               	movf	tablat,w,c
  1235  0008CA  6E01               	movwf	fputc@c,c
  1236  0008CC  6A02               	clrf	fputc@c+1,c
  1237  0008CE  C040  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1238  0008D2  C041  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1239  0008D6  ECDE  F007         	call	_fputc	;wreg free
  1240                           
  1241                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
  1242  0008DA  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1243  0008DE  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1244  0008E2  2ADE               	incf	postinc2,f,c
  1245  0008E4  0E00               	movlw	0
  1246  0008E6  22DD               	addwfc	postdec2,f,c
  1247  0008E8  D7D5               	goto	l1796
  1248  0008EA                     __end_of_vfpfcnvrt:
  1249                           	opt callstack 0
  1250                           
  1251 ;; *************** function _dtoa *****************
  1252 ;; Defined at:
  1253 ;;		line 274 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1254 ;; Parameters:    Size  Location     Type
  1255 ;;  fp              2   27[COMRAM] PTR struct _IO_FILE
  1256 ;;		 -> sprintf@f(6), 
  1257 ;;  d               8   29[COMRAM] long long 
  1258 ;; Auto vars:     Size  Location     Type
  1259 ;;  n               8   53[COMRAM] long long 
  1260 ;;  i               2   61[COMRAM] int 
  1261 ;;  s               2   51[COMRAM] int 
  1262 ;;  w               2   49[COMRAM] int 
  1263 ;;  p               2   47[COMRAM] int 
  1264 ;; Return value:  Size  Location     Type
  1265 ;;                  2   27[COMRAM] int 
  1266 ;; Registers used:
  1267 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1268 ;; Tracked objects:
  1269 ;;		On entry : 0/0
  1270 ;;		On exit  : 0/0
  1271 ;;		Unchanged: 0/0
  1272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1273 ;;      Params:        10       0       0       0       0       0       0
  1274 ;;      Locals:        18       0       0       0       0       0       0
  1275 ;;      Temps:          8       0       0       0       0       0       0
  1276 ;;      Totals:        36       0       0       0       0       0       0
  1277 ;;Total ram usage:       36 bytes
  1278 ;; Hardware stack levels used:    1
  1279 ;; Hardware stack levels required when called:    4
  1280 ;; This function calls:
  1281 ;;		___aodiv
  1282 ;;		___aomod
  1283 ;;		_abs
  1284 ;;		_pad
  1285 ;; This function is called by:
  1286 ;;		_vfpfcnvrt
  1287 ;; This function uses a non-reentrant model
  1288 ;;
  1289                           
  1290                           	psect	text4
  1291  0008EA                     __ptext4:
  1292                           	opt callstack 0
  1293  0008EA                     _dtoa:
  1294                           	opt callstack 23
  1295                           
  1296                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 274: static
      +                           int dtoa(FILE *fp, long long d);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\
      +                          c99\common\doprnt.c: 275: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\c
      +                          ommon\doprnt.c: 276:     int i, p, s, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\
      +                          sources\c99\common\doprnt.c: 277:     long long n;;C:\Program Files (x86)\Microchip\xc8\
      +                          v2.05\pic\sources\c99\common\doprnt.c: 280:     n = d;
  1297                           
  1298                           ;incstack = 0
  1299  0008EA  C01E  F036         	movff	dtoa@d,dtoa@n
  1300  0008EE  C01F  F037         	movff	dtoa@d+1,dtoa@n+1
  1301  0008F2  C020  F038         	movff	dtoa@d+2,dtoa@n+2
  1302  0008F6  C021  F039         	movff	dtoa@d+3,dtoa@n+3
  1303  0008FA  C022  F03A         	movff	dtoa@d+4,dtoa@n+4
  1304  0008FE  C023  F03B         	movff	dtoa@d+5,dtoa@n+5
  1305  000902  C024  F03C         	movff	dtoa@d+6,dtoa@n+6
  1306  000906  C025  F03D         	movff	dtoa@d+7,dtoa@n+7
  1307                           
  1308                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 281:     s 
      +                          = n < 0 ? 1 : 0;
  1309  00090A  AE3D               	btfss	dtoa@n+7,7,c
  1310  00090C  D002               	goto	u1010
  1311  00090E  0E01               	movlw	1
  1312  000910  D001               	goto	u1020
  1313  000912                     u1010:
  1314  000912  0E00               	movlw	0
  1315  000914                     u1020:
  1316  000914  6E34               	movwf	dtoa@s,c
  1317  000916  6A35               	clrf	dtoa@s+1,c
  1318                           
  1319                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 282:     if
      +                           (s) {
  1320  000918  5034               	movf	dtoa@s,w,c
  1321  00091A  1035               	iorwf	dtoa@s+1,w,c
  1322  00091C  B4D8               	btfsc	status,2,c
  1323  00091E  D010               	goto	l1604
  1324                           
  1325                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 283:       
      +                            n = -n;
  1326  000920  1E3D               	comf	dtoa@n+7,f,c
  1327  000922  1E3C               	comf	dtoa@n+6,f,c
  1328  000924  1E3B               	comf	dtoa@n+5,f,c
  1329  000926  1E3A               	comf	dtoa@n+4,f,c
  1330  000928  1E39               	comf	dtoa@n+3,f,c
  1331  00092A  1E38               	comf	dtoa@n+2,f,c
  1332  00092C  1E37               	comf	dtoa@n+1,f,c
  1333  00092E  6C36               	negf	dtoa@n,c
  1334  000930  0E00               	movlw	0
  1335  000932  2237               	addwfc	dtoa@n+1,f,c
  1336  000934  2238               	addwfc	dtoa@n+2,f,c
  1337  000936  2239               	addwfc	dtoa@n+3,f,c
  1338  000938  223A               	addwfc	dtoa@n+4,f,c
  1339  00093A  223B               	addwfc	dtoa@n+5,f,c
  1340  00093C  223C               	addwfc	dtoa@n+6,f,c
  1341  00093E  223D               	addwfc	dtoa@n+7,f,c
  1342  000940                     l1604:
  1343                           
  1344                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 287:     if
      +                           (!(prec < 0)) {
  1345  000940  AE75               	btfss	_prec+1,7,c
  1346                           
  1347                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 288:       
      +                            flags &= ~(1 << 1);
  1348  000942  9276               	bcf	_flags,1,c
  1349                           
  1350                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 290:     p 
      +                          = (0 < prec) ? prec : 1;
  1351  000944  BE75               	btfsc	_prec+1,7,c
  1352  000946  D005               	goto	u1050
  1353  000948  5075               	movf	_prec+1,w,c
  1354  00094A  E108               	bnz	l104
  1355  00094C  0474               	decf	_prec,w,c
  1356  00094E  B0D8               	btfsc	status,0,c
  1357  000950  D005               	goto	l104
  1358  000952                     u1050:
  1359  000952  0E00               	movlw	0
  1360  000954  6E31               	movwf	dtoa@p+1,c
  1361  000956  0E01               	movlw	1
  1362  000958  6E30               	movwf	dtoa@p,c
  1363  00095A  D004               	goto	l106
  1364  00095C                     l104:
  1365  00095C  C074  F030         	movff	_prec,dtoa@p
  1366  000960  C075  F031         	movff	_prec+1,dtoa@p+1
  1367  000964                     l106:
  1368                           
  1369                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 291:     w 
      +                          = width;
  1370  000964  C072  F032         	movff	_width,dtoa@w
  1371  000968  C073  F033         	movff	_width+1,dtoa@w+1
  1372                           
  1373                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 292:     if
      +                           (s || (flags & (1 << 2))) {
  1374  00096C  5034               	movf	dtoa@s,w,c
  1375  00096E  1035               	iorwf	dtoa@s+1,w,c
  1376  000970  A4D8               	btfss	status,2,c
  1377  000972  D002               	goto	u1070
  1378  000974  A476               	btfss	_flags,2,c
  1379  000976  D003               	goto	l1618
  1380  000978                     u1070:
  1381                           
  1382                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 293:       
      +                            --w;
  1383  000978  0632               	decf	dtoa@w,f,c
  1384  00097A  A0D8               	btfss	status,0,c
  1385  00097C  0633               	decf	dtoa@w+1,f,c
  1386  00097E                     l1618:
  1387                           
  1388                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 297:     i 
      +                          = sizeof(dbuf) - 1;
  1389  00097E  0E00               	movlw	0
  1390  000980  6E3F               	movwf	dtoa@i+1,c
  1391  000982  0E1F               	movlw	31
  1392  000984  6E3E               	movwf	dtoa@i,c
  1393                           
  1394                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 298:     db
      +                          uf[i] = '\0';
  1395  000986  0E00               	movlw	0
  1396  000988  0100               	movlb	0	; () banked
  1397  00098A  6F9F               	movwf	(_dbuf+31)& (0+255),b
  1398                           
  1399                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1400  00098C  D07C               	goto	l1632
  1401  00098E                     l1622:
  1402                           
  1403                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 300:       
      +                            --i;
  1404  00098E  063E               	decf	dtoa@i,f,c
  1405  000990  A0D8               	btfss	status,0,c
  1406  000992  063F               	decf	dtoa@i+1,f,c
  1407                           
  1408                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 301:       
      +                            dbuf[i] = '0' + abs(n % 10);
  1409  000994  0E80               	movlw	low _dbuf
  1410  000996  243E               	addwf	dtoa@i,w,c
  1411  000998  6ED9               	movwf	fsr2l,c
  1412  00099A  0E00               	movlw	high _dbuf
  1413  00099C  203F               	addwfc	dtoa@i+1,w,c
  1414  00099E  6EDA               	movwf	fsr2h,c
  1415  0009A0  C036  F001         	movff	dtoa@n,___aomod@dividend
  1416  0009A4  C037  F002         	movff	dtoa@n+1,___aomod@dividend+1
  1417  0009A8  C038  F003         	movff	dtoa@n+2,___aomod@dividend+2
  1418  0009AC  C039  F004         	movff	dtoa@n+3,___aomod@dividend+3
  1419  0009B0  C03A  F005         	movff	dtoa@n+4,___aomod@dividend+4
  1420  0009B4  C03B  F006         	movff	dtoa@n+5,___aomod@dividend+5
  1421  0009B8  C03C  F007         	movff	dtoa@n+6,___aomod@dividend+6
  1422  0009BC  C03D  F008         	movff	dtoa@n+7,___aomod@dividend+7
  1423  0009C0  0E0A               	movlw	10
  1424  0009C2  6E09               	movwf	___aomod@divisor,c
  1425  0009C4  0E00               	movlw	0
  1426  0009C6  6E0A               	movwf	___aomod@divisor+1,c
  1427  0009C8  0E00               	movlw	0
  1428  0009CA  6E0B               	movwf	___aomod@divisor+2,c
  1429  0009CC  0E00               	movlw	0
  1430  0009CE  6E0C               	movwf	___aomod@divisor+3,c
  1431  0009D0  0E00               	movlw	0
  1432  0009D2  6E0D               	movwf	___aomod@divisor+4,c
  1433  0009D4  0E00               	movlw	0
  1434  0009D6  6E0E               	movwf	___aomod@divisor+5,c
  1435  0009D8  0E00               	movlw	0
  1436  0009DA  6E0F               	movwf	___aomod@divisor+6,c
  1437  0009DC  0E00               	movlw	0
  1438  0009DE  6E10               	movwf	___aomod@divisor+7,c
  1439  0009E0  ECDA  F006         	call	___aomod	;wreg free
  1440  0009E4  C001  F026         	movff	?___aomod,??_dtoa
  1441  0009E8  C002  F027         	movff	?___aomod+1,??_dtoa+1
  1442  0009EC  C003  F028         	movff	?___aomod+2,??_dtoa+2
  1443  0009F0  C004  F029         	movff	?___aomod+3,??_dtoa+3
  1444  0009F4  C005  F02A         	movff	?___aomod+4,??_dtoa+4
  1445  0009F8  C006  F02B         	movff	?___aomod+5,??_dtoa+5
  1446  0009FC  C007  F02C         	movff	?___aomod+6,??_dtoa+6
  1447  000A00  C008  F02D         	movff	?___aomod+7,??_dtoa+7
  1448  000A04  C026  F013         	movff	??_dtoa,abs@a
  1449  000A08  C028  F014         	movff	??_dtoa+2,abs@a+1
  1450  000A0C  ECC8  F009         	call	_abs	;wreg free
  1451  000A10  5013               	movf	?_abs,w,c
  1452  000A12  0F30               	addlw	48
  1453  000A14  6EDF               	movwf	indf2,c
  1454                           
  1455                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 302:       
      +                            --p;
  1456  000A16  0630               	decf	dtoa@p,f,c
  1457  000A18  A0D8               	btfss	status,0,c
  1458  000A1A  0631               	decf	dtoa@p+1,f,c
  1459                           
  1460                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 303:       
      +                            --w;
  1461  000A1C  0632               	decf	dtoa@w,f,c
  1462  000A1E  A0D8               	btfss	status,0,c
  1463  000A20  0633               	decf	dtoa@w+1,f,c
  1464                           
  1465                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 304:       
      +                            n = n / 10;
  1466  000A22  C036  F001         	movff	dtoa@n,___aodiv@dividend
  1467  000A26  C037  F002         	movff	dtoa@n+1,___aodiv@dividend+1
  1468  000A2A  C038  F003         	movff	dtoa@n+2,___aodiv@dividend+2
  1469  000A2E  C039  F004         	movff	dtoa@n+3,___aodiv@dividend+3
  1470  000A32  C03A  F005         	movff	dtoa@n+4,___aodiv@dividend+4
  1471  000A36  C03B  F006         	movff	dtoa@n+5,___aodiv@dividend+5
  1472  000A3A  C03C  F007         	movff	dtoa@n+6,___aodiv@dividend+6
  1473  000A3E  C03D  F008         	movff	dtoa@n+7,___aodiv@dividend+7
  1474  000A42  0E0A               	movlw	10
  1475  000A44  6E09               	movwf	___aodiv@divisor,c
  1476  000A46  0E00               	movlw	0
  1477  000A48  6E0A               	movwf	___aodiv@divisor+1,c
  1478  000A4A  0E00               	movlw	0
  1479  000A4C  6E0B               	movwf	___aodiv@divisor+2,c
  1480  000A4E  0E00               	movlw	0
  1481  000A50  6E0C               	movwf	___aodiv@divisor+3,c
  1482  000A52  0E00               	movlw	0
  1483  000A54  6E0D               	movwf	___aodiv@divisor+4,c
  1484  000A56  0E00               	movlw	0
  1485  000A58  6E0E               	movwf	___aodiv@divisor+5,c
  1486  000A5A  0E00               	movlw	0
  1487  000A5C  6E0F               	movwf	___aodiv@divisor+6,c
  1488  000A5E  0E00               	movlw	0
  1489  000A60  6E10               	movwf	___aodiv@divisor+7,c
  1490  000A62  EC96  F005         	call	___aodiv	;wreg free
  1491  000A66  C001  F036         	movff	?___aodiv,dtoa@n
  1492  000A6A  C002  F037         	movff	?___aodiv+1,dtoa@n+1
  1493  000A6E  C003  F038         	movff	?___aodiv+2,dtoa@n+2
  1494  000A72  C004  F039         	movff	?___aodiv+3,dtoa@n+3
  1495  000A76  C005  F03A         	movff	?___aodiv+4,dtoa@n+4
  1496  000A7A  C006  F03B         	movff	?___aodiv+5,dtoa@n+5
  1497  000A7E  C007  F03C         	movff	?___aodiv+6,dtoa@n+6
  1498  000A82  C008  F03D         	movff	?___aodiv+7,dtoa@n+7
  1499  000A86                     l1632:
  1500                           
  1501                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1502  000A86  BE3F               	btfsc	dtoa@i+1,7,c
  1503  000A88  D01F               	goto	u1120
  1504  000A8A  503F               	movf	dtoa@i+1,w,c
  1505  000A8C  E103               	bnz	u1080
  1506  000A8E  043E               	decf	dtoa@i,w,c
  1507  000A90  A0D8               	btfss	status,0,c
  1508  000A92  D01A               	goto	u1120
  1509  000A94                     u1080:
  1510  000A94  5036               	movf	dtoa@n,w,c
  1511  000A96  1037               	iorwf	dtoa@n+1,w,c
  1512  000A98  1038               	iorwf	dtoa@n+2,w,c
  1513  000A9A  1039               	iorwf	dtoa@n+3,w,c
  1514  000A9C  103A               	iorwf	dtoa@n+4,w,c
  1515  000A9E  103B               	iorwf	dtoa@n+5,w,c
  1516  000AA0  103C               	iorwf	dtoa@n+6,w,c
  1517  000AA2  103D               	iorwf	dtoa@n+7,w,c
  1518  000AA4  A4D8               	btfss	status,2,c
  1519  000AA6  D773               	goto	l1622
  1520  000AA8  BE31               	btfsc	dtoa@p+1,7,c
  1521  000AAA  D005               	goto	u1100
  1522  000AAC  5031               	movf	dtoa@p+1,w,c
  1523  000AAE  E102               	bnz	u1101
  1524  000AB0  0430               	decf	dtoa@p,w,c
  1525  000AB2  B0D8               	btfsc	status,0,c
  1526  000AB4                     u1101:
  1527  000AB4  D76C               	goto	l1622
  1528  000AB6                     u1100:
  1529  000AB6  BE33               	btfsc	dtoa@w+1,7,c
  1530  000AB8  D007               	goto	u1120
  1531  000ABA  5033               	movf	dtoa@w+1,w,c
  1532  000ABC  E103               	bnz	u1110
  1533  000ABE  0432               	decf	dtoa@w,w,c
  1534  000AC0  A0D8               	btfss	status,0,c
  1535  000AC2  D002               	goto	u1120
  1536  000AC4                     u1110:
  1537  000AC4  B276               	btfsc	_flags,1,c
  1538  000AC6  D763               	goto	l1622
  1539  000AC8                     u1120:
  1540                           
  1541                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 308:     if
      +                           (s || (flags & (1 << 2))) {
  1542  000AC8  5034               	movf	dtoa@s,w,c
  1543  000ACA  1035               	iorwf	dtoa@s+1,w,c
  1544  000ACC  A4D8               	btfss	status,2,c
  1545  000ACE  D002               	goto	u1140
  1546  000AD0  A476               	btfss	_flags,2,c
  1547  000AD2  D017               	goto	l1656
  1548  000AD4                     u1140:
  1549                           
  1550                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 309:       
      +                            --i;
  1551  000AD4  063E               	decf	dtoa@i,f,c
  1552  000AD6  A0D8               	btfss	status,0,c
  1553  000AD8  063F               	decf	dtoa@i+1,f,c
  1554                           
  1555                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 310:       
      +                            dbuf[i] = s ? '-' : '+';
  1556  000ADA  5034               	movf	dtoa@s,w,c
  1557  000ADC  1035               	iorwf	dtoa@s+1,w,c
  1558  000ADE  A4D8               	btfss	status,2,c
  1559  000AE0  D004               	goto	l1652
  1560  000AE2  0E00               	movlw	0
  1561  000AE4  6E2F               	movwf	_dtoa$344+1,c
  1562  000AE6  0E2B               	movlw	43
  1563  000AE8  D003               	goto	L2
  1564  000AEA                     l1652:
  1565  000AEA  0E00               	movlw	0
  1566  000AEC  6E2F               	movwf	_dtoa$344+1,c
  1567  000AEE  0E2D               	movlw	45
  1568  000AF0                     L2:
  1569  000AF0  6E2E               	movwf	_dtoa$344,c
  1570  000AF2  0E80               	movlw	low _dbuf
  1571  000AF4  243E               	addwf	dtoa@i,w,c
  1572  000AF6  6ED9               	movwf	fsr2l,c
  1573  000AF8  0E00               	movlw	high _dbuf
  1574  000AFA  203F               	addwfc	dtoa@i+1,w,c
  1575  000AFC  6EDA               	movwf	fsr2h,c
  1576  000AFE  C02E  FFDF         	movff	_dtoa$344,indf2
  1577  000B02                     l1656:
  1578                           
  1579                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 314:     re
      +                          turn pad(fp, &dbuf[i], w);
  1580  000B02  C01C  F011         	movff	dtoa@fp,pad@fp
  1581  000B06  C01D  F012         	movff	dtoa@fp+1,pad@fp+1
  1582  000B0A  0E80               	movlw	low _dbuf
  1583  000B0C  243E               	addwf	dtoa@i,w,c
  1584  000B0E  6E13               	movwf	pad@buf,c
  1585  000B10  0E00               	movlw	high _dbuf
  1586  000B12  203F               	addwfc	dtoa@i+1,w,c
  1587  000B14  6E14               	movwf	pad@buf+1,c
  1588  000B16  C032  F015         	movff	dtoa@w,pad@p
  1589  000B1A  C033  F016         	movff	dtoa@w+1,pad@p+1
  1590  000B1E  EC2E  F008         	call	_pad	;wreg free
  1591  000B22  C011  F01C         	movff	?_pad,?_dtoa
  1592  000B26  C012  F01D         	movff	?_pad+1,?_dtoa+1
  1593  000B2A  0012               	return		;funcret
  1594  000B2C                     __end_of_dtoa:
  1595                           	opt callstack 0
  1596                           
  1597 ;; *************** function _pad *****************
  1598 ;; Defined at:
  1599 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1600 ;; Parameters:    Size  Location     Type
  1601 ;;  fp              2   16[COMRAM] PTR struct _IO_FILE
  1602 ;;		 -> sprintf@f(6), 
  1603 ;;  buf             2   18[COMRAM] PTR unsigned char 
  1604 ;;		 -> dbuf(32), 
  1605 ;;  p               2   20[COMRAM] int 
  1606 ;; Auto vars:     Size  Location     Type
  1607 ;;  w               2   25[COMRAM] int 
  1608 ;;  i               2   23[COMRAM] int 
  1609 ;; Return value:  Size  Location     Type
  1610 ;;                  2   16[COMRAM] int 
  1611 ;; Registers used:
  1612 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1613 ;; Tracked objects:
  1614 ;;		On entry : 0/0
  1615 ;;		On exit  : 0/0
  1616 ;;		Unchanged: 0/0
  1617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1618 ;;      Params:         6       0       0       0       0       0       0
  1619 ;;      Locals:         4       0       0       0       0       0       0
  1620 ;;      Temps:          1       0       0       0       0       0       0
  1621 ;;      Totals:        11       0       0       0       0       0       0
  1622 ;;Total ram usage:       11 bytes
  1623 ;; Hardware stack levels used:    1
  1624 ;; Hardware stack levels required when called:    3
  1625 ;; This function calls:
  1626 ;;		_fputc
  1627 ;;		_fputs
  1628 ;;		_strlen
  1629 ;; This function is called by:
  1630 ;;		_dtoa
  1631 ;; This function uses a non-reentrant model
  1632 ;;
  1633                           
  1634                           	psect	text5
  1635  00105C                     __ptext5:
  1636                           	opt callstack 0
  1637  00105C                     _pad:
  1638                           	opt callstack 23
  1639                           
  1640                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
  1641                           
  1642                           ;incstack = 0
  1643  00105C  A076               	btfss	_flags,0,c
  1644  00105E  D00A               	goto	l1462
  1645                           
  1646                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
  1647  001060  C013  F00A         	movff	pad@buf,fputs@s
  1648  001064  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1649  001068  C011  F00C         	movff	pad@fp,fputs@fp
  1650  00106C  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1651  001070  ECAC  F009         	call	_fputs	;wreg free
  1652  001074                     l1462:
  1653                           
  1654                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
  1655  001074  BE16               	btfsc	pad@p+1,7,c
  1656  001076  D005               	goto	l1466
  1657  001078  C015  F01A         	movff	pad@p,pad@w
  1658  00107C  C016  F01B         	movff	pad@p+1,pad@w+1
  1659  001080  D004               	goto	l93
  1660  001082                     l1466:
  1661  001082  0E00               	movlw	0
  1662  001084  6E1B               	movwf	pad@w+1,c
  1663  001086  0E00               	movlw	0
  1664  001088  6E1A               	movwf	pad@w,c
  1665  00108A                     l93:
  1666                           
  1667                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
  1668  00108A  0E00               	movlw	0
  1669  00108C  6E19               	movwf	pad@i+1,c
  1670  00108E  0E00               	movlw	0
  1671  001090  6E18               	movwf	pad@i,c
  1672                           
  1673                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  1674  001092  D00C               	goto	l1472
  1675  001094                     l1468:
  1676                           
  1677                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
  1678  001094  0E00               	movlw	0
  1679  001096  6E02               	movwf	fputc@c+1,c
  1680  001098  0E20               	movlw	32
  1681  00109A  6E01               	movwf	fputc@c,c
  1682  00109C  C011  F003         	movff	pad@fp,fputc@fp
  1683  0010A0  C012  F004         	movff	pad@fp+1,fputc@fp+1
  1684  0010A4  ECDE  F007         	call	_fputc	;wreg free
  1685                           
  1686                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
  1687  0010A8  4A18               	infsnz	pad@i,f,c
  1688  0010AA  2A19               	incf	pad@i+1,f,c
  1689  0010AC                     l1472:
  1690                           
  1691                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  1692  0010AC  501A               	movf	pad@w,w,c
  1693  0010AE  5C18               	subwf	pad@i,w,c
  1694  0010B0  5019               	movf	pad@i+1,w,c
  1695  0010B2  0A80               	xorlw	128
  1696  0010B4  6E17               	movwf	??_pad& (0+255),c
  1697  0010B6  501B               	movf	pad@w+1,w,c
  1698  0010B8  0A80               	xorlw	128
  1699  0010BA  5817               	subwfb	??_pad& (0+255),w,c
  1700  0010BC  A0D8               	btfss	status,0,c
  1701  0010BE  D7EA               	goto	l1468
  1702                           
  1703                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
  1704  0010C0  B076               	btfsc	_flags,0,c
  1705  0010C2  D00A               	goto	l1476
  1706                           
  1707                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
  1708  0010C4  C013  F00A         	movff	pad@buf,fputs@s
  1709  0010C8  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1710  0010CC  C011  F00C         	movff	pad@fp,fputs@fp
  1711  0010D0  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1712  0010D4  ECAC  F009         	call	_fputs	;wreg free
  1713  0010D8                     l1476:
  1714                           
  1715                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
  1716  0010D8  C013  F001         	movff	pad@buf,strlen@s
  1717  0010DC  C014  F002         	movff	pad@buf+1,strlen@s+1
  1718  0010E0  ECF9  F009         	call	_strlen	;wreg free
  1719  0010E4  501A               	movf	pad@w,w,c
  1720  0010E6  2401               	addwf	?_strlen,w,c
  1721  0010E8  6E11               	movwf	?_pad,c
  1722  0010EA  501B               	movf	pad@w+1,w,c
  1723  0010EC  2002               	addwfc	?_strlen+1,w,c
  1724  0010EE  6E12               	movwf	?_pad+1,c
  1725  0010F0  0012               	return		;funcret
  1726  0010F2                     __end_of_pad:
  1727                           	opt callstack 0
  1728                           
  1729 ;; *************** function _strlen *****************
  1730 ;; Defined at:
  1731 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
  1732 ;; Parameters:    Size  Location     Type
  1733 ;;  s               2    0[COMRAM] PTR const unsigned char 
  1734 ;;		 -> dbuf(32), 
  1735 ;; Auto vars:     Size  Location     Type
  1736 ;;  a               2    2[COMRAM] PTR const unsigned char 
  1737 ;;		 -> dbuf(32), 
  1738 ;; Return value:  Size  Location     Type
  1739 ;;                  2    0[COMRAM] unsigned int 
  1740 ;; Registers used:
  1741 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1742 ;; Tracked objects:
  1743 ;;		On entry : 0/0
  1744 ;;		On exit  : 0/0
  1745 ;;		Unchanged: 0/0
  1746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1747 ;;      Params:         2       0       0       0       0       0       0
  1748 ;;      Locals:         2       0       0       0       0       0       0
  1749 ;;      Temps:          0       0       0       0       0       0       0
  1750 ;;      Totals:         4       0       0       0       0       0       0
  1751 ;;Total ram usage:        4 bytes
  1752 ;; Hardware stack levels used:    1
  1753 ;; This function calls:
  1754 ;;		Nothing
  1755 ;; This function is called by:
  1756 ;;		_pad
  1757 ;; This function uses a non-reentrant model
  1758 ;;
  1759                           
  1760                           	psect	text6
  1761  0013F2                     __ptext6:
  1762                           	opt callstack 0
  1763  0013F2                     _strlen:
  1764                           	opt callstack 25
  1765                           
  1766                           ;incstack = 0
  1767  0013F2  C001  F003         	movff	strlen@s,strlen@a
  1768  0013F6  C002  F004         	movff	strlen@s+1,strlen@a+1
  1769  0013FA  D002               	goto	l1452
  1770  0013FC                     l1450:
  1771  0013FC  4A01               	infsnz	strlen@s,f,c
  1772  0013FE  2A02               	incf	strlen@s+1,f,c
  1773  001400                     l1452:
  1774  001400  C001  FFD9         	movff	strlen@s,fsr2l
  1775  001404  C002  FFDA         	movff	strlen@s+1,fsr2h
  1776  001408  50DF               	movf	indf2,w,c
  1777  00140A  A4D8               	btfss	status,2,c
  1778  00140C  D7F7               	goto	l1450
  1779  00140E  5003               	movf	strlen@a,w,c
  1780  001410  5C01               	subwf	strlen@s,w,c
  1781  001412  6E01               	movwf	?_strlen,c
  1782  001414  5004               	movf	strlen@a+1,w,c
  1783  001416  5802               	subwfb	strlen@s+1,w,c
  1784  001418  6E02               	movwf	?_strlen+1,c
  1785  00141A  0012               	return		;funcret
  1786  00141C                     __end_of_strlen:
  1787                           	opt callstack 0
  1788                           
  1789 ;; *************** function _fputs *****************
  1790 ;; Defined at:
  1791 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputs.c"
  1792 ;; Parameters:    Size  Location     Type
  1793 ;;  s               2    9[COMRAM] PTR const unsigned char 
  1794 ;;		 -> dbuf(32), 
  1795 ;;  fp              2   11[COMRAM] PTR struct _IO_FILE
  1796 ;;		 -> sprintf@f(6), 
  1797 ;; Auto vars:     Size  Location     Type
  1798 ;;  i               2   14[COMRAM] int 
  1799 ;;  c               1   13[COMRAM] unsigned char 
  1800 ;; Return value:  Size  Location     Type
  1801 ;;                  2    9[COMRAM] int 
  1802 ;; Registers used:
  1803 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1804 ;; Tracked objects:
  1805 ;;		On entry : 0/0
  1806 ;;		On exit  : 0/0
  1807 ;;		Unchanged: 0/0
  1808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1809 ;;      Params:         4       0       0       0       0       0       0
  1810 ;;      Locals:         3       0       0       0       0       0       0
  1811 ;;      Temps:          0       0       0       0       0       0       0
  1812 ;;      Totals:         7       0       0       0       0       0       0
  1813 ;;Total ram usage:        7 bytes
  1814 ;; Hardware stack levels used:    1
  1815 ;; Hardware stack levels required when called:    2
  1816 ;; This function calls:
  1817 ;;		_fputc
  1818 ;; This function is called by:
  1819 ;;		_pad
  1820 ;; This function uses a non-reentrant model
  1821 ;;
  1822                           
  1823                           	psect	text7
  1824  001358                     __ptext7:
  1825                           	opt callstack 0
  1826  001358                     _fputs:
  1827                           	opt callstack 23
  1828                           
  1829                           ;incstack = 0
  1830  001358  0E00               	movlw	0
  1831  00135A  6E10               	movwf	fputs@i+1,c
  1832  00135C  0E00               	movlw	0
  1833  00135E  6E0F               	movwf	fputs@i,c
  1834  001360  D00B               	goto	l1446
  1835  001362                     l1442:
  1836  001362  C00E  F001         	movff	fputs@c,fputc@c
  1837  001366  6A02               	clrf	fputc@c+1,c
  1838  001368  C00C  F003         	movff	fputs@fp,fputc@fp
  1839  00136C  C00D  F004         	movff	fputs@fp+1,fputc@fp+1
  1840  001370  ECDE  F007         	call	_fputc	;wreg free
  1841  001374  4A0F               	infsnz	fputs@i,f,c
  1842  001376  2A10               	incf	fputs@i+1,f,c
  1843  001378                     l1446:
  1844  001378  500F               	movf	fputs@i,w,c
  1845  00137A  240A               	addwf	fputs@s,w,c
  1846  00137C  6ED9               	movwf	fsr2l,c
  1847  00137E  5010               	movf	fputs@i+1,w,c
  1848  001380  200B               	addwfc	fputs@s+1,w,c
  1849  001382  6EDA               	movwf	fsr2h,c
  1850  001384  50DF               	movf	indf2,w,c
  1851  001386  6E0E               	movwf	fputs@c,c
  1852  001388  500E               	movf	fputs@c,w,c
  1853  00138A  B4D8               	btfsc	status,2,c
  1854  00138C  0012               	return	
  1855  00138E  D7E9               	goto	l1442
  1856  001390                     __end_of_fputs:
  1857                           	opt callstack 0
  1858                           
  1859 ;; *************** function _fputc *****************
  1860 ;; Defined at:
  1861 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputc.c"
  1862 ;; Parameters:    Size  Location     Type
  1863 ;;  c               2    0[COMRAM] int 
  1864 ;;  fp              2    2[COMRAM] PTR struct _IO_FILE
  1865 ;;		 -> sprintf@f(6), 
  1866 ;; Auto vars:     Size  Location     Type
  1867 ;;		None
  1868 ;; Return value:  Size  Location     Type
  1869 ;;                  2    0[COMRAM] int 
  1870 ;; Registers used:
  1871 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1872 ;; Tracked objects:
  1873 ;;		On entry : 0/0
  1874 ;;		On exit  : 0/0
  1875 ;;		Unchanged: 0/0
  1876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1877 ;;      Params:         4       0       0       0       0       0       0
  1878 ;;      Locals:         0       0       0       0       0       0       0
  1879 ;;      Temps:          5       0       0       0       0       0       0
  1880 ;;      Totals:         9       0       0       0       0       0       0
  1881 ;;Total ram usage:        9 bytes
  1882 ;; Hardware stack levels used:    1
  1883 ;; Hardware stack levels required when called:    1
  1884 ;; This function calls:
  1885 ;;		_putch
  1886 ;; This function is called by:
  1887 ;;		_pad
  1888 ;;		_vfpfcnvrt
  1889 ;;		_fputs
  1890 ;; This function uses a non-reentrant model
  1891 ;;
  1892                           
  1893                           	psect	text8
  1894  000FBC                     __ptext8:
  1895                           	opt callstack 0
  1896  000FBC                     _fputc:
  1897                           	opt callstack 26
  1898                           
  1899                           ;incstack = 0
  1900  000FBC  5003               	movf	fputc@fp,w,c
  1901  000FBE  1004               	iorwf	fputc@fp+1,w,c
  1902  000FC0  B4D8               	btfsc	status,2,c
  1903  000FC2  D004               	goto	u730
  1904  000FC4  5003               	movf	fputc@fp,w,c
  1905  000FC6  1004               	iorwf	fputc@fp+1,w,c
  1906  000FC8  A4D8               	btfss	status,2,c
  1907  000FCA  D004               	goto	l1432
  1908  000FCC                     u730:
  1909  000FCC  5001               	movf	fputc@c,w,c
  1910  000FCE  EC4B  F00A         	call	_putch
  1911  000FD2  0012               	return	
  1912  000FD4                     l1432:
  1913  000FD4  EE20 F004          	lfsr	2,4
  1914  000FD8  5003               	movf	fputc@fp,w,c
  1915  000FDA  26D9               	addwf	fsr2l,f,c
  1916  000FDC  5004               	movf	fputc@fp+1,w,c
  1917  000FDE  22DA               	addwfc	fsr2h,f,c
  1918  000FE0  50DE               	movf	postinc2,w,c
  1919  000FE2  10DE               	iorwf	postinc2,w,c
  1920  000FE4  B4D8               	btfsc	status,2,c
  1921  000FE6  D016               	goto	u750
  1922  000FE8  EE20 F004          	lfsr	2,4
  1923  000FEC  5003               	movf	fputc@fp,w,c
  1924  000FEE  26D9               	addwf	fsr2l,f,c
  1925  000FF0  5004               	movf	fputc@fp+1,w,c
  1926  000FF2  22DA               	addwfc	fsr2h,f,c
  1927  000FF4  EE10 F002          	lfsr	1,2
  1928  000FF8  5003               	movf	fputc@fp,w,c
  1929  000FFA  26E1               	addwf	fsr1l,f,c
  1930  000FFC  5004               	movf	fputc@fp+1,w,c
  1931  000FFE  22E2               	addwfc	fsr1h,f,c
  1932  001000  50DE               	movf	postinc2,w,c
  1933  001002  5CE6               	subwf	postinc1,w,c
  1934  001004  50E6               	movf	postinc1,w,c
  1935  001006  0A80               	xorlw	128
  1936  001008  6E09               	movwf	(??_fputc+4)& (0+255),c
  1937  00100A  50DE               	movf	postinc2,w,c
  1938  00100C  0A80               	xorlw	128
  1939  00100E  5809               	subwfb	(??_fputc+4)& (0+255),w,c
  1940  001010  B0D8               	btfsc	status,0,c
  1941  001012  0012               	return	
  1942  001014                     u750:
  1943  001014  EE20 F002          	lfsr	2,2
  1944  001018  5003               	movf	fputc@fp,w,c
  1945  00101A  26D9               	addwf	fsr2l,f,c
  1946  00101C  5004               	movf	fputc@fp+1,w,c
  1947  00101E  22DA               	addwfc	fsr2h,f,c
  1948  001020  CFDE F005          	movff	postinc2,??_fputc
  1949  001024  CFDD F006          	movff	postdec2,??_fputc+1
  1950  001028  C003  FFD9         	movff	fputc@fp,fsr2l
  1951  00102C  C004  FFDA         	movff	fputc@fp+1,fsr2h
  1952  001030  CFDE F007          	movff	postinc2,??_fputc+2
  1953  001034  CFDD F008          	movff	postdec2,??_fputc+3
  1954  001038  5005               	movf	??_fputc,w,c
  1955  00103A  2407               	addwf	??_fputc+2,w,c
  1956  00103C  6ED9               	movwf	fsr2l,c
  1957  00103E  5006               	movf	??_fputc+1,w,c
  1958  001040  2008               	addwfc	??_fputc+3,w,c
  1959  001042  6EDA               	movwf	fsr2h,c
  1960  001044  C001  FFDF         	movff	fputc@c,indf2
  1961  001048  EE20 F002          	lfsr	2,2
  1962  00104C  5003               	movf	fputc@fp,w,c
  1963  00104E  26D9               	addwf	fsr2l,f,c
  1964  001050  5004               	movf	fputc@fp+1,w,c
  1965  001052  22DA               	addwfc	fsr2h,f,c
  1966  001054  2ADE               	incf	postinc2,f,c
  1967  001056  0E00               	movlw	0
  1968  001058  22DD               	addwfc	postdec2,f,c
  1969  00105A  0012               	return		;funcret
  1970  00105C                     __end_of_fputc:
  1971                           	opt callstack 0
  1972                           
  1973 ;; *************** function _putch *****************
  1974 ;; Defined at:
  1975 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\putch.c"
  1976 ;; Parameters:    Size  Location     Type
  1977 ;;  c               1    wreg     unsigned char 
  1978 ;; Auto vars:     Size  Location     Type
  1979 ;;  c               1    0[COMRAM] unsigned char 
  1980 ;; Return value:  Size  Location     Type
  1981 ;;                  1    wreg      void 
  1982 ;; Registers used:
  1983 ;;		wreg
  1984 ;; Tracked objects:
  1985 ;;		On entry : 0/0
  1986 ;;		On exit  : 0/0
  1987 ;;		Unchanged: 0/0
  1988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1989 ;;      Params:         0       0       0       0       0       0       0
  1990 ;;      Locals:         0       0       0       0       0       0       0
  1991 ;;      Temps:          0       0       0       0       0       0       0
  1992 ;;      Totals:         0       0       0       0       0       0       0
  1993 ;;Total ram usage:        0 bytes
  1994 ;; Hardware stack levels used:    1
  1995 ;; This function calls:
  1996 ;;		Nothing
  1997 ;; This function is called by:
  1998 ;;		_fputc
  1999 ;; This function uses a non-reentrant model
  2000 ;;
  2001                           
  2002                           	psect	text9
  2003  001496                     __ptext9:
  2004                           	opt callstack 0
  2005  001496                     _putch:
  2006                           	opt callstack 26
  2007                           
  2008                           ;incstack = 0
  2009  001496  0012               	return		;funcret
  2010  001498                     __end_of_putch:
  2011                           	opt callstack 0
  2012                           
  2013 ;; *************** function _abs *****************
  2014 ;; Defined at:
  2015 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\abs.c"
  2016 ;; Parameters:    Size  Location     Type
  2017 ;;  a               2   18[COMRAM] int 
  2018 ;; Auto vars:     Size  Location     Type
  2019 ;;		None
  2020 ;; Return value:  Size  Location     Type
  2021 ;;                  2   18[COMRAM] int 
  2022 ;; Registers used:
  2023 ;;		wreg, status,2, status,0
  2024 ;; Tracked objects:
  2025 ;;		On entry : 0/0
  2026 ;;		On exit  : 0/0
  2027 ;;		Unchanged: 0/0
  2028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2029 ;;      Params:         2       0       0       0       0       0       0
  2030 ;;      Locals:         0       0       0       0       0       0       0
  2031 ;;      Temps:          2       0       0       0       0       0       0
  2032 ;;      Totals:         4       0       0       0       0       0       0
  2033 ;;Total ram usage:        4 bytes
  2034 ;; Hardware stack levels used:    1
  2035 ;; This function calls:
  2036 ;;		Nothing
  2037 ;; This function is called by:
  2038 ;;		_dtoa
  2039 ;; This function uses a non-reentrant model
  2040 ;;
  2041                           
  2042                           	psect	text10
  2043  001390                     __ptext10:
  2044                           	opt callstack 0
  2045  001390                     _abs:
  2046                           	opt callstack 26
  2047                           
  2048                           ;incstack = 0
  2049  001390  BE14               	btfsc	abs@a+1,7,c
  2050  001392  D005               	goto	u820
  2051  001394  5014               	movf	abs@a+1,w,c
  2052  001396  E110               	bnz	l838
  2053  001398  0413               	decf	abs@a,w,c
  2054  00139A  B0D8               	btfsc	status,0,c
  2055  00139C  D00D               	goto	l838
  2056  00139E                     u820:
  2057  00139E  C013  F015         	movff	abs@a,??_abs
  2058  0013A2  C014  F016         	movff	abs@a+1,??_abs+1
  2059  0013A6  1E15               	comf	??_abs,f,c
  2060  0013A8  1E16               	comf	??_abs+1,f,c
  2061  0013AA  4A15               	infsnz	??_abs,f,c
  2062  0013AC  2A16               	incf	??_abs+1,f,c
  2063  0013AE  C015  F013         	movff	??_abs,?_abs
  2064  0013B2  C016  F014         	movff	??_abs+1,?_abs+1
  2065  0013B6  0012               	return	
  2066  0013B8                     l838:
  2067  0013B8  C013  F013         	movff	abs@a,?_abs
  2068  0013BC  C014  F014         	movff	abs@a+1,?_abs+1
  2069  0013C0  0012               	return		;funcret
  2070  0013C2                     __end_of_abs:
  2071                           	opt callstack 0
  2072                           
  2073 ;; *************** function ___aomod *****************
  2074 ;; Defined at:
  2075 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aomod.c"
  2076 ;; Parameters:    Size  Location     Type
  2077 ;;  dividend        8    0[COMRAM] long long 
  2078 ;;  divisor         8    8[COMRAM] long long 
  2079 ;; Auto vars:     Size  Location     Type
  2080 ;;  sign            1   17[COMRAM] unsigned char 
  2081 ;;  counter         1   16[COMRAM] unsigned char 
  2082 ;; Return value:  Size  Location     Type
  2083 ;;                  8    0[COMRAM] long long 
  2084 ;; Registers used:
  2085 ;;		wreg, status,2, status,0
  2086 ;; Tracked objects:
  2087 ;;		On entry : 0/0
  2088 ;;		On exit  : 0/0
  2089 ;;		Unchanged: 0/0
  2090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2091 ;;      Params:        16       0       0       0       0       0       0
  2092 ;;      Locals:         2       0       0       0       0       0       0
  2093 ;;      Temps:          0       0       0       0       0       0       0
  2094 ;;      Totals:        18       0       0       0       0       0       0
  2095 ;;Total ram usage:       18 bytes
  2096 ;; Hardware stack levels used:    1
  2097 ;; This function calls:
  2098 ;;		Nothing
  2099 ;; This function is called by:
  2100 ;;		_dtoa
  2101 ;; This function uses a non-reentrant model
  2102 ;;
  2103                           
  2104                           	psect	text11
  2105  000DB4                     __ptext11:
  2106                           	opt callstack 0
  2107  000DB4                     ___aomod:
  2108                           	opt callstack 26
  2109                           
  2110                           ;incstack = 0
  2111  000DB4  0E00               	movlw	0
  2112  000DB6  6E12               	movwf	___aomod@sign,c
  2113  000DB8  AE08               	btfss	___aomod@dividend+7,7,c
  2114  000DBA  D012               	goto	l1546
  2115  000DBC  1E08               	comf	___aomod@dividend+7,f,c
  2116  000DBE  1E07               	comf	___aomod@dividend+6,f,c
  2117  000DC0  1E06               	comf	___aomod@dividend+5,f,c
  2118  000DC2  1E05               	comf	___aomod@dividend+4,f,c
  2119  000DC4  1E04               	comf	___aomod@dividend+3,f,c
  2120  000DC6  1E03               	comf	___aomod@dividend+2,f,c
  2121  000DC8  1E02               	comf	___aomod@dividend+1,f,c
  2122  000DCA  6C01               	negf	___aomod@dividend,c
  2123  000DCC  0E00               	movlw	0
  2124  000DCE  2202               	addwfc	___aomod@dividend+1,f,c
  2125  000DD0  2203               	addwfc	___aomod@dividend+2,f,c
  2126  000DD2  2204               	addwfc	___aomod@dividend+3,f,c
  2127  000DD4  2205               	addwfc	___aomod@dividend+4,f,c
  2128  000DD6  2206               	addwfc	___aomod@dividend+5,f,c
  2129  000DD8  2207               	addwfc	___aomod@dividend+6,f,c
  2130  000DDA  2208               	addwfc	___aomod@dividend+7,f,c
  2131  000DDC  0E01               	movlw	1
  2132  000DDE  6E12               	movwf	___aomod@sign,c
  2133  000DE0                     l1546:
  2134  000DE0  AE10               	btfss	___aomod@divisor+7,7,c
  2135  000DE2  D010               	goto	l1550
  2136  000DE4  1E10               	comf	___aomod@divisor+7,f,c
  2137  000DE6  1E0F               	comf	___aomod@divisor+6,f,c
  2138  000DE8  1E0E               	comf	___aomod@divisor+5,f,c
  2139  000DEA  1E0D               	comf	___aomod@divisor+4,f,c
  2140  000DEC  1E0C               	comf	___aomod@divisor+3,f,c
  2141  000DEE  1E0B               	comf	___aomod@divisor+2,f,c
  2142  000DF0  1E0A               	comf	___aomod@divisor+1,f,c
  2143  000DF2  6C09               	negf	___aomod@divisor,c
  2144  000DF4  0E00               	movlw	0
  2145  000DF6  220A               	addwfc	___aomod@divisor+1,f,c
  2146  000DF8  220B               	addwfc	___aomod@divisor+2,f,c
  2147  000DFA  220C               	addwfc	___aomod@divisor+3,f,c
  2148  000DFC  220D               	addwfc	___aomod@divisor+4,f,c
  2149  000DFE  220E               	addwfc	___aomod@divisor+5,f,c
  2150  000E00  220F               	addwfc	___aomod@divisor+6,f,c
  2151  000E02  2210               	addwfc	___aomod@divisor+7,f,c
  2152  000E04                     l1550:
  2153  000E04  5009               	movf	___aomod@divisor,w,c
  2154  000E06  100A               	iorwf	___aomod@divisor+1,w,c
  2155  000E08  100B               	iorwf	___aomod@divisor+2,w,c
  2156  000E0A  100C               	iorwf	___aomod@divisor+3,w,c
  2157  000E0C  100D               	iorwf	___aomod@divisor+4,w,c
  2158  000E0E  100E               	iorwf	___aomod@divisor+5,w,c
  2159  000E10  100F               	iorwf	___aomod@divisor+6,w,c
  2160  000E12  1010               	iorwf	___aomod@divisor+7,w,c
  2161  000E14  B4D8               	btfsc	status,2,c
  2162  000E16  D03C               	goto	l1566
  2163  000E18  0E01               	movlw	1
  2164  000E1A  6E11               	movwf	___aomod@counter,c
  2165  000E1C  D00A               	goto	l1556
  2166  000E1E                     l1554:
  2167  000E1E  90D8               	bcf	status,0,c
  2168  000E20  3609               	rlcf	___aomod@divisor,f,c
  2169  000E22  360A               	rlcf	___aomod@divisor+1,f,c
  2170  000E24  360B               	rlcf	___aomod@divisor+2,f,c
  2171  000E26  360C               	rlcf	___aomod@divisor+3,f,c
  2172  000E28  360D               	rlcf	___aomod@divisor+4,f,c
  2173  000E2A  360E               	rlcf	___aomod@divisor+5,f,c
  2174  000E2C  360F               	rlcf	___aomod@divisor+6,f,c
  2175  000E2E  3610               	rlcf	___aomod@divisor+7,f,c
  2176  000E30  2A11               	incf	___aomod@counter,f,c
  2177  000E32                     l1556:
  2178  000E32  AE10               	btfss	___aomod@divisor+7,7,c
  2179  000E34  D7F4               	goto	l1554
  2180  000E36                     u950:
  2181  000E36  5009               	movf	___aomod@divisor,w,c
  2182  000E38  5C01               	subwf	___aomod@dividend,w,c
  2183  000E3A  500A               	movf	___aomod@divisor+1,w,c
  2184  000E3C  5802               	subwfb	___aomod@dividend+1,w,c
  2185  000E3E  500B               	movf	___aomod@divisor+2,w,c
  2186  000E40  5803               	subwfb	___aomod@dividend+2,w,c
  2187  000E42  500C               	movf	___aomod@divisor+3,w,c
  2188  000E44  5804               	subwfb	___aomod@dividend+3,w,c
  2189  000E46  500D               	movf	___aomod@divisor+4,w,c
  2190  000E48  5805               	subwfb	___aomod@dividend+4,w,c
  2191  000E4A  500E               	movf	___aomod@divisor+5,w,c
  2192  000E4C  5806               	subwfb	___aomod@dividend+5,w,c
  2193  000E4E  500F               	movf	___aomod@divisor+6,w,c
  2194  000E50  5807               	subwfb	___aomod@dividend+6,w,c
  2195  000E52  5010               	movf	___aomod@divisor+7,w,c
  2196  000E54  5808               	subwfb	___aomod@dividend+7,w,c
  2197  000E56  A0D8               	btfss	status,0,c
  2198  000E58  D010               	goto	l1562
  2199  000E5A  5009               	movf	___aomod@divisor,w,c
  2200  000E5C  5E01               	subwf	___aomod@dividend,f,c
  2201  000E5E  500A               	movf	___aomod@divisor+1,w,c
  2202  000E60  5A02               	subwfb	___aomod@dividend+1,f,c
  2203  000E62  500B               	movf	___aomod@divisor+2,w,c
  2204  000E64  5A03               	subwfb	___aomod@dividend+2,f,c
  2205  000E66  500C               	movf	___aomod@divisor+3,w,c
  2206  000E68  5A04               	subwfb	___aomod@dividend+3,f,c
  2207  000E6A  500D               	movf	___aomod@divisor+4,w,c
  2208  000E6C  5A05               	subwfb	___aomod@dividend+4,f,c
  2209  000E6E  500E               	movf	___aomod@divisor+5,w,c
  2210  000E70  5A06               	subwfb	___aomod@dividend+5,f,c
  2211  000E72  500F               	movf	___aomod@divisor+6,w,c
  2212  000E74  5A07               	subwfb	___aomod@dividend+6,f,c
  2213  000E76  5010               	movf	___aomod@divisor+7,w,c
  2214  000E78  5A08               	subwfb	___aomod@dividend+7,f,c
  2215  000E7A                     l1562:
  2216  000E7A  90D8               	bcf	status,0,c
  2217  000E7C  3210               	rrcf	___aomod@divisor+7,f,c
  2218  000E7E  320F               	rrcf	___aomod@divisor+6,f,c
  2219  000E80  320E               	rrcf	___aomod@divisor+5,f,c
  2220  000E82  320D               	rrcf	___aomod@divisor+4,f,c
  2221  000E84  320C               	rrcf	___aomod@divisor+3,f,c
  2222  000E86  320B               	rrcf	___aomod@divisor+2,f,c
  2223  000E88  320A               	rrcf	___aomod@divisor+1,f,c
  2224  000E8A  3209               	rrcf	___aomod@divisor,f,c
  2225  000E8C  2E11               	decfsz	___aomod@counter,f,c
  2226  000E8E  D7D3               	goto	u950
  2227  000E90                     l1566:
  2228  000E90  5012               	movf	___aomod@sign,w,c
  2229  000E92  B4D8               	btfsc	status,2,c
  2230  000E94  D010               	goto	l1570
  2231  000E96  1E08               	comf	___aomod@dividend+7,f,c
  2232  000E98  1E07               	comf	___aomod@dividend+6,f,c
  2233  000E9A  1E06               	comf	___aomod@dividend+5,f,c
  2234  000E9C  1E05               	comf	___aomod@dividend+4,f,c
  2235  000E9E  1E04               	comf	___aomod@dividend+3,f,c
  2236  000EA0  1E03               	comf	___aomod@dividend+2,f,c
  2237  000EA2  1E02               	comf	___aomod@dividend+1,f,c
  2238  000EA4  6C01               	negf	___aomod@dividend,c
  2239  000EA6  0E00               	movlw	0
  2240  000EA8  2202               	addwfc	___aomod@dividend+1,f,c
  2241  000EAA  2203               	addwfc	___aomod@dividend+2,f,c
  2242  000EAC  2204               	addwfc	___aomod@dividend+3,f,c
  2243  000EAE  2205               	addwfc	___aomod@dividend+4,f,c
  2244  000EB0  2206               	addwfc	___aomod@dividend+5,f,c
  2245  000EB2  2207               	addwfc	___aomod@dividend+6,f,c
  2246  000EB4  2208               	addwfc	___aomod@dividend+7,f,c
  2247  000EB6                     l1570:
  2248  000EB6  C001  F001         	movff	___aomod@dividend,?___aomod
  2249  000EBA  C002  F002         	movff	___aomod@dividend+1,?___aomod+1
  2250  000EBE  C003  F003         	movff	___aomod@dividend+2,?___aomod+2
  2251  000EC2  C004  F004         	movff	___aomod@dividend+3,?___aomod+3
  2252  000EC6  C005  F005         	movff	___aomod@dividend+4,?___aomod+4
  2253  000ECA  C006  F006         	movff	___aomod@dividend+5,?___aomod+5
  2254  000ECE  C007  F007         	movff	___aomod@dividend+6,?___aomod+6
  2255  000ED2  C008  F008         	movff	___aomod@dividend+7,?___aomod+7
  2256  000ED6  0012               	return		;funcret
  2257  000ED8                     __end_of___aomod:
  2258                           	opt callstack 0
  2259                           
  2260 ;; *************** function ___aodiv *****************
  2261 ;; Defined at:
  2262 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aodiv.c"
  2263 ;; Parameters:    Size  Location     Type
  2264 ;;  dividend        8    0[COMRAM] long long 
  2265 ;;  divisor         8    8[COMRAM] long long 
  2266 ;; Auto vars:     Size  Location     Type
  2267 ;;  quotient        8   18[COMRAM] long long 
  2268 ;;  sign            1   17[COMRAM] unsigned char 
  2269 ;;  counter         1   16[COMRAM] unsigned char 
  2270 ;; Return value:  Size  Location     Type
  2271 ;;                  8    0[COMRAM] long long 
  2272 ;; Registers used:
  2273 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2274 ;; Tracked objects:
  2275 ;;		On entry : 0/0
  2276 ;;		On exit  : 0/0
  2277 ;;		Unchanged: 0/0
  2278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2279 ;;      Params:        16       0       0       0       0       0       0
  2280 ;;      Locals:        10       0       0       0       0       0       0
  2281 ;;      Temps:          0       0       0       0       0       0       0
  2282 ;;      Totals:        26       0       0       0       0       0       0
  2283 ;;Total ram usage:       26 bytes
  2284 ;; Hardware stack levels used:    1
  2285 ;; This function calls:
  2286 ;;		Nothing
  2287 ;; This function is called by:
  2288 ;;		_dtoa
  2289 ;; This function uses a non-reentrant model
  2290 ;;
  2291                           
  2292                           	psect	text12
  2293  000B2C                     __ptext12:
  2294                           	opt callstack 0
  2295  000B2C                     ___aodiv:
  2296                           	opt callstack 26
  2297                           
  2298                           ;incstack = 0
  2299  000B2C  0E00               	movlw	0
  2300  000B2E  6E12               	movwf	___aodiv@sign,c
  2301  000B30  AE10               	btfss	___aodiv@divisor+7,7,c
  2302  000B32  D012               	goto	l1502
  2303  000B34  1E10               	comf	___aodiv@divisor+7,f,c
  2304  000B36  1E0F               	comf	___aodiv@divisor+6,f,c
  2305  000B38  1E0E               	comf	___aodiv@divisor+5,f,c
  2306  000B3A  1E0D               	comf	___aodiv@divisor+4,f,c
  2307  000B3C  1E0C               	comf	___aodiv@divisor+3,f,c
  2308  000B3E  1E0B               	comf	___aodiv@divisor+2,f,c
  2309  000B40  1E0A               	comf	___aodiv@divisor+1,f,c
  2310  000B42  6C09               	negf	___aodiv@divisor,c
  2311  000B44  0E00               	movlw	0
  2312  000B46  220A               	addwfc	___aodiv@divisor+1,f,c
  2313  000B48  220B               	addwfc	___aodiv@divisor+2,f,c
  2314  000B4A  220C               	addwfc	___aodiv@divisor+3,f,c
  2315  000B4C  220D               	addwfc	___aodiv@divisor+4,f,c
  2316  000B4E  220E               	addwfc	___aodiv@divisor+5,f,c
  2317  000B50  220F               	addwfc	___aodiv@divisor+6,f,c
  2318  000B52  2210               	addwfc	___aodiv@divisor+7,f,c
  2319  000B54  0E01               	movlw	1
  2320  000B56  6E12               	movwf	___aodiv@sign,c
  2321  000B58                     l1502:
  2322  000B58  AE08               	btfss	___aodiv@dividend+7,7,c
  2323  000B5A  D012               	goto	l1508
  2324  000B5C  1E08               	comf	___aodiv@dividend+7,f,c
  2325  000B5E  1E07               	comf	___aodiv@dividend+6,f,c
  2326  000B60  1E06               	comf	___aodiv@dividend+5,f,c
  2327  000B62  1E05               	comf	___aodiv@dividend+4,f,c
  2328  000B64  1E04               	comf	___aodiv@dividend+3,f,c
  2329  000B66  1E03               	comf	___aodiv@dividend+2,f,c
  2330  000B68  1E02               	comf	___aodiv@dividend+1,f,c
  2331  000B6A  6C01               	negf	___aodiv@dividend,c
  2332  000B6C  0E00               	movlw	0
  2333  000B6E  2202               	addwfc	___aodiv@dividend+1,f,c
  2334  000B70  2203               	addwfc	___aodiv@dividend+2,f,c
  2335  000B72  2204               	addwfc	___aodiv@dividend+3,f,c
  2336  000B74  2205               	addwfc	___aodiv@dividend+4,f,c
  2337  000B76  2206               	addwfc	___aodiv@dividend+5,f,c
  2338  000B78  2207               	addwfc	___aodiv@dividend+6,f,c
  2339  000B7A  2208               	addwfc	___aodiv@dividend+7,f,c
  2340  000B7C  0E01               	movlw	1
  2341  000B7E  1A12               	xorwf	___aodiv@sign,f,c
  2342  000B80                     l1508:
  2343  000B80  EE20  F013         	lfsr	2,___aodiv@quotient
  2344  000B84  0E07               	movlw	7
  2345  000B86                     u871:
  2346  000B86  6ADE               	clrf	postinc2,c
  2347  000B88  06E8               	decf	wreg,f,c
  2348  000B8A  E2FD               	bc	u871
  2349  000B8C  5009               	movf	___aodiv@divisor,w,c
  2350  000B8E  100A               	iorwf	___aodiv@divisor+1,w,c
  2351  000B90  100B               	iorwf	___aodiv@divisor+2,w,c
  2352  000B92  100C               	iorwf	___aodiv@divisor+3,w,c
  2353  000B94  100D               	iorwf	___aodiv@divisor+4,w,c
  2354  000B96  100E               	iorwf	___aodiv@divisor+5,w,c
  2355  000B98  100F               	iorwf	___aodiv@divisor+6,w,c
  2356  000B9A  1010               	iorwf	___aodiv@divisor+7,w,c
  2357  000B9C  B4D8               	btfsc	status,2,c
  2358  000B9E  D046               	goto	l1530
  2359  000BA0  0E01               	movlw	1
  2360  000BA2  6E11               	movwf	___aodiv@counter,c
  2361  000BA4  D00A               	goto	l1516
  2362  000BA6                     l1514:
  2363  000BA6  90D8               	bcf	status,0,c
  2364  000BA8  3609               	rlcf	___aodiv@divisor,f,c
  2365  000BAA  360A               	rlcf	___aodiv@divisor+1,f,c
  2366  000BAC  360B               	rlcf	___aodiv@divisor+2,f,c
  2367  000BAE  360C               	rlcf	___aodiv@divisor+3,f,c
  2368  000BB0  360D               	rlcf	___aodiv@divisor+4,f,c
  2369  000BB2  360E               	rlcf	___aodiv@divisor+5,f,c
  2370  000BB4  360F               	rlcf	___aodiv@divisor+6,f,c
  2371  000BB6  3610               	rlcf	___aodiv@divisor+7,f,c
  2372  000BB8  2A11               	incf	___aodiv@counter,f,c
  2373  000BBA                     l1516:
  2374  000BBA  AE10               	btfss	___aodiv@divisor+7,7,c
  2375  000BBC  D7F4               	goto	l1514
  2376  000BBE                     u890:
  2377  000BBE  90D8               	bcf	status,0,c
  2378  000BC0  3613               	rlcf	___aodiv@quotient,f,c
  2379  000BC2  3614               	rlcf	___aodiv@quotient+1,f,c
  2380  000BC4  3615               	rlcf	___aodiv@quotient+2,f,c
  2381  000BC6  3616               	rlcf	___aodiv@quotient+3,f,c
  2382  000BC8  3617               	rlcf	___aodiv@quotient+4,f,c
  2383  000BCA  3618               	rlcf	___aodiv@quotient+5,f,c
  2384  000BCC  3619               	rlcf	___aodiv@quotient+6,f,c
  2385  000BCE  361A               	rlcf	___aodiv@quotient+7,f,c
  2386  000BD0  5009               	movf	___aodiv@divisor,w,c
  2387  000BD2  5C01               	subwf	___aodiv@dividend,w,c
  2388  000BD4  500A               	movf	___aodiv@divisor+1,w,c
  2389  000BD6  5802               	subwfb	___aodiv@dividend+1,w,c
  2390  000BD8  500B               	movf	___aodiv@divisor+2,w,c
  2391  000BDA  5803               	subwfb	___aodiv@dividend+2,w,c
  2392  000BDC  500C               	movf	___aodiv@divisor+3,w,c
  2393  000BDE  5804               	subwfb	___aodiv@dividend+3,w,c
  2394  000BE0  500D               	movf	___aodiv@divisor+4,w,c
  2395  000BE2  5805               	subwfb	___aodiv@dividend+4,w,c
  2396  000BE4  500E               	movf	___aodiv@divisor+5,w,c
  2397  000BE6  5806               	subwfb	___aodiv@dividend+5,w,c
  2398  000BE8  500F               	movf	___aodiv@divisor+6,w,c
  2399  000BEA  5807               	subwfb	___aodiv@dividend+6,w,c
  2400  000BEC  5010               	movf	___aodiv@divisor+7,w,c
  2401  000BEE  5808               	subwfb	___aodiv@dividend+7,w,c
  2402  000BF0  A0D8               	btfss	status,0,c
  2403  000BF2  D011               	goto	l1526
  2404  000BF4  5009               	movf	___aodiv@divisor,w,c
  2405  000BF6  5E01               	subwf	___aodiv@dividend,f,c
  2406  000BF8  500A               	movf	___aodiv@divisor+1,w,c
  2407  000BFA  5A02               	subwfb	___aodiv@dividend+1,f,c
  2408  000BFC  500B               	movf	___aodiv@divisor+2,w,c
  2409  000BFE  5A03               	subwfb	___aodiv@dividend+2,f,c
  2410  000C00  500C               	movf	___aodiv@divisor+3,w,c
  2411  000C02  5A04               	subwfb	___aodiv@dividend+3,f,c
  2412  000C04  500D               	movf	___aodiv@divisor+4,w,c
  2413  000C06  5A05               	subwfb	___aodiv@dividend+4,f,c
  2414  000C08  500E               	movf	___aodiv@divisor+5,w,c
  2415  000C0A  5A06               	subwfb	___aodiv@dividend+5,f,c
  2416  000C0C  500F               	movf	___aodiv@divisor+6,w,c
  2417  000C0E  5A07               	subwfb	___aodiv@dividend+6,f,c
  2418  000C10  5010               	movf	___aodiv@divisor+7,w,c
  2419  000C12  5A08               	subwfb	___aodiv@dividend+7,f,c
  2420  000C14  8013               	bsf	___aodiv@quotient,0,c
  2421  000C16                     l1526:
  2422  000C16  90D8               	bcf	status,0,c
  2423  000C18  3210               	rrcf	___aodiv@divisor+7,f,c
  2424  000C1A  320F               	rrcf	___aodiv@divisor+6,f,c
  2425  000C1C  320E               	rrcf	___aodiv@divisor+5,f,c
  2426  000C1E  320D               	rrcf	___aodiv@divisor+4,f,c
  2427  000C20  320C               	rrcf	___aodiv@divisor+3,f,c
  2428  000C22  320B               	rrcf	___aodiv@divisor+2,f,c
  2429  000C24  320A               	rrcf	___aodiv@divisor+1,f,c
  2430  000C26  3209               	rrcf	___aodiv@divisor,f,c
  2431  000C28  2E11               	decfsz	___aodiv@counter,f,c
  2432  000C2A  D7C9               	goto	u890
  2433  000C2C                     l1530:
  2434  000C2C  5012               	movf	___aodiv@sign,w,c
  2435  000C2E  B4D8               	btfsc	status,2,c
  2436  000C30  D010               	goto	l1534
  2437  000C32  1E1A               	comf	___aodiv@quotient+7,f,c
  2438  000C34  1E19               	comf	___aodiv@quotient+6,f,c
  2439  000C36  1E18               	comf	___aodiv@quotient+5,f,c
  2440  000C38  1E17               	comf	___aodiv@quotient+4,f,c
  2441  000C3A  1E16               	comf	___aodiv@quotient+3,f,c
  2442  000C3C  1E15               	comf	___aodiv@quotient+2,f,c
  2443  000C3E  1E14               	comf	___aodiv@quotient+1,f,c
  2444  000C40  6C13               	negf	___aodiv@quotient,c
  2445  000C42  0E00               	movlw	0
  2446  000C44  2214               	addwfc	___aodiv@quotient+1,f,c
  2447  000C46  2215               	addwfc	___aodiv@quotient+2,f,c
  2448  000C48  2216               	addwfc	___aodiv@quotient+3,f,c
  2449  000C4A  2217               	addwfc	___aodiv@quotient+4,f,c
  2450  000C4C  2218               	addwfc	___aodiv@quotient+5,f,c
  2451  000C4E  2219               	addwfc	___aodiv@quotient+6,f,c
  2452  000C50  221A               	addwfc	___aodiv@quotient+7,f,c
  2453  000C52                     l1534:
  2454  000C52  C013  F001         	movff	___aodiv@quotient,?___aodiv
  2455  000C56  C014  F002         	movff	___aodiv@quotient+1,?___aodiv+1
  2456  000C5A  C015  F003         	movff	___aodiv@quotient+2,?___aodiv+2
  2457  000C5E  C016  F004         	movff	___aodiv@quotient+3,?___aodiv+3
  2458  000C62  C017  F005         	movff	___aodiv@quotient+4,?___aodiv+4
  2459  000C66  C018  F006         	movff	___aodiv@quotient+5,?___aodiv+5
  2460  000C6A  C019  F007         	movff	___aodiv@quotient+6,?___aodiv+6
  2461  000C6E  C01A  F008         	movff	___aodiv@quotient+7,?___aodiv+7
  2462  000C72  0012               	return		;funcret
  2463  000C74                     __end_of___aodiv:
  2464                           	opt callstack 0
  2465                           
  2466 ;; *************** function _atoi *****************
  2467 ;; Defined at:
  2468 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\atoi.c"
  2469 ;; Parameters:    Size  Location     Type
  2470 ;;  s               2    7[COMRAM] PTR const unsigned char 
  2471 ;;		 -> STR_2(5), 
  2472 ;; Auto vars:     Size  Location     Type
  2473 ;;  n               2   20[COMRAM] int 
  2474 ;;  neg             2   13[COMRAM] int 
  2475 ;; Return value:  Size  Location     Type
  2476 ;;                  2    7[COMRAM] int 
  2477 ;; Registers used:
  2478 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2479 ;; Tracked objects:
  2480 ;;		On entry : 0/0
  2481 ;;		On exit  : 0/0
  2482 ;;		Unchanged: 0/0
  2483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2484 ;;      Params:         2       0       0       0       0       0       0
  2485 ;;      Locals:         9       0       0       0       0       0       0
  2486 ;;      Temps:          4       0       0       0       0       0       0
  2487 ;;      Totals:        15       0       0       0       0       0       0
  2488 ;;Total ram usage:       15 bytes
  2489 ;; Hardware stack levels used:    1
  2490 ;; Hardware stack levels required when called:    1
  2491 ;; This function calls:
  2492 ;;		___wmul
  2493 ;;		_isdigit
  2494 ;;		_isspace
  2495 ;; This function is called by:
  2496 ;;		_vfpfcnvrt
  2497 ;; This function uses a non-reentrant model
  2498 ;;
  2499                           
  2500                           	psect	text13
  2501  000C74                     __ptext13:
  2502                           	opt callstack 0
  2503  000C74                     _atoi:
  2504                           	opt callstack 26
  2505                           
  2506                           ;incstack = 0
  2507  000C74  0E00               	movlw	0
  2508  000C76  6E16               	movwf	atoi@n+1,c
  2509  000C78  0E00               	movlw	0
  2510  000C7A  6E15               	movwf	atoi@n,c
  2511  000C7C  0E00               	movlw	0
  2512  000C7E  6E0F               	movwf	atoi@neg+1,c
  2513  000C80  0E00               	movlw	0
  2514  000C82  6E0E               	movwf	atoi@neg,c
  2515  000C84  D002               	goto	l1664
  2516  000C86                     l1662:
  2517  000C86  4A08               	infsnz	atoi@s,f,c
  2518  000C88  2A09               	incf	atoi@s+1,f,c
  2519  000C8A                     l1664:
  2520  000C8A  0E01               	movlw	1
  2521  000C8C  6E14               	movwf	_atoi$817,c
  2522  000C8E  C008  FFF6         	movff	atoi@s,tblptrl
  2523  000C92  C009  FFF7         	movff	atoi@s+1,tblptrh
  2524  000C96                     	if	0	;tblptru may be non-zero
  2525  000C96                     	endif
  2526  000C96                     	if	0	;tblptru may be non-zero
  2527  000C96                     	endif
  2528  000C96  0008               	tblrd		*
  2529  000C98  50F5               	movf	tablat,w,c
  2530  000C9A  0A20               	xorlw	32
  2531  000C9C  B4D8               	btfsc	status,2,c
  2532  000C9E  D018               	goto	l1672
  2533  000CA0  0EF7               	movlw	247
  2534  000CA2  6E0A               	movwf	??_atoi& (0+255),c
  2535  000CA4  0EFF               	movlw	255
  2536  000CA6  6E0B               	movwf	(??_atoi+1)& (0+255),c
  2537  000CA8  C008  FFF6         	movff	atoi@s,tblptrl
  2538  000CAC  C009  FFF7         	movff	atoi@s+1,tblptrh
  2539  000CB0                     	if	0	;tblptru may be non-zero
  2540  000CB0                     	endif
  2541  000CB0                     	if	0	;tblptru may be non-zero
  2542  000CB0                     	endif
  2543  000CB0  0008               	tblrd		*
  2544  000CB2  50F5               	movf	tablat,w,c
  2545  000CB4  6E0C               	movwf	(??_atoi+2)& (0+255),c
  2546  000CB6  6A0D               	clrf	(??_atoi+3)& (0+255),c
  2547  000CB8  500A               	movf	??_atoi,w,c
  2548  000CBA  260C               	addwf	??_atoi+2,f,c
  2549  000CBC  500B               	movf	??_atoi+1,w,c
  2550  000CBE  220D               	addwfc	??_atoi+3,f,c
  2551  000CC0  500D               	movf	??_atoi+3,w,c
  2552  000CC2  E104               	bnz	u1170
  2553  000CC4  0E05               	movlw	5
  2554  000CC6  5C0C               	subwf	??_atoi+2,w,c
  2555  000CC8  A0D8               	btfss	status,0,c
  2556  000CCA  D002               	goto	l1672
  2557  000CCC                     u1170:
  2558  000CCC  0E00               	movlw	0
  2559  000CCE  6E14               	movwf	_atoi$817,c
  2560  000CD0                     l1672:
  2561  000CD0  C014  F010         	movff	_atoi$817,_atoi$816
  2562  000CD4  6A11               	clrf	_atoi$816+1,c
  2563  000CD6  5010               	movf	_atoi$816,w,c
  2564  000CD8  1011               	iorwf	_atoi$816+1,w,c
  2565  000CDA  B4D8               	btfsc	status,2,c
  2566  000CDC  D008               	goto	l1682
  2567  000CDE  D7D3               	goto	l1662
  2568  000CE0                     l1678:
  2569  000CE0  0E00               	movlw	0
  2570  000CE2  6E0F               	movwf	atoi@neg+1,c
  2571  000CE4  0E01               	movlw	1
  2572  000CE6  6E0E               	movwf	atoi@neg,c
  2573  000CE8                     l1680:
  2574  000CE8  4A08               	infsnz	atoi@s,f,c
  2575  000CEA  2A09               	incf	atoi@s+1,f,c
  2576  000CEC  D02E               	goto	l1688
  2577  000CEE                     l1682:
  2578  000CEE  C008  FFF6         	movff	atoi@s,tblptrl
  2579  000CF2  C009  FFF7         	movff	atoi@s+1,tblptrh
  2580  000CF6                     	if	0	;tblptru may be non-zero
  2581  000CF6                     	endif
  2582  000CF6                     	if	0	;tblptru may be non-zero
  2583  000CF6                     	endif
  2584  000CF6  0008               	tblrd		*
  2585  000CF8  50F5               	movf	tablat,w,c
  2586  000CFA  6E0A               	movwf	??_atoi& (0+255),c
  2587  000CFC  6A0B               	clrf	(??_atoi+1)& (0+255),c
  2588                           
  2589                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2590                           ; Switch size 1, requested type "simple"
  2591                           ; Number of cases is 1, Range of values is 0 to 0
  2592                           ; switch strategies available:
  2593                           ; Name         Instructions Cycles
  2594                           ; simple_byte            4     3 (average)
  2595                           ;	Chosen strategy is simple_byte
  2596  000CFE  500B               	movf	??_atoi+1,w,c
  2597  000D00  0A00               	xorlw	0	; case 0
  2598  000D02  A4D8               	btfss	status,2,c
  2599  000D04  D022               	goto	l1688
  2600                           
  2601                           ; Switch size 1, requested type "simple"
  2602                           ; Number of cases is 2, Range of values is 43 to 45
  2603                           ; switch strategies available:
  2604                           ; Name         Instructions Cycles
  2605                           ; simple_byte            7     4 (average)
  2606                           ;	Chosen strategy is simple_byte
  2607  000D06  500A               	movf	??_atoi,w,c
  2608  000D08  0A2B               	xorlw	43	; case 43
  2609  000D0A  B4D8               	btfsc	status,2,c
  2610  000D0C  D7ED               	goto	l1680
  2611  000D0E  0A06               	xorlw	6	; case 45
  2612  000D10  B4D8               	btfsc	status,2,c
  2613  000D12  D7E6               	goto	l1678
  2614  000D14  D01A               	goto	l1688
  2615  000D16                     l1684:
  2616  000D16  C015  F001         	movff	atoi@n,___wmul@multiplier
  2617  000D1A  C016  F002         	movff	atoi@n+1,___wmul@multiplier+1
  2618  000D1E  0E00               	movlw	0
  2619  000D20  6E04               	movwf	___wmul@multiplicand+1,c
  2620  000D22  0E0A               	movlw	10
  2621  000D24  6E03               	movwf	___wmul@multiplicand,c
  2622  000D26  EC0E  F00A         	call	___wmul	;wreg free
  2623  000D2A  C008  FFF6         	movff	atoi@s,tblptrl
  2624  000D2E  C009  FFF7         	movff	atoi@s+1,tblptrh
  2625  000D32                     	if	0	;tblptru may be non-zero
  2626  000D32                     	endif
  2627  000D32                     	if	0	;tblptru may be non-zero
  2628  000D32                     	endif
  2629  000D32  0008               	tblrd		*
  2630  000D34  50F5               	movf	tablat,w,c
  2631  000D36  5E01               	subwf	?___wmul,f,c
  2632  000D38  0E00               	movlw	0
  2633  000D3A  5A02               	subwfb	?___wmul+1,f,c
  2634  000D3C  0E30               	movlw	48
  2635  000D3E  2401               	addwf	?___wmul,w,c
  2636  000D40  6E15               	movwf	atoi@n,c
  2637  000D42  0E00               	movlw	0
  2638  000D44  2002               	addwfc	?___wmul+1,w,c
  2639  000D46  6E16               	movwf	atoi@n+1,c
  2640  000D48  D7CF               	goto	l1680
  2641  000D4A                     l1688:
  2642  000D4A  0ED0               	movlw	208
  2643  000D4C  6E0A               	movwf	??_atoi& (0+255),c
  2644  000D4E  0EFF               	movlw	255
  2645  000D50  6E0B               	movwf	(??_atoi+1)& (0+255),c
  2646  000D52  C008  FFF6         	movff	atoi@s,tblptrl
  2647  000D56  C009  FFF7         	movff	atoi@s+1,tblptrh
  2648  000D5A                     	if	0	;tblptru may be non-zero
  2649  000D5A                     	endif
  2650  000D5A                     	if	0	;tblptru may be non-zero
  2651  000D5A                     	endif
  2652  000D5A  0008               	tblrd		*
  2653  000D5C  50F5               	movf	tablat,w,c
  2654  000D5E  6E0C               	movwf	(??_atoi+2)& (0+255),c
  2655  000D60  6A0D               	clrf	(??_atoi+3)& (0+255),c
  2656  000D62  500A               	movf	??_atoi,w,c
  2657  000D64  260C               	addwf	??_atoi+2,f,c
  2658  000D66  500B               	movf	??_atoi+1,w,c
  2659  000D68  220D               	addwfc	??_atoi+3,f,c
  2660  000D6A  500D               	movf	??_atoi+3,w,c
  2661  000D6C  E106               	bnz	u1190
  2662  000D6E  0E0A               	movlw	10
  2663  000D70  5C0C               	subwf	??_atoi+2,w,c
  2664  000D72  B0D8               	btfsc	status,0,c
  2665  000D74  D002               	goto	u1190
  2666  000D76  0E01               	movlw	1
  2667  000D78  D001               	goto	u1200
  2668  000D7A                     u1190:
  2669  000D7A  0E00               	movlw	0
  2670  000D7C                     u1200:
  2671  000D7C  6E12               	movwf	_atoi$818,c
  2672  000D7E  6A13               	clrf	_atoi$818+1,c
  2673  000D80  5012               	movf	_atoi$818,w,c
  2674  000D82  1013               	iorwf	_atoi$818+1,w,c
  2675  000D84  A4D8               	btfss	status,2,c
  2676  000D86  D7C7               	goto	l1684
  2677  000D88  500E               	movf	atoi@neg,w,c
  2678  000D8A  100F               	iorwf	atoi@neg+1,w,c
  2679  000D8C  A4D8               	btfss	status,2,c
  2680  000D8E  D00D               	goto	l869
  2681  000D90  C015  F00A         	movff	atoi@n,??_atoi
  2682  000D94  C016  F00B         	movff	atoi@n+1,??_atoi+1
  2683  000D98  1E0A               	comf	??_atoi,f,c
  2684  000D9A  1E0B               	comf	??_atoi+1,f,c
  2685  000D9C  4A0A               	infsnz	??_atoi,f,c
  2686  000D9E  2A0B               	incf	??_atoi+1,f,c
  2687  000DA0  C00A  F008         	movff	??_atoi,?_atoi
  2688  000DA4  C00B  F009         	movff	??_atoi+1,?_atoi+1
  2689  000DA8  0012               	return	
  2690  000DAA                     l869:
  2691  000DAA  C015  F008         	movff	atoi@n,?_atoi
  2692  000DAE  C016  F009         	movff	atoi@n+1,?_atoi+1
  2693  000DB2  0012               	return		;funcret
  2694  000DB4                     __end_of_atoi:
  2695                           	opt callstack 0
  2696                           
  2697 ;; *************** function _isspace *****************
  2698 ;; Defined at:
  2699 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\isspace.c"
  2700 ;; Parameters:    Size  Location     Type
  2701 ;;  c               2    0[COMRAM] int 
  2702 ;; Auto vars:     Size  Location     Type
  2703 ;;		None
  2704 ;; Return value:  Size  Location     Type
  2705 ;;                  2    0[COMRAM] int 
  2706 ;; Registers used:
  2707 ;;		wreg, status,2, status,0
  2708 ;; Tracked objects:
  2709 ;;		On entry : 0/0
  2710 ;;		On exit  : 0/0
  2711 ;;		Unchanged: 0/0
  2712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2713 ;;      Params:         2       0       0       0       0       0       0
  2714 ;;      Locals:         1       0       0       0       0       0       0
  2715 ;;      Temps:          4       0       0       0       0       0       0
  2716 ;;      Totals:         7       0       0       0       0       0       0
  2717 ;;Total ram usage:        7 bytes
  2718 ;; Hardware stack levels used:    1
  2719 ;; This function calls:
  2720 ;;		Nothing
  2721 ;; This function is called by:
  2722 ;;		_atoi
  2723 ;; This function uses a non-reentrant model
  2724 ;;
  2725                           
  2726                           	psect	text14
  2727  00131A                     __ptext14:
  2728                           	opt callstack 0
  2729  00131A                     _isspace:
  2730                           	opt callstack 26
  2731                           
  2732                           ;incstack = 0
  2733  00131A  0E01               	movlw	1
  2734  00131C  6E07               	movwf	_isspace$834,c
  2735  00131E  0E20               	movlw	32
  2736  001320  1801               	xorwf	isspace@c,w,c
  2737  001322  1002               	iorwf	isspace@c+1,w,c
  2738  001324  B4D8               	btfsc	status,2,c
  2739  001326  D014               	goto	l1582
  2740  001328  0EF7               	movlw	247
  2741  00132A  6E03               	movwf	??_isspace& (0+255),c
  2742  00132C  0EFF               	movlw	255
  2743  00132E  6E04               	movwf	(??_isspace+1)& (0+255),c
  2744  001330  C001  F005         	movff	isspace@c,??_isspace+2
  2745  001334  C002  F006         	movff	isspace@c+1,??_isspace+3
  2746  001338  5003               	movf	??_isspace,w,c
  2747  00133A  2605               	addwf	??_isspace+2,f,c
  2748  00133C  5004               	movf	??_isspace+1,w,c
  2749  00133E  2206               	addwfc	??_isspace+3,f,c
  2750  001340  5006               	movf	??_isspace+3,w,c
  2751  001342  E104               	bnz	u990
  2752  001344  0E05               	movlw	5
  2753  001346  5C05               	subwf	??_isspace+2,w,c
  2754  001348  A0D8               	btfss	status,0,c
  2755  00134A  D002               	goto	l1582
  2756  00134C                     u990:
  2757  00134C  0E00               	movlw	0
  2758  00134E  6E07               	movwf	_isspace$834,c
  2759  001350                     l1582:
  2760  001350  C007  F001         	movff	_isspace$834,?_isspace
  2761  001354  6A02               	clrf	?_isspace+1,c
  2762  001356  0012               	return		;funcret
  2763  001358                     __end_of_isspace:
  2764                           	opt callstack 0
  2765                           
  2766 ;; *************** function _isdigit *****************
  2767 ;; Defined at:
  2768 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\isdigit.c"
  2769 ;; Parameters:    Size  Location     Type
  2770 ;;  c               2    0[COMRAM] int 
  2771 ;; Auto vars:     Size  Location     Type
  2772 ;;		None
  2773 ;; Return value:  Size  Location     Type
  2774 ;;                  2    0[COMRAM] int 
  2775 ;; Registers used:
  2776 ;;		wreg, status,2, status,0
  2777 ;; Tracked objects:
  2778 ;;		On entry : 0/0
  2779 ;;		On exit  : 0/0
  2780 ;;		Unchanged: 0/0
  2781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2782 ;;      Params:         2       0       0       0       0       0       0
  2783 ;;      Locals:         0       0       0       0       0       0       0
  2784 ;;      Temps:          4       0       0       0       0       0       0
  2785 ;;      Totals:         6       0       0       0       0       0       0
  2786 ;;Total ram usage:        6 bytes
  2787 ;; Hardware stack levels used:    1
  2788 ;; This function calls:
  2789 ;;		Nothing
  2790 ;; This function is called by:
  2791 ;;		_vfpfcnvrt
  2792 ;;		_atoi
  2793 ;; This function uses a non-reentrant model
  2794 ;;
  2795                           
  2796                           	psect	text15
  2797  0013C2                     __ptext15:
  2798                           	opt callstack 0
  2799  0013C2                     _isdigit:
  2800                           	opt callstack 27
  2801                           
  2802                           ;incstack = 0
  2803  0013C2  0ED0               	movlw	208
  2804  0013C4  6E03               	movwf	??_isdigit& (0+255),c
  2805  0013C6  0EFF               	movlw	255
  2806  0013C8  6E04               	movwf	(??_isdigit+1)& (0+255),c
  2807  0013CA  C001  F005         	movff	isdigit@c,??_isdigit+2
  2808  0013CE  C002  F006         	movff	isdigit@c+1,??_isdigit+3
  2809  0013D2  5003               	movf	??_isdigit,w,c
  2810  0013D4  2605               	addwf	??_isdigit+2,f,c
  2811  0013D6  5004               	movf	??_isdigit+1,w,c
  2812  0013D8  2206               	addwfc	??_isdigit+3,f,c
  2813  0013DA  5006               	movf	??_isdigit+3,w,c
  2814  0013DC  E106               	bnz	u830
  2815  0013DE  0E0A               	movlw	10
  2816  0013E0  5C05               	subwf	??_isdigit+2,w,c
  2817  0013E2  B0D8               	btfsc	status,0,c
  2818  0013E4  D002               	goto	u830
  2819  0013E6  0E01               	movlw	1
  2820  0013E8  D001               	goto	u840
  2821  0013EA                     u830:
  2822  0013EA  0E00               	movlw	0
  2823  0013EC                     u840:
  2824  0013EC  6E01               	movwf	?_isdigit,c
  2825  0013EE  6A02               	clrf	?_isdigit+1,c
  2826  0013F0  0012               	return		;funcret
  2827  0013F2                     __end_of_isdigit:
  2828                           	opt callstack 0
  2829                           
  2830 ;; *************** function ___wmul *****************
  2831 ;; Defined at:
  2832 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
  2833 ;; Parameters:    Size  Location     Type
  2834 ;;  multiplier      2    0[COMRAM] unsigned int 
  2835 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2836 ;; Auto vars:     Size  Location     Type
  2837 ;;  product         2    4[COMRAM] unsigned int 
  2838 ;; Return value:  Size  Location     Type
  2839 ;;                  2    0[COMRAM] unsigned int 
  2840 ;; Registers used:
  2841 ;;		wreg, status,2, status,0, prodl, prodh
  2842 ;; Tracked objects:
  2843 ;;		On entry : 0/0
  2844 ;;		On exit  : 0/0
  2845 ;;		Unchanged: 0/0
  2846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2847 ;;      Params:         4       0       0       0       0       0       0
  2848 ;;      Locals:         2       0       0       0       0       0       0
  2849 ;;      Temps:          0       0       0       0       0       0       0
  2850 ;;      Totals:         6       0       0       0       0       0       0
  2851 ;;Total ram usage:        6 bytes
  2852 ;; Hardware stack levels used:    1
  2853 ;; This function calls:
  2854 ;;		Nothing
  2855 ;; This function is called by:
  2856 ;;		_atoi
  2857 ;; This function uses a non-reentrant model
  2858 ;;
  2859                           
  2860                           	psect	text16
  2861  00141C                     __ptext16:
  2862                           	opt callstack 0
  2863  00141C                     ___wmul:
  2864                           	opt callstack 26
  2865                           
  2866                           ;incstack = 0
  2867  00141C  5001               	movf	___wmul@multiplier,w,c
  2868  00141E  0203               	mulwf	___wmul@multiplicand,c
  2869  001420  CFF3 F005          	movff	prodl,___wmul@product
  2870  001424  CFF4 F006          	movff	prodh,___wmul@product+1
  2871  001428  5001               	movf	___wmul@multiplier,w,c
  2872  00142A  0204               	mulwf	___wmul@multiplicand+1,c
  2873  00142C  50F3               	movf	prodl,w,c
  2874  00142E  2606               	addwf	___wmul@product+1,f,c
  2875  001430  5002               	movf	___wmul@multiplier+1,w,c
  2876  001432  0203               	mulwf	___wmul@multiplicand,c
  2877  001434  50F3               	movf	prodl,w,c
  2878  001436  2606               	addwf	___wmul@product+1,f,c
  2879  001438  C005  F001         	movff	___wmul@product,?___wmul
  2880  00143C  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2881  001440  0012               	return		;funcret
  2882  001442                     __end_of___wmul:
  2883                           	opt callstack 0
  2884                           
  2885 ;; *************** function _lcd_ini *****************
  2886 ;; Defined at:
  2887 ;;		line 3 in file "../Bibliotecas/LCD4b.c"
  2888 ;; Parameters:    Size  Location     Type
  2889 ;;		None
  2890 ;; Auto vars:     Size  Location     Type
  2891 ;;  i               1    5[COMRAM] unsigned char 
  2892 ;; Return value:  Size  Location     Type
  2893 ;;                  1    wreg      void 
  2894 ;; Registers used:
  2895 ;;		wreg, status,2, status,0, cstack
  2896 ;; Tracked objects:
  2897 ;;		On entry : 0/0
  2898 ;;		On exit  : 0/0
  2899 ;;		Unchanged: 0/0
  2900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2901 ;;      Params:         0       0       0       0       0       0       0
  2902 ;;      Locals:         1       0       0       0       0       0       0
  2903 ;;      Temps:          1       0       0       0       0       0       0
  2904 ;;      Totals:         2       0       0       0       0       0       0
  2905 ;;Total ram usage:        2 bytes
  2906 ;; Hardware stack levels used:    1
  2907 ;; Hardware stack levels required when called:    2
  2908 ;; This function calls:
  2909 ;;		_lcd_cmd
  2910 ;; This function is called by:
  2911 ;;		_main
  2912 ;; This function uses a non-reentrant model
  2913 ;;
  2914                           
  2915                           	psect	text17
  2916  0010F2                     __ptext17:
  2917                           	opt callstack 0
  2918  0010F2                     _lcd_ini:
  2919                           	opt callstack 28
  2920                           
  2921                           ;../Bibliotecas/LCD4b.c: 5: char i;;../Bibliotecas/LCD4b.c: 7: TRISD = 0b00000000;
  2922                           
  2923                           ;incstack = 0
  2924  0010F2  0E00               	movlw	0
  2925  0010F4  6E95               	movwf	3989,c	;volatile
  2926                           
  2927                           ;../Bibliotecas/LCD4b.c: 8: TRISEbits.TRISE1 = 0;
  2928  0010F6  9296               	bcf	3990,1,c	;volatile
  2929                           
  2930                           ;../Bibliotecas/LCD4b.c: 9: TRISEbits.TRISE0 = 0;
  2931  0010F8  9096               	bcf	3990,0,c	;volatile
  2932                           
  2933                           ;../Bibliotecas/LCD4b.c: 11: PORTD = 0b00000000;
  2934  0010FA  0E00               	movlw	0
  2935  0010FC  6E83               	movwf	3971,c	;volatile
  2936                           
  2937                           ;../Bibliotecas/LCD4b.c: 12: PORTEbits.RE0 = 0;
  2938  0010FE  9084               	bcf	3972,0,c	;volatile
  2939                           
  2940                           ;../Bibliotecas/LCD4b.c: 13: PORTEbits.RE1 = 0;
  2941  001100  9284               	bcf	3972,1,c	;volatile
  2942                           
  2943                           ;../Bibliotecas/LCD4b.c: 15: _delay((unsigned long)((15)*(8000000/4000.0)));
  2944  001102  0E27               	movlw	39
  2945  001104  6E05               	movwf	??_lcd_ini& (0+255),c
  2946  001106  0EF5               	movlw	245
  2947  001108                     u1447:
  2948  001108  2EE8               	decfsz	wreg,f,c
  2949  00110A  D7FE               	bra	u1447
  2950  00110C  2E05               	decfsz	??_lcd_ini& (0+255),f,c
  2951  00110E  D7FC               	bra	u1447
  2952  001110  F000               	nop	
  2953                           
  2954                           ;../Bibliotecas/LCD4b.c: 18: for(i=0;i<=2;i++)
  2955  001112  0E00               	movlw	0
  2956  001114  6E06               	movwf	lcd_ini@i,c
  2957  001116                     l1852:
  2958                           
  2959                           ;../Bibliotecas/LCD4b.c: 19:    {;../Bibliotecas/LCD4b.c: 20:    lcd_cmd(0x30);
  2960  001116  0E30               	movlw	48
  2961  001118  EC6C  F007         	call	_lcd_cmd
  2962                           
  2963                           ;../Bibliotecas/LCD4b.c: 21:    _delay((unsigned long)((5)*(8000000/4000.0)));
  2964  00111C  0E0D               	movlw	13
  2965  00111E  6E05               	movwf	??_lcd_ini& (0+255),c
  2966  001120  0EFC               	movlw	252
  2967  001122                     u1457:
  2968  001122  2EE8               	decfsz	wreg,f,c
  2969  001124  D7FE               	bra	u1457
  2970  001126  2E05               	decfsz	??_lcd_ini& (0+255),f,c
  2971  001128  D7FC               	bra	u1457
  2972                           
  2973                           ;../Bibliotecas/LCD4b.c: 22:    }
  2974  00112A  2A06               	incf	lcd_ini@i,f,c
  2975  00112C  0E02               	movlw	2
  2976  00112E  6406               	cpfsgt	lcd_ini@i,c
  2977  001130  D7F2               	goto	l1852
  2978                           
  2979                           ;../Bibliotecas/LCD4b.c: 24:    lcd_cmd(0x02);
  2980  001132  0E02               	movlw	2
  2981  001134  EC6C  F007         	call	_lcd_cmd
  2982                           
  2983                           ;../Bibliotecas/LCD4b.c: 25:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  2984  001138  0E1A               	movlw	26
  2985  00113A                     u1467:
  2986  00113A  2EE8               	decfsz	wreg,f,c
  2987  00113C  D7FE               	bra	u1467
  2988  00113E  D000               	nop2	
  2989                           
  2990                           ;../Bibliotecas/LCD4b.c: 26:    lcd_cmd(0x28);
  2991  001140  0E28               	movlw	40
  2992  001142  EC6C  F007         	call	_lcd_cmd
  2993                           
  2994                           ;../Bibliotecas/LCD4b.c: 27:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  2995  001146  0E1A               	movlw	26
  2996  001148                     u1477:
  2997  001148  2EE8               	decfsz	wreg,f,c
  2998  00114A  D7FE               	bra	u1477
  2999  00114C  D000               	nop2	
  3000                           
  3001                           ;../Bibliotecas/LCD4b.c: 28:    lcd_cmd(0x01);
  3002  00114E  0E01               	movlw	1
  3003  001150  EC6C  F007         	call	_lcd_cmd
  3004                           
  3005                           ;../Bibliotecas/LCD4b.c: 29:    _delay((unsigned long)((2)*(8000000/4000.0)));
  3006  001154  0E06               	movlw	6
  3007  001156  6E05               	movwf	??_lcd_ini& (0+255),c
  3008  001158  0E30               	movlw	48
  3009  00115A                     u1487:
  3010  00115A  2EE8               	decfsz	wreg,f,c
  3011  00115C  D7FE               	bra	u1487
  3012  00115E  2E05               	decfsz	??_lcd_ini& (0+255),f,c
  3013  001160  D7FC               	bra	u1487
  3014  001162  D000               	nop2	
  3015                           
  3016                           ;../Bibliotecas/LCD4b.c: 30:    lcd_cmd(0x0C);
  3017  001164  0E0C               	movlw	12
  3018  001166  EC6C  F007         	call	_lcd_cmd
  3019                           
  3020                           ;../Bibliotecas/LCD4b.c: 31:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3021  00116A  0E1A               	movlw	26
  3022  00116C                     u1497:
  3023  00116C  2EE8               	decfsz	wreg,f,c
  3024  00116E  D7FE               	bra	u1497
  3025  001170  D000               	nop2	
  3026                           
  3027                           ;../Bibliotecas/LCD4b.c: 32:    lcd_cmd(0x06);
  3028  001172  0E06               	movlw	6
  3029  001174  EC6C  F007         	call	_lcd_cmd
  3030                           
  3031                           ;../Bibliotecas/LCD4b.c: 33:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3032  001178  0E1A               	movlw	26
  3033  00117A                     u1507:
  3034  00117A  2EE8               	decfsz	wreg,f,c
  3035  00117C  D7FE               	bra	u1507
  3036  00117E  D000               	nop2	
  3037  001180  0012               	return		;funcret
  3038  001182                     __end_of_lcd_ini:
  3039                           	opt callstack 0
  3040                           
  3041 ;; *************** function _lcd_escreve_bf *****************
  3042 ;; Defined at:
  3043 ;;		line 82 in file "../Bibliotecas/LCD4b.c"
  3044 ;; Parameters:    Size  Location     Type
  3045 ;;  lin             1    wreg     unsigned char 
  3046 ;;  col             1    6[COMRAM] unsigned char 
  3047 ;;  str             2    7[COMRAM] PTR unsigned char 
  3048 ;;		 -> bufferLCD(16), STR_1(14), 
  3049 ;; Auto vars:     Size  Location     Type
  3050 ;;  lin             1   10[COMRAM] unsigned char 
  3051 ;;  end             1    9[COMRAM] unsigned char 
  3052 ;; Return value:  Size  Location     Type
  3053 ;;                  1    wreg      void 
  3054 ;; Registers used:
  3055 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3056 ;; Tracked objects:
  3057 ;;		On entry : 0/0
  3058 ;;		On exit  : 0/0
  3059 ;;		Unchanged: 0/0
  3060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3061 ;;      Params:         3       0       0       0       0       0       0
  3062 ;;      Locals:         2       0       0       0       0       0       0
  3063 ;;      Temps:          0       0       0       0       0       0       0
  3064 ;;      Totals:         5       0       0       0       0       0       0
  3065 ;;Total ram usage:        5 bytes
  3066 ;; Hardware stack levels used:    1
  3067 ;; Hardware stack levels required when called:    3
  3068 ;; This function calls:
  3069 ;;		_lcd_envia_byte
  3070 ;; This function is called by:
  3071 ;;		_main
  3072 ;; This function uses a non-reentrant model
  3073 ;;
  3074                           
  3075                           	psect	text18
  3076  0011FE                     __ptext18:
  3077                           	opt callstack 0
  3078  0011FE                     _lcd_escreve_bf:
  3079                           	opt callstack 27
  3080                           
  3081                           ;incstack = 0
  3082                           ;lcd_escreve_bf@lin stored from wreg
  3083  0011FE  6E0B               	movwf	lcd_escreve_bf@lin,c
  3084                           
  3085                           ;../Bibliotecas/LCD4b.c: 82: void lcd_escreve_bf(char lin, char col, char *str);../Bibli
      +                          otecas/LCD4b.c: 83: {;../Bibliotecas/LCD4b.c: 84:     char end;;../Bibliotecas/LCD4b.c: 
      +                          87:     if (lin == 1) {
  3086  001200  040B               	decf	lcd_escreve_bf@lin,w,c
  3087  001202  A4D8               	btfss	status,2,c
  3088  001204  D003               	goto	l1878
  3089                           
  3090                           ;../Bibliotecas/LCD4b.c: 88:         end = col + 0x80 - 1;
  3091  001206  5007               	movf	lcd_escreve_bf@col,w,c
  3092  001208  0F7F               	addlw	127
  3093  00120A  D006               	goto	L3
  3094  00120C                     l1878:
  3095  00120C  0E02               	movlw	2
  3096  00120E  180B               	xorwf	lcd_escreve_bf@lin,w,c
  3097  001210  A4D8               	btfss	status,2,c
  3098  001212  D003               	goto	l1882
  3099                           
  3100                           ;../Bibliotecas/LCD4b.c: 91:         end = col + 0xC0 - 1;
  3101  001214  5007               	movf	lcd_escreve_bf@col,w,c
  3102  001216  0FBF               	addlw	191
  3103  001218                     L3:
  3104  001218  6E0A               	movwf	lcd_escreve_bf@end,c
  3105  00121A                     l1882:
  3106                           
  3107                           ;../Bibliotecas/LCD4b.c: 94:     lcd_envia_byte(0,end);
  3108  00121A  C00A  F005         	movff	lcd_escreve_bf@end,lcd_envia_byte@dado
  3109  00121E  0E00               	movlw	0
  3110  001220  EC32  F00A         	call	_lcd_envia_byte
  3111                           
  3112                           ;../Bibliotecas/LCD4b.c: 98:     while (*str){
  3113  001224  D016               	goto	l1888
  3114  001226                     l1884:
  3115                           
  3116                           ;../Bibliotecas/LCD4b.c: 99:         lcd_envia_byte(1,*str);
  3117  001226  C008  FFF6         	movff	lcd_escreve_bf@str,tblptrl
  3118  00122A  C009  FFF7         	movff	lcd_escreve_bf@str+1,tblptrh
  3119  00122E  6AF8               	clrf	tblptru,c
  3120  001230  0E05               	movlw	(high __ramtop+-1)
  3121  001232  64F7               	cpfsgt	tblptrh,c
  3122  001234  D003               	bra	u1397
  3123  001236  0008               	tblrd		*
  3124  001238  50F5               	movf	tablat,w,c
  3125  00123A  D005               	bra	u1390
  3126  00123C                     u1397:
  3127  00123C  CFF6 FFE1          	movff	tblptrl,fsr1l
  3128  001240  CFF7 FFE2          	movff	tblptrh,fsr1h
  3129  001244  50E7               	movf	indf1,w,c
  3130  001246                     u1390:
  3131  001246  6E05               	movwf	lcd_envia_byte@dado,c
  3132  001248  0E01               	movlw	1
  3133  00124A  EC32  F00A         	call	_lcd_envia_byte
  3134                           
  3135                           ;../Bibliotecas/LCD4b.c: 100:         str++;
  3136  00124E  4A08               	infsnz	lcd_escreve_bf@str,f,c
  3137  001250  2A09               	incf	lcd_escreve_bf@str+1,f,c
  3138  001252                     l1888:
  3139                           
  3140                           ;../Bibliotecas/LCD4b.c: 98:     while (*str){
  3141  001252  C008  FFF6         	movff	lcd_escreve_bf@str,tblptrl
  3142  001256  C009  FFF7         	movff	lcd_escreve_bf@str+1,tblptrh
  3143  00125A  6AF8               	clrf	tblptru,c
  3144  00125C  0E05               	movlw	(high __ramtop+-1)
  3145  00125E  64F7               	cpfsgt	tblptrh,c
  3146  001260  D003               	bra	u1407
  3147  001262  0008               	tblrd		*
  3148  001264  50F5               	movf	tablat,w,c
  3149  001266  D005               	bra	u1400
  3150  001268                     u1407:
  3151  001268  CFF6 FFE1          	movff	tblptrl,fsr1l
  3152  00126C  CFF7 FFE2          	movff	tblptrh,fsr1h
  3153  001270  50E7               	movf	indf1,w,c
  3154  001272                     u1400:
  3155  001272  0900               	iorlw	0
  3156  001274  B4D8               	btfsc	status,2,c
  3157  001276  0012               	return	
  3158  001278  D7D6               	goto	l1884
  3159  00127A                     __end_of_lcd_escreve_bf:
  3160                           	opt callstack 0
  3161                           
  3162 ;; *************** function _lcd_envia_byte *****************
  3163 ;; Defined at:
  3164 ;;		line 74 in file "../Bibliotecas/LCD4b.c"
  3165 ;; Parameters:    Size  Location     Type
  3166 ;;  nivel           1    wreg     unsigned char 
  3167 ;;  dado            1    4[COMRAM] unsigned char 
  3168 ;; Auto vars:     Size  Location     Type
  3169 ;;  nivel           1    5[COMRAM] unsigned char 
  3170 ;; Return value:  Size  Location     Type
  3171 ;;                  1    wreg      void 
  3172 ;; Registers used:
  3173 ;;		wreg, status,2, status,0, cstack
  3174 ;; Tracked objects:
  3175 ;;		On entry : 0/0
  3176 ;;		On exit  : 0/0
  3177 ;;		Unchanged: 0/0
  3178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3179 ;;      Params:         1       0       0       0       0       0       0
  3180 ;;      Locals:         1       0       0       0       0       0       0
  3181 ;;      Temps:          0       0       0       0       0       0       0
  3182 ;;      Totals:         2       0       0       0       0       0       0
  3183 ;;Total ram usage:        2 bytes
  3184 ;; Hardware stack levels used:    1
  3185 ;; Hardware stack levels required when called:    2
  3186 ;; This function calls:
  3187 ;;		_lcd_cmd
  3188 ;; This function is called by:
  3189 ;;		_lcd_escreve_bf
  3190 ;; This function uses a non-reentrant model
  3191 ;;
  3192                           
  3193                           	psect	text19
  3194  001464                     __ptext19:
  3195                           	opt callstack 0
  3196  001464                     _lcd_envia_byte:
  3197                           	opt callstack 27
  3198                           
  3199                           ;incstack = 0
  3200                           ;lcd_envia_byte@nivel stored from wreg
  3201  001464  6E06               	movwf	lcd_envia_byte@nivel,c
  3202                           
  3203                           ;../Bibliotecas/LCD4b.c: 74: void lcd_envia_byte(char nivel, char dado);../Bibliotecas/L
      +                          CD4b.c: 75: {;../Bibliotecas/LCD4b.c: 76:     PORTEbits.RE0 = nivel;
  3204  001466  B006               	btfsc	lcd_envia_byte@nivel,0,c
  3205  001468  D002               	bra	u1345
  3206  00146A  9084               	bcf	3972,0,c	;volatile
  3207  00146C  D001               	bra	u1346
  3208  00146E                     u1345:
  3209  00146E  8084               	bsf	3972,0,c	;volatile
  3210  001470                     u1346:
  3211                           
  3212                           ;../Bibliotecas/LCD4b.c: 77:     _delay((unsigned long)((100)*(8000000/4000000.0)));
  3213  001470  0E42               	movlw	66
  3214  001472                     u1517:
  3215  001472  2EE8               	decfsz	wreg,f,c
  3216  001474  D7FE               	bra	u1517
  3217  001476  D000               	nop2	
  3218                           
  3219                           ;../Bibliotecas/LCD4b.c: 78:     PORTEbits.RE1 = 0;
  3220  001478  9284               	bcf	3972,1,c	;volatile
  3221                           
  3222                           ;../Bibliotecas/LCD4b.c: 79:     lcd_cmd(dado);
  3223  00147A  5005               	movf	lcd_envia_byte@dado,w,c
  3224  00147C  EC6C  F007         	call	_lcd_cmd
  3225  001480  0012               	return		;funcret
  3226  001482                     __end_of_lcd_envia_byte:
  3227                           	opt callstack 0
  3228                           
  3229 ;; *************** function _lcd_cmd *****************
  3230 ;; Defined at:
  3231 ;;		line 48 in file "../Bibliotecas/LCD4b.c"
  3232 ;; Parameters:    Size  Location     Type
  3233 ;;  cmd             1    wreg     unsigned char 
  3234 ;; Auto vars:     Size  Location     Type
  3235 ;;  cmd             1    3[COMRAM] unsigned char 
  3236 ;; Return value:  Size  Location     Type
  3237 ;;                  1    wreg      void 
  3238 ;; Registers used:
  3239 ;;		wreg, status,2, status,0, cstack
  3240 ;; Tracked objects:
  3241 ;;		On entry : 0/0
  3242 ;;		On exit  : 0/0
  3243 ;;		Unchanged: 0/0
  3244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3245 ;;      Params:         0       0       0       0       0       0       0
  3246 ;;      Locals:         1       0       0       0       0       0       0
  3247 ;;      Temps:          1       0       0       0       0       0       0
  3248 ;;      Totals:         2       0       0       0       0       0       0
  3249 ;;Total ram usage:        2 bytes
  3250 ;; Hardware stack levels used:    1
  3251 ;; Hardware stack levels required when called:    1
  3252 ;; This function calls:
  3253 ;;		_set_bit
  3254 ;; This function is called by:
  3255 ;;		_lcd_ini
  3256 ;;		_lcd_envia_byte
  3257 ;; This function uses a non-reentrant model
  3258 ;;
  3259                           
  3260                           	psect	text20
  3261  000ED8                     __ptext20:
  3262                           	opt callstack 0
  3263  000ED8                     _lcd_cmd:
  3264                           	opt callstack 28
  3265                           
  3266                           ;incstack = 0
  3267                           ;lcd_cmd@cmd stored from wreg
  3268  000ED8  6E04               	movwf	lcd_cmd@cmd,c
  3269                           
  3270                           ;../Bibliotecas/LCD4b.c: 48: void lcd_cmd(char cmd);../Bibliotecas/LCD4b.c: 49: {;../Bib
      +                          liotecas/LCD4b.c: 52:     PORTDbits.RD4 = set_bit(cmd,0b00010000);
  3271  000EDA  0E10               	movlw	16
  3272  000EDC  6E01               	movwf	set_bit@comp,c
  3273  000EDE  5004               	movf	lcd_cmd@cmd,w,c
  3274  000EE0  EC41  F00A         	call	_set_bit
  3275  000EE4  6E03               	movwf	??_lcd_cmd& (0+255),c
  3276  000EE6  3A03               	swapf	??_lcd_cmd,f,c
  3277  000EE8  5083               	movf	3971,w,c	;volatile
  3278  000EEA  1803               	xorwf	??_lcd_cmd,w,c
  3279  000EEC  0BEF               	andlw	-17
  3280  000EEE  1803               	xorwf	??_lcd_cmd,w,c
  3281  000EF0  6E83               	movwf	3971,c	;volatile
  3282                           
  3283                           ;../Bibliotecas/LCD4b.c: 53:     PORTDbits.RD5 = set_bit(cmd,0b00100000);
  3284  000EF2  0E20               	movlw	32
  3285  000EF4  6E01               	movwf	set_bit@comp,c
  3286  000EF6  5004               	movf	lcd_cmd@cmd,w,c
  3287  000EF8  EC41  F00A         	call	_set_bit
  3288  000EFC  6E03               	movwf	??_lcd_cmd& (0+255),c
  3289  000EFE  3A03               	swapf	??_lcd_cmd,f,c
  3290  000F00  4603               	rlncf	??_lcd_cmd,f,c
  3291  000F02  5083               	movf	3971,w,c	;volatile
  3292  000F04  1803               	xorwf	??_lcd_cmd,w,c
  3293  000F06  0BDF               	andlw	-33
  3294  000F08  1803               	xorwf	??_lcd_cmd,w,c
  3295  000F0A  6E83               	movwf	3971,c	;volatile
  3296                           
  3297                           ;../Bibliotecas/LCD4b.c: 54:     PORTDbits.RD6 = set_bit(cmd,0b01000000);
  3298  000F0C  0E40               	movlw	64
  3299  000F0E  6E01               	movwf	set_bit@comp,c
  3300  000F10  5004               	movf	lcd_cmd@cmd,w,c
  3301  000F12  EC41  F00A         	call	_set_bit
  3302  000F16  6E03               	movwf	??_lcd_cmd& (0+255),c
  3303  000F18  3A03               	swapf	??_lcd_cmd,f,c
  3304  000F1A  4603               	rlncf	??_lcd_cmd,f,c
  3305  000F1C  4603               	rlncf	??_lcd_cmd,f,c
  3306  000F1E  5083               	movf	3971,w,c	;volatile
  3307  000F20  1803               	xorwf	??_lcd_cmd,w,c
  3308  000F22  0BBF               	andlw	-65
  3309  000F24  1803               	xorwf	??_lcd_cmd,w,c
  3310  000F26  6E83               	movwf	3971,c	;volatile
  3311                           
  3312                           ;../Bibliotecas/LCD4b.c: 55:     PORTDbits.RD7 = set_bit(cmd,0b10000000);
  3313  000F28  0E80               	movlw	128
  3314  000F2A  6E01               	movwf	set_bit@comp,c
  3315  000F2C  5004               	movf	lcd_cmd@cmd,w,c
  3316  000F2E  EC41  F00A         	call	_set_bit
  3317  000F32  6E03               	movwf	??_lcd_cmd& (0+255),c
  3318  000F34  3203               	rrcf	??_lcd_cmd,f,c
  3319  000F36  3203               	rrcf	??_lcd_cmd,f,c
  3320  000F38  5083               	movf	3971,w,c	;volatile
  3321  000F3A  1803               	xorwf	??_lcd_cmd,w,c
  3322  000F3C  0B7F               	andlw	-129
  3323  000F3E  1803               	xorwf	??_lcd_cmd,w,c
  3324  000F40  6E83               	movwf	3971,c	;volatile
  3325                           
  3326                           ;../Bibliotecas/LCD4b.c: 57:     PORTEbits.RE1 = 1;
  3327  000F42  8284               	bsf	3972,1,c	;volatile
  3328                           
  3329                           ;../Bibliotecas/LCD4b.c: 58:     PORTEbits.RE1 = 0;
  3330  000F44  9284               	bcf	3972,1,c	;volatile
  3331                           
  3332                           ;../Bibliotecas/LCD4b.c: 60:     _delay((unsigned long)((100)*(8000000/4000000.0)));
  3333  000F46  0E42               	movlw	66
  3334  000F48                     u1527:
  3335  000F48  2EE8               	decfsz	wreg,f,c
  3336  000F4A  D7FE               	bra	u1527
  3337  000F4C  D000               	nop2	
  3338                           
  3339                           ;../Bibliotecas/LCD4b.c: 64:     PORTDbits.RD4 = set_bit(cmd,0b00000001);
  3340  000F4E  0E01               	movlw	1
  3341  000F50  6E01               	movwf	set_bit@comp,c
  3342  000F52  5004               	movf	lcd_cmd@cmd,w,c
  3343  000F54  EC41  F00A         	call	_set_bit
  3344  000F58  6E03               	movwf	??_lcd_cmd& (0+255),c
  3345  000F5A  3A03               	swapf	??_lcd_cmd,f,c
  3346  000F5C  5083               	movf	3971,w,c	;volatile
  3347  000F5E  1803               	xorwf	??_lcd_cmd,w,c
  3348  000F60  0BEF               	andlw	-17
  3349  000F62  1803               	xorwf	??_lcd_cmd,w,c
  3350  000F64  6E83               	movwf	3971,c	;volatile
  3351                           
  3352                           ;../Bibliotecas/LCD4b.c: 65:     PORTDbits.RD5 = set_bit(cmd,0b00000010);
  3353  000F66  0E02               	movlw	2
  3354  000F68  6E01               	movwf	set_bit@comp,c
  3355  000F6A  5004               	movf	lcd_cmd@cmd,w,c
  3356  000F6C  EC41  F00A         	call	_set_bit
  3357  000F70  6E03               	movwf	??_lcd_cmd& (0+255),c
  3358  000F72  3A03               	swapf	??_lcd_cmd,f,c
  3359  000F74  4603               	rlncf	??_lcd_cmd,f,c
  3360  000F76  5083               	movf	3971,w,c	;volatile
  3361  000F78  1803               	xorwf	??_lcd_cmd,w,c
  3362  000F7A  0BDF               	andlw	-33
  3363  000F7C  1803               	xorwf	??_lcd_cmd,w,c
  3364  000F7E  6E83               	movwf	3971,c	;volatile
  3365                           
  3366                           ;../Bibliotecas/LCD4b.c: 66:     PORTDbits.RD6 = set_bit(cmd,0b00000100);
  3367  000F80  0E04               	movlw	4
  3368  000F82  6E01               	movwf	set_bit@comp,c
  3369  000F84  5004               	movf	lcd_cmd@cmd,w,c
  3370  000F86  EC41  F00A         	call	_set_bit
  3371  000F8A  6E03               	movwf	??_lcd_cmd& (0+255),c
  3372  000F8C  3A03               	swapf	??_lcd_cmd,f,c
  3373  000F8E  4603               	rlncf	??_lcd_cmd,f,c
  3374  000F90  4603               	rlncf	??_lcd_cmd,f,c
  3375  000F92  5083               	movf	3971,w,c	;volatile
  3376  000F94  1803               	xorwf	??_lcd_cmd,w,c
  3377  000F96  0BBF               	andlw	-65
  3378  000F98  1803               	xorwf	??_lcd_cmd,w,c
  3379  000F9A  6E83               	movwf	3971,c	;volatile
  3380                           
  3381                           ;../Bibliotecas/LCD4b.c: 67:     PORTDbits.RD7 = set_bit(cmd,0b00001000);
  3382  000F9C  0E08               	movlw	8
  3383  000F9E  6E01               	movwf	set_bit@comp,c
  3384  000FA0  5004               	movf	lcd_cmd@cmd,w,c
  3385  000FA2  EC41  F00A         	call	_set_bit
  3386  000FA6  6E03               	movwf	??_lcd_cmd& (0+255),c
  3387  000FA8  3203               	rrcf	??_lcd_cmd,f,c
  3388  000FAA  3203               	rrcf	??_lcd_cmd,f,c
  3389  000FAC  5083               	movf	3971,w,c	;volatile
  3390  000FAE  1803               	xorwf	??_lcd_cmd,w,c
  3391  000FB0  0B7F               	andlw	-129
  3392  000FB2  1803               	xorwf	??_lcd_cmd,w,c
  3393  000FB4  6E83               	movwf	3971,c	;volatile
  3394                           
  3395                           ;../Bibliotecas/LCD4b.c: 69:     PORTEbits.RE1 = 1;
  3396  000FB6  8284               	bsf	3972,1,c	;volatile
  3397                           
  3398                           ;../Bibliotecas/LCD4b.c: 70:     PORTEbits.RE1 = 0;
  3399  000FB8  9284               	bcf	3972,1,c	;volatile
  3400  000FBA  0012               	return		;funcret
  3401  000FBC                     __end_of_lcd_cmd:
  3402                           	opt callstack 0
  3403                           
  3404 ;; *************** function _set_bit *****************
  3405 ;; Defined at:
  3406 ;;		line 38 in file "../Bibliotecas/LCD4b.c"
  3407 ;; Parameters:    Size  Location     Type
  3408 ;;  cmd             1    wreg     unsigned char 
  3409 ;;  comp            1    0[COMRAM] unsigned char 
  3410 ;; Auto vars:     Size  Location     Type
  3411 ;;  cmd             1    1[COMRAM] unsigned char 
  3412 ;; Return value:  Size  Location     Type
  3413 ;;                  1    wreg      unsigned char 
  3414 ;; Registers used:
  3415 ;;		wreg, status,2, status,0
  3416 ;; Tracked objects:
  3417 ;;		On entry : 0/0
  3418 ;;		On exit  : 0/0
  3419 ;;		Unchanged: 0/0
  3420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3421 ;;      Params:         1       0       0       0       0       0       0
  3422 ;;      Locals:         1       0       0       0       0       0       0
  3423 ;;      Temps:          0       0       0       0       0       0       0
  3424 ;;      Totals:         2       0       0       0       0       0       0
  3425 ;;Total ram usage:        2 bytes
  3426 ;; Hardware stack levels used:    1
  3427 ;; This function calls:
  3428 ;;		Nothing
  3429 ;; This function is called by:
  3430 ;;		_lcd_cmd
  3431 ;; This function uses a non-reentrant model
  3432 ;;
  3433                           
  3434                           	psect	text21
  3435  001482                     __ptext21:
  3436                           	opt callstack 0
  3437  001482                     _set_bit:
  3438                           	opt callstack 28
  3439                           
  3440                           ;incstack = 0
  3441                           ;set_bit@cmd stored from wreg
  3442  001482  6E02               	movwf	set_bit@cmd,c
  3443                           
  3444                           ;../Bibliotecas/LCD4b.c: 38: char set_bit(char cmd, char comp);../Bibliotecas/LCD4b.c: 3
      +                          9: {;../Bibliotecas/LCD4b.c: 41:     if ((cmd & comp) >= 1)
  3445  001484  5002               	movf	set_bit@cmd,w,c
  3446  001486  1401               	andwf	set_bit@comp,w,c
  3447  001488  0900               	iorlw	0
  3448  00148A  B4D8               	btfsc	status,2,c
  3449  00148C  D002               	goto	l1594
  3450                           
  3451                           ;../Bibliotecas/LCD4b.c: 42:         return 1;
  3452  00148E  0E01               	movlw	1
  3453  001490  0012               	return	
  3454  001492                     l1594:
  3455                           
  3456                           ;../Bibliotecas/LCD4b.c: 44:         return 0;
  3457  001492  0E00               	movlw	0
  3458  001494  0012               	return		;funcret
  3459  001496                     __end_of_set_bit:
  3460                           	opt callstack 0
  3461                           
  3462                           	psect	rparam
  3463  0000                     tosu	equ	0xFFF
  3464                           tosh	equ	0xFFE
  3465                           tosl	equ	0xFFD
  3466                           stkptr	equ	0xFFC
  3467                           pclatu	equ	0xFFB
  3468                           pclath	equ	0xFFA
  3469                           pcl	equ	0xFF9
  3470                           tblptru	equ	0xFF8
  3471                           tblptrh	equ	0xFF7
  3472                           tblptrl	equ	0xFF6
  3473                           tablat	equ	0xFF5
  3474                           prodh	equ	0xFF4
  3475                           prodl	equ	0xFF3
  3476                           indf0	equ	0xFEF
  3477                           postinc0	equ	0xFEE
  3478                           postdec0	equ	0xFED
  3479                           preinc0	equ	0xFEC
  3480                           plusw0	equ	0xFEB
  3481                           fsr0h	equ	0xFEA
  3482                           fsr0l	equ	0xFE9
  3483                           wreg	equ	0xFE8
  3484                           indf1	equ	0xFE7
  3485                           postinc1	equ	0xFE6
  3486                           postdec1	equ	0xFE5
  3487                           preinc1	equ	0xFE4
  3488                           plusw1	equ	0xFE3
  3489                           fsr1h	equ	0xFE2
  3490                           fsr1l	equ	0xFE1
  3491                           bsr	equ	0xFE0
  3492                           indf2	equ	0xFDF
  3493                           postinc2	equ	0xFDE
  3494                           postdec2	equ	0xFDD
  3495                           preinc2	equ	0xFDC
  3496                           plusw2	equ	0xFDB
  3497                           fsr2h	equ	0xFDA
  3498                           fsr2l	equ	0xFD9
  3499                           status	equ	0xFD8


Data Sizes:
    Strings     19
    Constant    0
    Data        0
    BSS         58
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    111     121
    BANK0           128      0      48
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_2(CODE[5]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    S838_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_2(CODE[5]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_2(CODE[5]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 5
		 -> STR_2(CODE[5]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    lcd_escreve_bf@str	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), STR_1(CODE[14]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _atoi->_isspace
    _lcd_ini->_lcd_cmd
    _lcd_escreve_bf->_lcd_envia_byte
    _lcd_envia_byte->_lcd_cmd
    _lcd_cmd->_set_bit

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   10651
                                            109 COMRAM     2     2      0
                     _lcd_escreve_bf
                            _lcd_ini
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             16    10      6    8292
                                             93 COMRAM    16    10      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    7939
                                             85 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           46    40      6    7566
                                             63 COMRAM    22    16      6
                               _atoi
                               _dtoa
                              _fputc
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                36    26     10    4358
                                             27 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    2709
                                             16 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     166
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1235
                                              9 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     834
                                              0 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                             18 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     448
                                              0 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     452
                                              0 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (4) _atoi                                                15    13      2    1244
                                              7 COMRAM    15    13      2
                             ___wmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (5) _isspace                                              7     5      2     207
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              6     4      2     237
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     403
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _lcd_ini                                              2     2      0     874
                                              4 COMRAM     2     2      0
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (1) _lcd_escreve_bf                                       5     2      3    1485
                                              6 COMRAM     5     2      3
                     _lcd_envia_byte
 ---------------------------------------------------------------------------------
 (2) _lcd_envia_byte                                       2     1      1    1024
                                              4 COMRAM     2     1      1
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (2) _lcd_cmd                                              2     2      0     828
                                              2 COMRAM     2     2      0
                            _set_bit
 ---------------------------------------------------------------------------------
 (3) _set_bit                                              2     1      1     652
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _lcd_escreve_bf
     _lcd_envia_byte
       _lcd_cmd
         _set_bit
   _lcd_ini
     _lcd_cmd
       _set_bit
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _atoi
           ___wmul
           _isdigit
           _isspace
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
                 _putch
             _strlen
         _fputc
           _putch
         _isdigit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      30       5       37.5%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     6F      79       1       95.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A9      15        0.0%
DATA                 0      0      A9       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Thu Apr 04 08:30:27 2019

                     l93 108A      ___wmul@multiplicand 0003              __CFG_BORV$3 000000  
           __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000  
           __CFG_CP3$OFF 000000              __CFG_OSC$HS 000000                      l104 095C  
                    l106 0964                      l838 13B8                      l869 0DAA  
           __CFG_CPB$OFF 000000             __CFG_CPD$OFF 000000                      u730 0FCC  
                    u820 139E                      u830 13EA                      u750 1014  
                    u840 13EC                      u950 0E36                      u871 0B86  
                    u890 0BBE                      u990 134C                      _abs 1390  
                    _pad 105C                      wreg 000FE8             __CFG_LVP$OFF 000000  
           __CFG_WDT$OFF 000000                     ?_abs 0013                     l1502 0B58  
                   l1432 0FD4                     l1514 0BA6                     l1530 0C2C  
                   l1442 1362                     l1450 13FC                     l1516 0BBA  
                   l1508 0B80                     l1452 1400                     l1604 0940  
                   l1534 0C52                     l1526 0C16                     l1550 0E04  
                   l1446 1378                     l1462 1074                     l1622 098E  
                   l1472 10AC                     l1632 0A86                     l1800 089E  
                   l1570 0EB6                     l1562 0E7A                     l1554 0E1E  
                   l1546 0DE0                     l1466 1082                     l1618 097E  
                   l1556 0E32                     l1476 10D8                     l1468 1094  
                   l1652 0AEA                     l1740 0670                     l1732 065A  
                   l1582 1350                     l1662 0C86                     l1566 0E90  
                   l1734 065C                     l1806 08B6                     l1830 128C  
                   l1680 0CE8                     l1672 0CD0                     l1664 0C8A  
                   l1656 0B02                     l1752 067C                     l1744 0674  
                   l1736 066C                     l1832 12B0                     l1594 1492  
                   l1682 0CEE                     l1770 0734                     l1852 1116  
                   l1684 0D16                     l1772 0752                     l1756 0686  
                   l1748 0678                     l1908 119C                     l1678 0CE0  
                   l1790 0858                     l1774 0760                     l1758 06C8  
                   l1918 11E6                     l1688 0D4A                     l1882 121A  
                   l1884 1226                     l1796 0894                     l1878 120C  
                   ?_pad 0011                     l1888 1252                     STR_1 0601  
                   STR_2 060F                     u1010 0912                     u1100 0AB6  
                   u1020 0914                     u1101 0AB4                     u1110 0AC4  
                   u1200 0D7C                     u1120 0AC8                     u1050 0952  
                   u1140 0AD4                     u1300 07A6                     u1070 0978  
                   u1400 1272                     u1080 0A94                     u1320 07DA  
                   u1170 0CCC                     u1190 0D7A                     u1407 1268  
                   u1280 0798                     u1345 146E                     u1346 1470  
                   u1290 079A                     u1507 117A                     u1517 1472  
                   u1437 11F0                     u1390 1246                     u1527 0F48  
                   u1447 1108                     u1457 1122                     u1467 113A  
                   u1397 123C                     u1477 1148                     u1487 115A  
                   u1497 116C             __CFG_PWRT$ON 000000                     abs@a 0013  
                   _dbuf 0080                     _atoi 0C74                     _main 1182  
                   _dtoa 08EA                     _prec 0074                     _nout 0070  
                   pad@i 0018                     pad@p 0015                     fsr1h 000FE2  
                   fsr2h 000FDA                     indf1 000FE7                     indf2 000FDF  
                   fsr1l 000FE1                     pad@w 001A                     fsr2l 000FD9  
                   prodh 000FF4                     prodl 000FF3                     start 0000  
          __CFG_IESO$OFF 000000            __CFG_MCLRE$ON 000000             ___param_bank 000000  
                  ??_abs 0015                    ??_pad 0017          __end_of___aodiv 0C74  
                  ?_atoi 0008                    ?_main 0001                    ?_dtoa 001C  
        __end_of___aomod 0ED8             vfpfcnvrt@fmt 0042                    _PORTD 000F83  
                  _TRISD 000F95            __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000  
          __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000  
         __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000  
         __CFG_EBTR3$OFF 000000          __end_of_lcd_cmd 0FBC          __end_of_lcd_ini 1182  
          __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000  
         __CFG_EBTRB$OFF 000000                    _flags 0076                    _conta 0078  
                  _fputc 0FBC                    _fputs 1358          __end_of_isdigit 13F2  
                  atoi@n 0015                    pad@fp 0011                    atoi@s 0008  
                  _width 0072                    _putch 1496                    dtoa@d 001E  
                  dtoa@i 003E                    dtoa@n 0036                    dtoa@p 0030  
                  dtoa@s 0034                    dtoa@w 0032          __end_of_isspace 1358  
         __CFG_BOREN$OFF 000000          __end_of_set_bit 1496                    tablat 000FF5  
                  status 000FD8          __end_of_sprintf 131A          __initialization 1442  
           __end_of_atoi 0DB4             __end_of_main 11FE             __end_of_dtoa 0B2C  
                 ??_atoi 000A                   ??_main 006E                   ??_dtoa 0026  
          __activetblptr 000002                   _ADCON1 000FC1                   ?_fputc 0001  
                 ?_fputs 000A                   ?_putch 0001            vfpfcnvrt@done 0052  
         __CFG_XINST$OFF 000000             vfprintf@cfmt 005C                ??___aodiv 0011  
              ??___aomod 0011                   ___wmul 141C           __CFG_STVREN$ON 000000  
       ??_lcd_escreve_bf 000A                   clear_0 1448                   clear_1 1454  
       ??_lcd_envia_byte 0006                   pad@buf 0013                ??_lcd_cmd 0003  
                 dtoa@fp 001C                ??_lcd_ini 0005                   _strlen 13F2  
                 fputc@c 0001                   fputs@c 000E                   fputs@i 000F  
                 fputs@s 000A                ??_isdigit 0003             __mediumconst 0000  
              ??_isspace 0003                ??_set_bit 0002                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8                   putch@c 0001  
       __end_of_vfprintf 12CC                ??_sprintf 0064               __accesstop 0080  
__end_of__initialization 145A          __CFG_PBADEN$OFF 000000            ___rparam_used 000001  
         __pcstackCOMRAM 0001            __end_of_fputc 105C            __end_of_fputs 1390  
          __end_of_putch 1498                  ??_fputc 0005                  ??_fputs 000E  
                ??_putch 0001               __pbssBANK0 0080                  ?___wmul 0001  
                ?_strlen 0001       __size_of_vfpfcnvrt 02D4                  __Hparam 0000  
                __Lparam 0000                  ___aodiv 0B2C                  ___aomod 0DB4  
        __size_of___wmul 0026                ?_vfprintf 0056              set_bit@comp 0001  
           __psmallconst 0600                  __pcinit 1442                  __ramtop 0600  
                __ptext0 1182                  __ptext1 12CC                  __ptext2 127A  
                __ptext3 0616                  __ptext4 08EA                  __ptext5 105C  
                __ptext6 13F2                  __ptext7 1358                  __ptext8 0FBC  
                __ptext9 1496                  _lcd_cmd 0ED8                  _lcd_ini 10F2  
        __size_of_strlen 002A             __size_of_abs 0032             __size_of_pad 0096  
                _isdigit 13C2                  _isspace 131A                  _set_bit 1482  
                atoi@neg 000E                  _sprintf 12CC     end_of_initialization 145A  
     lcd_envia_byte@dado 0005                  fputc@fp 0003            __Lmediumconst 0000  
                fputs@fp 000C        __end_of_vfpfcnvrt 08EA                  postdec2 000FDD  
                postinc0 000FEE                  postinc1 000FE6                  postinc2 000FDE  
             ??_vfprintf 005C                  strlen@a 0003                  strlen@s 0001  
              _PORTDbits 000F83                _PORTEbits 000F84                _TRISEbits 000F96  
             lcd_cmd@cmd 0004              vfpfcnvrt@ap 0044              vfpfcnvrt@fp 0040  
            vfpfcnvrt@ll 004A           __end_of___wmul 1442           __end_of_strlen 141C  
    start_initialization 1442              __end_of_abs 13C2              __end_of_pad 10F2  
            vfprintf@fmt 0058                 ??___wmul 0005         __CFG_LPT1OSC$OFF 000000  
               ??_strlen 0003              __pbssCOMRAM 0070         ___aodiv@dividend 0001  
__size_of_lcd_escreve_bf 007C  __size_of_lcd_envia_byte 001E        __CFG_CCP2MX$PORTC 000000  
               ?___aodiv 0001                 ?___aomod 0001        lcd_escreve_bf@end 000A  
      lcd_escreve_bf@col 0007        lcd_escreve_bf@lin 000B         ___aodiv@quotient 0013  
      lcd_escreve_bf@str 0008                _bufferLCD 00A0                 ?_lcd_cmd 0001  
      __size_of_vfprintf 0052                 ?_lcd_ini 0001              __smallconst 0600  
               ?_isdigit 0001                 ?_isspace 0001                 ?_set_bit 0001  
             set_bit@cmd 0002                 ?_sprintf 005E           __size_of_fputc 00A0  
         __size_of_fputs 0038           __size_of_putch 0002           ___wmul@product 0005  
       __CFG_WDTPS$32768 000000                _vfpfcnvrt 0616        ___wmul@multiplier 0001  
               __Hrparam 0000               vfprintf@ap 005A                 __Lrparam 0000  
             vfprintf@fp 0056         __size_of___aodiv 0148         __size_of___aomod 0124  
             ?_vfpfcnvrt 0040          ___aodiv@divisor 0009          ___aodiv@counter 0011  
       __size_of_lcd_cmd 00E4         __size_of_lcd_ini 0090               sprintf@fmt 0060  
               _atoi$816 0010                 _atoi$817 0014                 _atoi$818 0012  
       __size_of_isdigit 0030                 _dtoa$344 002E           _lcd_escreve_bf 11FE  
       __size_of_isspace 003E                 __ptext10 1390                 __ptext11 0DB4  
               __ptext20 0ED8                 __ptext12 0B2C                 __ptext21 1482  
               __ptext13 0C74                 __ptext14 131A                 __ptext15 13C2  
               __ptext16 141C                 __ptext17 10F2                 __ptext18 11FE  
               __ptext19 1464         __size_of_set_bit 0014           _lcd_envia_byte 1464  
       __size_of_sprintf 004E            __size_of_atoi 0140            __size_of_main 007C  
          __size_of_dtoa 0242                 lcd_ini@i 0006                 _vfprintf 127A  
            _isspace$834 0007         ___aomod@dividend 0001   __end_of_lcd_escreve_bf 127A  
 __end_of_lcd_envia_byte 1482      lcd_envia_byte@nivel 0006                 isdigit@c 0001  
              sprintf@ap 0066                 isspace@c 0001          ___aomod@divisor 0009  
            ??_vfpfcnvrt 0046            _vfpfcnvrt$359 0054          ___aomod@counter 0011  
               sprintf@f 0068                 sprintf@s 005E          ?_lcd_escreve_bf 0007  
        ?_lcd_envia_byte 0005             ___aodiv@sign 0012             ___aomod@sign 0012  
