

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Thu Apr 04 14:33:43 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    34                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    35                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    36                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    37  0000                     
    38                           ; Version 2.05
    39                           ; Generated 20/12/2018 GMT
    40                           ; 
    41                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    42                           ; All rights reserved.
    43                           ; 
    44                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    45                           ; 
    46                           ; Redistribution and use in source and binary forms, with or without modification, are
    47                           ; permitted provided that the following conditions are met:
    48                           ; 
    49                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    50                           ;        conditions and the following disclaimer.
    51                           ; 
    52                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    53                           ;        of conditions and the following disclaimer in the documentation and/or other
    54                           ;        materials provided with the distribution.
    55                           ; 
    56                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    57                           ;        software without specific prior written permission.
    58                           ; 
    59                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    60                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    61                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    62                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    63                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    64                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    65                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    66                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    67                           ; 
    68                           ; 
    69                           ; Code-generator required, PIC18F4520 Definitions
    70                           ; 
    71                           ; SFR Addresses
    72  0000                     _TMR0	set	4054
    73  0000                     _PORTDbits	set	3971
    74  0000                     _PORTEbits	set	3972
    75  0000                     _PORTD	set	3971
    76  0000                     _TRISEbits	set	3990
    77  0000                     _TRISD	set	3989
    78  0000                     _T0CON	set	4053
    79  0000                     _INTCON	set	4082
    80  0000                     _ADCON1	set	4033
    81  0000                     _TRISBbits	set	3987
    82  0000                     _PORTBbits	set	3969
    83  0000                     _TMR0IF	set	32658
    84                           
    85                           	psect	smallconst
    86  000600                     __psmallconst:
    87                           	opt callstack 0
    88  000600  00                 	db	0
    89  000601                     STR_2:
    90  000601  43                 	db	67	;'C'
    91  000602  4F                 	db	79	;'O'
    92  000603  4E                 	db	78	;'N'
    93  000604  54                 	db	84	;'T'
    94  000605  41                 	db	65	;'A'
    95  000606  47                 	db	71	;'G'
    96  000607  45                 	db	69	;'E'
    97  000608  4D                 	db	77	;'M'
    98  000609  3A                 	db	58	;':'
    99  00060A  20                 	db	32
   100  00060B  30                 	db	48	;'0'
   101  00060C  30                 	db	48	;'0'
   102  00060D  00                 	db	0
   103  00060E                     STR_1:
   104  00060E  54                 	db	84	;'T'
   105  00060F  49                 	db	73	;'I'
   106  000610  4D                 	db	77	;'M'
   107  000611  45                 	db	69	;'E'
   108  000612  52                 	db	82	;'R'
   109  000613  30                 	db	48	;'0'
   110  000614  00                 	db	0
   111  000615                     STR_3:
   112  000615  25                 	db	37
   113  000616  30                 	db	48	;'0'
   114  000617  32                 	db	50	;'2'
   115  000618  64                 	db	100	;'d'
   116  000619  00                 	db	0
   117                           
   118                           ; #config settings
   119  00061A  00                 	db	0	; dummy byte at the end
   120  0000                     
   121                           	psect	cinit
   122  00144E                     __pcinit:
   123                           	opt callstack 0
   124  00144E                     start_initialization:
   125                           	opt callstack 0
   126  00144E                     __initialization:
   127                           	opt callstack 0
   128                           
   129                           ; Clear objects allocated to BANK0 (52 bytes)
   130  00144E  EE00  F080         	lfsr	0,__pbssBANK0
   131  001452  0E34               	movlw	52
   132  001454                     clear_0:
   133  001454  6AEE               	clrf	postinc0,c
   134  001456  06E8               	decf	wreg,f,c
   135  001458  E1FD               	bnz	clear_0
   136                           
   137                           ; Clear objects allocated to COMRAM (10 bytes)
   138  00145A  EE00  F06A         	lfsr	0,__pbssCOMRAM
   139  00145E  0E0A               	movlw	10
   140  001460                     clear_1:
   141  001460  6AEE               	clrf	postinc0,c
   142  001462  06E8               	decf	wreg,f,c
   143  001464  E1FD               	bnz	clear_1
   144  001466                     end_of_initialization:
   145                           	opt callstack 0
   146  001466                     __end_of__initialization:
   147                           	opt callstack 0
   148  001466  9074               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   149  001468  9274               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   150  00146A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   151  00146C  6EF8               	movwf	tblptru,c
   152  00146E  0100               	movlb	0
   153  001470  EFE1  F007         	goto	_main	;jump to C main() function
   154                           
   155                           	psect	bssCOMRAM
   156  00006A                     __pbssCOMRAM:
   157                           	opt callstack 0
   158  00006A                     _width:
   159                           	opt callstack 0
   160  00006A                     	ds	2
   161  00006C                     _prec:
   162                           	opt callstack 0
   163  00006C                     	ds	2
   164  00006E                     _flags:
   165                           	opt callstack 0
   166  00006E                     	ds	2
   167  000070                     _conta:
   168                           	opt callstack 0
   169  000070                     	ds	2
   170  000072                     _T0_500:
   171                           	opt callstack 0
   172  000072                     	ds	2
   173                           
   174                           	psect	bssBANK0
   175  000080                     __pbssBANK0:
   176                           	opt callstack 0
   177  000080                     _nout:
   178                           	opt callstack 0
   179  000080                     	ds	2
   180  000082                     _T0_1000:
   181                           	opt callstack 0
   182  000082                     	ds	2
   183  000084                     _dbuf:
   184                           	opt callstack 0
   185  000084                     	ds	32
   186  0000A4                     _bufferLCD:
   187                           	opt callstack 0
   188  0000A4                     	ds	16
   189                           
   190                           	psect	cstackBANK0
   191  0000B4                     __pcstackBANK0:
   192                           	opt callstack 0
   193  0000B4                     	ds	2
   194  0000B6                     sprintf@ap:
   195                           	opt callstack 0
   196                           
   197                           ; 2 bytes @ 0x2
   198  0000B6                     	ds	2
   199  0000B8                     sprintf@f:
   200                           	opt callstack 0
   201                           
   202                           ; 6 bytes @ 0x4
   203  0000B8                     	ds	6
   204                           
   205                           	psect	cstackCOMRAM
   206  000001                     __pcstackCOMRAM:
   207                           	opt callstack 0
   208  000001                     ??_int_TMR0:
   209  000001                     
   210                           ; 1 bytes @ 0x0
   211  000001                     	ds	4
   212  000005                     ?_strlen:
   213                           	opt callstack 0
   214  000005                     ?_isdigit:
   215                           	opt callstack 0
   216  000005                     ?_isspace:
   217                           	opt callstack 0
   218  000005                     ?___wmul:
   219                           	opt callstack 0
   220  000005                     ?___aodiv:
   221                           	opt callstack 0
   222  000005                     ?___aomod:
   223                           	opt callstack 0
   224  000005                     set_bit@comp:
   225                           	opt callstack 0
   226  000005                     ___wmul@multiplier:
   227                           	opt callstack 0
   228  000005                     isdigit@c:
   229                           	opt callstack 0
   230  000005                     isspace@c:
   231                           	opt callstack 0
   232  000005                     fputc@c:
   233                           	opt callstack 0
   234  000005                     strlen@s:
   235                           	opt callstack 0
   236  000005                     ___aodiv@dividend:
   237                           	opt callstack 0
   238  000005                     ___aomod@dividend:
   239                           	opt callstack 0
   240                           
   241                           ; 8 bytes @ 0x4
   242  000005                     	ds	1
   243  000006                     set_bit@cmd:
   244                           	opt callstack 0
   245                           
   246                           ; 1 bytes @ 0x5
   247  000006                     	ds	1
   248  000007                     ??_lcd_cmd:
   249  000007                     ??_isdigit:
   250  000007                     ??_isspace:
   251  000007                     ___wmul@multiplicand:
   252                           	opt callstack 0
   253  000007                     fputc@fp:
   254                           	opt callstack 0
   255  000007                     strlen@a:
   256                           	opt callstack 0
   257                           
   258                           ; 2 bytes @ 0x6
   259  000007                     	ds	1
   260  000008                     lcd_cmd@cmd:
   261                           	opt callstack 0
   262                           
   263                           ; 1 bytes @ 0x7
   264  000008                     	ds	1
   265  000009                     ??_lcd_ini:
   266  000009                     ??_fputc:
   267  000009                     lcd_envia_byte@dado:
   268                           	opt callstack 0
   269  000009                     ___wmul@product:
   270                           	opt callstack 0
   271                           
   272                           ; 2 bytes @ 0x8
   273  000009                     	ds	1
   274  00000A                     lcd_ini@i:
   275                           	opt callstack 0
   276  00000A                     lcd_envia_byte@nivel:
   277                           	opt callstack 0
   278                           
   279                           ; 1 bytes @ 0x9
   280  00000A                     	ds	1
   281  00000B                     lcd_escreve_bf@col:
   282                           	opt callstack 0
   283  00000B                     _isspace$973:
   284                           	opt callstack 0
   285                           
   286                           ; 1 bytes @ 0xA
   287  00000B                     	ds	1
   288  00000C                     ?_atoi:
   289                           	opt callstack 0
   290  00000C                     lcd_escreve_bf@str:
   291                           	opt callstack 0
   292  00000C                     atoi@s:
   293                           	opt callstack 0
   294                           
   295                           ; 2 bytes @ 0xB
   296  00000C                     	ds	1
   297  00000D                     ___aodiv@divisor:
   298                           	opt callstack 0
   299  00000D                     ___aomod@divisor:
   300                           	opt callstack 0
   301                           
   302                           ; 8 bytes @ 0xC
   303  00000D                     	ds	1
   304  00000E                     ??_atoi:
   305  00000E                     lcd_escreve_bf@end:
   306                           	opt callstack 0
   307  00000E                     fputs@s:
   308                           	opt callstack 0
   309                           
   310                           ; 2 bytes @ 0xD
   311  00000E                     	ds	1
   312  00000F                     lcd_escreve_bf@lin:
   313                           	opt callstack 0
   314                           
   315                           ; 1 bytes @ 0xE
   316  00000F                     	ds	1
   317  000010                     fputs@fp:
   318                           	opt callstack 0
   319                           
   320                           ; 2 bytes @ 0xF
   321  000010                     	ds	2
   322  000012                     fputs@c:
   323                           	opt callstack 0
   324  000012                     atoi@neg:
   325                           	opt callstack 0
   326                           
   327                           ; 2 bytes @ 0x11
   328  000012                     	ds	1
   329  000013                     fputs@i:
   330                           	opt callstack 0
   331                           
   332                           ; 2 bytes @ 0x12
   333  000013                     	ds	1
   334  000014                     _atoi$955:
   335                           	opt callstack 0
   336                           
   337                           ; 2 bytes @ 0x13
   338  000014                     	ds	1
   339  000015                     ?_pad:
   340                           	opt callstack 0
   341  000015                     ___aodiv@counter:
   342                           	opt callstack 0
   343  000015                     ___aomod@counter:
   344                           	opt callstack 0
   345  000015                     pad@fp:
   346                           	opt callstack 0
   347                           
   348                           ; 2 bytes @ 0x14
   349  000015                     	ds	1
   350  000016                     ___aodiv@sign:
   351                           	opt callstack 0
   352  000016                     ___aomod@sign:
   353                           	opt callstack 0
   354  000016                     _atoi$957:
   355                           	opt callstack 0
   356                           
   357                           ; 2 bytes @ 0x15
   358  000016                     	ds	1
   359  000017                     ?_abs:
   360                           	opt callstack 0
   361  000017                     pad@buf:
   362                           	opt callstack 0
   363  000017                     abs@a:
   364                           	opt callstack 0
   365  000017                     ___aodiv@quotient:
   366                           	opt callstack 0
   367                           
   368                           ; 8 bytes @ 0x16
   369  000017                     	ds	1
   370  000018                     _atoi$956:
   371                           	opt callstack 0
   372                           
   373                           ; 1 bytes @ 0x17
   374  000018                     	ds	1
   375  000019                     ??_abs:
   376  000019                     pad@p:
   377                           	opt callstack 0
   378  000019                     atoi@n:
   379                           	opt callstack 0
   380                           
   381                           ; 2 bytes @ 0x18
   382  000019                     	ds	2
   383  00001B                     ??_pad:
   384                           
   385                           ; 1 bytes @ 0x1A
   386  00001B                     	ds	1
   387  00001C                     pad@i:
   388                           	opt callstack 0
   389                           
   390                           ; 2 bytes @ 0x1B
   391  00001C                     	ds	2
   392  00001E                     pad@w:
   393                           	opt callstack 0
   394                           
   395                           ; 2 bytes @ 0x1D
   396  00001E                     	ds	2
   397  000020                     ?_dtoa:
   398                           	opt callstack 0
   399  000020                     dtoa@fp:
   400                           	opt callstack 0
   401                           
   402                           ; 2 bytes @ 0x1F
   403  000020                     	ds	2
   404  000022                     dtoa@d:
   405                           	opt callstack 0
   406                           
   407                           ; 8 bytes @ 0x21
   408  000022                     	ds	8
   409  00002A                     ??_dtoa:
   410                           
   411                           ; 1 bytes @ 0x29
   412  00002A                     	ds	8
   413  000032                     _dtoa$483:
   414                           	opt callstack 0
   415                           
   416                           ; 2 bytes @ 0x31
   417  000032                     	ds	2
   418  000034                     dtoa@p:
   419                           	opt callstack 0
   420                           
   421                           ; 2 bytes @ 0x33
   422  000034                     	ds	2
   423  000036                     dtoa@w:
   424                           	opt callstack 0
   425                           
   426                           ; 2 bytes @ 0x35
   427  000036                     	ds	2
   428  000038                     dtoa@s:
   429                           	opt callstack 0
   430                           
   431                           ; 2 bytes @ 0x37
   432  000038                     	ds	2
   433  00003A                     dtoa@n:
   434                           	opt callstack 0
   435                           
   436                           ; 8 bytes @ 0x39
   437  00003A                     	ds	8
   438  000042                     dtoa@i:
   439                           	opt callstack 0
   440                           
   441                           ; 2 bytes @ 0x41
   442  000042                     	ds	2
   443  000044                     ?_vfpfcnvrt:
   444                           	opt callstack 0
   445  000044                     vfpfcnvrt@fp:
   446                           	opt callstack 0
   447                           
   448                           ; 2 bytes @ 0x43
   449  000044                     	ds	2
   450  000046                     vfpfcnvrt@fmt:
   451                           	opt callstack 0
   452                           
   453                           ; 2 bytes @ 0x45
   454  000046                     	ds	2
   455  000048                     vfpfcnvrt@ap:
   456                           	opt callstack 0
   457                           
   458                           ; 2 bytes @ 0x47
   459  000048                     	ds	2
   460  00004A                     ??_vfpfcnvrt:
   461                           
   462                           ; 1 bytes @ 0x49
   463  00004A                     	ds	4
   464  00004E                     vfpfcnvrt@ll:
   465                           	opt callstack 0
   466                           
   467                           ; 8 bytes @ 0x4D
   468  00004E                     	ds	8
   469  000056                     vfpfcnvrt@done:
   470                           	opt callstack 0
   471                           
   472                           ; 2 bytes @ 0x55
   473  000056                     	ds	2
   474  000058                     _vfpfcnvrt$498:
   475                           	opt callstack 0
   476                           
   477                           ; 2 bytes @ 0x57
   478  000058                     	ds	2
   479  00005A                     ?_vfprintf:
   480                           	opt callstack 0
   481  00005A                     vfprintf@fp:
   482                           	opt callstack 0
   483                           
   484                           ; 2 bytes @ 0x59
   485  00005A                     	ds	2
   486  00005C                     vfprintf@fmt:
   487                           	opt callstack 0
   488                           
   489                           ; 2 bytes @ 0x5B
   490  00005C                     	ds	2
   491  00005E                     vfprintf@ap:
   492                           	opt callstack 0
   493                           
   494                           ; 2 bytes @ 0x5D
   495  00005E                     	ds	2
   496  000060                     vfprintf@cfmt:
   497                           	opt callstack 0
   498                           
   499                           ; 2 bytes @ 0x5F
   500  000060                     	ds	2
   501  000062                     ?_sprintf:
   502                           	opt callstack 0
   503  000062                     sprintf@s:
   504                           	opt callstack 0
   505                           
   506                           ; 2 bytes @ 0x61
   507  000062                     	ds	2
   508  000064                     sprintf@fmt:
   509                           	opt callstack 0
   510                           
   511                           ; 2 bytes @ 0x63
   512  000064                     	ds	4
   513  000068                     ??_main:
   514                           
   515                           ; 1 bytes @ 0x67
   516  000068                     	ds	2
   517                           
   518 ;;
   519 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   520 ;;
   521 ;; *************** function _main *****************
   522 ;; Defined at:
   523 ;;		line 34 in file "EX13.c"
   524 ;; Parameters:    Size  Location     Type
   525 ;;		None
   526 ;; Auto vars:     Size  Location     Type
   527 ;;		None
   528 ;; Return value:  Size  Location     Type
   529 ;;                  1    wreg      void 
   530 ;; Registers used:
   531 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   532 ;; Tracked objects:
   533 ;;		On entry : 0/0
   534 ;;		On exit  : 0/0
   535 ;;		Unchanged: 0/0
   536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   537 ;;      Params:         0       0       0       0       0       0       0
   538 ;;      Locals:         0       0       0       0       0       0       0
   539 ;;      Temps:          2       0       0       0       0       0       0
   540 ;;      Totals:         2       0       0       0       0       0       0
   541 ;;Total ram usage:        2 bytes
   542 ;; Hardware stack levels required when called:    9
   543 ;; This function calls:
   544 ;;		_lcd_escreve_bf
   545 ;;		_lcd_ini
   546 ;;		_sprintf
   547 ;; This function is called by:
   548 ;;		Startup code after reset
   549 ;; This function uses a non-reentrant model
   550 ;;
   551                           
   552                           	psect	text0
   553  000FC2                     __ptext0:
   554                           	opt callstack 0
   555  000FC2                     _main:
   556                           	opt callstack 22
   557                           
   558                           ;EX13.c: 36:     TRISBbits.TRISB0 = 0;
   559                           
   560                           ;incstack = 0
   561  000FC2  9093               	bcf	3987,0,c	;volatile
   562                           
   563                           ;EX13.c: 37:     PORTBbits.RB0 = 0;
   564  000FC4  9081               	bcf	3969,0,c	;volatile
   565                           
   566                           ;EX13.c: 38:     ADCON1 = 0x0F;
   567  000FC6  0E0F               	movlw	15
   568  000FC8  6EC1               	movwf	4033,c	;volatile
   569                           
   570                           ;EX13.c: 40:     INTCON = 0b10100000;
   571  000FCA  0EA0               	movlw	160
   572  000FCC  6EF2               	movwf	4082,c	;volatile
   573                           
   574                           ;EX13.c: 50:     T0CON = 0b11000111;
   575  000FCE  0EC7               	movlw	199
   576  000FD0  6ED5               	movwf	4053,c	;volatile
   577                           
   578                           ;EX13.c: 58:     TMR0 = 61;
   579  000FD2  0E00               	movlw	0
   580  000FD4  6ED7               	movwf	4055,c	;volatile
   581  000FD6  0E3D               	movlw	61
   582  000FD8  6ED6               	movwf	4054,c	;volatile
   583                           
   584                           ;EX13.c: 60:     lcd_ini();
   585  000FDA  ECCC  F008         	call	_lcd_ini	;wreg free
   586                           
   587                           ;EX13.c: 63:     lcd_escreve_bf(1, 6, "TIMER0");
   588  000FDE  0E06               	movlw	6
   589  000FE0  6E0B               	movwf	lcd_escreve_bf@col,c
   590  000FE2  0E0E               	movlw	low STR_1
   591  000FE4  6E0C               	movwf	lcd_escreve_bf@str,c
   592  000FE6  0E06               	movlw	high STR_1
   593  000FE8  6E0D               	movwf	lcd_escreve_bf@str+1,c
   594  000FEA  0E01               	movlw	1
   595  000FEC  EC14  F009         	call	_lcd_escreve_bf
   596                           
   597                           ;EX13.c: 66:     lcd_escreve_bf(2, 3, "CONTAGEM: 00");
   598  000FF0  0E03               	movlw	3
   599  000FF2  6E0B               	movwf	lcd_escreve_bf@col,c
   600  000FF4  0E01               	movlw	low STR_2
   601  000FF6  6E0C               	movwf	lcd_escreve_bf@str,c
   602  000FF8  0E06               	movlw	high STR_2
   603  000FFA  6E0D               	movwf	lcd_escreve_bf@str+1,c
   604  000FFC  0E02               	movlw	2
   605  000FFE  EC14  F009         	call	_lcd_escreve_bf
   606  001002                     l2423:
   607                           
   608                           ;EX13.c: 69:     {;EX13.c: 70:         if (conta>=100)
   609  001002  BE71               	btfsc	_conta+1,7,c
   610  001004  D00A               	goto	l2427
   611  001006  5071               	movf	_conta+1,w,c
   612  001008  E104               	bnz	u2150
   613  00100A  0E64               	movlw	100
   614  00100C  5C70               	subwf	_conta,w,c
   615  00100E  A0D8               	btfss	status,0,c
   616  001010  D004               	goto	l2427
   617  001012                     u2150:
   618                           
   619                           ;EX13.c: 71:             conta = 0;
   620  001012  0E00               	movlw	0
   621  001014  6E71               	movwf	_conta+1,c
   622  001016  0E00               	movlw	0
   623  001018  6E70               	movwf	_conta,c
   624  00101A                     l2427:
   625                           
   626                           ;EX13.c: 73:         _delay((unsigned long)((100)*(8000000/4000.0)));
   627  00101A  0E02               	movlw	2
   628  00101C  6E69               	movwf	(??_main+1)& (0+255),c
   629  00101E  0E04               	movlw	4
   630  001020  6E68               	movwf	??_main& (0+255),c
   631  001022  0EBA               	movlw	186
   632  001024                     u2167:
   633  001024  2EE8               	decfsz	wreg,f,c
   634  001026  D7FE               	bra	u2167
   635  001028  2E68               	decfsz	??_main& (0+255),f,c
   636  00102A  D7FC               	bra	u2167
   637  00102C  2E69               	decfsz	(??_main+1)& (0+255),f,c
   638  00102E  D7FA               	bra	u2167
   639  001030  D000               	nop2	
   640                           
   641                           ;EX13.c: 76:         sprintf(bufferLCD, "%02d", conta);
   642  001032  0EA4               	movlw	low _bufferLCD
   643  001034  6E62               	movwf	sprintf@s,c
   644  001036  0E00               	movlw	high _bufferLCD
   645  001038  6E63               	movwf	sprintf@s+1,c
   646  00103A  0E15               	movlw	low STR_3
   647  00103C  6E64               	movwf	sprintf@fmt,c
   648  00103E  0E06               	movlw	high STR_3
   649  001040  6E65               	movwf	sprintf@fmt+1,c
   650  001042  C070  F066         	movff	_conta,?_sprintf+4
   651  001046  C071  F067         	movff	_conta+1,?_sprintf+5
   652  00104A  EC7D  F009         	call	_sprintf	;wreg free
   653                           
   654                           ;EX13.c: 79:         lcd_escreve_bf(2, 13, bufferLCD);
   655  00104E  0E0D               	movlw	13
   656  001050  6E0B               	movwf	lcd_escreve_bf@col,c
   657  001052  0EA4               	movlw	low _bufferLCD
   658  001054  6E0C               	movwf	lcd_escreve_bf@str,c
   659  001056  0E00               	movlw	high _bufferLCD
   660  001058  6E0D               	movwf	lcd_escreve_bf@str+1,c
   661  00105A  0E02               	movlw	2
   662  00105C  EC14  F009         	call	_lcd_escreve_bf
   663  001060  D7D0               	goto	l2423
   664  001062                     __end_of_main:
   665                           	opt callstack 0
   666                           
   667 ;; *************** function _sprintf *****************
   668 ;; Defined at:
   669 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_sprintf.c"
   670 ;; Parameters:    Size  Location     Type
   671 ;;  s               2   97[COMRAM] PTR unsigned char 
   672 ;;		 -> bufferLCD(16), 
   673 ;;  fmt             2   99[COMRAM] PTR const unsigned char 
   674 ;;		 -> STR_3(5), 
   675 ;; Auto vars:     Size  Location     Type
   676 ;;  f               6    4[BANK0 ] struct _IO_FILE
   677 ;;  ap              2    2[BANK0 ] PTR void [1]
   678 ;;		 -> ?_sprintf(2), 
   679 ;;  ret             2    0        int 
   680 ;; Return value:  Size  Location     Type
   681 ;;                  2   97[COMRAM] int 
   682 ;; Registers used:
   683 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   684 ;; Tracked objects:
   685 ;;		On entry : 0/0
   686 ;;		On exit  : 0/0
   687 ;;		Unchanged: 0/0
   688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   689 ;;      Params:         6       0       0       0       0       0       0
   690 ;;      Locals:         0      10       0       0       0       0       0
   691 ;;      Temps:          0       0       0       0       0       0       0
   692 ;;      Totals:         6      10       0       0       0       0       0
   693 ;;Total ram usage:       16 bytes
   694 ;; Hardware stack levels used:    1
   695 ;; Hardware stack levels required when called:    8
   696 ;; This function calls:
   697 ;;		_vfprintf
   698 ;; This function is called by:
   699 ;;		_main
   700 ;; This function uses a non-reentrant model
   701 ;;
   702                           
   703                           	psect	text1
   704  0012FA                     __ptext1:
   705                           	opt callstack 0
   706  0012FA                     _sprintf:
   707                           	opt callstack 22
   708                           
   709                           ;incstack = 0
   710  0012FA  0E66               	movlw	low (?_sprintf+4)
   711  0012FC  0100               	movlb	0	; () banked
   712  0012FE  6FB6               	movwf	sprintf@ap& (0+255),b
   713  001300  0E00               	movlw	high (?_sprintf+4)
   714  001302  6FB7               	movwf	(sprintf@ap+1)& (0+255),b
   715  001304  C062  F0B8         	movff	sprintf@s,sprintf@f
   716  001308  C063  F0B9         	movff	sprintf@s+1,sprintf@f+1
   717                           
   718                           ; BSR set to: 0
   719  00130C  0E00               	movlw	0
   720  00130E  6FBB               	movwf	(sprintf@f+3)& (0+255),b
   721  001310  0E00               	movlw	0
   722  001312  6FBA               	movwf	(sprintf@f+2)& (0+255),b
   723                           
   724                           ; BSR set to: 0
   725  001314  0E00               	movlw	0
   726  001316  6FBD               	movwf	(sprintf@f+5)& (0+255),b
   727  001318  0E00               	movlw	0
   728  00131A  6FBC               	movwf	(sprintf@f+4)& (0+255),b
   729                           
   730                           ; BSR set to: 0
   731  00131C  0EB8               	movlw	low sprintf@f
   732  00131E  6E5A               	movwf	vfprintf@fp,c
   733  001320  0E00               	movlw	high sprintf@f
   734  001322  6E5B               	movwf	vfprintf@fp+1,c
   735  001324  C064  F05C         	movff	sprintf@fmt,vfprintf@fmt
   736  001328  C065  F05D         	movff	sprintf@fmt+1,vfprintf@fmt+1
   737  00132C  0EB6               	movlw	low sprintf@ap
   738  00132E  6E5E               	movwf	vfprintf@ap,c
   739  001330  0E00               	movlw	high sprintf@ap
   740  001332  6E5F               	movwf	vfprintf@ap+1,c
   741  001334  EC52  F009         	call	_vfprintf	;wreg free
   742  001338  0100               	movlb	0	; () banked
   743  00133A  51BA               	movf	(sprintf@f+2)& (0+255),w,b
   744  00133C  2462               	addwf	sprintf@s,w,c
   745  00133E  6ED9               	movwf	fsr2l,c
   746  001340  51BB               	movf	(sprintf@f+3)& (0+255),w,b
   747  001342  2063               	addwfc	sprintf@s+1,w,c
   748  001344  6EDA               	movwf	fsr2h,c
   749  001346  0E00               	movlw	0
   750  001348  6EDF               	movwf	indf2,c
   751                           
   752                           ; BSR set to: 0
   753  00134A  0012               	return		;funcret
   754  00134C                     __end_of_sprintf:
   755                           	opt callstack 0
   756                           
   757 ;; *************** function _vfprintf *****************
   758 ;; Defined at:
   759 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
   760 ;; Parameters:    Size  Location     Type
   761 ;;  fp              2   89[COMRAM] PTR struct _IO_FILE
   762 ;;		 -> sprintf@f(6), 
   763 ;;  fmt             2   91[COMRAM] PTR const unsigned char 
   764 ;;		 -> STR_3(5), 
   765 ;;  ap              2   93[COMRAM] PTR PTR void 
   766 ;;		 -> sprintf@ap(2), 
   767 ;; Auto vars:     Size  Location     Type
   768 ;;  cfmt            2   95[COMRAM] PTR unsigned char 
   769 ;;		 -> STR_3(5), 
   770 ;; Return value:  Size  Location     Type
   771 ;;                  2   89[COMRAM] int 
   772 ;; Registers used:
   773 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   774 ;; Tracked objects:
   775 ;;		On entry : 0/0
   776 ;;		On exit  : 0/0
   777 ;;		Unchanged: 0/0
   778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   779 ;;      Params:         6       0       0       0       0       0       0
   780 ;;      Locals:         2       0       0       0       0       0       0
   781 ;;      Temps:          0       0       0       0       0       0       0
   782 ;;      Totals:         8       0       0       0       0       0       0
   783 ;;Total ram usage:        8 bytes
   784 ;; Hardware stack levels used:    1
   785 ;; Hardware stack levels required when called:    7
   786 ;; This function calls:
   787 ;;		_vfpfcnvrt
   788 ;; This function is called by:
   789 ;;		_sprintf
   790 ;; This function uses a non-reentrant model
   791 ;;
   792                           
   793                           	psect	text2
   794  0012A4                     __ptext2:
   795                           	opt callstack 0
   796  0012A4                     _vfprintf:
   797                           	opt callstack 22
   798                           
   799                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.05\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
   800                           
   801                           ; BSR set to: 0
   802                           ;incstack = 0
   803  0012A4  C05C  F060         	movff	vfprintf@fmt,vfprintf@cfmt
   804  0012A8  C05D  F061         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
   805                           
   806                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
   807  0012AC  0E00               	movlw	0
   808  0012AE  0100               	movlb	0	; () banked
   809  0012B0  6F81               	movwf	(_nout+1)& (0+255),b
   810  0012B2  0E00               	movlw	0
   811  0012B4  6F80               	movwf	_nout& (0+255),b
   812                           
   813                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
   814  0012B6  D013               	goto	l2399
   815  0012B8                     l2397:
   816                           
   817                           ; BSR set to: 0
   818                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
   819  0012B8  C05A  F044         	movff	vfprintf@fp,vfpfcnvrt@fp
   820  0012BC  C05B  F045         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
   821  0012C0  0E60               	movlw	low vfprintf@cfmt
   822  0012C2  6E46               	movwf	vfpfcnvrt@fmt,c
   823  0012C4  0E00               	movlw	high vfprintf@cfmt
   824  0012C6  6E47               	movwf	vfpfcnvrt@fmt+1,c
   825  0012C8  C05E  F048         	movff	vfprintf@ap,vfpfcnvrt@ap
   826  0012CC  C05F  F049         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
   827  0012D0  EC0E  F003         	call	_vfpfcnvrt	;wreg free
   828  0012D4  5044               	movf	?_vfpfcnvrt,w,c
   829  0012D6  0100               	movlb	0	; () banked
   830  0012D8  2780               	addwf	_nout& (0+255),f,b
   831  0012DA  5045               	movf	?_vfpfcnvrt+1,w,c
   832  0012DC  2381               	addwfc	(_nout+1)& (0+255),f,b
   833  0012DE                     l2399:
   834                           
   835                           ; BSR set to: 0
   836                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
   837  0012DE  C060  FFF6         	movff	vfprintf@cfmt,tblptrl
   838  0012E2  C061  FFF7         	movff	vfprintf@cfmt+1,tblptrh
   839  0012E6                     	if	0	;tblptru may be non-zero
   840  0012E6                     	endif
   841  0012E6                     	if	0	;tblptru may be non-zero
   842  0012E6                     	endif
   843  0012E6  0008               	tblrd		*
   844  0012E8  50F5               	movf	tablat,w,c
   845  0012EA  0900               	iorlw	0
   846  0012EC  A4D8               	btfss	status,2,c
   847  0012EE  D7E4               	goto	l2397
   848                           
   849                           ; BSR set to: 0
   850                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
   851  0012F0  C080  F05A         	movff	_nout,?_vfprintf
   852  0012F4  C081  F05B         	movff	_nout+1,?_vfprintf+1
   853                           
   854                           ; BSR set to: 0
   855  0012F8  0012               	return		;funcret
   856  0012FA                     __end_of_vfprintf:
   857                           	opt callstack 0
   858                           
   859 ;; *************** function _vfpfcnvrt *****************
   860 ;; Defined at:
   861 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
   862 ;; Parameters:    Size  Location     Type
   863 ;;  fp              2   67[COMRAM] PTR struct _IO_FILE
   864 ;;		 -> sprintf@f(6), 
   865 ;;  fmt             2   69[COMRAM] PTR PTR unsigned char 
   866 ;;		 -> vfprintf@cfmt(2), 
   867 ;;  ap              2   71[COMRAM] PTR PTR void 
   868 ;;		 -> sprintf@ap(2), 
   869 ;; Auto vars:     Size  Location     Type
   870 ;;  ll              8   77[COMRAM] long long 
   871 ;;  llu             8    0        unsigned long long 
   872 ;;  f               4    0        unsigned long long 
   873 ;;  vp              3    0        PTR void 
   874 ;;  ct              3    0        unsigned char [3]
   875 ;;  cp              3    0        PTR unsigned char 
   876 ;;  done            2   85[COMRAM] int 
   877 ;;  i               2    0        int 
   878 ;;  c               1    0        unsigned char 
   879 ;; Return value:  Size  Location     Type
   880 ;;                  2   67[COMRAM] int 
   881 ;; Registers used:
   882 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   883 ;; Tracked objects:
   884 ;;		On entry : 0/0
   885 ;;		On exit  : 0/0
   886 ;;		Unchanged: 0/0
   887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   888 ;;      Params:         6       0       0       0       0       0       0
   889 ;;      Locals:        12       0       0       0       0       0       0
   890 ;;      Temps:          4       0       0       0       0       0       0
   891 ;;      Totals:        22       0       0       0       0       0       0
   892 ;;Total ram usage:       22 bytes
   893 ;; Hardware stack levels used:    1
   894 ;; Hardware stack levels required when called:    6
   895 ;; This function calls:
   896 ;;		_atoi
   897 ;;		_dtoa
   898 ;;		_fputc
   899 ;;		_isdigit
   900 ;; This function is called by:
   901 ;;		_vfprintf
   902 ;; This function uses a non-reentrant model
   903 ;;
   904                           
   905                           	psect	text3
   906  00061C                     __ptext3:
   907                           	opt callstack 0
   908  00061C                     _vfpfcnvrt:
   909                           	opt callstack 22
   910                           
   911                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 674:     long long ll;
   912                           
   913                           ; BSR set to: 0
   914                           ;incstack = 0
   915  00061C  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   916  000620  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   917  000624  CFDE FFF6          	movff	postinc2,tblptrl
   918  000628  CFDD FFF7          	movff	postdec2,tblptrh
   919  00062C                     	if	0	;tblptru may be non-zero
   920  00062C                     	endif
   921  00062C                     	if	0	;tblptru may be non-zero
   922  00062C                     	endif
   923  00062C  0008               	tblrd		*
   924  00062E  50F5               	movf	tablat,w,c
   925  000630  0A25               	xorlw	37
   926  000632  A4D8               	btfss	status,2,c
   927  000634  D143               	goto	l2381
   928                           
   929                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
   930  000636  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   931  00063A  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   932  00063E  2ADE               	incf	postinc2,f,c
   933  000640  0E00               	movlw	0
   934  000642  22DD               	addwfc	postdec2,f,c
   935                           
   936                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
   937  000644  0E00               	movlw	0
   938  000646  6E6B               	movwf	_width+1,c
   939  000648  0E00               	movlw	0
   940  00064A  6E6A               	movwf	_width,c
   941  00064C  C06A  F06E         	movff	_width,_flags
   942  000650  C06B  F06F         	movff	_width+1,_flags+1
   943                           
   944                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
   945  000654  686C               	setf	_prec,c
   946  000656  686D               	setf	_prec+1,c
   947                           
   948                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 688:       
      +                            done = 0;
   949  000658  0E00               	movlw	0
   950  00065A  6E57               	movwf	vfpfcnvrt@done+1,c
   951  00065C  0E00               	movlw	0
   952  00065E  D014               	goto	L1
   953  000660                     l2307:
   954                           
   955                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 692:       
      +                                        flags |= (1 << 0);
   956  000660  806E               	bsf	_flags,0,c
   957  000662                     l2309:
   958                           
   959                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 693:       
      +                                        ++*fmt;
   960  000662  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   961  000666  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   962  00066A  2ADE               	incf	postinc2,f,c
   963  00066C  0E00               	movlw	0
   964  00066E  22DD               	addwfc	postdec2,f,c
   965                           
   966                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 694:       
      +                                        break;
   967  000670  D02E               	goto	l2333
   968  000672                     l2311:
   969                           
   970                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 696:       
      +                                        flags |= (1 << 1);
   971  000672  826E               	bsf	_flags,1,c
   972  000674  D7F6               	goto	l2309
   973  000676                     l2315:
   974                           
   975                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 700:       
      +                                        flags |= (1 << 2);
   976  000676  846E               	bsf	_flags,2,c
   977  000678  D7F4               	goto	l2309
   978  00067A                     l2319:
   979                           
   980                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 704:       
      +                                        flags |= (1 << 3);
   981  00067A  866E               	bsf	_flags,3,c
   982  00067C  D7F2               	goto	l2309
   983  00067E                     l2323:
   984                           
   985                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 708:       
      +                                        flags |= (1 << 4);
   986  00067E  886E               	bsf	_flags,4,c
   987  000680  D7F0               	goto	l2309
   988  000682                     l2327:
   989                           
   990                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 712:       
      +                                        done = 1;
   991  000682  0E00               	movlw	0
   992  000684  6E57               	movwf	vfpfcnvrt@done+1,c
   993  000686  0E01               	movlw	1
   994  000688                     L1:
   995  000688  6E56               	movwf	vfpfcnvrt@done,c
   996                           
   997                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 713:       
      +                                        break;
   998  00068A  D021               	goto	l2333
   999  00068C                     l2331:
  1000  00068C  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1001  000690  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1002  000694  CFDE FFF6          	movff	postinc2,tblptrl
  1003  000698  CFDD FFF7          	movff	postdec2,tblptrh
  1004  00069C                     	if	0	;tblptru may be non-zero
  1005  00069C                     	endif
  1006  00069C                     	if	0	;tblptru may be non-zero
  1007  00069C                     	endif
  1008  00069C  0008               	tblrd		*
  1009  00069E  50F5               	movf	tablat,w,c
  1010  0006A0  6E4A               	movwf	??_vfpfcnvrt& (0+255),c
  1011  0006A2  6A4B               	clrf	(??_vfpfcnvrt+1)& (0+255),c
  1012                           
  1013                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1014                           ; Switch size 1, requested type "simple"
  1015                           ; Number of cases is 1, Range of values is 0 to 0
  1016                           ; switch strategies available:
  1017                           ; Name         Instructions Cycles
  1018                           ; simple_byte            4     3 (average)
  1019                           ;	Chosen strategy is simple_byte
  1020  0006A4  504B               	movf	??_vfpfcnvrt+1,w,c
  1021  0006A6  0A00               	xorlw	0	; case 0
  1022  0006A8  A4D8               	btfss	status,2,c
  1023  0006AA  D7EB               	goto	l2327
  1024                           
  1025                           ; Switch size 1, requested type "simple"
  1026                           ; Number of cases is 5, Range of values is 32 to 48
  1027                           ; switch strategies available:
  1028                           ; Name         Instructions Cycles
  1029                           ; simple_byte           16     9 (average)
  1030                           ;	Chosen strategy is simple_byte
  1031  0006AC  504A               	movf	??_vfpfcnvrt,w,c
  1032  0006AE  0A20               	xorlw	32	; case 32
  1033  0006B0  B4D8               	btfsc	status,2,c
  1034  0006B2  D7E3               	goto	l2319
  1035  0006B4  0A03               	xorlw	3	; case 35
  1036  0006B6  B4D8               	btfsc	status,2,c
  1037  0006B8  D7E2               	goto	l2323
  1038  0006BA  0A08               	xorlw	8	; case 43
  1039  0006BC  B4D8               	btfsc	status,2,c
  1040  0006BE  D7DB               	goto	l2315
  1041  0006C0  0A06               	xorlw	6	; case 45
  1042  0006C2  B4D8               	btfsc	status,2,c
  1043  0006C4  D7CD               	goto	l2307
  1044  0006C6  0A1D               	xorlw	29	; case 48
  1045  0006C8  B4D8               	btfsc	status,2,c
  1046  0006CA  D7D3               	goto	l2311
  1047  0006CC  D7DA               	goto	l2327
  1048  0006CE                     l2333:
  1049                           
  1050                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 689:       
      +                            while (!done) {
  1051  0006CE  5056               	movf	vfpfcnvrt@done,w,c
  1052  0006D0  1057               	iorwf	vfpfcnvrt@done+1,w,c
  1053  0006D2  B4D8               	btfsc	status,2,c
  1054  0006D4  D7DB               	goto	l2331
  1055                           
  1056                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 716:       
      +                            if (flags & (1 << 0)) {
  1057  0006D6  B06E               	btfsc	_flags,0,c
  1058                           
  1059                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 717:       
      +                                flags &= ~(1 << 1);
  1060  0006D8  926E               	bcf	_flags,1,c
  1061                           
  1062                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 723:       
      +                            if ((*fmt)[0] == '*') {
  1063  0006DA  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1064  0006DE  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1065  0006E2  CFDE FFF6          	movff	postinc2,tblptrl
  1066  0006E6  CFDD FFF7          	movff	postdec2,tblptrh
  1067  0006EA                     	if	0	;tblptru may be non-zero
  1068  0006EA                     	endif
  1069  0006EA                     	if	0	;tblptru may be non-zero
  1070  0006EA                     	endif
  1071  0006EA  0008               	tblrd		*
  1072  0006EC  50F5               	movf	tablat,w,c
  1073  0006EE  0A2A               	xorlw	42
  1074  0006F0  A4D8               	btfss	status,2,c
  1075  0006F2  D023               	goto	l2345
  1076                           
  1077                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 724:       
      +                                ++*fmt;
  1078  0006F4  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1079  0006F8  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1080  0006FC  2ADE               	incf	postinc2,f,c
  1081  0006FE  0E00               	movlw	0
  1082  000700  22DD               	addwfc	postdec2,f,c
  1083                           
  1084                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 725:       
      +                                width = (*(int *)__va_arg(*(int **)ap, (int)0));
  1085  000702  C048  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1086  000706  C049  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1087  00070A  CFDF F04A          	movff	indf2,??_vfpfcnvrt
  1088  00070E  0E02               	movlw	2
  1089  000710  26DE               	addwf	postinc2,f,c
  1090  000712  CFDF F04B          	movff	indf2,??_vfpfcnvrt+1
  1091  000716  0E00               	movlw	0
  1092  000718  22DD               	addwfc	postdec2,f,c
  1093  00071A  C04A  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1094  00071E  C04B  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1095  000722  CFDE F06A          	movff	postinc2,_width
  1096  000726  CFDD F06B          	movff	postdec2,_width+1
  1097                           
  1098                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 726:       
      +                                if (width < 0) {
  1099  00072A  AE6B               	btfss	_width+1,7,c
  1100  00072C  D03F               	goto	u2100
  1101                           
  1102                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 727:       
      +                                    flags |= (1 << 0);
  1103  00072E  806E               	bsf	_flags,0,c
  1104                           
  1105                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 728:       
      +                                    width = -width;
  1106  000730  6C6A               	negf	_width,c
  1107  000732  1E6B               	comf	_width+1,f,c
  1108  000734  B0D8               	btfsc	status,0,c
  1109  000736  2A6B               	incf	_width+1,f,c
  1110  000738  D039               	goto	u2100
  1111  00073A                     l2345:
  1112                           
  1113                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 731:       
      +                                width = atoi(*fmt);
  1114  00073A  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1115  00073E  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1116  000742  CFDE F00C          	movff	postinc2,atoi@s
  1117  000746  CFDD F00D          	movff	postdec2,atoi@s+1
  1118  00074A  EC3D  F006         	call	_atoi	;wreg free
  1119  00074E  C00C  F06A         	movff	?_atoi,_width
  1120  000752  C00D  F06B         	movff	?_atoi+1,_width+1
  1121                           
  1122                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 732:       
      +                                while ((0 ? isdigit((*fmt)[0]) : ((unsigned)((*fmt)[0])-'0') < 10)) {
  1123  000756  D007               	goto	l2349
  1124  000758                     l2347:
  1125                           
  1126                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 733:       
      +                                    ++*fmt;
  1127  000758  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1128  00075C  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1129  000760  2ADE               	incf	postinc2,f,c
  1130  000762  0E00               	movlw	0
  1131  000764  22DD               	addwfc	postdec2,f,c
  1132  000766                     l2349:
  1133  000766  0ED0               	movlw	208
  1134  000768  6E4A               	movwf	??_vfpfcnvrt& (0+255),c
  1135  00076A  0EFF               	movlw	255
  1136  00076C  6E4B               	movwf	(??_vfpfcnvrt+1)& (0+255),c
  1137  00076E  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1138  000772  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1139  000776  CFDE FFF6          	movff	postinc2,tblptrl
  1140  00077A  CFDD FFF7          	movff	postdec2,tblptrh
  1141  00077E                     	if	0	;tblptru may be non-zero
  1142  00077E                     	endif
  1143  00077E                     	if	0	;tblptru may be non-zero
  1144  00077E                     	endif
  1145  00077E  0008               	tblrd		*
  1146  000780  50F5               	movf	tablat,w,c
  1147  000782  6E4C               	movwf	(??_vfpfcnvrt+2)& (0+255),c
  1148  000784  6A4D               	clrf	(??_vfpfcnvrt+3)& (0+255),c
  1149  000786  504A               	movf	??_vfpfcnvrt,w,c
  1150  000788  264C               	addwf	??_vfpfcnvrt+2,f,c
  1151  00078A  504B               	movf	??_vfpfcnvrt+1,w,c
  1152  00078C  224D               	addwfc	??_vfpfcnvrt+3,f,c
  1153  00078E  504D               	movf	??_vfpfcnvrt+3,w,c
  1154  000790  E106               	bnz	u2080
  1155  000792  0E0A               	movlw	10
  1156  000794  5C4C               	subwf	??_vfpfcnvrt+2,w,c
  1157  000796  B0D8               	btfsc	status,0,c
  1158  000798  D002               	goto	u2080
  1159  00079A  0E01               	movlw	1
  1160  00079C  D001               	goto	u2090
  1161  00079E                     u2080:
  1162  00079E  0E00               	movlw	0
  1163  0007A0                     u2090:
  1164  0007A0  6E58               	movwf	_vfpfcnvrt$498,c
  1165  0007A2  6A59               	clrf	_vfpfcnvrt$498+1,c
  1166  0007A4  5058               	movf	_vfpfcnvrt$498,w,c
  1167  0007A6  1059               	iorwf	_vfpfcnvrt$498+1,w,c
  1168  0007A8  A4D8               	btfss	status,2,c
  1169  0007AA  D7D6               	goto	l2347
  1170  0007AC                     u2100:
  1171                           
  1172                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 825:       
      +                            if ((*fmt[0] == 'd') || (*fmt[0] == 'i')) {
  1173  0007AC  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1174  0007B0  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1175  0007B4  CFDE FFF6          	movff	postinc2,tblptrl
  1176  0007B8  CFDD FFF7          	movff	postdec2,tblptrh
  1177  0007BC                     	if	0	;tblptru may be non-zero
  1178  0007BC                     	endif
  1179  0007BC                     	if	0	;tblptru may be non-zero
  1180  0007BC                     	endif
  1181  0007BC  0008               	tblrd		*
  1182  0007BE  50F5               	movf	tablat,w,c
  1183  0007C0  0A64               	xorlw	100
  1184  0007C2  B4D8               	btfsc	status,2,c
  1185  0007C4  D00D               	goto	u2120
  1186  0007C6  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1187  0007CA  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1188  0007CE  CFDE FFF6          	movff	postinc2,tblptrl
  1189  0007D2  CFDD FFF7          	movff	postdec2,tblptrh
  1190  0007D6                     	if	0	;tblptru may be non-zero
  1191  0007D6                     	endif
  1192  0007D6                     	if	0	;tblptru may be non-zero
  1193  0007D6                     	endif
  1194  0007D6  0008               	tblrd		*
  1195  0007D8  50F5               	movf	tablat,w,c
  1196  0007DA  0A69               	xorlw	105
  1197  0007DC  A4D8               	btfss	status,2,c
  1198  0007DE  D03F               	goto	l2365
  1199  0007E0                     u2120:
  1200                           
  1201                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 827:       
      +                                ++*fmt;
  1202  0007E0  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1203  0007E4  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1204  0007E8  2ADE               	incf	postinc2,f,c
  1205  0007EA  0E00               	movlw	0
  1206  0007EC  22DD               	addwfc	postdec2,f,c
  1207                           
  1208                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 828:       
      +                                ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  1209  0007EE  C048  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1210  0007F2  C049  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1211  0007F6  CFDF F04A          	movff	indf2,??_vfpfcnvrt
  1212  0007FA  0E02               	movlw	2
  1213  0007FC  26DE               	addwf	postinc2,f,c
  1214  0007FE  CFDF F04B          	movff	indf2,??_vfpfcnvrt+1
  1215  000802  0E00               	movlw	0
  1216  000804  22DD               	addwfc	postdec2,f,c
  1217  000806  C04A  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1218  00080A  C04B  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1219  00080E  CFDE F04E          	movff	postinc2,vfpfcnvrt@ll
  1220  000812  CFDD F04F          	movff	postdec2,vfpfcnvrt@ll+1
  1221  000816  0E00               	movlw	0
  1222  000818  BE4F               	btfsc	vfpfcnvrt@ll+1,7,c
  1223  00081A  0EFF               	movlw	-1
  1224  00081C  6E50               	movwf	vfpfcnvrt@ll+2,c
  1225  00081E  6E51               	movwf	vfpfcnvrt@ll+3,c
  1226  000820  6E52               	movwf	vfpfcnvrt@ll+4,c
  1227  000822  6E53               	movwf	vfpfcnvrt@ll+5,c
  1228  000824  6E54               	movwf	vfpfcnvrt@ll+6,c
  1229  000826  6E55               	movwf	vfpfcnvrt@ll+7,c
  1230                           
  1231                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 830:       
      +                                return dtoa(fp, ll);
  1232  000828  C044  F020         	movff	vfpfcnvrt@fp,dtoa@fp
  1233  00082C  C045  F021         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  1234  000830  C04E  F022         	movff	vfpfcnvrt@ll,dtoa@d
  1235  000834  C04F  F023         	movff	vfpfcnvrt@ll+1,dtoa@d+1
  1236  000838  C050  F024         	movff	vfpfcnvrt@ll+2,dtoa@d+2
  1237  00083C  C051  F025         	movff	vfpfcnvrt@ll+3,dtoa@d+3
  1238  000840  C052  F026         	movff	vfpfcnvrt@ll+4,dtoa@d+4
  1239  000844  C053  F027         	movff	vfpfcnvrt@ll+5,dtoa@d+5
  1240  000848  C054  F028         	movff	vfpfcnvrt@ll+6,dtoa@d+6
  1241  00084C  C055  F029         	movff	vfpfcnvrt@ll+7,dtoa@d+7
  1242  000850  EC78  F004         	call	_dtoa	;wreg free
  1243  000854  C020  F044         	movff	?_dtoa,?_vfpfcnvrt
  1244  000858  C021  F045         	movff	?_dtoa+1,?_vfpfcnvrt+1
  1245  00085C  0012               	return	
  1246  00085E                     l2365:
  1247                           
  1248                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
  1249  00085E  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1250  000862  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1251  000866  CFDE FFF6          	movff	postinc2,tblptrl
  1252  00086A  CFDD FFF7          	movff	postdec2,tblptrh
  1253  00086E                     	if	0	;tblptru may be non-zero
  1254  00086E                     	endif
  1255  00086E                     	if	0	;tblptru may be non-zero
  1256  00086E                     	endif
  1257  00086E  0008               	tblrd		*
  1258  000870  50F5               	movf	tablat,w,c
  1259  000872  0A25               	xorlw	37
  1260  000874  A4D8               	btfss	status,2,c
  1261  000876  D016               	goto	l2375
  1262                           
  1263                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
  1264  000878  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1265  00087C  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1266  000880  2ADE               	incf	postinc2,f,c
  1267  000882  0E00               	movlw	0
  1268  000884  22DD               	addwfc	postdec2,f,c
  1269                           
  1270                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
  1271  000886  0E00               	movlw	0
  1272  000888  6E06               	movwf	fputc@c+1,c
  1273  00088A  0E25               	movlw	37
  1274  00088C  6E05               	movwf	fputc@c,c
  1275  00088E  C044  F007         	movff	vfpfcnvrt@fp,fputc@fp
  1276  000892  C045  F008         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1277  000896  EC31  F008         	call	_fputc	;wreg free
  1278  00089A                     l2371:
  1279                           
  1280                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
  1281  00089A  0E00               	movlw	0
  1282  00089C  6E45               	movwf	?_vfpfcnvrt+1,c
  1283  00089E  0E01               	movlw	1
  1284  0008A0  6E44               	movwf	?_vfpfcnvrt,c
  1285  0008A2  0012               	return	
  1286  0008A4                     l2375:
  1287                           
  1288                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
  1289  0008A4  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1290  0008A8  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1291  0008AC  2ADE               	incf	postinc2,f,c
  1292  0008AE  0E00               	movlw	0
  1293  0008B0  22DD               	addwfc	postdec2,f,c
  1294                           
  1295                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
  1296  0008B2  0E00               	movlw	0
  1297  0008B4  6E45               	movwf	?_vfpfcnvrt+1,c
  1298  0008B6  0E00               	movlw	0
  1299  0008B8  6E44               	movwf	?_vfpfcnvrt,c
  1300  0008BA  0012               	return	
  1301  0008BC                     l2381:
  1302                           
  1303                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
  1304  0008BC  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1305  0008C0  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1306  0008C4  CFDE FFF6          	movff	postinc2,tblptrl
  1307  0008C8  CFDD FFF7          	movff	postdec2,tblptrh
  1308  0008CC                     	if	0	;tblptru may be non-zero
  1309  0008CC                     	endif
  1310  0008CC                     	if	0	;tblptru may be non-zero
  1311  0008CC                     	endif
  1312  0008CC  0008               	tblrd		*
  1313  0008CE  50F5               	movf	tablat,w,c
  1314  0008D0  6E05               	movwf	fputc@c,c
  1315  0008D2  6A06               	clrf	fputc@c+1,c
  1316  0008D4  C044  F007         	movff	vfpfcnvrt@fp,fputc@fp
  1317  0008D8  C045  F008         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1318  0008DC  EC31  F008         	call	_fputc	;wreg free
  1319                           
  1320                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
  1321  0008E0  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1322  0008E4  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1323  0008E8  2ADE               	incf	postinc2,f,c
  1324  0008EA  0E00               	movlw	0
  1325  0008EC  22DD               	addwfc	postdec2,f,c
  1326  0008EE  D7D5               	goto	l2371
  1327  0008F0                     __end_of_vfpfcnvrt:
  1328                           	opt callstack 0
  1329                           
  1330 ;; *************** function _dtoa *****************
  1331 ;; Defined at:
  1332 ;;		line 274 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1333 ;; Parameters:    Size  Location     Type
  1334 ;;  fp              2   31[COMRAM] PTR struct _IO_FILE
  1335 ;;		 -> sprintf@f(6), 
  1336 ;;  d               8   33[COMRAM] long long 
  1337 ;; Auto vars:     Size  Location     Type
  1338 ;;  n               8   57[COMRAM] long long 
  1339 ;;  i               2   65[COMRAM] int 
  1340 ;;  s               2   55[COMRAM] int 
  1341 ;;  w               2   53[COMRAM] int 
  1342 ;;  p               2   51[COMRAM] int 
  1343 ;; Return value:  Size  Location     Type
  1344 ;;                  2   31[COMRAM] int 
  1345 ;; Registers used:
  1346 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1347 ;; Tracked objects:
  1348 ;;		On entry : 0/0
  1349 ;;		On exit  : 0/0
  1350 ;;		Unchanged: 0/0
  1351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1352 ;;      Params:        10       0       0       0       0       0       0
  1353 ;;      Locals:        18       0       0       0       0       0       0
  1354 ;;      Temps:          8       0       0       0       0       0       0
  1355 ;;      Totals:        36       0       0       0       0       0       0
  1356 ;;Total ram usage:       36 bytes
  1357 ;; Hardware stack levels used:    1
  1358 ;; Hardware stack levels required when called:    5
  1359 ;; This function calls:
  1360 ;;		___aodiv
  1361 ;;		___aomod
  1362 ;;		_abs
  1363 ;;		_pad
  1364 ;; This function is called by:
  1365 ;;		_vfpfcnvrt
  1366 ;; This function uses a non-reentrant model
  1367 ;;
  1368                           
  1369                           	psect	text4
  1370  0008F0                     __ptext4:
  1371                           	opt callstack 0
  1372  0008F0                     _dtoa:
  1373                           	opt callstack 22
  1374                           
  1375                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 274: static
      +                           int dtoa(FILE *fp, long long d);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\
      +                          c99\common\doprnt.c: 275: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\c
      +                          ommon\doprnt.c: 276:     int i, p, s, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\
      +                          sources\c99\common\doprnt.c: 277:     long long n;;C:\Program Files (x86)\Microchip\xc8\
      +                          v2.05\pic\sources\c99\common\doprnt.c: 280:     n = d;
  1376                           
  1377                           ;incstack = 0
  1378  0008F0  C022  F03A         	movff	dtoa@d,dtoa@n
  1379  0008F4  C023  F03B         	movff	dtoa@d+1,dtoa@n+1
  1380  0008F8  C024  F03C         	movff	dtoa@d+2,dtoa@n+2
  1381  0008FC  C025  F03D         	movff	dtoa@d+3,dtoa@n+3
  1382  000900  C026  F03E         	movff	dtoa@d+4,dtoa@n+4
  1383  000904  C027  F03F         	movff	dtoa@d+5,dtoa@n+5
  1384  000908  C028  F040         	movff	dtoa@d+6,dtoa@n+6
  1385  00090C  C029  F041         	movff	dtoa@d+7,dtoa@n+7
  1386                           
  1387                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 281:     s 
      +                          = n < 0 ? 1 : 0;
  1388  000910  AE41               	btfss	dtoa@n+7,7,c
  1389  000912  D002               	goto	u1810
  1390  000914  0E01               	movlw	1
  1391  000916  D001               	goto	u1820
  1392  000918                     u1810:
  1393  000918  0E00               	movlw	0
  1394  00091A                     u1820:
  1395  00091A  6E38               	movwf	dtoa@s,c
  1396  00091C  6A39               	clrf	dtoa@s+1,c
  1397                           
  1398                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 282:     if
      +                           (s) {
  1399  00091E  5038               	movf	dtoa@s,w,c
  1400  000920  1039               	iorwf	dtoa@s+1,w,c
  1401  000922  B4D8               	btfsc	status,2,c
  1402  000924  D010               	goto	l2199
  1403                           
  1404                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 283:       
      +                            n = -n;
  1405  000926  1E41               	comf	dtoa@n+7,f,c
  1406  000928  1E40               	comf	dtoa@n+6,f,c
  1407  00092A  1E3F               	comf	dtoa@n+5,f,c
  1408  00092C  1E3E               	comf	dtoa@n+4,f,c
  1409  00092E  1E3D               	comf	dtoa@n+3,f,c
  1410  000930  1E3C               	comf	dtoa@n+2,f,c
  1411  000932  1E3B               	comf	dtoa@n+1,f,c
  1412  000934  6C3A               	negf	dtoa@n,c
  1413  000936  0E00               	movlw	0
  1414  000938  223B               	addwfc	dtoa@n+1,f,c
  1415  00093A  223C               	addwfc	dtoa@n+2,f,c
  1416  00093C  223D               	addwfc	dtoa@n+3,f,c
  1417  00093E  223E               	addwfc	dtoa@n+4,f,c
  1418  000940  223F               	addwfc	dtoa@n+5,f,c
  1419  000942  2240               	addwfc	dtoa@n+6,f,c
  1420  000944  2241               	addwfc	dtoa@n+7,f,c
  1421  000946                     l2199:
  1422                           
  1423                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 287:     if
      +                           (!(prec < 0)) {
  1424  000946  AE6D               	btfss	_prec+1,7,c
  1425                           
  1426                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 288:       
      +                            flags &= ~(1 << 1);
  1427  000948  926E               	bcf	_flags,1,c
  1428                           
  1429                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 290:     p 
      +                          = (0 < prec) ? prec : 1;
  1430  00094A  BE6D               	btfsc	_prec+1,7,c
  1431  00094C  D005               	goto	u1850
  1432  00094E  506D               	movf	_prec+1,w,c
  1433  000950  E108               	bnz	l129
  1434  000952  046C               	decf	_prec,w,c
  1435  000954  B0D8               	btfsc	status,0,c
  1436  000956  D005               	goto	l129
  1437  000958                     u1850:
  1438  000958  0E00               	movlw	0
  1439  00095A  6E35               	movwf	dtoa@p+1,c
  1440  00095C  0E01               	movlw	1
  1441  00095E  6E34               	movwf	dtoa@p,c
  1442  000960  D004               	goto	l131
  1443  000962                     l129:
  1444  000962  C06C  F034         	movff	_prec,dtoa@p
  1445  000966  C06D  F035         	movff	_prec+1,dtoa@p+1
  1446  00096A                     l131:
  1447                           
  1448                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 291:     w 
      +                          = width;
  1449  00096A  C06A  F036         	movff	_width,dtoa@w
  1450  00096E  C06B  F037         	movff	_width+1,dtoa@w+1
  1451                           
  1452                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 292:     if
      +                           (s || (flags & (1 << 2))) {
  1453  000972  5038               	movf	dtoa@s,w,c
  1454  000974  1039               	iorwf	dtoa@s+1,w,c
  1455  000976  A4D8               	btfss	status,2,c
  1456  000978  D002               	goto	u1870
  1457  00097A  A46E               	btfss	_flags,2,c
  1458  00097C  D003               	goto	l2213
  1459  00097E                     u1870:
  1460                           
  1461                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 293:       
      +                            --w;
  1462  00097E  0636               	decf	dtoa@w,f,c
  1463  000980  A0D8               	btfss	status,0,c
  1464  000982  0637               	decf	dtoa@w+1,f,c
  1465  000984                     l2213:
  1466                           
  1467                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 297:     i 
      +                          = sizeof(dbuf) - 1;
  1468  000984  0E00               	movlw	0
  1469  000986  6E43               	movwf	dtoa@i+1,c
  1470  000988  0E1F               	movlw	31
  1471  00098A  6E42               	movwf	dtoa@i,c
  1472                           
  1473                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 298:     db
      +                          uf[i] = '\0';
  1474  00098C  0E00               	movlw	0
  1475  00098E  0100               	movlb	0	; () banked
  1476  000990  6FA3               	movwf	(_dbuf+31)& (0+255),b
  1477                           
  1478                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1479  000992  D07C               	goto	l2227
  1480  000994                     l2217:
  1481                           
  1482                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 300:       
      +                            --i;
  1483  000994  0642               	decf	dtoa@i,f,c
  1484  000996  A0D8               	btfss	status,0,c
  1485  000998  0643               	decf	dtoa@i+1,f,c
  1486                           
  1487                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 301:       
      +                            dbuf[i] = '0' + abs(n % 10);
  1488  00099A  0E84               	movlw	low _dbuf
  1489  00099C  2442               	addwf	dtoa@i,w,c
  1490  00099E  6ED9               	movwf	fsr2l,c
  1491  0009A0  0E00               	movlw	high _dbuf
  1492  0009A2  2043               	addwfc	dtoa@i+1,w,c
  1493  0009A4  6EDA               	movwf	fsr2h,c
  1494  0009A6  C03A  F005         	movff	dtoa@n,___aomod@dividend
  1495  0009AA  C03B  F006         	movff	dtoa@n+1,___aomod@dividend+1
  1496  0009AE  C03C  F007         	movff	dtoa@n+2,___aomod@dividend+2
  1497  0009B2  C03D  F008         	movff	dtoa@n+3,___aomod@dividend+3
  1498  0009B6  C03E  F009         	movff	dtoa@n+4,___aomod@dividend+4
  1499  0009BA  C03F  F00A         	movff	dtoa@n+5,___aomod@dividend+5
  1500  0009BE  C040  F00B         	movff	dtoa@n+6,___aomod@dividend+6
  1501  0009C2  C041  F00C         	movff	dtoa@n+7,___aomod@dividend+7
  1502  0009C6  0E0A               	movlw	10
  1503  0009C8  6E0D               	movwf	___aomod@divisor,c
  1504  0009CA  0E00               	movlw	0
  1505  0009CC  6E0E               	movwf	___aomod@divisor+1,c
  1506  0009CE  0E00               	movlw	0
  1507  0009D0  6E0F               	movwf	___aomod@divisor+2,c
  1508  0009D2  0E00               	movlw	0
  1509  0009D4  6E10               	movwf	___aomod@divisor+3,c
  1510  0009D6  0E00               	movlw	0
  1511  0009D8  6E11               	movwf	___aomod@divisor+4,c
  1512  0009DA  0E00               	movlw	0
  1513  0009DC  6E12               	movwf	___aomod@divisor+5,c
  1514  0009DE  0E00               	movlw	0
  1515  0009E0  6E13               	movwf	___aomod@divisor+6,c
  1516  0009E2  0E00               	movlw	0
  1517  0009E4  6E14               	movwf	___aomod@divisor+7,c
  1518  0009E6  ECDD  F006         	call	___aomod	;wreg free
  1519  0009EA  C005  F02A         	movff	?___aomod,??_dtoa
  1520  0009EE  C006  F02B         	movff	?___aomod+1,??_dtoa+1
  1521  0009F2  C007  F02C         	movff	?___aomod+2,??_dtoa+2
  1522  0009F6  C008  F02D         	movff	?___aomod+3,??_dtoa+3
  1523  0009FA  C009  F02E         	movff	?___aomod+4,??_dtoa+4
  1524  0009FE  C00A  F02F         	movff	?___aomod+5,??_dtoa+5
  1525  000A02  C00B  F030         	movff	?___aomod+6,??_dtoa+6
  1526  000A06  C00C  F031         	movff	?___aomod+7,??_dtoa+7
  1527  000A0A  C02A  F017         	movff	??_dtoa,abs@a
  1528  000A0E  C02C  F018         	movff	??_dtoa+2,abs@a+1
  1529  000A12  ECE1  F009         	call	_abs	;wreg free
  1530  000A16  5017               	movf	?_abs,w,c
  1531  000A18  0F30               	addlw	48
  1532  000A1A  6EDF               	movwf	indf2,c
  1533                           
  1534                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 302:       
      +                            --p;
  1535  000A1C  0634               	decf	dtoa@p,f,c
  1536  000A1E  A0D8               	btfss	status,0,c
  1537  000A20  0635               	decf	dtoa@p+1,f,c
  1538                           
  1539                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 303:       
      +                            --w;
  1540  000A22  0636               	decf	dtoa@w,f,c
  1541  000A24  A0D8               	btfss	status,0,c
  1542  000A26  0637               	decf	dtoa@w+1,f,c
  1543                           
  1544                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 304:       
      +                            n = n / 10;
  1545  000A28  C03A  F005         	movff	dtoa@n,___aodiv@dividend
  1546  000A2C  C03B  F006         	movff	dtoa@n+1,___aodiv@dividend+1
  1547  000A30  C03C  F007         	movff	dtoa@n+2,___aodiv@dividend+2
  1548  000A34  C03D  F008         	movff	dtoa@n+3,___aodiv@dividend+3
  1549  000A38  C03E  F009         	movff	dtoa@n+4,___aodiv@dividend+4
  1550  000A3C  C03F  F00A         	movff	dtoa@n+5,___aodiv@dividend+5
  1551  000A40  C040  F00B         	movff	dtoa@n+6,___aodiv@dividend+6
  1552  000A44  C041  F00C         	movff	dtoa@n+7,___aodiv@dividend+7
  1553  000A48  0E0A               	movlw	10
  1554  000A4A  6E0D               	movwf	___aodiv@divisor,c
  1555  000A4C  0E00               	movlw	0
  1556  000A4E  6E0E               	movwf	___aodiv@divisor+1,c
  1557  000A50  0E00               	movlw	0
  1558  000A52  6E0F               	movwf	___aodiv@divisor+2,c
  1559  000A54  0E00               	movlw	0
  1560  000A56  6E10               	movwf	___aodiv@divisor+3,c
  1561  000A58  0E00               	movlw	0
  1562  000A5A  6E11               	movwf	___aodiv@divisor+4,c
  1563  000A5C  0E00               	movlw	0
  1564  000A5E  6E12               	movwf	___aodiv@divisor+5,c
  1565  000A60  0E00               	movlw	0
  1566  000A62  6E13               	movwf	___aodiv@divisor+6,c
  1567  000A64  0E00               	movlw	0
  1568  000A66  6E14               	movwf	___aodiv@divisor+7,c
  1569  000A68  EC99  F005         	call	___aodiv	;wreg free
  1570  000A6C  C005  F03A         	movff	?___aodiv,dtoa@n
  1571  000A70  C006  F03B         	movff	?___aodiv+1,dtoa@n+1
  1572  000A74  C007  F03C         	movff	?___aodiv+2,dtoa@n+2
  1573  000A78  C008  F03D         	movff	?___aodiv+3,dtoa@n+3
  1574  000A7C  C009  F03E         	movff	?___aodiv+4,dtoa@n+4
  1575  000A80  C00A  F03F         	movff	?___aodiv+5,dtoa@n+5
  1576  000A84  C00B  F040         	movff	?___aodiv+6,dtoa@n+6
  1577  000A88  C00C  F041         	movff	?___aodiv+7,dtoa@n+7
  1578  000A8C                     l2227:
  1579                           
  1580                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1581  000A8C  BE43               	btfsc	dtoa@i+1,7,c
  1582  000A8E  D01F               	goto	u1920
  1583  000A90  5043               	movf	dtoa@i+1,w,c
  1584  000A92  E103               	bnz	u1880
  1585  000A94  0442               	decf	dtoa@i,w,c
  1586  000A96  A0D8               	btfss	status,0,c
  1587  000A98  D01A               	goto	u1920
  1588  000A9A                     u1880:
  1589  000A9A  503A               	movf	dtoa@n,w,c
  1590  000A9C  103B               	iorwf	dtoa@n+1,w,c
  1591  000A9E  103C               	iorwf	dtoa@n+2,w,c
  1592  000AA0  103D               	iorwf	dtoa@n+3,w,c
  1593  000AA2  103E               	iorwf	dtoa@n+4,w,c
  1594  000AA4  103F               	iorwf	dtoa@n+5,w,c
  1595  000AA6  1040               	iorwf	dtoa@n+6,w,c
  1596  000AA8  1041               	iorwf	dtoa@n+7,w,c
  1597  000AAA  A4D8               	btfss	status,2,c
  1598  000AAC  D773               	goto	l2217
  1599  000AAE  BE35               	btfsc	dtoa@p+1,7,c
  1600  000AB0  D005               	goto	u1900
  1601  000AB2  5035               	movf	dtoa@p+1,w,c
  1602  000AB4  E102               	bnz	u1901
  1603  000AB6  0434               	decf	dtoa@p,w,c
  1604  000AB8  B0D8               	btfsc	status,0,c
  1605  000ABA                     u1901:
  1606  000ABA  D76C               	goto	l2217
  1607  000ABC                     u1900:
  1608  000ABC  BE37               	btfsc	dtoa@w+1,7,c
  1609  000ABE  D007               	goto	u1920
  1610  000AC0  5037               	movf	dtoa@w+1,w,c
  1611  000AC2  E103               	bnz	u1910
  1612  000AC4  0436               	decf	dtoa@w,w,c
  1613  000AC6  A0D8               	btfss	status,0,c
  1614  000AC8  D002               	goto	u1920
  1615  000ACA                     u1910:
  1616  000ACA  B26E               	btfsc	_flags,1,c
  1617  000ACC  D763               	goto	l2217
  1618  000ACE                     u1920:
  1619                           
  1620                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 308:     if
      +                           (s || (flags & (1 << 2))) {
  1621  000ACE  5038               	movf	dtoa@s,w,c
  1622  000AD0  1039               	iorwf	dtoa@s+1,w,c
  1623  000AD2  A4D8               	btfss	status,2,c
  1624  000AD4  D002               	goto	u1940
  1625  000AD6  A46E               	btfss	_flags,2,c
  1626  000AD8  D017               	goto	l2251
  1627  000ADA                     u1940:
  1628                           
  1629                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 309:       
      +                            --i;
  1630  000ADA  0642               	decf	dtoa@i,f,c
  1631  000ADC  A0D8               	btfss	status,0,c
  1632  000ADE  0643               	decf	dtoa@i+1,f,c
  1633                           
  1634                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 310:       
      +                            dbuf[i] = s ? '-' : '+';
  1635  000AE0  5038               	movf	dtoa@s,w,c
  1636  000AE2  1039               	iorwf	dtoa@s+1,w,c
  1637  000AE4  A4D8               	btfss	status,2,c
  1638  000AE6  D004               	goto	l2247
  1639  000AE8  0E00               	movlw	0
  1640  000AEA  6E33               	movwf	_dtoa$483+1,c
  1641  000AEC  0E2B               	movlw	43
  1642  000AEE  D003               	goto	L2
  1643  000AF0                     l2247:
  1644  000AF0  0E00               	movlw	0
  1645  000AF2  6E33               	movwf	_dtoa$483+1,c
  1646  000AF4  0E2D               	movlw	45
  1647  000AF6                     L2:
  1648  000AF6  6E32               	movwf	_dtoa$483,c
  1649  000AF8  0E84               	movlw	low _dbuf
  1650  000AFA  2442               	addwf	dtoa@i,w,c
  1651  000AFC  6ED9               	movwf	fsr2l,c
  1652  000AFE  0E00               	movlw	high _dbuf
  1653  000B00  2043               	addwfc	dtoa@i+1,w,c
  1654  000B02  6EDA               	movwf	fsr2h,c
  1655  000B04  C032  FFDF         	movff	_dtoa$483,indf2
  1656  000B08                     l2251:
  1657                           
  1658                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 314:     re
      +                          turn pad(fp, &dbuf[i], w);
  1659  000B08  C020  F015         	movff	dtoa@fp,pad@fp
  1660  000B0C  C021  F016         	movff	dtoa@fp+1,pad@fp+1
  1661  000B10  0E84               	movlw	low _dbuf
  1662  000B12  2442               	addwf	dtoa@i,w,c
  1663  000B14  6E17               	movwf	pad@buf,c
  1664  000B16  0E00               	movlw	high _dbuf
  1665  000B18  2043               	addwfc	dtoa@i+1,w,c
  1666  000B1A  6E18               	movwf	pad@buf+1,c
  1667  000B1C  C036  F019         	movff	dtoa@w,pad@p
  1668  000B20  C037  F01A         	movff	dtoa@w+1,pad@p+1
  1669  000B24  EC81  F008         	call	_pad	;wreg free
  1670  000B28  C015  F020         	movff	?_pad,?_dtoa
  1671  000B2C  C016  F021         	movff	?_pad+1,?_dtoa+1
  1672  000B30  0012               	return		;funcret
  1673  000B32                     __end_of_dtoa:
  1674                           	opt callstack 0
  1675                           
  1676 ;; *************** function _pad *****************
  1677 ;; Defined at:
  1678 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1679 ;; Parameters:    Size  Location     Type
  1680 ;;  fp              2   20[COMRAM] PTR struct _IO_FILE
  1681 ;;		 -> sprintf@f(6), 
  1682 ;;  buf             2   22[COMRAM] PTR unsigned char 
  1683 ;;		 -> dbuf(32), 
  1684 ;;  p               2   24[COMRAM] int 
  1685 ;; Auto vars:     Size  Location     Type
  1686 ;;  w               2   29[COMRAM] int 
  1687 ;;  i               2   27[COMRAM] int 
  1688 ;; Return value:  Size  Location     Type
  1689 ;;                  2   20[COMRAM] int 
  1690 ;; Registers used:
  1691 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1692 ;; Tracked objects:
  1693 ;;		On entry : 0/0
  1694 ;;		On exit  : 0/0
  1695 ;;		Unchanged: 0/0
  1696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1697 ;;      Params:         6       0       0       0       0       0       0
  1698 ;;      Locals:         4       0       0       0       0       0       0
  1699 ;;      Temps:          1       0       0       0       0       0       0
  1700 ;;      Totals:        11       0       0       0       0       0       0
  1701 ;;Total ram usage:       11 bytes
  1702 ;; Hardware stack levels used:    1
  1703 ;; Hardware stack levels required when called:    4
  1704 ;; This function calls:
  1705 ;;		_fputc
  1706 ;;		_fputs
  1707 ;;		_strlen
  1708 ;; This function is called by:
  1709 ;;		_dtoa
  1710 ;; This function uses a non-reentrant model
  1711 ;;
  1712                           
  1713                           	psect	text5
  1714  001102                     __ptext5:
  1715                           	opt callstack 0
  1716  001102                     _pad:
  1717                           	opt callstack 22
  1718                           
  1719                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
  1720                           
  1721                           ;incstack = 0
  1722  001102  A06E               	btfss	_flags,0,c
  1723  001104  D00A               	goto	l2069
  1724                           
  1725                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
  1726  001106  C017  F00E         	movff	pad@buf,fputs@s
  1727  00110A  C018  F00F         	movff	pad@buf+1,fputs@s+1
  1728  00110E  C015  F010         	movff	pad@fp,fputs@fp
  1729  001112  C016  F011         	movff	pad@fp+1,fputs@fp+1
  1730  001116  ECC5  F009         	call	_fputs	;wreg free
  1731  00111A                     l2069:
  1732                           
  1733                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
  1734  00111A  BE1A               	btfsc	pad@p+1,7,c
  1735  00111C  D005               	goto	l2073
  1736  00111E  C019  F01E         	movff	pad@p,pad@w
  1737  001122  C01A  F01F         	movff	pad@p+1,pad@w+1
  1738  001126  D004               	goto	l118
  1739  001128                     l2073:
  1740  001128  0E00               	movlw	0
  1741  00112A  6E1F               	movwf	pad@w+1,c
  1742  00112C  0E00               	movlw	0
  1743  00112E  6E1E               	movwf	pad@w,c
  1744  001130                     l118:
  1745                           
  1746                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
  1747  001130  0E00               	movlw	0
  1748  001132  6E1D               	movwf	pad@i+1,c
  1749  001134  0E00               	movlw	0
  1750  001136  6E1C               	movwf	pad@i,c
  1751                           
  1752                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  1753  001138  D00C               	goto	l2079
  1754  00113A                     l2075:
  1755                           
  1756                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
  1757  00113A  0E00               	movlw	0
  1758  00113C  6E06               	movwf	fputc@c+1,c
  1759  00113E  0E20               	movlw	32
  1760  001140  6E05               	movwf	fputc@c,c
  1761  001142  C015  F007         	movff	pad@fp,fputc@fp
  1762  001146  C016  F008         	movff	pad@fp+1,fputc@fp+1
  1763  00114A  EC31  F008         	call	_fputc	;wreg free
  1764                           
  1765                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
  1766  00114E  4A1C               	infsnz	pad@i,f,c
  1767  001150  2A1D               	incf	pad@i+1,f,c
  1768  001152                     l2079:
  1769                           
  1770                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  1771  001152  501E               	movf	pad@w,w,c
  1772  001154  5C1C               	subwf	pad@i,w,c
  1773  001156  501D               	movf	pad@i+1,w,c
  1774  001158  0A80               	xorlw	128
  1775  00115A  6E1B               	movwf	??_pad& (0+255),c
  1776  00115C  501F               	movf	pad@w+1,w,c
  1777  00115E  0A80               	xorlw	128
  1778  001160  581B               	subwfb	??_pad& (0+255),w,c
  1779  001162  A0D8               	btfss	status,0,c
  1780  001164  D7EA               	goto	l2075
  1781                           
  1782                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
  1783  001166  B06E               	btfsc	_flags,0,c
  1784  001168  D00A               	goto	l2083
  1785                           
  1786                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
  1787  00116A  C017  F00E         	movff	pad@buf,fputs@s
  1788  00116E  C018  F00F         	movff	pad@buf+1,fputs@s+1
  1789  001172  C015  F010         	movff	pad@fp,fputs@fp
  1790  001176  C016  F011         	movff	pad@fp+1,fputs@fp+1
  1791  00117A  ECC5  F009         	call	_fputs	;wreg free
  1792  00117E                     l2083:
  1793                           
  1794                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
  1795  00117E  C017  F005         	movff	pad@buf,strlen@s
  1796  001182  C018  F006         	movff	pad@buf+1,strlen@s+1
  1797  001186  EC12  F00A         	call	_strlen	;wreg free
  1798  00118A  501E               	movf	pad@w,w,c
  1799  00118C  2405               	addwf	?_strlen,w,c
  1800  00118E  6E15               	movwf	?_pad,c
  1801  001190  501F               	movf	pad@w+1,w,c
  1802  001192  2006               	addwfc	?_strlen+1,w,c
  1803  001194  6E16               	movwf	?_pad+1,c
  1804  001196  0012               	return		;funcret
  1805  001198                     __end_of_pad:
  1806                           	opt callstack 0
  1807                           
  1808 ;; *************** function _strlen *****************
  1809 ;; Defined at:
  1810 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
  1811 ;; Parameters:    Size  Location     Type
  1812 ;;  s               2    4[COMRAM] PTR const unsigned char 
  1813 ;;		 -> dbuf(32), 
  1814 ;; Auto vars:     Size  Location     Type
  1815 ;;  a               2    6[COMRAM] PTR const unsigned char 
  1816 ;;		 -> dbuf(32), 
  1817 ;; Return value:  Size  Location     Type
  1818 ;;                  2    4[COMRAM] unsigned int 
  1819 ;; Registers used:
  1820 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1821 ;; Tracked objects:
  1822 ;;		On entry : 0/0
  1823 ;;		On exit  : 0/0
  1824 ;;		Unchanged: 0/0
  1825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1826 ;;      Params:         2       0       0       0       0       0       0
  1827 ;;      Locals:         2       0       0       0       0       0       0
  1828 ;;      Temps:          0       0       0       0       0       0       0
  1829 ;;      Totals:         4       0       0       0       0       0       0
  1830 ;;Total ram usage:        4 bytes
  1831 ;; Hardware stack levels used:    1
  1832 ;; Hardware stack levels required when called:    1
  1833 ;; This function calls:
  1834 ;;		Nothing
  1835 ;; This function is called by:
  1836 ;;		_pad
  1837 ;; This function uses a non-reentrant model
  1838 ;;
  1839                           
  1840                           	psect	text6
  1841  001424                     __ptext6:
  1842                           	opt callstack 0
  1843  001424                     _strlen:
  1844                           	opt callstack 24
  1845                           
  1846                           ;incstack = 0
  1847  001424  C005  F007         	movff	strlen@s,strlen@a
  1848  001428  C006  F008         	movff	strlen@s+1,strlen@a+1
  1849  00142C  D002               	goto	l2059
  1850  00142E                     l2057:
  1851  00142E  4A05               	infsnz	strlen@s,f,c
  1852  001430  2A06               	incf	strlen@s+1,f,c
  1853  001432                     l2059:
  1854  001432  C005  FFD9         	movff	strlen@s,fsr2l
  1855  001436  C006  FFDA         	movff	strlen@s+1,fsr2h
  1856  00143A  50DF               	movf	indf2,w,c
  1857  00143C  A4D8               	btfss	status,2,c
  1858  00143E  D7F7               	goto	l2057
  1859  001440  5007               	movf	strlen@a,w,c
  1860  001442  5C05               	subwf	strlen@s,w,c
  1861  001444  6E05               	movwf	?_strlen,c
  1862  001446  5008               	movf	strlen@a+1,w,c
  1863  001448  5806               	subwfb	strlen@s+1,w,c
  1864  00144A  6E06               	movwf	?_strlen+1,c
  1865  00144C  0012               	return		;funcret
  1866  00144E                     __end_of_strlen:
  1867                           	opt callstack 0
  1868                           
  1869 ;; *************** function _fputs *****************
  1870 ;; Defined at:
  1871 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputs.c"
  1872 ;; Parameters:    Size  Location     Type
  1873 ;;  s               2   13[COMRAM] PTR const unsigned char 
  1874 ;;		 -> dbuf(32), 
  1875 ;;  fp              2   15[COMRAM] PTR struct _IO_FILE
  1876 ;;		 -> sprintf@f(6), 
  1877 ;; Auto vars:     Size  Location     Type
  1878 ;;  i               2   18[COMRAM] int 
  1879 ;;  c               1   17[COMRAM] unsigned char 
  1880 ;; Return value:  Size  Location     Type
  1881 ;;                  2   13[COMRAM] int 
  1882 ;; Registers used:
  1883 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1884 ;; Tracked objects:
  1885 ;;		On entry : 0/0
  1886 ;;		On exit  : 0/0
  1887 ;;		Unchanged: 0/0
  1888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1889 ;;      Params:         4       0       0       0       0       0       0
  1890 ;;      Locals:         3       0       0       0       0       0       0
  1891 ;;      Temps:          0       0       0       0       0       0       0
  1892 ;;      Totals:         7       0       0       0       0       0       0
  1893 ;;Total ram usage:        7 bytes
  1894 ;; Hardware stack levels used:    1
  1895 ;; Hardware stack levels required when called:    3
  1896 ;; This function calls:
  1897 ;;		_fputc
  1898 ;; This function is called by:
  1899 ;;		_pad
  1900 ;; This function uses a non-reentrant model
  1901 ;;
  1902                           
  1903                           	psect	text7
  1904  00138A                     __ptext7:
  1905                           	opt callstack 0
  1906  00138A                     _fputs:
  1907                           	opt callstack 22
  1908                           
  1909                           ;incstack = 0
  1910  00138A  0E00               	movlw	0
  1911  00138C  6E14               	movwf	fputs@i+1,c
  1912  00138E  0E00               	movlw	0
  1913  001390  6E13               	movwf	fputs@i,c
  1914  001392  D00B               	goto	l2053
  1915  001394                     l2049:
  1916  001394  C012  F005         	movff	fputs@c,fputc@c
  1917  001398  6A06               	clrf	fputc@c+1,c
  1918  00139A  C010  F007         	movff	fputs@fp,fputc@fp
  1919  00139E  C011  F008         	movff	fputs@fp+1,fputc@fp+1
  1920  0013A2  EC31  F008         	call	_fputc	;wreg free
  1921  0013A6  4A13               	infsnz	fputs@i,f,c
  1922  0013A8  2A14               	incf	fputs@i+1,f,c
  1923  0013AA                     l2053:
  1924  0013AA  5013               	movf	fputs@i,w,c
  1925  0013AC  240E               	addwf	fputs@s,w,c
  1926  0013AE  6ED9               	movwf	fsr2l,c
  1927  0013B0  5014               	movf	fputs@i+1,w,c
  1928  0013B2  200F               	addwfc	fputs@s+1,w,c
  1929  0013B4  6EDA               	movwf	fsr2h,c
  1930  0013B6  50DF               	movf	indf2,w,c
  1931  0013B8  6E12               	movwf	fputs@c,c
  1932  0013BA  5012               	movf	fputs@c,w,c
  1933  0013BC  B4D8               	btfsc	status,2,c
  1934  0013BE  0012               	return	
  1935  0013C0  D7E9               	goto	l2049
  1936  0013C2                     __end_of_fputs:
  1937                           	opt callstack 0
  1938                           
  1939 ;; *************** function _fputc *****************
  1940 ;; Defined at:
  1941 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputc.c"
  1942 ;; Parameters:    Size  Location     Type
  1943 ;;  c               2    4[COMRAM] int 
  1944 ;;  fp              2    6[COMRAM] PTR struct _IO_FILE
  1945 ;;		 -> sprintf@f(6), 
  1946 ;; Auto vars:     Size  Location     Type
  1947 ;;		None
  1948 ;; Return value:  Size  Location     Type
  1949 ;;                  2    4[COMRAM] int 
  1950 ;; Registers used:
  1951 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1952 ;; Tracked objects:
  1953 ;;		On entry : 0/0
  1954 ;;		On exit  : 0/0
  1955 ;;		Unchanged: 0/0
  1956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1957 ;;      Params:         4       0       0       0       0       0       0
  1958 ;;      Locals:         0       0       0       0       0       0       0
  1959 ;;      Temps:          5       0       0       0       0       0       0
  1960 ;;      Totals:         9       0       0       0       0       0       0
  1961 ;;Total ram usage:        9 bytes
  1962 ;; Hardware stack levels used:    1
  1963 ;; Hardware stack levels required when called:    2
  1964 ;; This function calls:
  1965 ;;		_putch
  1966 ;; This function is called by:
  1967 ;;		_pad
  1968 ;;		_vfpfcnvrt
  1969 ;;		_fputs
  1970 ;; This function uses a non-reentrant model
  1971 ;;
  1972                           
  1973                           	psect	text8
  1974  001062                     __ptext8:
  1975                           	opt callstack 0
  1976  001062                     _fputc:
  1977                           	opt callstack 25
  1978                           
  1979                           ;incstack = 0
  1980  001062  5007               	movf	fputc@fp,w,c
  1981  001064  1008               	iorwf	fputc@fp+1,w,c
  1982  001066  B4D8               	btfsc	status,2,c
  1983  001068  D004               	goto	u1540
  1984  00106A  5007               	movf	fputc@fp,w,c
  1985  00106C  1008               	iorwf	fputc@fp+1,w,c
  1986  00106E  A4D8               	btfss	status,2,c
  1987  001070  D004               	goto	l2039
  1988  001072                     u1540:
  1989  001072  5005               	movf	fputc@c,w,c
  1990  001074  EC66  F00A         	call	_putch
  1991  001078  0012               	return	
  1992  00107A                     l2039:
  1993  00107A  EE20 F004          	lfsr	2,4
  1994  00107E  5007               	movf	fputc@fp,w,c
  1995  001080  26D9               	addwf	fsr2l,f,c
  1996  001082  5008               	movf	fputc@fp+1,w,c
  1997  001084  22DA               	addwfc	fsr2h,f,c
  1998  001086  50DE               	movf	postinc2,w,c
  1999  001088  10DE               	iorwf	postinc2,w,c
  2000  00108A  B4D8               	btfsc	status,2,c
  2001  00108C  D016               	goto	u1560
  2002  00108E  EE20 F004          	lfsr	2,4
  2003  001092  5007               	movf	fputc@fp,w,c
  2004  001094  26D9               	addwf	fsr2l,f,c
  2005  001096  5008               	movf	fputc@fp+1,w,c
  2006  001098  22DA               	addwfc	fsr2h,f,c
  2007  00109A  EE10 F002          	lfsr	1,2
  2008  00109E  5007               	movf	fputc@fp,w,c
  2009  0010A0  26E1               	addwf	fsr1l,f,c
  2010  0010A2  5008               	movf	fputc@fp+1,w,c
  2011  0010A4  22E2               	addwfc	fsr1h,f,c
  2012  0010A6  50DE               	movf	postinc2,w,c
  2013  0010A8  5CE6               	subwf	postinc1,w,c
  2014  0010AA  50E6               	movf	postinc1,w,c
  2015  0010AC  0A80               	xorlw	128
  2016  0010AE  6E0D               	movwf	(??_fputc+4)& (0+255),c
  2017  0010B0  50DE               	movf	postinc2,w,c
  2018  0010B2  0A80               	xorlw	128
  2019  0010B4  580D               	subwfb	(??_fputc+4)& (0+255),w,c
  2020  0010B6  B0D8               	btfsc	status,0,c
  2021  0010B8  0012               	return	
  2022  0010BA                     u1560:
  2023  0010BA  EE20 F002          	lfsr	2,2
  2024  0010BE  5007               	movf	fputc@fp,w,c
  2025  0010C0  26D9               	addwf	fsr2l,f,c
  2026  0010C2  5008               	movf	fputc@fp+1,w,c
  2027  0010C4  22DA               	addwfc	fsr2h,f,c
  2028  0010C6  CFDE F009          	movff	postinc2,??_fputc
  2029  0010CA  CFDD F00A          	movff	postdec2,??_fputc+1
  2030  0010CE  C007  FFD9         	movff	fputc@fp,fsr2l
  2031  0010D2  C008  FFDA         	movff	fputc@fp+1,fsr2h
  2032  0010D6  CFDE F00B          	movff	postinc2,??_fputc+2
  2033  0010DA  CFDD F00C          	movff	postdec2,??_fputc+3
  2034  0010DE  5009               	movf	??_fputc,w,c
  2035  0010E0  240B               	addwf	??_fputc+2,w,c
  2036  0010E2  6ED9               	movwf	fsr2l,c
  2037  0010E4  500A               	movf	??_fputc+1,w,c
  2038  0010E6  200C               	addwfc	??_fputc+3,w,c
  2039  0010E8  6EDA               	movwf	fsr2h,c
  2040  0010EA  C005  FFDF         	movff	fputc@c,indf2
  2041  0010EE  EE20 F002          	lfsr	2,2
  2042  0010F2  5007               	movf	fputc@fp,w,c
  2043  0010F4  26D9               	addwf	fsr2l,f,c
  2044  0010F6  5008               	movf	fputc@fp+1,w,c
  2045  0010F8  22DA               	addwfc	fsr2h,f,c
  2046  0010FA  2ADE               	incf	postinc2,f,c
  2047  0010FC  0E00               	movlw	0
  2048  0010FE  22DD               	addwfc	postdec2,f,c
  2049  001100  0012               	return		;funcret
  2050  001102                     __end_of_fputc:
  2051                           	opt callstack 0
  2052                           
  2053 ;; *************** function _putch *****************
  2054 ;; Defined at:
  2055 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\putch.c"
  2056 ;; Parameters:    Size  Location     Type
  2057 ;;  c               1    wreg     unsigned char 
  2058 ;; Auto vars:     Size  Location     Type
  2059 ;;  c               1    0[COMRAM] unsigned char 
  2060 ;; Return value:  Size  Location     Type
  2061 ;;                  1    wreg      void 
  2062 ;; Registers used:
  2063 ;;		wreg
  2064 ;; Tracked objects:
  2065 ;;		On entry : 0/0
  2066 ;;		On exit  : 0/0
  2067 ;;		Unchanged: 0/0
  2068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2069 ;;      Params:         0       0       0       0       0       0       0
  2070 ;;      Locals:         0       0       0       0       0       0       0
  2071 ;;      Temps:          0       0       0       0       0       0       0
  2072 ;;      Totals:         0       0       0       0       0       0       0
  2073 ;;Total ram usage:        0 bytes
  2074 ;; Hardware stack levels used:    1
  2075 ;; Hardware stack levels required when called:    1
  2076 ;; This function calls:
  2077 ;;		Nothing
  2078 ;; This function is called by:
  2079 ;;		_fputc
  2080 ;; This function uses a non-reentrant model
  2081 ;;
  2082                           
  2083                           	psect	text9
  2084  0014CC                     __ptext9:
  2085                           	opt callstack 0
  2086  0014CC                     _putch:
  2087                           	opt callstack 25
  2088                           
  2089                           ;incstack = 0
  2090  0014CC  0012               	return		;funcret
  2091  0014CE                     __end_of_putch:
  2092                           	opt callstack 0
  2093                           
  2094 ;; *************** function _abs *****************
  2095 ;; Defined at:
  2096 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\abs.c"
  2097 ;; Parameters:    Size  Location     Type
  2098 ;;  a               2   22[COMRAM] int 
  2099 ;; Auto vars:     Size  Location     Type
  2100 ;;		None
  2101 ;; Return value:  Size  Location     Type
  2102 ;;                  2   22[COMRAM] int 
  2103 ;; Registers used:
  2104 ;;		wreg, status,2, status,0
  2105 ;; Tracked objects:
  2106 ;;		On entry : 0/0
  2107 ;;		On exit  : 0/0
  2108 ;;		Unchanged: 0/0
  2109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2110 ;;      Params:         2       0       0       0       0       0       0
  2111 ;;      Locals:         0       0       0       0       0       0       0
  2112 ;;      Temps:          2       0       0       0       0       0       0
  2113 ;;      Totals:         4       0       0       0       0       0       0
  2114 ;;Total ram usage:        4 bytes
  2115 ;; Hardware stack levels used:    1
  2116 ;; Hardware stack levels required when called:    1
  2117 ;; This function calls:
  2118 ;;		Nothing
  2119 ;; This function is called by:
  2120 ;;		_dtoa
  2121 ;; This function uses a non-reentrant model
  2122 ;;
  2123                           
  2124                           	psect	text10
  2125  0013C2                     __ptext10:
  2126                           	opt callstack 0
  2127  0013C2                     _abs:
  2128                           	opt callstack 25
  2129                           
  2130                           ;incstack = 0
  2131  0013C2  BE18               	btfsc	abs@a+1,7,c
  2132  0013C4  D005               	goto	u1630
  2133  0013C6  5018               	movf	abs@a+1,w,c
  2134  0013C8  E110               	bnz	l863
  2135  0013CA  0417               	decf	abs@a,w,c
  2136  0013CC  B0D8               	btfsc	status,0,c
  2137  0013CE  D00D               	goto	l863
  2138  0013D0                     u1630:
  2139  0013D0  C017  F019         	movff	abs@a,??_abs
  2140  0013D4  C018  F01A         	movff	abs@a+1,??_abs+1
  2141  0013D8  1E19               	comf	??_abs,f,c
  2142  0013DA  1E1A               	comf	??_abs+1,f,c
  2143  0013DC  4A19               	infsnz	??_abs,f,c
  2144  0013DE  2A1A               	incf	??_abs+1,f,c
  2145  0013E0  C019  F017         	movff	??_abs,?_abs
  2146  0013E4  C01A  F018         	movff	??_abs+1,?_abs+1
  2147  0013E8  0012               	return	
  2148  0013EA                     l863:
  2149  0013EA  C017  F017         	movff	abs@a,?_abs
  2150  0013EE  C018  F018         	movff	abs@a+1,?_abs+1
  2151  0013F2  0012               	return		;funcret
  2152  0013F4                     __end_of_abs:
  2153                           	opt callstack 0
  2154                           
  2155 ;; *************** function ___aomod *****************
  2156 ;; Defined at:
  2157 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aomod.c"
  2158 ;; Parameters:    Size  Location     Type
  2159 ;;  dividend        8    4[COMRAM] long long 
  2160 ;;  divisor         8   12[COMRAM] long long 
  2161 ;; Auto vars:     Size  Location     Type
  2162 ;;  sign            1   21[COMRAM] unsigned char 
  2163 ;;  counter         1   20[COMRAM] unsigned char 
  2164 ;; Return value:  Size  Location     Type
  2165 ;;                  8    4[COMRAM] long long 
  2166 ;; Registers used:
  2167 ;;		wreg, status,2, status,0
  2168 ;; Tracked objects:
  2169 ;;		On entry : 0/0
  2170 ;;		On exit  : 0/0
  2171 ;;		Unchanged: 0/0
  2172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2173 ;;      Params:        16       0       0       0       0       0       0
  2174 ;;      Locals:         2       0       0       0       0       0       0
  2175 ;;      Temps:          0       0       0       0       0       0       0
  2176 ;;      Totals:        18       0       0       0       0       0       0
  2177 ;;Total ram usage:       18 bytes
  2178 ;; Hardware stack levels used:    1
  2179 ;; Hardware stack levels required when called:    1
  2180 ;; This function calls:
  2181 ;;		Nothing
  2182 ;; This function is called by:
  2183 ;;		_dtoa
  2184 ;; This function uses a non-reentrant model
  2185 ;;
  2186                           
  2187                           	psect	text11
  2188  000DBA                     __ptext11:
  2189                           	opt callstack 0
  2190  000DBA                     ___aomod:
  2191                           	opt callstack 25
  2192                           
  2193                           ;incstack = 0
  2194  000DBA  0E00               	movlw	0
  2195  000DBC  6E16               	movwf	___aomod@sign,c
  2196  000DBE  AE0C               	btfss	___aomod@dividend+7,7,c
  2197  000DC0  D012               	goto	l2153
  2198  000DC2  1E0C               	comf	___aomod@dividend+7,f,c
  2199  000DC4  1E0B               	comf	___aomod@dividend+6,f,c
  2200  000DC6  1E0A               	comf	___aomod@dividend+5,f,c
  2201  000DC8  1E09               	comf	___aomod@dividend+4,f,c
  2202  000DCA  1E08               	comf	___aomod@dividend+3,f,c
  2203  000DCC  1E07               	comf	___aomod@dividend+2,f,c
  2204  000DCE  1E06               	comf	___aomod@dividend+1,f,c
  2205  000DD0  6C05               	negf	___aomod@dividend,c
  2206  000DD2  0E00               	movlw	0
  2207  000DD4  2206               	addwfc	___aomod@dividend+1,f,c
  2208  000DD6  2207               	addwfc	___aomod@dividend+2,f,c
  2209  000DD8  2208               	addwfc	___aomod@dividend+3,f,c
  2210  000DDA  2209               	addwfc	___aomod@dividend+4,f,c
  2211  000DDC  220A               	addwfc	___aomod@dividend+5,f,c
  2212  000DDE  220B               	addwfc	___aomod@dividend+6,f,c
  2213  000DE0  220C               	addwfc	___aomod@dividend+7,f,c
  2214  000DE2  0E01               	movlw	1
  2215  000DE4  6E16               	movwf	___aomod@sign,c
  2216  000DE6                     l2153:
  2217  000DE6  AE14               	btfss	___aomod@divisor+7,7,c
  2218  000DE8  D010               	goto	l2157
  2219  000DEA  1E14               	comf	___aomod@divisor+7,f,c
  2220  000DEC  1E13               	comf	___aomod@divisor+6,f,c
  2221  000DEE  1E12               	comf	___aomod@divisor+5,f,c
  2222  000DF0  1E11               	comf	___aomod@divisor+4,f,c
  2223  000DF2  1E10               	comf	___aomod@divisor+3,f,c
  2224  000DF4  1E0F               	comf	___aomod@divisor+2,f,c
  2225  000DF6  1E0E               	comf	___aomod@divisor+1,f,c
  2226  000DF8  6C0D               	negf	___aomod@divisor,c
  2227  000DFA  0E00               	movlw	0
  2228  000DFC  220E               	addwfc	___aomod@divisor+1,f,c
  2229  000DFE  220F               	addwfc	___aomod@divisor+2,f,c
  2230  000E00  2210               	addwfc	___aomod@divisor+3,f,c
  2231  000E02  2211               	addwfc	___aomod@divisor+4,f,c
  2232  000E04  2212               	addwfc	___aomod@divisor+5,f,c
  2233  000E06  2213               	addwfc	___aomod@divisor+6,f,c
  2234  000E08  2214               	addwfc	___aomod@divisor+7,f,c
  2235  000E0A                     l2157:
  2236  000E0A  500D               	movf	___aomod@divisor,w,c
  2237  000E0C  100E               	iorwf	___aomod@divisor+1,w,c
  2238  000E0E  100F               	iorwf	___aomod@divisor+2,w,c
  2239  000E10  1010               	iorwf	___aomod@divisor+3,w,c
  2240  000E12  1011               	iorwf	___aomod@divisor+4,w,c
  2241  000E14  1012               	iorwf	___aomod@divisor+5,w,c
  2242  000E16  1013               	iorwf	___aomod@divisor+6,w,c
  2243  000E18  1014               	iorwf	___aomod@divisor+7,w,c
  2244  000E1A  B4D8               	btfsc	status,2,c
  2245  000E1C  D03C               	goto	l2173
  2246  000E1E  0E01               	movlw	1
  2247  000E20  6E15               	movwf	___aomod@counter,c
  2248  000E22  D00A               	goto	l2163
  2249  000E24                     l2161:
  2250  000E24  90D8               	bcf	status,0,c
  2251  000E26  360D               	rlcf	___aomod@divisor,f,c
  2252  000E28  360E               	rlcf	___aomod@divisor+1,f,c
  2253  000E2A  360F               	rlcf	___aomod@divisor+2,f,c
  2254  000E2C  3610               	rlcf	___aomod@divisor+3,f,c
  2255  000E2E  3611               	rlcf	___aomod@divisor+4,f,c
  2256  000E30  3612               	rlcf	___aomod@divisor+5,f,c
  2257  000E32  3613               	rlcf	___aomod@divisor+6,f,c
  2258  000E34  3614               	rlcf	___aomod@divisor+7,f,c
  2259  000E36  2A15               	incf	___aomod@counter,f,c
  2260  000E38                     l2163:
  2261  000E38  AE14               	btfss	___aomod@divisor+7,7,c
  2262  000E3A  D7F4               	goto	l2161
  2263  000E3C                     u1760:
  2264  000E3C  500D               	movf	___aomod@divisor,w,c
  2265  000E3E  5C05               	subwf	___aomod@dividend,w,c
  2266  000E40  500E               	movf	___aomod@divisor+1,w,c
  2267  000E42  5806               	subwfb	___aomod@dividend+1,w,c
  2268  000E44  500F               	movf	___aomod@divisor+2,w,c
  2269  000E46  5807               	subwfb	___aomod@dividend+2,w,c
  2270  000E48  5010               	movf	___aomod@divisor+3,w,c
  2271  000E4A  5808               	subwfb	___aomod@dividend+3,w,c
  2272  000E4C  5011               	movf	___aomod@divisor+4,w,c
  2273  000E4E  5809               	subwfb	___aomod@dividend+4,w,c
  2274  000E50  5012               	movf	___aomod@divisor+5,w,c
  2275  000E52  580A               	subwfb	___aomod@dividend+5,w,c
  2276  000E54  5013               	movf	___aomod@divisor+6,w,c
  2277  000E56  580B               	subwfb	___aomod@dividend+6,w,c
  2278  000E58  5014               	movf	___aomod@divisor+7,w,c
  2279  000E5A  580C               	subwfb	___aomod@dividend+7,w,c
  2280  000E5C  A0D8               	btfss	status,0,c
  2281  000E5E  D010               	goto	l2169
  2282  000E60  500D               	movf	___aomod@divisor,w,c
  2283  000E62  5E05               	subwf	___aomod@dividend,f,c
  2284  000E64  500E               	movf	___aomod@divisor+1,w,c
  2285  000E66  5A06               	subwfb	___aomod@dividend+1,f,c
  2286  000E68  500F               	movf	___aomod@divisor+2,w,c
  2287  000E6A  5A07               	subwfb	___aomod@dividend+2,f,c
  2288  000E6C  5010               	movf	___aomod@divisor+3,w,c
  2289  000E6E  5A08               	subwfb	___aomod@dividend+3,f,c
  2290  000E70  5011               	movf	___aomod@divisor+4,w,c
  2291  000E72  5A09               	subwfb	___aomod@dividend+4,f,c
  2292  000E74  5012               	movf	___aomod@divisor+5,w,c
  2293  000E76  5A0A               	subwfb	___aomod@dividend+5,f,c
  2294  000E78  5013               	movf	___aomod@divisor+6,w,c
  2295  000E7A  5A0B               	subwfb	___aomod@dividend+6,f,c
  2296  000E7C  5014               	movf	___aomod@divisor+7,w,c
  2297  000E7E  5A0C               	subwfb	___aomod@dividend+7,f,c
  2298  000E80                     l2169:
  2299  000E80  90D8               	bcf	status,0,c
  2300  000E82  3214               	rrcf	___aomod@divisor+7,f,c
  2301  000E84  3213               	rrcf	___aomod@divisor+6,f,c
  2302  000E86  3212               	rrcf	___aomod@divisor+5,f,c
  2303  000E88  3211               	rrcf	___aomod@divisor+4,f,c
  2304  000E8A  3210               	rrcf	___aomod@divisor+3,f,c
  2305  000E8C  320F               	rrcf	___aomod@divisor+2,f,c
  2306  000E8E  320E               	rrcf	___aomod@divisor+1,f,c
  2307  000E90  320D               	rrcf	___aomod@divisor,f,c
  2308  000E92  2E15               	decfsz	___aomod@counter,f,c
  2309  000E94  D7D3               	goto	u1760
  2310  000E96                     l2173:
  2311  000E96  5016               	movf	___aomod@sign,w,c
  2312  000E98  B4D8               	btfsc	status,2,c
  2313  000E9A  D010               	goto	l2177
  2314  000E9C  1E0C               	comf	___aomod@dividend+7,f,c
  2315  000E9E  1E0B               	comf	___aomod@dividend+6,f,c
  2316  000EA0  1E0A               	comf	___aomod@dividend+5,f,c
  2317  000EA2  1E09               	comf	___aomod@dividend+4,f,c
  2318  000EA4  1E08               	comf	___aomod@dividend+3,f,c
  2319  000EA6  1E07               	comf	___aomod@dividend+2,f,c
  2320  000EA8  1E06               	comf	___aomod@dividend+1,f,c
  2321  000EAA  6C05               	negf	___aomod@dividend,c
  2322  000EAC  0E00               	movlw	0
  2323  000EAE  2206               	addwfc	___aomod@dividend+1,f,c
  2324  000EB0  2207               	addwfc	___aomod@dividend+2,f,c
  2325  000EB2  2208               	addwfc	___aomod@dividend+3,f,c
  2326  000EB4  2209               	addwfc	___aomod@dividend+4,f,c
  2327  000EB6  220A               	addwfc	___aomod@dividend+5,f,c
  2328  000EB8  220B               	addwfc	___aomod@dividend+6,f,c
  2329  000EBA  220C               	addwfc	___aomod@dividend+7,f,c
  2330  000EBC                     l2177:
  2331  000EBC  C005  F005         	movff	___aomod@dividend,?___aomod
  2332  000EC0  C006  F006         	movff	___aomod@dividend+1,?___aomod+1
  2333  000EC4  C007  F007         	movff	___aomod@dividend+2,?___aomod+2
  2334  000EC8  C008  F008         	movff	___aomod@dividend+3,?___aomod+3
  2335  000ECC  C009  F009         	movff	___aomod@dividend+4,?___aomod+4
  2336  000ED0  C00A  F00A         	movff	___aomod@dividend+5,?___aomod+5
  2337  000ED4  C00B  F00B         	movff	___aomod@dividend+6,?___aomod+6
  2338  000ED8  C00C  F00C         	movff	___aomod@dividend+7,?___aomod+7
  2339  000EDC  0012               	return		;funcret
  2340  000EDE                     __end_of___aomod:
  2341                           	opt callstack 0
  2342                           
  2343 ;; *************** function ___aodiv *****************
  2344 ;; Defined at:
  2345 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aodiv.c"
  2346 ;; Parameters:    Size  Location     Type
  2347 ;;  dividend        8    4[COMRAM] long long 
  2348 ;;  divisor         8   12[COMRAM] long long 
  2349 ;; Auto vars:     Size  Location     Type
  2350 ;;  quotient        8   22[COMRAM] long long 
  2351 ;;  sign            1   21[COMRAM] unsigned char 
  2352 ;;  counter         1   20[COMRAM] unsigned char 
  2353 ;; Return value:  Size  Location     Type
  2354 ;;                  8    4[COMRAM] long long 
  2355 ;; Registers used:
  2356 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2357 ;; Tracked objects:
  2358 ;;		On entry : 0/0
  2359 ;;		On exit  : 0/0
  2360 ;;		Unchanged: 0/0
  2361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2362 ;;      Params:        16       0       0       0       0       0       0
  2363 ;;      Locals:        10       0       0       0       0       0       0
  2364 ;;      Temps:          0       0       0       0       0       0       0
  2365 ;;      Totals:        26       0       0       0       0       0       0
  2366 ;;Total ram usage:       26 bytes
  2367 ;; Hardware stack levels used:    1
  2368 ;; Hardware stack levels required when called:    1
  2369 ;; This function calls:
  2370 ;;		Nothing
  2371 ;; This function is called by:
  2372 ;;		_dtoa
  2373 ;; This function uses a non-reentrant model
  2374 ;;
  2375                           
  2376                           	psect	text12
  2377  000B32                     __ptext12:
  2378                           	opt callstack 0
  2379  000B32                     ___aodiv:
  2380                           	opt callstack 25
  2381                           
  2382                           ;incstack = 0
  2383  000B32  0E00               	movlw	0
  2384  000B34  6E16               	movwf	___aodiv@sign,c
  2385  000B36  AE14               	btfss	___aodiv@divisor+7,7,c
  2386  000B38  D012               	goto	l2109
  2387  000B3A  1E14               	comf	___aodiv@divisor+7,f,c
  2388  000B3C  1E13               	comf	___aodiv@divisor+6,f,c
  2389  000B3E  1E12               	comf	___aodiv@divisor+5,f,c
  2390  000B40  1E11               	comf	___aodiv@divisor+4,f,c
  2391  000B42  1E10               	comf	___aodiv@divisor+3,f,c
  2392  000B44  1E0F               	comf	___aodiv@divisor+2,f,c
  2393  000B46  1E0E               	comf	___aodiv@divisor+1,f,c
  2394  000B48  6C0D               	negf	___aodiv@divisor,c
  2395  000B4A  0E00               	movlw	0
  2396  000B4C  220E               	addwfc	___aodiv@divisor+1,f,c
  2397  000B4E  220F               	addwfc	___aodiv@divisor+2,f,c
  2398  000B50  2210               	addwfc	___aodiv@divisor+3,f,c
  2399  000B52  2211               	addwfc	___aodiv@divisor+4,f,c
  2400  000B54  2212               	addwfc	___aodiv@divisor+5,f,c
  2401  000B56  2213               	addwfc	___aodiv@divisor+6,f,c
  2402  000B58  2214               	addwfc	___aodiv@divisor+7,f,c
  2403  000B5A  0E01               	movlw	1
  2404  000B5C  6E16               	movwf	___aodiv@sign,c
  2405  000B5E                     l2109:
  2406  000B5E  AE0C               	btfss	___aodiv@dividend+7,7,c
  2407  000B60  D012               	goto	l2115
  2408  000B62  1E0C               	comf	___aodiv@dividend+7,f,c
  2409  000B64  1E0B               	comf	___aodiv@dividend+6,f,c
  2410  000B66  1E0A               	comf	___aodiv@dividend+5,f,c
  2411  000B68  1E09               	comf	___aodiv@dividend+4,f,c
  2412  000B6A  1E08               	comf	___aodiv@dividend+3,f,c
  2413  000B6C  1E07               	comf	___aodiv@dividend+2,f,c
  2414  000B6E  1E06               	comf	___aodiv@dividend+1,f,c
  2415  000B70  6C05               	negf	___aodiv@dividend,c
  2416  000B72  0E00               	movlw	0
  2417  000B74  2206               	addwfc	___aodiv@dividend+1,f,c
  2418  000B76  2207               	addwfc	___aodiv@dividend+2,f,c
  2419  000B78  2208               	addwfc	___aodiv@dividend+3,f,c
  2420  000B7A  2209               	addwfc	___aodiv@dividend+4,f,c
  2421  000B7C  220A               	addwfc	___aodiv@dividend+5,f,c
  2422  000B7E  220B               	addwfc	___aodiv@dividend+6,f,c
  2423  000B80  220C               	addwfc	___aodiv@dividend+7,f,c
  2424  000B82  0E01               	movlw	1
  2425  000B84  1A16               	xorwf	___aodiv@sign,f,c
  2426  000B86                     l2115:
  2427  000B86  EE20  F017         	lfsr	2,___aodiv@quotient
  2428  000B8A  0E07               	movlw	7
  2429  000B8C                     u1681:
  2430  000B8C  6ADE               	clrf	postinc2,c
  2431  000B8E  06E8               	decf	wreg,f,c
  2432  000B90  E2FD               	bc	u1681
  2433  000B92  500D               	movf	___aodiv@divisor,w,c
  2434  000B94  100E               	iorwf	___aodiv@divisor+1,w,c
  2435  000B96  100F               	iorwf	___aodiv@divisor+2,w,c
  2436  000B98  1010               	iorwf	___aodiv@divisor+3,w,c
  2437  000B9A  1011               	iorwf	___aodiv@divisor+4,w,c
  2438  000B9C  1012               	iorwf	___aodiv@divisor+5,w,c
  2439  000B9E  1013               	iorwf	___aodiv@divisor+6,w,c
  2440  000BA0  1014               	iorwf	___aodiv@divisor+7,w,c
  2441  000BA2  B4D8               	btfsc	status,2,c
  2442  000BA4  D046               	goto	l2137
  2443  000BA6  0E01               	movlw	1
  2444  000BA8  6E15               	movwf	___aodiv@counter,c
  2445  000BAA  D00A               	goto	l2123
  2446  000BAC                     l2121:
  2447  000BAC  90D8               	bcf	status,0,c
  2448  000BAE  360D               	rlcf	___aodiv@divisor,f,c
  2449  000BB0  360E               	rlcf	___aodiv@divisor+1,f,c
  2450  000BB2  360F               	rlcf	___aodiv@divisor+2,f,c
  2451  000BB4  3610               	rlcf	___aodiv@divisor+3,f,c
  2452  000BB6  3611               	rlcf	___aodiv@divisor+4,f,c
  2453  000BB8  3612               	rlcf	___aodiv@divisor+5,f,c
  2454  000BBA  3613               	rlcf	___aodiv@divisor+6,f,c
  2455  000BBC  3614               	rlcf	___aodiv@divisor+7,f,c
  2456  000BBE  2A15               	incf	___aodiv@counter,f,c
  2457  000BC0                     l2123:
  2458  000BC0  AE14               	btfss	___aodiv@divisor+7,7,c
  2459  000BC2  D7F4               	goto	l2121
  2460  000BC4                     u1700:
  2461  000BC4  90D8               	bcf	status,0,c
  2462  000BC6  3617               	rlcf	___aodiv@quotient,f,c
  2463  000BC8  3618               	rlcf	___aodiv@quotient+1,f,c
  2464  000BCA  3619               	rlcf	___aodiv@quotient+2,f,c
  2465  000BCC  361A               	rlcf	___aodiv@quotient+3,f,c
  2466  000BCE  361B               	rlcf	___aodiv@quotient+4,f,c
  2467  000BD0  361C               	rlcf	___aodiv@quotient+5,f,c
  2468  000BD2  361D               	rlcf	___aodiv@quotient+6,f,c
  2469  000BD4  361E               	rlcf	___aodiv@quotient+7,f,c
  2470  000BD6  500D               	movf	___aodiv@divisor,w,c
  2471  000BD8  5C05               	subwf	___aodiv@dividend,w,c
  2472  000BDA  500E               	movf	___aodiv@divisor+1,w,c
  2473  000BDC  5806               	subwfb	___aodiv@dividend+1,w,c
  2474  000BDE  500F               	movf	___aodiv@divisor+2,w,c
  2475  000BE0  5807               	subwfb	___aodiv@dividend+2,w,c
  2476  000BE2  5010               	movf	___aodiv@divisor+3,w,c
  2477  000BE4  5808               	subwfb	___aodiv@dividend+3,w,c
  2478  000BE6  5011               	movf	___aodiv@divisor+4,w,c
  2479  000BE8  5809               	subwfb	___aodiv@dividend+4,w,c
  2480  000BEA  5012               	movf	___aodiv@divisor+5,w,c
  2481  000BEC  580A               	subwfb	___aodiv@dividend+5,w,c
  2482  000BEE  5013               	movf	___aodiv@divisor+6,w,c
  2483  000BF0  580B               	subwfb	___aodiv@dividend+6,w,c
  2484  000BF2  5014               	movf	___aodiv@divisor+7,w,c
  2485  000BF4  580C               	subwfb	___aodiv@dividend+7,w,c
  2486  000BF6  A0D8               	btfss	status,0,c
  2487  000BF8  D011               	goto	l2133
  2488  000BFA  500D               	movf	___aodiv@divisor,w,c
  2489  000BFC  5E05               	subwf	___aodiv@dividend,f,c
  2490  000BFE  500E               	movf	___aodiv@divisor+1,w,c
  2491  000C00  5A06               	subwfb	___aodiv@dividend+1,f,c
  2492  000C02  500F               	movf	___aodiv@divisor+2,w,c
  2493  000C04  5A07               	subwfb	___aodiv@dividend+2,f,c
  2494  000C06  5010               	movf	___aodiv@divisor+3,w,c
  2495  000C08  5A08               	subwfb	___aodiv@dividend+3,f,c
  2496  000C0A  5011               	movf	___aodiv@divisor+4,w,c
  2497  000C0C  5A09               	subwfb	___aodiv@dividend+4,f,c
  2498  000C0E  5012               	movf	___aodiv@divisor+5,w,c
  2499  000C10  5A0A               	subwfb	___aodiv@dividend+5,f,c
  2500  000C12  5013               	movf	___aodiv@divisor+6,w,c
  2501  000C14  5A0B               	subwfb	___aodiv@dividend+6,f,c
  2502  000C16  5014               	movf	___aodiv@divisor+7,w,c
  2503  000C18  5A0C               	subwfb	___aodiv@dividend+7,f,c
  2504  000C1A  8017               	bsf	___aodiv@quotient,0,c
  2505  000C1C                     l2133:
  2506  000C1C  90D8               	bcf	status,0,c
  2507  000C1E  3214               	rrcf	___aodiv@divisor+7,f,c
  2508  000C20  3213               	rrcf	___aodiv@divisor+6,f,c
  2509  000C22  3212               	rrcf	___aodiv@divisor+5,f,c
  2510  000C24  3211               	rrcf	___aodiv@divisor+4,f,c
  2511  000C26  3210               	rrcf	___aodiv@divisor+3,f,c
  2512  000C28  320F               	rrcf	___aodiv@divisor+2,f,c
  2513  000C2A  320E               	rrcf	___aodiv@divisor+1,f,c
  2514  000C2C  320D               	rrcf	___aodiv@divisor,f,c
  2515  000C2E  2E15               	decfsz	___aodiv@counter,f,c
  2516  000C30  D7C9               	goto	u1700
  2517  000C32                     l2137:
  2518  000C32  5016               	movf	___aodiv@sign,w,c
  2519  000C34  B4D8               	btfsc	status,2,c
  2520  000C36  D010               	goto	l2141
  2521  000C38  1E1E               	comf	___aodiv@quotient+7,f,c
  2522  000C3A  1E1D               	comf	___aodiv@quotient+6,f,c
  2523  000C3C  1E1C               	comf	___aodiv@quotient+5,f,c
  2524  000C3E  1E1B               	comf	___aodiv@quotient+4,f,c
  2525  000C40  1E1A               	comf	___aodiv@quotient+3,f,c
  2526  000C42  1E19               	comf	___aodiv@quotient+2,f,c
  2527  000C44  1E18               	comf	___aodiv@quotient+1,f,c
  2528  000C46  6C17               	negf	___aodiv@quotient,c
  2529  000C48  0E00               	movlw	0
  2530  000C4A  2218               	addwfc	___aodiv@quotient+1,f,c
  2531  000C4C  2219               	addwfc	___aodiv@quotient+2,f,c
  2532  000C4E  221A               	addwfc	___aodiv@quotient+3,f,c
  2533  000C50  221B               	addwfc	___aodiv@quotient+4,f,c
  2534  000C52  221C               	addwfc	___aodiv@quotient+5,f,c
  2535  000C54  221D               	addwfc	___aodiv@quotient+6,f,c
  2536  000C56  221E               	addwfc	___aodiv@quotient+7,f,c
  2537  000C58                     l2141:
  2538  000C58  C017  F005         	movff	___aodiv@quotient,?___aodiv
  2539  000C5C  C018  F006         	movff	___aodiv@quotient+1,?___aodiv+1
  2540  000C60  C019  F007         	movff	___aodiv@quotient+2,?___aodiv+2
  2541  000C64  C01A  F008         	movff	___aodiv@quotient+3,?___aodiv+3
  2542  000C68  C01B  F009         	movff	___aodiv@quotient+4,?___aodiv+4
  2543  000C6C  C01C  F00A         	movff	___aodiv@quotient+5,?___aodiv+5
  2544  000C70  C01D  F00B         	movff	___aodiv@quotient+6,?___aodiv+6
  2545  000C74  C01E  F00C         	movff	___aodiv@quotient+7,?___aodiv+7
  2546  000C78  0012               	return		;funcret
  2547  000C7A                     __end_of___aodiv:
  2548                           	opt callstack 0
  2549                           
  2550 ;; *************** function _atoi *****************
  2551 ;; Defined at:
  2552 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\atoi.c"
  2553 ;; Parameters:    Size  Location     Type
  2554 ;;  s               2   11[COMRAM] PTR const unsigned char 
  2555 ;;		 -> STR_3(5), 
  2556 ;; Auto vars:     Size  Location     Type
  2557 ;;  n               2   24[COMRAM] int 
  2558 ;;  neg             2   17[COMRAM] int 
  2559 ;; Return value:  Size  Location     Type
  2560 ;;                  2   11[COMRAM] int 
  2561 ;; Registers used:
  2562 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2563 ;; Tracked objects:
  2564 ;;		On entry : 0/0
  2565 ;;		On exit  : 0/0
  2566 ;;		Unchanged: 0/0
  2567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2568 ;;      Params:         2       0       0       0       0       0       0
  2569 ;;      Locals:         9       0       0       0       0       0       0
  2570 ;;      Temps:          4       0       0       0       0       0       0
  2571 ;;      Totals:        15       0       0       0       0       0       0
  2572 ;;Total ram usage:       15 bytes
  2573 ;; Hardware stack levels used:    1
  2574 ;; Hardware stack levels required when called:    2
  2575 ;; This function calls:
  2576 ;;		___wmul
  2577 ;;		_isdigit
  2578 ;;		_isspace
  2579 ;; This function is called by:
  2580 ;;		_vfpfcnvrt
  2581 ;; This function uses a non-reentrant model
  2582 ;;
  2583                           
  2584                           	psect	text13
  2585  000C7A                     __ptext13:
  2586                           	opt callstack 0
  2587  000C7A                     _atoi:
  2588                           	opt callstack 25
  2589                           
  2590                           ;incstack = 0
  2591  000C7A  0E00               	movlw	0
  2592  000C7C  6E1A               	movwf	atoi@n+1,c
  2593  000C7E  0E00               	movlw	0
  2594  000C80  6E19               	movwf	atoi@n,c
  2595  000C82  0E00               	movlw	0
  2596  000C84  6E13               	movwf	atoi@neg+1,c
  2597  000C86  0E00               	movlw	0
  2598  000C88  6E12               	movwf	atoi@neg,c
  2599  000C8A  D002               	goto	l2259
  2600  000C8C                     l2257:
  2601  000C8C  4A0C               	infsnz	atoi@s,f,c
  2602  000C8E  2A0D               	incf	atoi@s+1,f,c
  2603  000C90                     l2259:
  2604  000C90  0E01               	movlw	1
  2605  000C92  6E18               	movwf	_atoi$956,c
  2606  000C94  C00C  FFF6         	movff	atoi@s,tblptrl
  2607  000C98  C00D  FFF7         	movff	atoi@s+1,tblptrh
  2608  000C9C                     	if	0	;tblptru may be non-zero
  2609  000C9C                     	endif
  2610  000C9C                     	if	0	;tblptru may be non-zero
  2611  000C9C                     	endif
  2612  000C9C  0008               	tblrd		*
  2613  000C9E  50F5               	movf	tablat,w,c
  2614  000CA0  0A20               	xorlw	32
  2615  000CA2  B4D8               	btfsc	status,2,c
  2616  000CA4  D018               	goto	l2267
  2617  000CA6  0EF7               	movlw	247
  2618  000CA8  6E0E               	movwf	??_atoi& (0+255),c
  2619  000CAA  0EFF               	movlw	255
  2620  000CAC  6E0F               	movwf	(??_atoi+1)& (0+255),c
  2621  000CAE  C00C  FFF6         	movff	atoi@s,tblptrl
  2622  000CB2  C00D  FFF7         	movff	atoi@s+1,tblptrh
  2623  000CB6                     	if	0	;tblptru may be non-zero
  2624  000CB6                     	endif
  2625  000CB6                     	if	0	;tblptru may be non-zero
  2626  000CB6                     	endif
  2627  000CB6  0008               	tblrd		*
  2628  000CB8  50F5               	movf	tablat,w,c
  2629  000CBA  6E10               	movwf	(??_atoi+2)& (0+255),c
  2630  000CBC  6A11               	clrf	(??_atoi+3)& (0+255),c
  2631  000CBE  500E               	movf	??_atoi,w,c
  2632  000CC0  2610               	addwf	??_atoi+2,f,c
  2633  000CC2  500F               	movf	??_atoi+1,w,c
  2634  000CC4  2211               	addwfc	??_atoi+3,f,c
  2635  000CC6  5011               	movf	??_atoi+3,w,c
  2636  000CC8  E104               	bnz	u1970
  2637  000CCA  0E05               	movlw	5
  2638  000CCC  5C10               	subwf	??_atoi+2,w,c
  2639  000CCE  A0D8               	btfss	status,0,c
  2640  000CD0  D002               	goto	l2267
  2641  000CD2                     u1970:
  2642  000CD2  0E00               	movlw	0
  2643  000CD4  6E18               	movwf	_atoi$956,c
  2644  000CD6                     l2267:
  2645  000CD6  C018  F014         	movff	_atoi$956,_atoi$955
  2646  000CDA  6A15               	clrf	_atoi$955+1,c
  2647  000CDC  5014               	movf	_atoi$955,w,c
  2648  000CDE  1015               	iorwf	_atoi$955+1,w,c
  2649  000CE0  B4D8               	btfsc	status,2,c
  2650  000CE2  D008               	goto	l2277
  2651  000CE4  D7D3               	goto	l2257
  2652  000CE6                     l2273:
  2653  000CE6  0E00               	movlw	0
  2654  000CE8  6E13               	movwf	atoi@neg+1,c
  2655  000CEA  0E01               	movlw	1
  2656  000CEC  6E12               	movwf	atoi@neg,c
  2657  000CEE                     l2275:
  2658  000CEE  4A0C               	infsnz	atoi@s,f,c
  2659  000CF0  2A0D               	incf	atoi@s+1,f,c
  2660  000CF2  D02E               	goto	l2283
  2661  000CF4                     l2277:
  2662  000CF4  C00C  FFF6         	movff	atoi@s,tblptrl
  2663  000CF8  C00D  FFF7         	movff	atoi@s+1,tblptrh
  2664  000CFC                     	if	0	;tblptru may be non-zero
  2665  000CFC                     	endif
  2666  000CFC                     	if	0	;tblptru may be non-zero
  2667  000CFC                     	endif
  2668  000CFC  0008               	tblrd		*
  2669  000CFE  50F5               	movf	tablat,w,c
  2670  000D00  6E0E               	movwf	??_atoi& (0+255),c
  2671  000D02  6A0F               	clrf	(??_atoi+1)& (0+255),c
  2672                           
  2673                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2674                           ; Switch size 1, requested type "simple"
  2675                           ; Number of cases is 1, Range of values is 0 to 0
  2676                           ; switch strategies available:
  2677                           ; Name         Instructions Cycles
  2678                           ; simple_byte            4     3 (average)
  2679                           ;	Chosen strategy is simple_byte
  2680  000D04  500F               	movf	??_atoi+1,w,c
  2681  000D06  0A00               	xorlw	0	; case 0
  2682  000D08  A4D8               	btfss	status,2,c
  2683  000D0A  D022               	goto	l2283
  2684                           
  2685                           ; Switch size 1, requested type "simple"
  2686                           ; Number of cases is 2, Range of values is 43 to 45
  2687                           ; switch strategies available:
  2688                           ; Name         Instructions Cycles
  2689                           ; simple_byte            7     4 (average)
  2690                           ;	Chosen strategy is simple_byte
  2691  000D0C  500E               	movf	??_atoi,w,c
  2692  000D0E  0A2B               	xorlw	43	; case 43
  2693  000D10  B4D8               	btfsc	status,2,c
  2694  000D12  D7ED               	goto	l2275
  2695  000D14  0A06               	xorlw	6	; case 45
  2696  000D16  B4D8               	btfsc	status,2,c
  2697  000D18  D7E6               	goto	l2273
  2698  000D1A  D01A               	goto	l2283
  2699  000D1C                     l2279:
  2700  000D1C  C019  F005         	movff	atoi@n,___wmul@multiplier
  2701  000D20  C01A  F006         	movff	atoi@n+1,___wmul@multiplier+1
  2702  000D24  0E00               	movlw	0
  2703  000D26  6E08               	movwf	___wmul@multiplicand+1,c
  2704  000D28  0E0A               	movlw	10
  2705  000D2A  6E07               	movwf	___wmul@multiplicand,c
  2706  000D2C  EC3A  F00A         	call	___wmul	;wreg free
  2707  000D30  C00C  FFF6         	movff	atoi@s,tblptrl
  2708  000D34  C00D  FFF7         	movff	atoi@s+1,tblptrh
  2709  000D38                     	if	0	;tblptru may be non-zero
  2710  000D38                     	endif
  2711  000D38                     	if	0	;tblptru may be non-zero
  2712  000D38                     	endif
  2713  000D38  0008               	tblrd		*
  2714  000D3A  50F5               	movf	tablat,w,c
  2715  000D3C  5E05               	subwf	?___wmul,f,c
  2716  000D3E  0E00               	movlw	0
  2717  000D40  5A06               	subwfb	?___wmul+1,f,c
  2718  000D42  0E30               	movlw	48
  2719  000D44  2405               	addwf	?___wmul,w,c
  2720  000D46  6E19               	movwf	atoi@n,c
  2721  000D48  0E00               	movlw	0
  2722  000D4A  2006               	addwfc	?___wmul+1,w,c
  2723  000D4C  6E1A               	movwf	atoi@n+1,c
  2724  000D4E  D7CF               	goto	l2275
  2725  000D50                     l2283:
  2726  000D50  0ED0               	movlw	208
  2727  000D52  6E0E               	movwf	??_atoi& (0+255),c
  2728  000D54  0EFF               	movlw	255
  2729  000D56  6E0F               	movwf	(??_atoi+1)& (0+255),c
  2730  000D58  C00C  FFF6         	movff	atoi@s,tblptrl
  2731  000D5C  C00D  FFF7         	movff	atoi@s+1,tblptrh
  2732  000D60                     	if	0	;tblptru may be non-zero
  2733  000D60                     	endif
  2734  000D60                     	if	0	;tblptru may be non-zero
  2735  000D60                     	endif
  2736  000D60  0008               	tblrd		*
  2737  000D62  50F5               	movf	tablat,w,c
  2738  000D64  6E10               	movwf	(??_atoi+2)& (0+255),c
  2739  000D66  6A11               	clrf	(??_atoi+3)& (0+255),c
  2740  000D68  500E               	movf	??_atoi,w,c
  2741  000D6A  2610               	addwf	??_atoi+2,f,c
  2742  000D6C  500F               	movf	??_atoi+1,w,c
  2743  000D6E  2211               	addwfc	??_atoi+3,f,c
  2744  000D70  5011               	movf	??_atoi+3,w,c
  2745  000D72  E106               	bnz	u1990
  2746  000D74  0E0A               	movlw	10
  2747  000D76  5C10               	subwf	??_atoi+2,w,c
  2748  000D78  B0D8               	btfsc	status,0,c
  2749  000D7A  D002               	goto	u1990
  2750  000D7C  0E01               	movlw	1
  2751  000D7E  D001               	goto	u2000
  2752  000D80                     u1990:
  2753  000D80  0E00               	movlw	0
  2754  000D82                     u2000:
  2755  000D82  6E16               	movwf	_atoi$957,c
  2756  000D84  6A17               	clrf	_atoi$957+1,c
  2757  000D86  5016               	movf	_atoi$957,w,c
  2758  000D88  1017               	iorwf	_atoi$957+1,w,c
  2759  000D8A  A4D8               	btfss	status,2,c
  2760  000D8C  D7C7               	goto	l2279
  2761  000D8E  5012               	movf	atoi@neg,w,c
  2762  000D90  1013               	iorwf	atoi@neg+1,w,c
  2763  000D92  A4D8               	btfss	status,2,c
  2764  000D94  D00D               	goto	l894
  2765  000D96  C019  F00E         	movff	atoi@n,??_atoi
  2766  000D9A  C01A  F00F         	movff	atoi@n+1,??_atoi+1
  2767  000D9E  1E0E               	comf	??_atoi,f,c
  2768  000DA0  1E0F               	comf	??_atoi+1,f,c
  2769  000DA2  4A0E               	infsnz	??_atoi,f,c
  2770  000DA4  2A0F               	incf	??_atoi+1,f,c
  2771  000DA6  C00E  F00C         	movff	??_atoi,?_atoi
  2772  000DAA  C00F  F00D         	movff	??_atoi+1,?_atoi+1
  2773  000DAE  0012               	return	
  2774  000DB0                     l894:
  2775  000DB0  C019  F00C         	movff	atoi@n,?_atoi
  2776  000DB4  C01A  F00D         	movff	atoi@n+1,?_atoi+1
  2777  000DB8  0012               	return		;funcret
  2778  000DBA                     __end_of_atoi:
  2779                           	opt callstack 0
  2780                           
  2781 ;; *************** function _isspace *****************
  2782 ;; Defined at:
  2783 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\isspace.c"
  2784 ;; Parameters:    Size  Location     Type
  2785 ;;  c               2    4[COMRAM] int 
  2786 ;; Auto vars:     Size  Location     Type
  2787 ;;		None
  2788 ;; Return value:  Size  Location     Type
  2789 ;;                  2    4[COMRAM] int 
  2790 ;; Registers used:
  2791 ;;		wreg, status,2, status,0
  2792 ;; Tracked objects:
  2793 ;;		On entry : 0/0
  2794 ;;		On exit  : 0/0
  2795 ;;		Unchanged: 0/0
  2796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2797 ;;      Params:         2       0       0       0       0       0       0
  2798 ;;      Locals:         1       0       0       0       0       0       0
  2799 ;;      Temps:          4       0       0       0       0       0       0
  2800 ;;      Totals:         7       0       0       0       0       0       0
  2801 ;;Total ram usage:        7 bytes
  2802 ;; Hardware stack levels used:    1
  2803 ;; Hardware stack levels required when called:    1
  2804 ;; This function calls:
  2805 ;;		Nothing
  2806 ;; This function is called by:
  2807 ;;		_atoi
  2808 ;; This function uses a non-reentrant model
  2809 ;;
  2810                           
  2811                           	psect	text14
  2812  00134C                     __ptext14:
  2813                           	opt callstack 0
  2814  00134C                     _isspace:
  2815                           	opt callstack 25
  2816                           
  2817                           ;incstack = 0
  2818  00134C  0E01               	movlw	1
  2819  00134E  6E0B               	movwf	_isspace$973,c
  2820  001350  0E20               	movlw	32
  2821  001352  1805               	xorwf	isspace@c,w,c
  2822  001354  1006               	iorwf	isspace@c+1,w,c
  2823  001356  B4D8               	btfsc	status,2,c
  2824  001358  D014               	goto	l2189
  2825  00135A  0EF7               	movlw	247
  2826  00135C  6E07               	movwf	??_isspace& (0+255),c
  2827  00135E  0EFF               	movlw	255
  2828  001360  6E08               	movwf	(??_isspace+1)& (0+255),c
  2829  001362  C005  F009         	movff	isspace@c,??_isspace+2
  2830  001366  C006  F00A         	movff	isspace@c+1,??_isspace+3
  2831  00136A  5007               	movf	??_isspace,w,c
  2832  00136C  2609               	addwf	??_isspace+2,f,c
  2833  00136E  5008               	movf	??_isspace+1,w,c
  2834  001370  220A               	addwfc	??_isspace+3,f,c
  2835  001372  500A               	movf	??_isspace+3,w,c
  2836  001374  E104               	bnz	u1800
  2837  001376  0E05               	movlw	5
  2838  001378  5C09               	subwf	??_isspace+2,w,c
  2839  00137A  A0D8               	btfss	status,0,c
  2840  00137C  D002               	goto	l2189
  2841  00137E                     u1800:
  2842  00137E  0E00               	movlw	0
  2843  001380  6E0B               	movwf	_isspace$973,c
  2844  001382                     l2189:
  2845  001382  C00B  F005         	movff	_isspace$973,?_isspace
  2846  001386  6A06               	clrf	?_isspace+1,c
  2847  001388  0012               	return		;funcret
  2848  00138A                     __end_of_isspace:
  2849                           	opt callstack 0
  2850                           
  2851 ;; *************** function _isdigit *****************
  2852 ;; Defined at:
  2853 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\isdigit.c"
  2854 ;; Parameters:    Size  Location     Type
  2855 ;;  c               2    4[COMRAM] int 
  2856 ;; Auto vars:     Size  Location     Type
  2857 ;;		None
  2858 ;; Return value:  Size  Location     Type
  2859 ;;                  2    4[COMRAM] int 
  2860 ;; Registers used:
  2861 ;;		wreg, status,2, status,0
  2862 ;; Tracked objects:
  2863 ;;		On entry : 0/0
  2864 ;;		On exit  : 0/0
  2865 ;;		Unchanged: 0/0
  2866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2867 ;;      Params:         2       0       0       0       0       0       0
  2868 ;;      Locals:         0       0       0       0       0       0       0
  2869 ;;      Temps:          4       0       0       0       0       0       0
  2870 ;;      Totals:         6       0       0       0       0       0       0
  2871 ;;Total ram usage:        6 bytes
  2872 ;; Hardware stack levels used:    1
  2873 ;; Hardware stack levels required when called:    1
  2874 ;; This function calls:
  2875 ;;		Nothing
  2876 ;; This function is called by:
  2877 ;;		_vfpfcnvrt
  2878 ;;		_atoi
  2879 ;; This function uses a non-reentrant model
  2880 ;;
  2881                           
  2882                           	psect	text15
  2883  0013F4                     __ptext15:
  2884                           	opt callstack 0
  2885  0013F4                     _isdigit:
  2886                           	opt callstack 26
  2887                           
  2888                           ;incstack = 0
  2889  0013F4  0ED0               	movlw	208
  2890  0013F6  6E07               	movwf	??_isdigit& (0+255),c
  2891  0013F8  0EFF               	movlw	255
  2892  0013FA  6E08               	movwf	(??_isdigit+1)& (0+255),c
  2893  0013FC  C005  F009         	movff	isdigit@c,??_isdigit+2
  2894  001400  C006  F00A         	movff	isdigit@c+1,??_isdigit+3
  2895  001404  5007               	movf	??_isdigit,w,c
  2896  001406  2609               	addwf	??_isdigit+2,f,c
  2897  001408  5008               	movf	??_isdigit+1,w,c
  2898  00140A  220A               	addwfc	??_isdigit+3,f,c
  2899  00140C  500A               	movf	??_isdigit+3,w,c
  2900  00140E  E106               	bnz	u1640
  2901  001410  0E0A               	movlw	10
  2902  001412  5C09               	subwf	??_isdigit+2,w,c
  2903  001414  B0D8               	btfsc	status,0,c
  2904  001416  D002               	goto	u1640
  2905  001418  0E01               	movlw	1
  2906  00141A  D001               	goto	u1650
  2907  00141C                     u1640:
  2908  00141C  0E00               	movlw	0
  2909  00141E                     u1650:
  2910  00141E  6E05               	movwf	?_isdigit,c
  2911  001420  6A06               	clrf	?_isdigit+1,c
  2912  001422  0012               	return		;funcret
  2913  001424                     __end_of_isdigit:
  2914                           	opt callstack 0
  2915                           
  2916 ;; *************** function ___wmul *****************
  2917 ;; Defined at:
  2918 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
  2919 ;; Parameters:    Size  Location     Type
  2920 ;;  multiplier      2    4[COMRAM] unsigned int 
  2921 ;;  multiplicand    2    6[COMRAM] unsigned int 
  2922 ;; Auto vars:     Size  Location     Type
  2923 ;;  product         2    8[COMRAM] unsigned int 
  2924 ;; Return value:  Size  Location     Type
  2925 ;;                  2    4[COMRAM] unsigned int 
  2926 ;; Registers used:
  2927 ;;		wreg, status,2, status,0, prodl, prodh
  2928 ;; Tracked objects:
  2929 ;;		On entry : 0/0
  2930 ;;		On exit  : 0/0
  2931 ;;		Unchanged: 0/0
  2932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2933 ;;      Params:         4       0       0       0       0       0       0
  2934 ;;      Locals:         2       0       0       0       0       0       0
  2935 ;;      Temps:          0       0       0       0       0       0       0
  2936 ;;      Totals:         6       0       0       0       0       0       0
  2937 ;;Total ram usage:        6 bytes
  2938 ;; Hardware stack levels used:    1
  2939 ;; Hardware stack levels required when called:    1
  2940 ;; This function calls:
  2941 ;;		Nothing
  2942 ;; This function is called by:
  2943 ;;		_atoi
  2944 ;; This function uses a non-reentrant model
  2945 ;;
  2946                           
  2947                           	psect	text16
  2948  001474                     __ptext16:
  2949                           	opt callstack 0
  2950  001474                     ___wmul:
  2951                           	opt callstack 25
  2952                           
  2953                           ;incstack = 0
  2954  001474  5005               	movf	___wmul@multiplier,w,c
  2955  001476  0207               	mulwf	___wmul@multiplicand,c
  2956  001478  CFF3 F009          	movff	prodl,___wmul@product
  2957  00147C  CFF4 F00A          	movff	prodh,___wmul@product+1
  2958  001480  5005               	movf	___wmul@multiplier,w,c
  2959  001482  0208               	mulwf	___wmul@multiplicand+1,c
  2960  001484  50F3               	movf	prodl,w,c
  2961  001486  260A               	addwf	___wmul@product+1,f,c
  2962  001488  5006               	movf	___wmul@multiplier+1,w,c
  2963  00148A  0207               	mulwf	___wmul@multiplicand,c
  2964  00148C  50F3               	movf	prodl,w,c
  2965  00148E  260A               	addwf	___wmul@product+1,f,c
  2966  001490  C009  F005         	movff	___wmul@product,?___wmul
  2967  001494  C00A  F006         	movff	___wmul@product+1,?___wmul+1
  2968  001498  0012               	return		;funcret
  2969  00149A                     __end_of___wmul:
  2970                           	opt callstack 0
  2971                           
  2972 ;; *************** function _lcd_ini *****************
  2973 ;; Defined at:
  2974 ;;		line 3 in file "../Bibliotecas/LCD4b.c"
  2975 ;; Parameters:    Size  Location     Type
  2976 ;;		None
  2977 ;; Auto vars:     Size  Location     Type
  2978 ;;  i               1    9[COMRAM] unsigned char 
  2979 ;; Return value:  Size  Location     Type
  2980 ;;                  1    wreg      void 
  2981 ;; Registers used:
  2982 ;;		wreg, status,2, status,0, cstack
  2983 ;; Tracked objects:
  2984 ;;		On entry : 0/0
  2985 ;;		On exit  : 0/0
  2986 ;;		Unchanged: 0/0
  2987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2988 ;;      Params:         0       0       0       0       0       0       0
  2989 ;;      Locals:         1       0       0       0       0       0       0
  2990 ;;      Temps:          1       0       0       0       0       0       0
  2991 ;;      Totals:         2       0       0       0       0       0       0
  2992 ;;Total ram usage:        2 bytes
  2993 ;; Hardware stack levels used:    1
  2994 ;; Hardware stack levels required when called:    3
  2995 ;; This function calls:
  2996 ;;		_lcd_cmd
  2997 ;; This function is called by:
  2998 ;;		_main
  2999 ;; This function uses a non-reentrant model
  3000 ;;
  3001                           
  3002                           	psect	text17
  3003  001198                     __ptext17:
  3004                           	opt callstack 0
  3005  001198                     _lcd_ini:
  3006                           	opt callstack 27
  3007                           
  3008                           ;../Bibliotecas/LCD4b.c: 5: char i;;../Bibliotecas/LCD4b.c: 7: TRISD = 0b00000000;
  3009                           
  3010                           ;incstack = 0
  3011  001198  0E00               	movlw	0
  3012  00119A  6E95               	movwf	3989,c	;volatile
  3013                           
  3014                           ;../Bibliotecas/LCD4b.c: 8: TRISEbits.TRISE1 = 0;
  3015  00119C  9296               	bcf	3990,1,c	;volatile
  3016                           
  3017                           ;../Bibliotecas/LCD4b.c: 9: TRISEbits.TRISE0 = 0;
  3018  00119E  9096               	bcf	3990,0,c	;volatile
  3019                           
  3020                           ;../Bibliotecas/LCD4b.c: 11: PORTD = 0b00000000;
  3021  0011A0  0E00               	movlw	0
  3022  0011A2  6E83               	movwf	3971,c	;volatile
  3023                           
  3024                           ;../Bibliotecas/LCD4b.c: 12: PORTEbits.RE0 = 0;
  3025  0011A4  9084               	bcf	3972,0,c	;volatile
  3026                           
  3027                           ;../Bibliotecas/LCD4b.c: 13: PORTEbits.RE1 = 0;
  3028  0011A6  9284               	bcf	3972,1,c	;volatile
  3029                           
  3030                           ;../Bibliotecas/LCD4b.c: 15: _delay((unsigned long)((15)*(8000000/4000.0)));
  3031  0011A8  0E27               	movlw	39
  3032  0011AA  6E09               	movwf	??_lcd_ini& (0+255),c
  3033  0011AC  0EF5               	movlw	245
  3034  0011AE                     u2177:
  3035  0011AE  2EE8               	decfsz	wreg,f,c
  3036  0011B0  D7FE               	bra	u2177
  3037  0011B2  2E09               	decfsz	??_lcd_ini& (0+255),f,c
  3038  0011B4  D7FC               	bra	u2177
  3039  0011B6  F000               	nop	
  3040                           
  3041                           ;../Bibliotecas/LCD4b.c: 18: for(i=0;i<=2;i++)
  3042  0011B8  0E00               	movlw	0
  3043  0011BA  6E0A               	movwf	lcd_ini@i,c
  3044  0011BC                     l1901:
  3045                           
  3046                           ;../Bibliotecas/LCD4b.c: 19:    {;../Bibliotecas/LCD4b.c: 20:    lcd_cmd(0x30);
  3047  0011BC  0E30               	movlw	48
  3048  0011BE  EC6F  F007         	call	_lcd_cmd
  3049                           
  3050                           ;../Bibliotecas/LCD4b.c: 21:    _delay((unsigned long)((5)*(8000000/4000.0)));
  3051  0011C2  0E0D               	movlw	13
  3052  0011C4  6E09               	movwf	??_lcd_ini& (0+255),c
  3053  0011C6  0EFC               	movlw	252
  3054  0011C8                     u2187:
  3055  0011C8  2EE8               	decfsz	wreg,f,c
  3056  0011CA  D7FE               	bra	u2187
  3057  0011CC  2E09               	decfsz	??_lcd_ini& (0+255),f,c
  3058  0011CE  D7FC               	bra	u2187
  3059                           
  3060                           ;../Bibliotecas/LCD4b.c: 22:    }
  3061  0011D0  2A0A               	incf	lcd_ini@i,f,c
  3062  0011D2  0E02               	movlw	2
  3063  0011D4  640A               	cpfsgt	lcd_ini@i,c
  3064  0011D6  D7F2               	goto	l1901
  3065                           
  3066                           ;../Bibliotecas/LCD4b.c: 24:    lcd_cmd(0x02);
  3067  0011D8  0E02               	movlw	2
  3068  0011DA  EC6F  F007         	call	_lcd_cmd
  3069                           
  3070                           ;../Bibliotecas/LCD4b.c: 25:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3071  0011DE  0E1A               	movlw	26
  3072  0011E0                     u2197:
  3073  0011E0  2EE8               	decfsz	wreg,f,c
  3074  0011E2  D7FE               	bra	u2197
  3075  0011E4  D000               	nop2	
  3076                           
  3077                           ;../Bibliotecas/LCD4b.c: 26:    lcd_cmd(0x28);
  3078  0011E6  0E28               	movlw	40
  3079  0011E8  EC6F  F007         	call	_lcd_cmd
  3080                           
  3081                           ;../Bibliotecas/LCD4b.c: 27:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3082  0011EC  0E1A               	movlw	26
  3083  0011EE                     u2207:
  3084  0011EE  2EE8               	decfsz	wreg,f,c
  3085  0011F0  D7FE               	bra	u2207
  3086  0011F2  D000               	nop2	
  3087                           
  3088                           ;../Bibliotecas/LCD4b.c: 28:    lcd_cmd(0x01);
  3089  0011F4  0E01               	movlw	1
  3090  0011F6  EC6F  F007         	call	_lcd_cmd
  3091                           
  3092                           ;../Bibliotecas/LCD4b.c: 29:    _delay((unsigned long)((2)*(8000000/4000.0)));
  3093  0011FA  0E06               	movlw	6
  3094  0011FC  6E09               	movwf	??_lcd_ini& (0+255),c
  3095  0011FE  0E30               	movlw	48
  3096  001200                     u2217:
  3097  001200  2EE8               	decfsz	wreg,f,c
  3098  001202  D7FE               	bra	u2217
  3099  001204  2E09               	decfsz	??_lcd_ini& (0+255),f,c
  3100  001206  D7FC               	bra	u2217
  3101  001208  D000               	nop2	
  3102                           
  3103                           ;../Bibliotecas/LCD4b.c: 30:    lcd_cmd(0x0C);
  3104  00120A  0E0C               	movlw	12
  3105  00120C  EC6F  F007         	call	_lcd_cmd
  3106                           
  3107                           ;../Bibliotecas/LCD4b.c: 31:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3108  001210  0E1A               	movlw	26
  3109  001212                     u2227:
  3110  001212  2EE8               	decfsz	wreg,f,c
  3111  001214  D7FE               	bra	u2227
  3112  001216  D000               	nop2	
  3113                           
  3114                           ;../Bibliotecas/LCD4b.c: 32:    lcd_cmd(0x06);
  3115  001218  0E06               	movlw	6
  3116  00121A  EC6F  F007         	call	_lcd_cmd
  3117                           
  3118                           ;../Bibliotecas/LCD4b.c: 33:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3119  00121E  0E1A               	movlw	26
  3120  001220                     u2237:
  3121  001220  2EE8               	decfsz	wreg,f,c
  3122  001222  D7FE               	bra	u2237
  3123  001224  D000               	nop2	
  3124  001226  0012               	return		;funcret
  3125  001228                     __end_of_lcd_ini:
  3126                           	opt callstack 0
  3127                           
  3128 ;; *************** function _lcd_escreve_bf *****************
  3129 ;; Defined at:
  3130 ;;		line 82 in file "../Bibliotecas/LCD4b.c"
  3131 ;; Parameters:    Size  Location     Type
  3132 ;;  lin             1    wreg     unsigned char 
  3133 ;;  col             1   10[COMRAM] unsigned char 
  3134 ;;  str             2   11[COMRAM] PTR unsigned char 
  3135 ;;		 -> bufferLCD(16), STR_2(13), STR_1(7), 
  3136 ;; Auto vars:     Size  Location     Type
  3137 ;;  lin             1   14[COMRAM] unsigned char 
  3138 ;;  end             1   13[COMRAM] unsigned char 
  3139 ;; Return value:  Size  Location     Type
  3140 ;;                  1    wreg      void 
  3141 ;; Registers used:
  3142 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3143 ;; Tracked objects:
  3144 ;;		On entry : 0/0
  3145 ;;		On exit  : 0/0
  3146 ;;		Unchanged: 0/0
  3147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3148 ;;      Params:         3       0       0       0       0       0       0
  3149 ;;      Locals:         2       0       0       0       0       0       0
  3150 ;;      Temps:          0       0       0       0       0       0       0
  3151 ;;      Totals:         5       0       0       0       0       0       0
  3152 ;;Total ram usage:        5 bytes
  3153 ;; Hardware stack levels used:    1
  3154 ;; Hardware stack levels required when called:    4
  3155 ;; This function calls:
  3156 ;;		_lcd_envia_byte
  3157 ;; This function is called by:
  3158 ;;		_main
  3159 ;; This function uses a non-reentrant model
  3160 ;;
  3161                           
  3162                           	psect	text18
  3163  001228                     __ptext18:
  3164                           	opt callstack 0
  3165  001228                     _lcd_escreve_bf:
  3166                           	opt callstack 26
  3167                           
  3168                           ;incstack = 0
  3169                           ;lcd_escreve_bf@lin stored from wreg
  3170  001228  6E0F               	movwf	lcd_escreve_bf@lin,c
  3171                           
  3172                           ;../Bibliotecas/LCD4b.c: 82: void lcd_escreve_bf(char lin, char col, char *str);../Bibli
      +                          otecas/LCD4b.c: 83: {;../Bibliotecas/LCD4b.c: 84:     char end;;../Bibliotecas/LCD4b.c: 
      +                          87:     if (lin == 1) {
  3173  00122A  040F               	decf	lcd_escreve_bf@lin,w,c
  3174  00122C  A4D8               	btfss	status,2,c
  3175  00122E  D003               	goto	l1927
  3176                           
  3177                           ;../Bibliotecas/LCD4b.c: 88:         end = col + 0x80 - 1;
  3178  001230  500B               	movf	lcd_escreve_bf@col,w,c
  3179  001232  0F7F               	addlw	127
  3180  001234  D006               	goto	L3
  3181  001236                     l1927:
  3182  001236  0E02               	movlw	2
  3183  001238  180F               	xorwf	lcd_escreve_bf@lin,w,c
  3184  00123A  A4D8               	btfss	status,2,c
  3185  00123C  D003               	goto	l1931
  3186                           
  3187                           ;../Bibliotecas/LCD4b.c: 91:         end = col + 0xC0 - 1;
  3188  00123E  500B               	movf	lcd_escreve_bf@col,w,c
  3189  001240  0FBF               	addlw	191
  3190  001242                     L3:
  3191  001242  6E0E               	movwf	lcd_escreve_bf@end,c
  3192  001244                     l1931:
  3193                           
  3194                           ;../Bibliotecas/LCD4b.c: 94:     lcd_envia_byte(0,end);
  3195  001244  C00E  F009         	movff	lcd_escreve_bf@end,lcd_envia_byte@dado
  3196  001248  0E00               	movlw	0
  3197  00124A  EC4D  F00A         	call	_lcd_envia_byte
  3198                           
  3199                           ;../Bibliotecas/LCD4b.c: 98:     while (*str){
  3200  00124E  D016               	goto	l1937
  3201  001250                     l1933:
  3202                           
  3203                           ;../Bibliotecas/LCD4b.c: 99:         lcd_envia_byte(1,*str);
  3204  001250  C00C  FFF6         	movff	lcd_escreve_bf@str,tblptrl
  3205  001254  C00D  FFF7         	movff	lcd_escreve_bf@str+1,tblptrh
  3206  001258  6AF8               	clrf	tblptru,c
  3207  00125A  0E05               	movlw	(high __ramtop+-1)
  3208  00125C  64F7               	cpfsgt	tblptrh,c
  3209  00125E  D003               	bra	u1447
  3210  001260  0008               	tblrd		*
  3211  001262  50F5               	movf	tablat,w,c
  3212  001264  D005               	bra	u1440
  3213  001266                     u1447:
  3214  001266  CFF6 FFE1          	movff	tblptrl,fsr1l
  3215  00126A  CFF7 FFE2          	movff	tblptrh,fsr1h
  3216  00126E  50E7               	movf	indf1,w,c
  3217  001270                     u1440:
  3218  001270  6E09               	movwf	lcd_envia_byte@dado,c
  3219  001272  0E01               	movlw	1
  3220  001274  EC4D  F00A         	call	_lcd_envia_byte
  3221                           
  3222                           ;../Bibliotecas/LCD4b.c: 100:         str++;
  3223  001278  4A0C               	infsnz	lcd_escreve_bf@str,f,c
  3224  00127A  2A0D               	incf	lcd_escreve_bf@str+1,f,c
  3225  00127C                     l1937:
  3226                           
  3227                           ;../Bibliotecas/LCD4b.c: 98:     while (*str){
  3228  00127C  C00C  FFF6         	movff	lcd_escreve_bf@str,tblptrl
  3229  001280  C00D  FFF7         	movff	lcd_escreve_bf@str+1,tblptrh
  3230  001284  6AF8               	clrf	tblptru,c
  3231  001286  0E05               	movlw	(high __ramtop+-1)
  3232  001288  64F7               	cpfsgt	tblptrh,c
  3233  00128A  D003               	bra	u1457
  3234  00128C  0008               	tblrd		*
  3235  00128E  50F5               	movf	tablat,w,c
  3236  001290  D005               	bra	u1450
  3237  001292                     u1457:
  3238  001292  CFF6 FFE1          	movff	tblptrl,fsr1l
  3239  001296  CFF7 FFE2          	movff	tblptrh,fsr1h
  3240  00129A  50E7               	movf	indf1,w,c
  3241  00129C                     u1450:
  3242  00129C  0900               	iorlw	0
  3243  00129E  B4D8               	btfsc	status,2,c
  3244  0012A0  0012               	return	
  3245  0012A2  D7D6               	goto	l1933
  3246  0012A4                     __end_of_lcd_escreve_bf:
  3247                           	opt callstack 0
  3248                           
  3249 ;; *************** function _lcd_envia_byte *****************
  3250 ;; Defined at:
  3251 ;;		line 74 in file "../Bibliotecas/LCD4b.c"
  3252 ;; Parameters:    Size  Location     Type
  3253 ;;  nivel           1    wreg     unsigned char 
  3254 ;;  dado            1    8[COMRAM] unsigned char 
  3255 ;; Auto vars:     Size  Location     Type
  3256 ;;  nivel           1    9[COMRAM] unsigned char 
  3257 ;; Return value:  Size  Location     Type
  3258 ;;                  1    wreg      void 
  3259 ;; Registers used:
  3260 ;;		wreg, status,2, status,0, cstack
  3261 ;; Tracked objects:
  3262 ;;		On entry : 0/0
  3263 ;;		On exit  : 0/0
  3264 ;;		Unchanged: 0/0
  3265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3266 ;;      Params:         1       0       0       0       0       0       0
  3267 ;;      Locals:         1       0       0       0       0       0       0
  3268 ;;      Temps:          0       0       0       0       0       0       0
  3269 ;;      Totals:         2       0       0       0       0       0       0
  3270 ;;Total ram usage:        2 bytes
  3271 ;; Hardware stack levels used:    1
  3272 ;; Hardware stack levels required when called:    3
  3273 ;; This function calls:
  3274 ;;		_lcd_cmd
  3275 ;; This function is called by:
  3276 ;;		_lcd_escreve_bf
  3277 ;; This function uses a non-reentrant model
  3278 ;;
  3279                           
  3280                           	psect	text19
  3281  00149A                     __ptext19:
  3282                           	opt callstack 0
  3283  00149A                     _lcd_envia_byte:
  3284                           	opt callstack 26
  3285                           
  3286                           ;incstack = 0
  3287                           ;lcd_envia_byte@nivel stored from wreg
  3288  00149A  6E0A               	movwf	lcd_envia_byte@nivel,c
  3289                           
  3290                           ;../Bibliotecas/LCD4b.c: 74: void lcd_envia_byte(char nivel, char dado);../Bibliotecas/L
      +                          CD4b.c: 75: {;../Bibliotecas/LCD4b.c: 76:     PORTEbits.RE0 = nivel;
  3291  00149C  B00A               	btfsc	lcd_envia_byte@nivel,0,c
  3292  00149E  D002               	bra	u1395
  3293  0014A0  9084               	bcf	3972,0,c	;volatile
  3294  0014A2  D001               	bra	u1396
  3295  0014A4                     u1395:
  3296  0014A4  8084               	bsf	3972,0,c	;volatile
  3297  0014A6                     u1396:
  3298                           
  3299                           ;../Bibliotecas/LCD4b.c: 77:     _delay((unsigned long)((100)*(8000000/4000000.0)));
  3300  0014A6  0E42               	movlw	66
  3301  0014A8                     u2247:
  3302  0014A8  2EE8               	decfsz	wreg,f,c
  3303  0014AA  D7FE               	bra	u2247
  3304  0014AC  D000               	nop2	
  3305                           
  3306                           ;../Bibliotecas/LCD4b.c: 78:     PORTEbits.RE1 = 0;
  3307  0014AE  9284               	bcf	3972,1,c	;volatile
  3308                           
  3309                           ;../Bibliotecas/LCD4b.c: 79:     lcd_cmd(dado);
  3310  0014B0  5009               	movf	lcd_envia_byte@dado,w,c
  3311  0014B2  EC6F  F007         	call	_lcd_cmd
  3312  0014B6  0012               	return		;funcret
  3313  0014B8                     __end_of_lcd_envia_byte:
  3314                           	opt callstack 0
  3315                           
  3316 ;; *************** function _lcd_cmd *****************
  3317 ;; Defined at:
  3318 ;;		line 48 in file "../Bibliotecas/LCD4b.c"
  3319 ;; Parameters:    Size  Location     Type
  3320 ;;  cmd             1    wreg     unsigned char 
  3321 ;; Auto vars:     Size  Location     Type
  3322 ;;  cmd             1    7[COMRAM] unsigned char 
  3323 ;; Return value:  Size  Location     Type
  3324 ;;                  1    wreg      void 
  3325 ;; Registers used:
  3326 ;;		wreg, status,2, status,0, cstack
  3327 ;; Tracked objects:
  3328 ;;		On entry : 0/0
  3329 ;;		On exit  : 0/0
  3330 ;;		Unchanged: 0/0
  3331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3332 ;;      Params:         0       0       0       0       0       0       0
  3333 ;;      Locals:         1       0       0       0       0       0       0
  3334 ;;      Temps:          1       0       0       0       0       0       0
  3335 ;;      Totals:         2       0       0       0       0       0       0
  3336 ;;Total ram usage:        2 bytes
  3337 ;; Hardware stack levels used:    1
  3338 ;; Hardware stack levels required when called:    2
  3339 ;; This function calls:
  3340 ;;		_set_bit
  3341 ;; This function is called by:
  3342 ;;		_lcd_ini
  3343 ;;		_lcd_envia_byte
  3344 ;; This function uses a non-reentrant model
  3345 ;;
  3346                           
  3347                           	psect	text20
  3348  000EDE                     __ptext20:
  3349                           	opt callstack 0
  3350  000EDE                     _lcd_cmd:
  3351                           	opt callstack 27
  3352                           
  3353                           ;incstack = 0
  3354                           ;lcd_cmd@cmd stored from wreg
  3355  000EDE  6E08               	movwf	lcd_cmd@cmd,c
  3356                           
  3357                           ;../Bibliotecas/LCD4b.c: 48: void lcd_cmd(char cmd);../Bibliotecas/LCD4b.c: 49: {;../Bib
      +                          liotecas/LCD4b.c: 52:     PORTDbits.RD4 = set_bit(cmd,0b00010000);
  3358  000EE0  0E10               	movlw	16
  3359  000EE2  6E05               	movwf	set_bit@comp,c
  3360  000EE4  5008               	movf	lcd_cmd@cmd,w,c
  3361  000EE6  EC5C  F00A         	call	_set_bit
  3362  000EEA  6E07               	movwf	??_lcd_cmd& (0+255),c
  3363  000EEC  3A07               	swapf	??_lcd_cmd,f,c
  3364  000EEE  5083               	movf	3971,w,c	;volatile
  3365  000EF0  1807               	xorwf	??_lcd_cmd,w,c
  3366  000EF2  0BEF               	andlw	-17
  3367  000EF4  1807               	xorwf	??_lcd_cmd,w,c
  3368  000EF6  6E83               	movwf	3971,c	;volatile
  3369                           
  3370                           ;../Bibliotecas/LCD4b.c: 53:     PORTDbits.RD5 = set_bit(cmd,0b00100000);
  3371  000EF8  0E20               	movlw	32
  3372  000EFA  6E05               	movwf	set_bit@comp,c
  3373  000EFC  5008               	movf	lcd_cmd@cmd,w,c
  3374  000EFE  EC5C  F00A         	call	_set_bit
  3375  000F02  6E07               	movwf	??_lcd_cmd& (0+255),c
  3376  000F04  3A07               	swapf	??_lcd_cmd,f,c
  3377  000F06  4607               	rlncf	??_lcd_cmd,f,c
  3378  000F08  5083               	movf	3971,w,c	;volatile
  3379  000F0A  1807               	xorwf	??_lcd_cmd,w,c
  3380  000F0C  0BDF               	andlw	-33
  3381  000F0E  1807               	xorwf	??_lcd_cmd,w,c
  3382  000F10  6E83               	movwf	3971,c	;volatile
  3383                           
  3384                           ;../Bibliotecas/LCD4b.c: 54:     PORTDbits.RD6 = set_bit(cmd,0b01000000);
  3385  000F12  0E40               	movlw	64
  3386  000F14  6E05               	movwf	set_bit@comp,c
  3387  000F16  5008               	movf	lcd_cmd@cmd,w,c
  3388  000F18  EC5C  F00A         	call	_set_bit
  3389  000F1C  6E07               	movwf	??_lcd_cmd& (0+255),c
  3390  000F1E  3A07               	swapf	??_lcd_cmd,f,c
  3391  000F20  4607               	rlncf	??_lcd_cmd,f,c
  3392  000F22  4607               	rlncf	??_lcd_cmd,f,c
  3393  000F24  5083               	movf	3971,w,c	;volatile
  3394  000F26  1807               	xorwf	??_lcd_cmd,w,c
  3395  000F28  0BBF               	andlw	-65
  3396  000F2A  1807               	xorwf	??_lcd_cmd,w,c
  3397  000F2C  6E83               	movwf	3971,c	;volatile
  3398                           
  3399                           ;../Bibliotecas/LCD4b.c: 55:     PORTDbits.RD7 = set_bit(cmd,0b10000000);
  3400  000F2E  0E80               	movlw	128
  3401  000F30  6E05               	movwf	set_bit@comp,c
  3402  000F32  5008               	movf	lcd_cmd@cmd,w,c
  3403  000F34  EC5C  F00A         	call	_set_bit
  3404  000F38  6E07               	movwf	??_lcd_cmd& (0+255),c
  3405  000F3A  3207               	rrcf	??_lcd_cmd,f,c
  3406  000F3C  3207               	rrcf	??_lcd_cmd,f,c
  3407  000F3E  5083               	movf	3971,w,c	;volatile
  3408  000F40  1807               	xorwf	??_lcd_cmd,w,c
  3409  000F42  0B7F               	andlw	-129
  3410  000F44  1807               	xorwf	??_lcd_cmd,w,c
  3411  000F46  6E83               	movwf	3971,c	;volatile
  3412                           
  3413                           ;../Bibliotecas/LCD4b.c: 57:     PORTEbits.RE1 = 1;
  3414  000F48  8284               	bsf	3972,1,c	;volatile
  3415                           
  3416                           ;../Bibliotecas/LCD4b.c: 58:     PORTEbits.RE1 = 0;
  3417  000F4A  9284               	bcf	3972,1,c	;volatile
  3418                           
  3419                           ;../Bibliotecas/LCD4b.c: 60:     _delay((unsigned long)((100)*(8000000/4000000.0)));
  3420  000F4C  0E42               	movlw	66
  3421  000F4E                     u2257:
  3422  000F4E  2EE8               	decfsz	wreg,f,c
  3423  000F50  D7FE               	bra	u2257
  3424  000F52  D000               	nop2	
  3425                           
  3426                           ;../Bibliotecas/LCD4b.c: 64:     PORTDbits.RD4 = set_bit(cmd,0b00000001);
  3427  000F54  0E01               	movlw	1
  3428  000F56  6E05               	movwf	set_bit@comp,c
  3429  000F58  5008               	movf	lcd_cmd@cmd,w,c
  3430  000F5A  EC5C  F00A         	call	_set_bit
  3431  000F5E  6E07               	movwf	??_lcd_cmd& (0+255),c
  3432  000F60  3A07               	swapf	??_lcd_cmd,f,c
  3433  000F62  5083               	movf	3971,w,c	;volatile
  3434  000F64  1807               	xorwf	??_lcd_cmd,w,c
  3435  000F66  0BEF               	andlw	-17
  3436  000F68  1807               	xorwf	??_lcd_cmd,w,c
  3437  000F6A  6E83               	movwf	3971,c	;volatile
  3438                           
  3439                           ;../Bibliotecas/LCD4b.c: 65:     PORTDbits.RD5 = set_bit(cmd,0b00000010);
  3440  000F6C  0E02               	movlw	2
  3441  000F6E  6E05               	movwf	set_bit@comp,c
  3442  000F70  5008               	movf	lcd_cmd@cmd,w,c
  3443  000F72  EC5C  F00A         	call	_set_bit
  3444  000F76  6E07               	movwf	??_lcd_cmd& (0+255),c
  3445  000F78  3A07               	swapf	??_lcd_cmd,f,c
  3446  000F7A  4607               	rlncf	??_lcd_cmd,f,c
  3447  000F7C  5083               	movf	3971,w,c	;volatile
  3448  000F7E  1807               	xorwf	??_lcd_cmd,w,c
  3449  000F80  0BDF               	andlw	-33
  3450  000F82  1807               	xorwf	??_lcd_cmd,w,c
  3451  000F84  6E83               	movwf	3971,c	;volatile
  3452                           
  3453                           ;../Bibliotecas/LCD4b.c: 66:     PORTDbits.RD6 = set_bit(cmd,0b00000100);
  3454  000F86  0E04               	movlw	4
  3455  000F88  6E05               	movwf	set_bit@comp,c
  3456  000F8A  5008               	movf	lcd_cmd@cmd,w,c
  3457  000F8C  EC5C  F00A         	call	_set_bit
  3458  000F90  6E07               	movwf	??_lcd_cmd& (0+255),c
  3459  000F92  3A07               	swapf	??_lcd_cmd,f,c
  3460  000F94  4607               	rlncf	??_lcd_cmd,f,c
  3461  000F96  4607               	rlncf	??_lcd_cmd,f,c
  3462  000F98  5083               	movf	3971,w,c	;volatile
  3463  000F9A  1807               	xorwf	??_lcd_cmd,w,c
  3464  000F9C  0BBF               	andlw	-65
  3465  000F9E  1807               	xorwf	??_lcd_cmd,w,c
  3466  000FA0  6E83               	movwf	3971,c	;volatile
  3467                           
  3468                           ;../Bibliotecas/LCD4b.c: 67:     PORTDbits.RD7 = set_bit(cmd,0b00001000);
  3469  000FA2  0E08               	movlw	8
  3470  000FA4  6E05               	movwf	set_bit@comp,c
  3471  000FA6  5008               	movf	lcd_cmd@cmd,w,c
  3472  000FA8  EC5C  F00A         	call	_set_bit
  3473  000FAC  6E07               	movwf	??_lcd_cmd& (0+255),c
  3474  000FAE  3207               	rrcf	??_lcd_cmd,f,c
  3475  000FB0  3207               	rrcf	??_lcd_cmd,f,c
  3476  000FB2  5083               	movf	3971,w,c	;volatile
  3477  000FB4  1807               	xorwf	??_lcd_cmd,w,c
  3478  000FB6  0B7F               	andlw	-129
  3479  000FB8  1807               	xorwf	??_lcd_cmd,w,c
  3480  000FBA  6E83               	movwf	3971,c	;volatile
  3481                           
  3482                           ;../Bibliotecas/LCD4b.c: 69:     PORTEbits.RE1 = 1;
  3483  000FBC  8284               	bsf	3972,1,c	;volatile
  3484                           
  3485                           ;../Bibliotecas/LCD4b.c: 70:     PORTEbits.RE1 = 0;
  3486  000FBE  9284               	bcf	3972,1,c	;volatile
  3487  000FC0  0012               	return		;funcret
  3488  000FC2                     __end_of_lcd_cmd:
  3489                           	opt callstack 0
  3490                           
  3491 ;; *************** function _set_bit *****************
  3492 ;; Defined at:
  3493 ;;		line 38 in file "../Bibliotecas/LCD4b.c"
  3494 ;; Parameters:    Size  Location     Type
  3495 ;;  cmd             1    wreg     unsigned char 
  3496 ;;  comp            1    4[COMRAM] unsigned char 
  3497 ;; Auto vars:     Size  Location     Type
  3498 ;;  cmd             1    5[COMRAM] unsigned char 
  3499 ;; Return value:  Size  Location     Type
  3500 ;;                  1    wreg      unsigned char 
  3501 ;; Registers used:
  3502 ;;		wreg, status,2, status,0
  3503 ;; Tracked objects:
  3504 ;;		On entry : 0/0
  3505 ;;		On exit  : 0/0
  3506 ;;		Unchanged: 0/0
  3507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3508 ;;      Params:         1       0       0       0       0       0       0
  3509 ;;      Locals:         1       0       0       0       0       0       0
  3510 ;;      Temps:          0       0       0       0       0       0       0
  3511 ;;      Totals:         2       0       0       0       0       0       0
  3512 ;;Total ram usage:        2 bytes
  3513 ;; Hardware stack levels used:    1
  3514 ;; Hardware stack levels required when called:    1
  3515 ;; This function calls:
  3516 ;;		Nothing
  3517 ;; This function is called by:
  3518 ;;		_lcd_cmd
  3519 ;; This function uses a non-reentrant model
  3520 ;;
  3521                           
  3522                           	psect	text21
  3523  0014B8                     __ptext21:
  3524                           	opt callstack 0
  3525  0014B8                     _set_bit:
  3526                           	opt callstack 27
  3527                           
  3528                           ;incstack = 0
  3529                           ;set_bit@cmd stored from wreg
  3530  0014B8  6E06               	movwf	set_bit@cmd,c
  3531                           
  3532                           ;../Bibliotecas/LCD4b.c: 38: char set_bit(char cmd, char comp);../Bibliotecas/LCD4b.c: 3
      +                          9: {;../Bibliotecas/LCD4b.c: 41:     if ((cmd & comp) >= 1)
  3533  0014BA  5006               	movf	set_bit@cmd,w,c
  3534  0014BC  1405               	andwf	set_bit@comp,w,c
  3535  0014BE  0900               	iorlw	0
  3536  0014C0  B4D8               	btfsc	status,2,c
  3537  0014C2  D002               	goto	l1643
  3538                           
  3539                           ;../Bibliotecas/LCD4b.c: 42:         return 1;
  3540  0014C4  0E01               	movlw	1
  3541  0014C6  0012               	return	
  3542  0014C8                     l1643:
  3543                           
  3544                           ;../Bibliotecas/LCD4b.c: 44:         return 0;
  3545  0014C8  0E00               	movlw	0
  3546  0014CA  0012               	return		;funcret
  3547  0014CC                     __end_of_set_bit:
  3548                           	opt callstack 0
  3549                           
  3550 ;; *************** function _int_TMR0 *****************
  3551 ;; Defined at:
  3552 ;;		line 12 in file "EX13.c"
  3553 ;; Parameters:    Size  Location     Type
  3554 ;;		None
  3555 ;; Auto vars:     Size  Location     Type
  3556 ;;		None
  3557 ;; Return value:  Size  Location     Type
  3558 ;;                  1    wreg      void 
  3559 ;; Registers used:
  3560 ;;		wreg, status,2, status,0
  3561 ;; Tracked objects:
  3562 ;;		On entry : 0/0
  3563 ;;		On exit  : 0/0
  3564 ;;		Unchanged: 0/0
  3565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3566 ;;      Params:         0       0       0       0       0       0       0
  3567 ;;      Locals:         0       0       0       0       0       0       0
  3568 ;;      Temps:          4       0       0       0       0       0       0
  3569 ;;      Totals:         4       0       0       0       0       0       0
  3570 ;;Total ram usage:        4 bytes
  3571 ;; Hardware stack levels used:    1
  3572 ;; This function calls:
  3573 ;;		Nothing
  3574 ;; This function is called by:
  3575 ;;		Interrupt level 1
  3576 ;; This function uses a non-reentrant model
  3577 ;;
  3578                           
  3579                           	psect	intcodelo
  3580  000018                     __pintcodelo:
  3581                           	opt callstack 0
  3582  000018                     _int_TMR0:
  3583                           	opt callstack 22
  3584                           
  3585                           ;incstack = 0
  3586  000018  8074               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  3587  00001A  CFD8 F002          	movff	status,??_int_TMR0+1
  3588  00001E  CFE8 F003          	movff	wreg,??_int_TMR0+2
  3589  000022  CFE0 F004          	movff	bsr,??_int_TMR0+3
  3590                           
  3591                           ;EX13.c: 14:     if (TMR0IF)
  3592  000026  A4F2               	btfss	4082,2,c	;volatile
  3593  000028  D03C               	goto	i1l39
  3594                           
  3595                           ;EX13.c: 15:     {;EX13.c: 16:      T0_500++;
  3596  00002A  4A72               	infsnz	_T0_500,f,c
  3597  00002C  2A73               	incf	_T0_500+1,f,c
  3598                           
  3599                           ;EX13.c: 17:      if (T0_500 >= 20)
  3600  00002E  BE73               	btfsc	_T0_500+1,7,c
  3601  000030  D033               	goto	i1l36
  3602  000032  5073               	movf	_T0_500+1,w,c
  3603  000034  E104               	bnz	i1u148_20
  3604  000036  0E14               	movlw	20
  3605  000038  5C72               	subwf	_T0_500,w,c
  3606  00003A  A0D8               	btfss	status,0,c
  3607  00003C  D02D               	goto	i1l36
  3608  00003E                     i1u148_20:
  3609                           
  3610                           ;EX13.c: 18:      {;EX13.c: 19:          T0_500 = 0;
  3611  00003E  0E00               	movlw	0
  3612  000040  6E73               	movwf	_T0_500+1,c
  3613  000042  0E00               	movlw	0
  3614  000044  6E72               	movwf	_T0_500,c
  3615                           
  3616                           ;EX13.c: 20:          PORTBbits.RB0 = ~PORTBbits.RB0;
  3617  000046  A081               	btfss	3969,0,c	;volatile
  3618  000048  D002               	goto	i1u149_20
  3619  00004A  0E01               	movlw	1
  3620  00004C  D001               	goto	i1u149_26
  3621  00004E                     i1u149_20:
  3622  00004E  0E00               	movlw	0
  3623  000050                     i1u149_26:
  3624  000050  0AFF               	xorlw	255
  3625  000052  6E01               	movwf	??_int_TMR0& (0+255),c
  3626  000054  5081               	movf	3969,w,c	;volatile
  3627  000056  1801               	xorwf	??_int_TMR0,w,c
  3628  000058  0BFE               	andlw	-2
  3629  00005A  1801               	xorwf	??_int_TMR0,w,c
  3630  00005C  6E81               	movwf	3969,c	;volatile
  3631                           
  3632                           ;EX13.c: 21:          T0_1000++;
  3633  00005E  0100               	movlb	0	; () banked
  3634  000060  4B82               	infsnz	_T0_1000& (0+255),f,b
  3635  000062  2B83               	incf	(_T0_1000+1)& (0+255),f,b
  3636                           
  3637                           ; BSR set to: 0
  3638                           ;EX13.c: 22:          if (T0_1000 >= 2)
  3639  000064  BF83               	btfsc	(_T0_1000+1)& (0+255),7,b
  3640  000066  D018               	goto	i1l36
  3641  000068  5183               	movf	(_T0_1000+1)& (0+255),w,b
  3642  00006A  E104               	bnz	i1u150_20
  3643  00006C  0E02               	movlw	2
  3644  00006E  5D82               	subwf	_T0_1000& (0+255),w,b
  3645  000070  A0D8               	btfss	status,0,c
  3646  000072  D012               	goto	i1l36
  3647  000074                     i1u150_20:
  3648                           
  3649                           ; BSR set to: 0
  3650                           ;EX13.c: 23:          {;EX13.c: 24:           conta++;
  3651  000074  4A70               	infsnz	_conta,f,c
  3652  000076  2A71               	incf	_conta+1,f,c
  3653                           
  3654                           ; BSR set to: 0
  3655                           ;EX13.c: 25:           if (conta>=100) conta = 0;
  3656  000078  BE71               	btfsc	_conta+1,7,c
  3657  00007A  D00A               	goto	i1l38
  3658  00007C  5071               	movf	_conta+1,w,c
  3659  00007E  E104               	bnz	i1u151_20
  3660  000080  0E64               	movlw	100
  3661  000082  5C70               	subwf	_conta,w,c
  3662  000084  A0D8               	btfss	status,0,c
  3663  000086  D004               	goto	i1l38
  3664  000088                     i1u151_20:
  3665                           
  3666                           ; BSR set to: 0
  3667  000088  0E00               	movlw	0
  3668  00008A  6E71               	movwf	_conta+1,c
  3669  00008C  0E00               	movlw	0
  3670  00008E  6E70               	movwf	_conta,c
  3671  000090                     i1l38:
  3672                           
  3673                           ; BSR set to: 0
  3674                           ;EX13.c: 26:           T0_1000 = 0;
  3675  000090  0E00               	movlw	0
  3676  000092  6F83               	movwf	(_T0_1000+1)& (0+255),b
  3677  000094  0E00               	movlw	0
  3678  000096  6F82               	movwf	_T0_1000& (0+255),b
  3679  000098                     i1l36:
  3680                           
  3681                           ;EX13.c: 29:      TMR0 = 61;
  3682  000098  0E00               	movlw	0
  3683  00009A  6ED7               	movwf	4055,c	;volatile
  3684  00009C  0E3D               	movlw	61
  3685  00009E  6ED6               	movwf	4054,c	;volatile
  3686                           
  3687                           ;EX13.c: 30:      TMR0IF = 0;
  3688  0000A0  94F2               	bcf	4082,2,c	;volatile
  3689  0000A2                     i1l39:
  3690  0000A2  C004  FFE0         	movff	??_int_TMR0+3,bsr
  3691  0000A6  C003  FFE8         	movff	??_int_TMR0+2,wreg
  3692  0000AA  C002  FFD8         	movff	??_int_TMR0+1,status
  3693  0000AE  9074               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  3694  0000B0  0010               	retfie	
  3695  0000B2                     __end_of_int_TMR0:
  3696                           	opt callstack 0
  3697                           
  3698                           	psect	rparam
  3699  0000                     
  3700                           	psect	temp
  3701  000074                     btemp:
  3702                           	opt callstack 0
  3703  000074                     	ds	1
  3704  0000                     int$flags	set	btemp
  3705  0000                     wtemp8	set	btemp+1
  3706  0000                     ttemp5	set	btemp+1
  3707  0000                     ttemp6	set	btemp+4
  3708  0000                     ttemp7	set	btemp+8
  3709                           tosu	equ	0xFFF
  3710                           tosh	equ	0xFFE
  3711                           tosl	equ	0xFFD
  3712                           stkptr	equ	0xFFC
  3713                           pclatu	equ	0xFFB
  3714                           pclath	equ	0xFFA
  3715                           pcl	equ	0xFF9
  3716                           tblptru	equ	0xFF8
  3717                           tblptrh	equ	0xFF7
  3718                           tblptrl	equ	0xFF6
  3719                           tablat	equ	0xFF5
  3720                           prodh	equ	0xFF4
  3721                           prodl	equ	0xFF3
  3722                           indf0	equ	0xFEF
  3723                           postinc0	equ	0xFEE
  3724                           postdec0	equ	0xFED
  3725                           preinc0	equ	0xFEC
  3726                           plusw0	equ	0xFEB
  3727                           fsr0h	equ	0xFEA
  3728                           fsr0l	equ	0xFE9
  3729                           wreg	equ	0xFE8
  3730                           indf1	equ	0xFE7
  3731                           postinc1	equ	0xFE6
  3732                           postdec1	equ	0xFE5
  3733                           preinc1	equ	0xFE4
  3734                           plusw1	equ	0xFE3
  3735                           fsr1h	equ	0xFE2
  3736                           fsr1l	equ	0xFE1
  3737                           bsr	equ	0xFE0
  3738                           indf2	equ	0xFDF
  3739                           postinc2	equ	0xFDE
  3740                           postdec2	equ	0xFDD
  3741                           preinc2	equ	0xFDC
  3742                           plusw2	equ	0xFDB
  3743                           fsr2h	equ	0xFDA
  3744                           fsr2l	equ	0xFD9
  3745                           status	equ	0xFD8


Data Sizes:
    Strings     25
    Constant    0
    Data        0
    BSS         62
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    105     115
    BANK0           128     10      62
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_3(CODE[5]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    S977_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_3(CODE[5]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_3(CODE[5]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 5
		 -> STR_3(CODE[5]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    lcd_escreve_bf@str	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), STR_2(CODE[13]), STR_1(CODE[7]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _atoi->_isspace
    _lcd_ini->_lcd_cmd
    _lcd_escreve_bf->_lcd_envia_byte
    _lcd_envia_byte->_lcd_cmd
    _lcd_cmd->_set_bit

Critical Paths under _int_TMR0 in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _int_TMR0 in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _int_TMR0 in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _int_TMR0 in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _int_TMR0 in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _int_TMR0 in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _int_TMR0 in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   13364
                                            103 COMRAM     2     2      0
                     _lcd_escreve_bf
                            _lcd_ini
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             16    10      6   10853
                                             97 COMRAM     6     0      6
                                              0 BANK0     10    10      0
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6   10361
                                             89 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           46    40      6    9831
                                             67 COMRAM    22    16      6
                               _atoi
                               _dtoa
                              _fputc
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                36    26     10    5683
                                             31 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    3417
                                             20 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     220
                                              4 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1537
                                             13 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4    1037
                                              4 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     183
                                             22 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     613
                                              4 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     625
                                              4 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (4) _atoi                                                15    13      2    1615
                                             11 COMRAM    15    13      2
                             ___wmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (5) _isspace                                              7     5      2     259
                                              4 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              6     4      2     281
                                              4 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     512
                                              4 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _lcd_ini                                              2     2      0     874
                                              8 COMRAM     2     2      0
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (1) _lcd_escreve_bf                                       5     2      3    1637
                                             10 COMRAM     5     2      3
                     _lcd_envia_byte
 ---------------------------------------------------------------------------------
 (2) _lcd_envia_byte                                       2     1      1    1024
                                              8 COMRAM     2     1      1
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (2) _lcd_cmd                                              2     2      0     828
                                              6 COMRAM     2     2      0
                            _set_bit
 ---------------------------------------------------------------------------------
 (3) _set_bit                                              2     1      1     652
                                              4 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _int_TMR0                                             4     4      0       0
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _lcd_escreve_bf
     _lcd_envia_byte
       _lcd_cmd
         _set_bit
   _lcd_ini
     _lcd_cmd
       _set_bit
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _atoi
           ___wmul
           _isdigit
           _isspace
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
                 _putch
             _strlen
         _fputc
           _putch
         _isdigit

 _int_TMR0 (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      A      3E       5       48.4%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     69      73       1       91.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      B1      15        0.0%
DATA                 0      0      B1       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Thu Apr 04 14:33:43 2019

                     bsr 000FE0      ___wmul@multiplicand 0007              __CFG_BORV$3 000000  
           __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000  
           __CFG_CP3$OFF 000000              __CFG_OSC$HS 000000                      l131 096A  
                    l118 1130                      l129 0962                      l863 13EA  
                    l894 0DB0             __CFG_CPB$OFF 000000             __CFG_CPD$OFF 000000  
                    _abs 13C2                      _pad 1102                      wreg 000FE8  
           __CFG_LVP$OFF 000000             __CFG_WDT$OFF 000000                     ?_abs 0017  
                   l2121 0BAC                     l2123 0BC0                     l2115 0B86  
                   l2141 0C58                     l2133 0C1C                     l2109 0B5E  
                   l2053 13AA                     l2213 0984                     l2039 107A  
                   l2311 0672                     l2137 0C32                     l2161 0E24  
                   l2153 0DE6                     l2049 1394                     l2057 142E  
                   l2073 1128                     l2217 0994                     l2163 0E38  
                   l2059 1432                     l2083 117E                     l2075 113A  
                   l2251 0B08                     l2227 0A8C                     l2331 068C  
                   l2323 067E                     l2315 0676                     l2307 0660  
                   l2173 0E96                     l2157 0E0A                     l2069 111A  
                   l2309 0662                     l2333 06CE                     l2079 1152  
                   l2247 0AF0                     l2327 0682                     l2319 067A  
                   l2423 1002                     l2273 0CE6                     l2257 0C8C  
                   l2177 0EBC                     l2169 0E80                     l2345 073A  
                   l1643 14C8                     l2283 0D50                     l2275 0CEE  
                   l2267 0CD6                     l2259 0C90                     l2371 089A  
                   l2347 0758                     l2427 101A                     l1901 11BC  
                   l2189 1382                     l2277 0CF4                     l2365 085E  
                   l2349 0766                     l2381 08BC                     l2279 0D1C  
                   l2199 0946                     l2375 08A4                     l1931 1244  
                   l1933 1250                     l2397 12B8                     l1927 1236  
                   l2399 12DE                     l1937 127C                     ?_pad 0015  
                   STR_1 060E                     STR_2 0601                     STR_3 0615  
                   u2000 0D82                     u2100 07AC                     u2120 07E0  
                   u2150 1012                     u2207 11EE                     u1440 1270  
                   u2080 079E                     u2217 1200                     u1450 129C  
                   u2090 07A0                     u2227 1212                     u1700 0BC4  
                   u1540 1072                     u2237 1220                     u1630 13D0  
                   u2247 14A8                     u1447 1266                     u2167 1024  
                   u1640 141C                     u1800 137E                     u1560 10BA  
                   u2257 0F4E                     u1457 1292                     u2177 11AE  
                   u1650 141E                     u1810 0918                     u1395 14A4  
                   u2187 11C8                     u1396 14A6                     u1900 0ABC  
                   u1820 091A                     u2197 11E0                     u1901 0ABA  
                   u1910 0ACA                     u1760 0E3C                     u1920 0ACE  
                   u1681 0B8C                     u1850 0958                     u1940 0ADA  
                   u1870 097E                     u1880 0A9A                     u1970 0CD2  
                   u1990 0D80                     i1l36 0098                     i1l38 0090  
                   i1l39 00A2                     _TMR0 000FD6             __CFG_PWRT$ON 000000  
                   abs@a 0017                     _dbuf 0084                     _atoi 0C7A  
                   _main 0FC2                     _dtoa 08F0                     _prec 006C  
                   _nout 0080                     pad@i 001C                     pad@p 0019  
                   fsr1h 000FE2                     fsr2h 000FDA                     indf1 000FE7  
                   indf2 000FDF                     fsr1l 000FE1                     pad@w 001E  
                   fsr2l 000FD9                     btemp 0074                     prodh 000FF4  
                   prodl 000FF3                     start 00B2            __CFG_IESO$OFF 000000  
          __CFG_MCLRE$ON 000000             ___param_bank 000000                    ??_abs 0019  
                  ??_pad 001B          __end_of___aodiv 0C7A                    ?_atoi 000C  
                  ?_main 0001                    ?_dtoa 0020          __end_of___aomod 0EDE  
                  _T0CON 000FD5             vfpfcnvrt@fmt 0046                    _PORTD 000F83  
                  _TRISD 000F95            __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000  
          __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000  
         __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000  
         __CFG_EBTR3$OFF 000000          __end_of_lcd_cmd 0FC2          __end_of_lcd_ini 1228  
          __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000  
         __CFG_EBTRB$OFF 000000                    _flags 006E                    _conta 0070  
                  _fputc 1062                    _fputs 138A          __end_of_isdigit 1424  
                  atoi@n 0019                    pad@fp 0015                    atoi@s 000C  
                  _width 006A                    _putch 14CC                    dtoa@d 0022  
                  dtoa@i 0042                    dtoa@n 003A                    dtoa@p 0034  
                  dtoa@s 0038                    dtoa@w 0036          __end_of_isspace 138A  
         __CFG_BOREN$OFF 000000          __end_of_set_bit 14CC                    tablat 000FF5  
                  ttemp5 0075                    ttemp6 0078                    ttemp7 007C  
                  status 000FD8                    wtemp8 0075          __end_of_sprintf 134C  
        __initialization 144E             __end_of_atoi 0DBA             __end_of_main 1062  
           __end_of_dtoa 0B32                   ??_atoi 000E                   ??_main 0068  
                 ??_dtoa 002A            __activetblptr 000002                   _ADCON1 000FC1  
                 ?_fputc 0005                   ?_fputs 000E                   ?_putch 0001  
                 _T0_500 0072                   _INTCON 000FF2            vfpfcnvrt@done 0056  
                 _TMR0IF 007F92           __CFG_XINST$OFF 000000             vfprintf@cfmt 0060  
              ??___aodiv 0015                ??___aomod 0015                   ___wmul 1474  
         __CFG_STVREN$ON 000000         __end_of_int_TMR0 00B2         ??_lcd_escreve_bf 000E  
                 clear_0 1454                   clear_1 1460         ??_lcd_envia_byte 000A  
                 pad@buf 0017                ??_lcd_cmd 0007                   dtoa@fp 0020  
              ??_lcd_ini 0009                   _strlen 1424                   fputc@c 0005  
                 fputs@c 0012                   fputs@i 0013                   fputs@s 000E  
              ??_isdigit 0007             __mediumconst 0000                ??_isspace 0007  
              ??_set_bit 0006                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8                   putch@c 0001         __end_of_vfprintf 12FA  
              ??_sprintf 0068               __accesstop 0080  __end_of__initialization 1466  
        __CFG_PBADEN$OFF 000000            ___rparam_used 000001           __pcstackCOMRAM 0001  
          __end_of_fputc 1102            __end_of_fputs 13C2            __end_of_putch 14CE  
                ??_fputc 0009                  ??_fputs 0012                  ??_putch 0005  
             __pbssBANK0 0080                  ?___wmul 0005                  _T0_1000 0082  
                ?_strlen 0005       __size_of_vfpfcnvrt 02D4                ?_int_TMR0 0001  
                __Hparam 0000                  __Lparam 0000                  ___aodiv 0B32  
                ___aomod 0DBA          __size_of___wmul 0026                ?_vfprintf 005A  
            set_bit@comp 0005             __psmallconst 0600                  __pcinit 144E  
                __ramtop 0600                  __ptext0 0FC2                  __ptext1 12FA  
                __ptext2 12A4                  __ptext3 061C                  __ptext4 08F0  
                __ptext5 1102                  __ptext6 1424                  __ptext7 138A  
                __ptext8 1062                  __ptext9 14CC                  _lcd_cmd 0EDE  
                _lcd_ini 1198          __size_of_strlen 002A             __size_of_abs 0032  
           __size_of_pad 0096                  _isdigit 13F4                  _isspace 134C  
                _set_bit 14B8                  atoi@neg 0012                  _sprintf 12FA  
   end_of_initialization 1466               ??_int_TMR0 0001       lcd_envia_byte@dado 0009  
                fputc@fp 0007            __Lmediumconst 0000                  fputs@fp 0010  
      __end_of_vfpfcnvrt 08F0                  postdec2 000FDD                  postinc0 000FEE  
                postinc1 000FE6                  postinc2 000FDE               ??_vfprintf 0060  
                strlen@a 0007                  strlen@s 0005                _PORTBbits 000F81  
              _PORTDbits 000F83                _PORTEbits 000F84                _TRISBbits 000F93  
              _TRISEbits 000F96               lcd_cmd@cmd 0008              vfpfcnvrt@ap 0048  
            vfpfcnvrt@fp 0044              vfpfcnvrt@ll 004E           __end_of___wmul 149A  
         __end_of_strlen 144E      start_initialization 144E              __end_of_abs 13F4  
            __end_of_pad 1198              vfprintf@fmt 005C                 ??___wmul 0009  
       __CFG_LPT1OSC$OFF 000000                 ??_strlen 0007              __pbssCOMRAM 006A  
          __pcstackBANK0 00B4         ___aodiv@dividend 0005  __size_of_lcd_escreve_bf 007C  
__size_of_lcd_envia_byte 001E        __size_of_int_TMR0 009A        __CFG_CCP2MX$PORTC 000000  
               ?___aodiv 0005                 ?___aomod 0005        lcd_escreve_bf@end 000E  
      lcd_escreve_bf@col 000B        lcd_escreve_bf@lin 000F         ___aodiv@quotient 0017  
      lcd_escreve_bf@str 000C                _bufferLCD 00A4              __pintcodelo 0018  
               ?_lcd_cmd 0001        __size_of_vfprintf 0056                 ?_lcd_ini 0001  
            __smallconst 0600                 ?_isdigit 0005                 ?_isspace 0005  
               ?_set_bit 0005               set_bit@cmd 0006                 ?_sprintf 0062  
         __size_of_fputc 00A0           __size_of_fputs 0038           __size_of_putch 0002  
         ___wmul@product 0009                 i1u150_20 0074                 i1u151_20 0088  
               i1u148_20 003E                 i1u149_20 004E                 i1u149_26 0050  
       __CFG_WDTPS$32768 000000                _vfpfcnvrt 061C        ___wmul@multiplier 0005  
               __Hrparam 0000               vfprintf@ap 005E                 __Lrparam 0000  
             vfprintf@fp 005A         __size_of___aodiv 0148         __size_of___aomod 0124  
             ?_vfpfcnvrt 0044          ___aodiv@divisor 000D          ___aodiv@counter 0015  
       __size_of_lcd_cmd 00E4         __size_of_lcd_ini 0090               sprintf@fmt 0064  
               _atoi$955 0014                 _atoi$956 0018                 _atoi$957 0016  
       __size_of_isdigit 0030                 _dtoa$483 0032           _lcd_escreve_bf 1228  
       __size_of_isspace 003E                 __ptext10 13C2                 __ptext11 0DBA  
               __ptext20 0EDE                 __ptext12 0B32                 __ptext21 14B8  
               __ptext13 0C7A                 __ptext14 134C                 __ptext15 13F4  
               __ptext16 1474                 __ptext17 1198                 __ptext18 1228  
               __ptext19 149A         __size_of_set_bit 0014           _lcd_envia_byte 149A  
       __size_of_sprintf 0052                 _int_TMR0 0018            __size_of_atoi 0140  
          __size_of_main 00A0            __size_of_dtoa 0242                 int$flags 0074  
               lcd_ini@i 000A                 _vfprintf 12A4              _isspace$973 000B  
       ___aomod@dividend 0005   __end_of_lcd_escreve_bf 12A4   __end_of_lcd_envia_byte 14B8  
    lcd_envia_byte@nivel 000A                 isdigit@c 0005                 intlevel1 0000  
              sprintf@ap 00B6                 isspace@c 0005          ___aomod@divisor 000D  
            ??_vfpfcnvrt 004A          ___aomod@counter 0015            _vfpfcnvrt$498 0058  
               sprintf@f 00B8                 sprintf@s 0062          ?_lcd_escreve_bf 000B  
        ?_lcd_envia_byte 0009             ___aodiv@sign 0016             ___aomod@sign 0016  
