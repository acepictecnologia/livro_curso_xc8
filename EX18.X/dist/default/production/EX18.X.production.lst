

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Mon Apr 08 08:03:35 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    33                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    34                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    35                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    36                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    37  0000                     
    38                           ; Version 2.05
    39                           ; Generated 20/12/2018 GMT
    40                           ; 
    41                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    42                           ; All rights reserved.
    43                           ; 
    44                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    45                           ; 
    46                           ; Redistribution and use in source and binary forms, with or without modification, are
    47                           ; permitted provided that the following conditions are met:
    48                           ; 
    49                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    50                           ;        conditions and the following disclaimer.
    51                           ; 
    52                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    53                           ;        of conditions and the following disclaimer in the documentation and/or other
    54                           ;        materials provided with the distribution.
    55                           ; 
    56                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    57                           ;        software without specific prior written permission.
    58                           ; 
    59                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    60                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    61                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    62                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    63                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    64                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    65                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    66                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    67                           ; 
    68                           ; 
    69                           ; Code-generator required, PIC18F4520 Definitions
    70                           ; 
    71                           ; SFR Addresses
    72  0000                     _PORTDbits	set	3971
    73  0000                     _PORTEbits	set	3972
    74  0000                     _PORTD	set	3971
    75  0000                     _TRISEbits	set	3990
    76  0000                     _TRISD	set	3989
    77  0000                     _PORTAbits	set	3968
    78  0000                     _PORTBbits	set	3969
    79  0000                     _PIE1bits	set	3997
    80  0000                     _T1CON	set	4045
    81  0000                     _INTCON	set	4082
    82  0000                     _ADCON1	set	4033
    83  0000                     _TRISA	set	3986
    84  0000                     _TRISB	set	3987
    85  0000                     _TMR1L	set	4046
    86  0000                     _TMR1H	set	4047
    87  0000                     _TMR1IF	set	31984
    88                           
    89                           	psect	smallconst
    90  000600                     __psmallconst:
    91                           	opt callstack 0
    92  000600  00                 	db	0
    93  000601                     STR_3:
    94  000601  25                 	db	37
    95  000602  30                 	db	48	;'0'
    96  000603  32                 	db	50	;'2'
    97  000604  64                 	db	100	;'d'
    98  000605  3A                 	db	58	;':'
    99  000606  25                 	db	37
   100  000607  30                 	db	48	;'0'
   101  000608  32                 	db	50	;'2'
   102  000609  64                 	db	100	;'d'
   103  00060A  3A                 	db	58	;':'
   104  00060B  25                 	db	37
   105  00060C  30                 	db	48	;'0'
   106  00060D  32                 	db	50	;'2'
   107  00060E  64                 	db	100	;'d'
   108  00060F  00                 	db	0
   109  000610                     STR_1:
   110  000610  52                 	db	82	;'R'
   111  000611  54                 	db	84	;'T'
   112  000612  43                 	db	67	;'C'
   113  000613  20                 	db	32
   114  000614  54                 	db	84	;'T'
   115  000615  49                 	db	73	;'I'
   116  000616  4D                 	db	77	;'M'
   117  000617  45                 	db	69	;'E'
   118  000618  52                 	db	82	;'R'
   119  000619  31                 	db	49	;'1'
   120  00061A  00                 	db	0
   121  00061B                     STR_2:
   122  00061B  30                 	db	48	;'0'
   123  00061C  30                 	db	48	;'0'
   124  00061D  3A                 	db	58	;':'
   125  00061E  30                 	db	48	;'0'
   126  00061F  30                 	db	48	;'0'
   127  000620  3A                 	db	58	;':'
   128  000621  30                 	db	48	;'0'
   129  000622  30                 	db	48	;'0'
   130  000623  00                 	db	0
   131                           
   132                           ; #config settings
   133  000624  00                 	db	0	; dummy byte at the end
   134  0000                     
   135                           	psect	cinit
   136  0014FC                     __pcinit:
   137                           	opt callstack 0
   138  0014FC                     start_initialization:
   139                           	opt callstack 0
   140  0014FC                     __initialization:
   141                           	opt callstack 0
   142                           
   143                           ; Clear objects allocated to BANK0 (52 bytes)
   144  0014FC  EE00  F080         	lfsr	0,__pbssBANK0
   145  001500  0E34               	movlw	52
   146  001502                     clear_0:
   147  001502  6AEE               	clrf	postinc0,c
   148  001504  06E8               	decf	wreg,f,c
   149  001506  E1FD               	bnz	clear_0
   150                           
   151                           ; Clear objects allocated to COMRAM (10 bytes)
   152  001508  EE00  F074         	lfsr	0,__pbssCOMRAM
   153  00150C  0E0A               	movlw	10
   154  00150E                     clear_1:
   155  00150E  6AEE               	clrf	postinc0,c
   156  001510  06E8               	decf	wreg,f,c
   157  001512  E1FD               	bnz	clear_1
   158  001514                     end_of_initialization:
   159                           	opt callstack 0
   160  001514                     __end_of__initialization:
   161                           	opt callstack 0
   162  001514  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   163  001516  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   164  001518  0E00               	movlw	low (__Lmediumconst shr (0+16))
   165  00151A  6EF8               	movwf	tblptru,c
   166  00151C  0100               	movlb	0
   167  00151E  EFE6  F007         	goto	_main	;jump to C main() function
   168                           
   169                           	psect	bssCOMRAM
   170  000074                     __pbssCOMRAM:
   171                           	opt callstack 0
   172  000074                     _width:
   173                           	opt callstack 0
   174  000074                     	ds	2
   175  000076                     _prec:
   176                           	opt callstack 0
   177  000076                     	ds	2
   178  000078                     _flags:
   179                           	opt callstack 0
   180  000078                     	ds	2
   181  00007A                     _hor:
   182                           	opt callstack 0
   183  00007A                     	ds	2
   184  00007C                     _min:
   185                           	opt callstack 0
   186  00007C                     	ds	2
   187                           
   188                           	psect	bssBANK0
   189  000080                     __pbssBANK0:
   190                           	opt callstack 0
   191  000080                     _nout:
   192                           	opt callstack 0
   193  000080                     	ds	2
   194  000082                     _seg:
   195                           	opt callstack 0
   196  000082                     	ds	2
   197  000084                     _dbuf:
   198                           	opt callstack 0
   199  000084                     	ds	32
   200  0000A4                     _bufferLCD:
   201                           	opt callstack 0
   202  0000A4                     	ds	16
   203                           
   204                           	psect	cstackCOMRAM
   205  000001                     __pcstackCOMRAM:
   206                           	opt callstack 0
   207  000001                     ?_strlen:
   208                           	opt callstack 0
   209  000001                     ?_isdigit:
   210                           	opt callstack 0
   211  000001                     ?_isspace:
   212                           	opt callstack 0
   213  000001                     ?___wmul:
   214                           	opt callstack 0
   215  000001                     ?___aodiv:
   216                           	opt callstack 0
   217  000001                     ?___aomod:
   218                           	opt callstack 0
   219  000001                     set_bit@comp:
   220                           	opt callstack 0
   221  000001                     ___wmul@multiplier:
   222                           	opt callstack 0
   223  000001                     isdigit@c:
   224                           	opt callstack 0
   225  000001                     isspace@c:
   226                           	opt callstack 0
   227  000001                     fputc@c:
   228                           	opt callstack 0
   229  000001                     strlen@s:
   230                           	opt callstack 0
   231  000001                     ___aodiv@dividend:
   232                           	opt callstack 0
   233  000001                     ___aomod@dividend:
   234                           	opt callstack 0
   235                           
   236                           ; 8 bytes @ 0x0
   237  000001                     	ds	1
   238  000002                     set_bit@cmd:
   239                           	opt callstack 0
   240                           
   241                           ; 1 bytes @ 0x1
   242  000002                     	ds	1
   243  000003                     ??_lcd_cmd:
   244  000003                     ??_isdigit:
   245  000003                     ??_isspace:
   246  000003                     ___wmul@multiplicand:
   247                           	opt callstack 0
   248  000003                     fputc@fp:
   249                           	opt callstack 0
   250  000003                     strlen@a:
   251                           	opt callstack 0
   252                           
   253                           ; 2 bytes @ 0x2
   254  000003                     	ds	1
   255  000004                     lcd_cmd@cmd:
   256                           	opt callstack 0
   257                           
   258                           ; 1 bytes @ 0x3
   259  000004                     	ds	1
   260  000005                     ??_lcd_ini:
   261  000005                     ??_fputc:
   262  000005                     lcd_envia_byte@dado:
   263                           	opt callstack 0
   264  000005                     ___wmul@product:
   265                           	opt callstack 0
   266                           
   267                           ; 2 bytes @ 0x4
   268  000005                     	ds	1
   269  000006                     lcd_ini@i:
   270                           	opt callstack 0
   271  000006                     lcd_envia_byte@nivel:
   272                           	opt callstack 0
   273                           
   274                           ; 1 bytes @ 0x5
   275  000006                     	ds	1
   276  000007                     lcd_escreve_bf@col:
   277                           	opt callstack 0
   278  000007                     _isspace$1081:
   279                           	opt callstack 0
   280                           
   281                           ; 1 bytes @ 0x6
   282  000007                     	ds	1
   283  000008                     ?_atoi:
   284                           	opt callstack 0
   285  000008                     lcd_escreve_bf@str:
   286                           	opt callstack 0
   287  000008                     atoi@s:
   288                           	opt callstack 0
   289                           
   290                           ; 2 bytes @ 0x7
   291  000008                     	ds	1
   292  000009                     ___aodiv@divisor:
   293                           	opt callstack 0
   294  000009                     ___aomod@divisor:
   295                           	opt callstack 0
   296                           
   297                           ; 8 bytes @ 0x8
   298  000009                     	ds	1
   299  00000A                     ??_atoi:
   300  00000A                     lcd_escreve_bf@end:
   301                           	opt callstack 0
   302  00000A                     fputs@s:
   303                           	opt callstack 0
   304                           
   305                           ; 2 bytes @ 0x9
   306  00000A                     	ds	1
   307  00000B                     lcd_escreve_bf@lin:
   308                           	opt callstack 0
   309                           
   310                           ; 1 bytes @ 0xA
   311  00000B                     	ds	1
   312  00000C                     fputs@fp:
   313                           	opt callstack 0
   314                           
   315                           ; 2 bytes @ 0xB
   316  00000C                     	ds	2
   317  00000E                     fputs@c:
   318                           	opt callstack 0
   319  00000E                     atoi@neg:
   320                           	opt callstack 0
   321                           
   322                           ; 2 bytes @ 0xD
   323  00000E                     	ds	1
   324  00000F                     fputs@i:
   325                           	opt callstack 0
   326                           
   327                           ; 2 bytes @ 0xE
   328  00000F                     	ds	1
   329  000010                     _atoi$1063:
   330                           	opt callstack 0
   331                           
   332                           ; 2 bytes @ 0xF
   333  000010                     	ds	1
   334  000011                     ?_pad:
   335                           	opt callstack 0
   336  000011                     ___aodiv@counter:
   337                           	opt callstack 0
   338  000011                     ___aomod@counter:
   339                           	opt callstack 0
   340  000011                     pad@fp:
   341                           	opt callstack 0
   342                           
   343                           ; 2 bytes @ 0x10
   344  000011                     	ds	1
   345  000012                     ___aodiv@sign:
   346                           	opt callstack 0
   347  000012                     ___aomod@sign:
   348                           	opt callstack 0
   349  000012                     _atoi$1065:
   350                           	opt callstack 0
   351                           
   352                           ; 2 bytes @ 0x11
   353  000012                     	ds	1
   354  000013                     ?_abs:
   355                           	opt callstack 0
   356  000013                     pad@buf:
   357                           	opt callstack 0
   358  000013                     abs@a:
   359                           	opt callstack 0
   360  000013                     ___aodiv@quotient:
   361                           	opt callstack 0
   362                           
   363                           ; 8 bytes @ 0x12
   364  000013                     	ds	1
   365  000014                     _atoi$1064:
   366                           	opt callstack 0
   367                           
   368                           ; 1 bytes @ 0x13
   369  000014                     	ds	1
   370  000015                     ??_abs:
   371  000015                     pad@p:
   372                           	opt callstack 0
   373  000015                     atoi@n:
   374                           	opt callstack 0
   375                           
   376                           ; 2 bytes @ 0x14
   377  000015                     	ds	2
   378  000017                     ??_pad:
   379                           
   380                           ; 1 bytes @ 0x16
   381  000017                     	ds	1
   382  000018                     pad@i:
   383                           	opt callstack 0
   384                           
   385                           ; 2 bytes @ 0x17
   386  000018                     	ds	2
   387  00001A                     pad@w:
   388                           	opt callstack 0
   389                           
   390                           ; 2 bytes @ 0x19
   391  00001A                     	ds	2
   392  00001C                     ?_dtoa:
   393                           	opt callstack 0
   394  00001C                     dtoa@fp:
   395                           	opt callstack 0
   396                           
   397                           ; 2 bytes @ 0x1B
   398  00001C                     	ds	2
   399  00001E                     dtoa@d:
   400                           	opt callstack 0
   401                           
   402                           ; 8 bytes @ 0x1D
   403  00001E                     	ds	8
   404  000026                     ??_dtoa:
   405                           
   406                           ; 1 bytes @ 0x25
   407  000026                     	ds	8
   408  00002E                     _dtoa$591:
   409                           	opt callstack 0
   410                           
   411                           ; 2 bytes @ 0x2D
   412  00002E                     	ds	2
   413  000030                     dtoa@p:
   414                           	opt callstack 0
   415                           
   416                           ; 2 bytes @ 0x2F
   417  000030                     	ds	2
   418  000032                     dtoa@w:
   419                           	opt callstack 0
   420                           
   421                           ; 2 bytes @ 0x31
   422  000032                     	ds	2
   423  000034                     dtoa@s:
   424                           	opt callstack 0
   425                           
   426                           ; 2 bytes @ 0x33
   427  000034                     	ds	2
   428  000036                     dtoa@n:
   429                           	opt callstack 0
   430                           
   431                           ; 8 bytes @ 0x35
   432  000036                     	ds	8
   433  00003E                     dtoa@i:
   434                           	opt callstack 0
   435                           
   436                           ; 2 bytes @ 0x3D
   437  00003E                     	ds	2
   438  000040                     ?_vfpfcnvrt:
   439                           	opt callstack 0
   440  000040                     vfpfcnvrt@fp:
   441                           	opt callstack 0
   442                           
   443                           ; 2 bytes @ 0x3F
   444  000040                     	ds	2
   445  000042                     vfpfcnvrt@fmt:
   446                           	opt callstack 0
   447                           
   448                           ; 2 bytes @ 0x41
   449  000042                     	ds	2
   450  000044                     vfpfcnvrt@ap:
   451                           	opt callstack 0
   452                           
   453                           ; 2 bytes @ 0x43
   454  000044                     	ds	2
   455  000046                     ??_vfpfcnvrt:
   456                           
   457                           ; 1 bytes @ 0x45
   458  000046                     	ds	4
   459  00004A                     vfpfcnvrt@ll:
   460                           	opt callstack 0
   461                           
   462                           ; 8 bytes @ 0x49
   463  00004A                     	ds	8
   464  000052                     vfpfcnvrt@done:
   465                           	opt callstack 0
   466                           
   467                           ; 2 bytes @ 0x51
   468  000052                     	ds	2
   469  000054                     _vfpfcnvrt$606:
   470                           	opt callstack 0
   471                           
   472                           ; 2 bytes @ 0x53
   473  000054                     	ds	2
   474  000056                     ?_vfprintf:
   475                           	opt callstack 0
   476  000056                     vfprintf@fp:
   477                           	opt callstack 0
   478                           
   479                           ; 2 bytes @ 0x55
   480  000056                     	ds	2
   481  000058                     vfprintf@fmt:
   482                           	opt callstack 0
   483                           
   484                           ; 2 bytes @ 0x57
   485  000058                     	ds	2
   486  00005A                     vfprintf@ap:
   487                           	opt callstack 0
   488                           
   489                           ; 2 bytes @ 0x59
   490  00005A                     	ds	2
   491  00005C                     vfprintf@cfmt:
   492                           	opt callstack 0
   493                           
   494                           ; 2 bytes @ 0x5B
   495  00005C                     	ds	2
   496  00005E                     ?_sprintf:
   497                           	opt callstack 0
   498  00005E                     sprintf@s:
   499                           	opt callstack 0
   500                           
   501                           ; 2 bytes @ 0x5D
   502  00005E                     	ds	2
   503  000060                     sprintf@fmt:
   504                           	opt callstack 0
   505                           
   506                           ; 2 bytes @ 0x5F
   507  000060                     	ds	8
   508  000068                     
   509                           ; 1 bytes @ 0x67
   510  000068                     	ds	2
   511  00006A                     sprintf@ap:
   512                           	opt callstack 0
   513                           
   514                           ; 2 bytes @ 0x69
   515  00006A                     	ds	2
   516  00006C                     sprintf@f:
   517                           	opt callstack 0
   518                           
   519                           ; 6 bytes @ 0x6B
   520  00006C                     	ds	6
   521  000072                     ??_main:
   522                           
   523                           ; 1 bytes @ 0x71
   524  000072                     	ds	2
   525                           
   526 ;;
   527 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   528 ;;
   529 ;; *************** function _main *****************
   530 ;; Defined at:
   531 ;;		line 37 in file "EX18.c"
   532 ;; Parameters:    Size  Location     Type
   533 ;;		None
   534 ;; Auto vars:     Size  Location     Type
   535 ;;		None
   536 ;; Return value:  Size  Location     Type
   537 ;;                  1    wreg      void 
   538 ;; Registers used:
   539 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   540 ;; Tracked objects:
   541 ;;		On entry : 0/0
   542 ;;		On exit  : 0/0
   543 ;;		Unchanged: 0/0
   544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   545 ;;      Params:         0       0       0       0       0       0       0
   546 ;;      Locals:         0       0       0       0       0       0       0
   547 ;;      Temps:          2       0       0       0       0       0       0
   548 ;;      Totals:         2       0       0       0       0       0       0
   549 ;;Total ram usage:        2 bytes
   550 ;; Hardware stack levels required when called:    9
   551 ;; This function calls:
   552 ;;		_lcd_escreve_bf
   553 ;;		_lcd_ini
   554 ;;		_sprintf
   555 ;; This function is called by:
   556 ;;		Startup code after reset
   557 ;; This function uses a non-reentrant model
   558 ;;
   559                           
   560                           	psect	text0
   561  000FCC                     __ptext0:
   562                           	opt callstack 0
   563  000FCC                     _main:
   564                           	opt callstack 22
   565                           
   566                           ;EX18.c: 39:     TRISB = 0b00000001;
   567                           
   568                           ;incstack = 0
   569  000FCC  0E01               	movlw	1
   570  000FCE  6E93               	movwf	3987,c	;volatile
   571                           
   572                           ;EX18.c: 40:     TRISA = 0b00010000;
   573  000FD0  0E10               	movlw	16
   574  000FD2  6E92               	movwf	3986,c	;volatile
   575                           
   576                           ;EX18.c: 42:     ADCON1 = 0x0F;
   577  000FD4  0E0F               	movlw	15
   578  000FD6  6EC1               	movwf	4033,c	;volatile
   579                           
   580                           ;EX18.c: 44:     INTCON = 0b11000000;
   581  000FD8  0EC0               	movlw	192
   582  000FDA  6EF2               	movwf	4082,c	;volatile
   583                           
   584                           ;EX18.c: 55:     T1CON = 0b00001111;
   585  000FDC  0E0F               	movlw	15
   586  000FDE  6ECD               	movwf	4045,c	;volatile
   587                           
   588                           ;EX18.c: 65:     PIE1bits.TMR1IE = 1;
   589  000FE0  809D               	bsf	3997,0,c	;volatile
   590                           
   591                           ;EX18.c: 67:     TMR1H = 0x80;
   592  000FE2  0E80               	movlw	128
   593  000FE4  6ECF               	movwf	4047,c	;volatile
   594                           
   595                           ;EX18.c: 68:     TMR1L = 0x00;
   596  000FE6  0E00               	movlw	0
   597  000FE8  6ECE               	movwf	4046,c	;volatile
   598                           
   599                           ;EX18.c: 70:     lcd_ini();
   600  000FEA  ECF0  F008         	call	_lcd_ini	;wreg free
   601                           
   602                           ;EX18.c: 73:     lcd_escreve_bf(1, 4, "RTC TIMER1");
   603  000FEE  0E04               	movlw	4
   604  000FF0  6E07               	movwf	lcd_escreve_bf@col,c
   605  000FF2  0E10               	movlw	low STR_1
   606  000FF4  6E08               	movwf	lcd_escreve_bf@str,c
   607  000FF6  0E06               	movlw	high STR_1
   608  000FF8  6E09               	movwf	lcd_escreve_bf@str+1,c
   609  000FFA  0E01               	movlw	1
   610  000FFC  EC38  F009         	call	_lcd_escreve_bf
   611                           
   612                           ;EX18.c: 76:     lcd_escreve_bf(2, 5, "00:00:00");
   613  001000  0E05               	movlw	5
   614  001002  6E07               	movwf	lcd_escreve_bf@col,c
   615  001004  0E1B               	movlw	low STR_2
   616  001006  6E08               	movwf	lcd_escreve_bf@str,c
   617  001008  0E06               	movlw	high STR_2
   618  00100A  6E09               	movwf	lcd_escreve_bf@str+1,c
   619  00100C  0E02               	movlw	2
   620  00100E  EC38  F009         	call	_lcd_escreve_bf
   621  001012                     l2006:
   622                           
   623                           ;EX18.c: 79:     {;EX18.c: 80:         _delay((unsigned long)((200)*(8000000/4000.0)));
   624  001012  0E03               	movlw	3
   625  001014  6E73               	movwf	(??_main+1)& (0+255),c
   626  001016  0E08               	movlw	8
   627  001018  6E72               	movwf	??_main& (0+255),c
   628  00101A  0E77               	movlw	119
   629  00101C                     u1577:
   630  00101C  2EE8               	decfsz	wreg,f,c
   631  00101E  D7FE               	bra	u1577
   632  001020  2E72               	decfsz	??_main& (0+255),f,c
   633  001022  D7FC               	bra	u1577
   634  001024  2E73               	decfsz	(??_main+1)& (0+255),f,c
   635  001026  D7FA               	bra	u1577
   636  001028  F000               	nop	
   637                           
   638                           ;EX18.c: 82:         if (PORTBbits.RB0)
   639  00102A  A081               	btfss	3969,0,c	;volatile
   640  00102C  D00E               	goto	l2016
   641                           
   642                           ;EX18.c: 83:         {;EX18.c: 84:             min++;
   643  00102E  4A7C               	infsnz	_min,f,c
   644  001030  2A7D               	incf	_min+1,f,c
   645                           
   646                           ;EX18.c: 85:             if (min > 59) min = 0;
   647  001032  BE7D               	btfsc	_min+1,7,c
   648  001034  D00A               	goto	l2016
   649  001036  507D               	movf	_min+1,w,c
   650  001038  E104               	bnz	u1540
   651  00103A  0E3C               	movlw	60
   652  00103C  5C7C               	subwf	_min,w,c
   653  00103E  A0D8               	btfss	status,0,c
   654  001040  D004               	goto	l2016
   655  001042                     u1540:
   656  001042  0E00               	movlw	0
   657  001044  6E7D               	movwf	_min+1,c
   658  001046  0E00               	movlw	0
   659  001048  6E7C               	movwf	_min,c
   660  00104A                     l2016:
   661                           
   662                           ;EX18.c: 88:         if (PORTAbits.RA4)
   663  00104A  A880               	btfss	3968,4,c	;volatile
   664  00104C  D00E               	goto	l2024
   665                           
   666                           ;EX18.c: 89:         {;EX18.c: 90:             hor++;
   667  00104E  4A7A               	infsnz	_hor,f,c
   668  001050  2A7B               	incf	_hor+1,f,c
   669                           
   670                           ;EX18.c: 91:             if(hor > 23) hor = 0;
   671  001052  BE7B               	btfsc	_hor+1,7,c
   672  001054  D00A               	goto	l2024
   673  001056  507B               	movf	_hor+1,w,c
   674  001058  E104               	bnz	u1560
   675  00105A  0E18               	movlw	24
   676  00105C  5C7A               	subwf	_hor,w,c
   677  00105E  A0D8               	btfss	status,0,c
   678  001060  D004               	goto	l2024
   679  001062                     u1560:
   680  001062  0E00               	movlw	0
   681  001064  6E7B               	movwf	_hor+1,c
   682  001066  0E00               	movlw	0
   683  001068  6E7A               	movwf	_hor,c
   684  00106A                     l2024:
   685                           
   686                           ;EX18.c: 95:         sprintf(bufferLCD, "%02d:%02d:%02d", hor, min, seg);
   687  00106A  0EA4               	movlw	low _bufferLCD
   688  00106C  6E5E               	movwf	sprintf@s,c
   689  00106E  0E00               	movlw	high _bufferLCD
   690  001070  6E5F               	movwf	sprintf@s+1,c
   691  001072  0E01               	movlw	low STR_3
   692  001074  6E60               	movwf	sprintf@fmt,c
   693  001076  0E06               	movlw	high STR_3
   694  001078  6E61               	movwf	sprintf@fmt+1,c
   695  00107A  C07A  F062         	movff	_hor,?_sprintf+4
   696  00107E  C07B  F063         	movff	_hor+1,?_sprintf+5
   697  001082  C07C  F064         	movff	_min,?_sprintf+6
   698  001086  C07D  F065         	movff	_min+1,?_sprintf+7
   699  00108A  C082  F066         	movff	_seg,?_sprintf+8
   700  00108E  C083  F067         	movff	_seg+1,?_sprintf+9
   701  001092  ECD6  F009         	call	_sprintf	;wreg free
   702                           
   703                           ;EX18.c: 98:         lcd_escreve_bf(2, 5, bufferLCD);
   704  001096  0E05               	movlw	5
   705  001098  6E07               	movwf	lcd_escreve_bf@col,c
   706  00109A  0EA4               	movlw	low _bufferLCD
   707  00109C  6E08               	movwf	lcd_escreve_bf@str,c
   708  00109E  0E00               	movlw	high _bufferLCD
   709  0010A0  6E09               	movwf	lcd_escreve_bf@str+1,c
   710  0010A2  0E02               	movlw	2
   711  0010A4  EC38  F009         	call	_lcd_escreve_bf
   712  0010A8  D7B4               	goto	l2006
   713  0010AA                     __end_of_main:
   714                           	opt callstack 0
   715                           
   716 ;; *************** function _sprintf *****************
   717 ;; Defined at:
   718 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_sprintf.c"
   719 ;; Parameters:    Size  Location     Type
   720 ;;  s               2   93[COMRAM] PTR unsigned char 
   721 ;;		 -> bufferLCD(16), 
   722 ;;  fmt             2   95[COMRAM] PTR const unsigned char 
   723 ;;		 -> STR_3(15), 
   724 ;; Auto vars:     Size  Location     Type
   725 ;;  f               6  107[COMRAM] struct _IO_FILE
   726 ;;  ap              2  105[COMRAM] PTR void [1]
   727 ;;		 -> ?_sprintf(2), 
   728 ;;  ret             2    0        int 
   729 ;; Return value:  Size  Location     Type
   730 ;;                  2   93[COMRAM] int 
   731 ;; Registers used:
   732 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   733 ;; Tracked objects:
   734 ;;		On entry : 0/0
   735 ;;		On exit  : 0/0
   736 ;;		Unchanged: 0/0
   737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   738 ;;      Params:        10       0       0       0       0       0       0
   739 ;;      Locals:        10       0       0       0       0       0       0
   740 ;;      Temps:          0       0       0       0       0       0       0
   741 ;;      Totals:        20       0       0       0       0       0       0
   742 ;;Total ram usage:       20 bytes
   743 ;; Hardware stack levels used:    1
   744 ;; Hardware stack levels required when called:    8
   745 ;; This function calls:
   746 ;;		_vfprintf
   747 ;; This function is called by:
   748 ;;		_main
   749 ;; This function uses a non-reentrant model
   750 ;;
   751                           
   752                           	psect	text1
   753  0013AC                     __ptext1:
   754                           	opt callstack 0
   755  0013AC                     _sprintf:
   756                           	opt callstack 22
   757                           
   758                           ;incstack = 0
   759  0013AC  0E62               	movlw	low (?_sprintf+4)
   760  0013AE  6E6A               	movwf	sprintf@ap,c
   761  0013B0  0E00               	movlw	high (?_sprintf+4)
   762  0013B2  6E6B               	movwf	sprintf@ap+1,c
   763  0013B4  C05E  F06C         	movff	sprintf@s,sprintf@f
   764  0013B8  C05F  F06D         	movff	sprintf@s+1,sprintf@f+1
   765  0013BC  0E00               	movlw	0
   766  0013BE  6E6F               	movwf	sprintf@f+3,c
   767  0013C0  0E00               	movlw	0
   768  0013C2  6E6E               	movwf	sprintf@f+2,c
   769  0013C4  0E00               	movlw	0
   770  0013C6  6E71               	movwf	sprintf@f+5,c
   771  0013C8  0E00               	movlw	0
   772  0013CA  6E70               	movwf	sprintf@f+4,c
   773  0013CC  0E6C               	movlw	low sprintf@f
   774  0013CE  6E56               	movwf	vfprintf@fp,c
   775  0013D0  0E00               	movlw	high sprintf@f
   776  0013D2  6E57               	movwf	vfprintf@fp+1,c
   777  0013D4  C060  F058         	movff	sprintf@fmt,vfprintf@fmt
   778  0013D8  C061  F059         	movff	sprintf@fmt+1,vfprintf@fmt+1
   779  0013DC  0E6A               	movlw	low sprintf@ap
   780  0013DE  6E5A               	movwf	vfprintf@ap,c
   781  0013E0  0E00               	movlw	high sprintf@ap
   782  0013E2  6E5B               	movwf	vfprintf@ap+1,c
   783  0013E4  ECAB  F009         	call	_vfprintf	;wreg free
   784  0013E8  506E               	movf	sprintf@f+2,w,c
   785  0013EA  245E               	addwf	sprintf@s,w,c
   786  0013EC  6ED9               	movwf	fsr2l,c
   787  0013EE  506F               	movf	sprintf@f+3,w,c
   788  0013F0  205F               	addwfc	sprintf@s+1,w,c
   789  0013F2  6EDA               	movwf	fsr2h,c
   790  0013F4  0E00               	movlw	0
   791  0013F6  6EDF               	movwf	indf2,c
   792  0013F8  0012               	return		;funcret
   793  0013FA                     __end_of_sprintf:
   794                           	opt callstack 0
   795                           
   796 ;; *************** function _vfprintf *****************
   797 ;; Defined at:
   798 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
   799 ;; Parameters:    Size  Location     Type
   800 ;;  fp              2   85[COMRAM] PTR struct _IO_FILE
   801 ;;		 -> sprintf@f(6), 
   802 ;;  fmt             2   87[COMRAM] PTR const unsigned char 
   803 ;;		 -> STR_3(15), 
   804 ;;  ap              2   89[COMRAM] PTR PTR void 
   805 ;;		 -> sprintf@ap(2), 
   806 ;; Auto vars:     Size  Location     Type
   807 ;;  cfmt            2   91[COMRAM] PTR unsigned char 
   808 ;;		 -> STR_3(15), 
   809 ;; Return value:  Size  Location     Type
   810 ;;                  2   85[COMRAM] int 
   811 ;; Registers used:
   812 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   813 ;; Tracked objects:
   814 ;;		On entry : 0/0
   815 ;;		On exit  : 0/0
   816 ;;		Unchanged: 0/0
   817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   818 ;;      Params:         6       0       0       0       0       0       0
   819 ;;      Locals:         2       0       0       0       0       0       0
   820 ;;      Temps:          0       0       0       0       0       0       0
   821 ;;      Totals:         8       0       0       0       0       0       0
   822 ;;Total ram usage:        8 bytes
   823 ;; Hardware stack levels used:    1
   824 ;; Hardware stack levels required when called:    7
   825 ;; This function calls:
   826 ;;		_vfpfcnvrt
   827 ;; This function is called by:
   828 ;;		_sprintf
   829 ;; This function uses a non-reentrant model
   830 ;;
   831                           
   832                           	psect	text2
   833  001356                     __ptext2:
   834                           	opt callstack 0
   835  001356                     _vfprintf:
   836                           	opt callstack 22
   837                           
   838                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.05\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
   839                           
   840                           ;incstack = 0
   841  001356  C058  F05C         	movff	vfprintf@fmt,vfprintf@cfmt
   842  00135A  C059  F05D         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
   843                           
   844                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
   845  00135E  0E00               	movlw	0
   846  001360  0100               	movlb	0	; () banked
   847  001362  6F81               	movwf	(_nout+1)& (0+255),b
   848  001364  0E00               	movlw	0
   849  001366  6F80               	movwf	_nout& (0+255),b
   850                           
   851                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
   852  001368  D013               	goto	l1904
   853  00136A                     l1902:
   854                           
   855                           ; BSR set to: 0
   856                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
   857  00136A  C056  F040         	movff	vfprintf@fp,vfpfcnvrt@fp
   858  00136E  C057  F041         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
   859  001372  0E5C               	movlw	low vfprintf@cfmt
   860  001374  6E42               	movwf	vfpfcnvrt@fmt,c
   861  001376  0E00               	movlw	high vfprintf@cfmt
   862  001378  6E43               	movwf	vfpfcnvrt@fmt+1,c
   863  00137A  C05A  F044         	movff	vfprintf@ap,vfpfcnvrt@ap
   864  00137E  C05B  F045         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
   865  001382  EC13  F003         	call	_vfpfcnvrt	;wreg free
   866  001386  5040               	movf	?_vfpfcnvrt,w,c
   867  001388  0100               	movlb	0	; () banked
   868  00138A  2780               	addwf	_nout& (0+255),f,b
   869  00138C  5041               	movf	?_vfpfcnvrt+1,w,c
   870  00138E  2381               	addwfc	(_nout+1)& (0+255),f,b
   871  001390                     l1904:
   872                           
   873                           ; BSR set to: 0
   874                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
   875  001390  C05C  FFF6         	movff	vfprintf@cfmt,tblptrl
   876  001394  C05D  FFF7         	movff	vfprintf@cfmt+1,tblptrh
   877  001398                     	if	0	;tblptru may be non-zero
   878  001398                     	endif
   879  001398                     	if	0	;tblptru may be non-zero
   880  001398                     	endif
   881  001398  0008               	tblrd		*
   882  00139A  50F5               	movf	tablat,w,c
   883  00139C  0900               	iorlw	0
   884  00139E  A4D8               	btfss	status,2,c
   885  0013A0  D7E4               	goto	l1902
   886                           
   887                           ; BSR set to: 0
   888                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
   889  0013A2  C080  F056         	movff	_nout,?_vfprintf
   890  0013A6  C081  F057         	movff	_nout+1,?_vfprintf+1
   891                           
   892                           ; BSR set to: 0
   893  0013AA  0012               	return		;funcret
   894  0013AC                     __end_of_vfprintf:
   895                           	opt callstack 0
   896                           
   897 ;; *************** function _vfpfcnvrt *****************
   898 ;; Defined at:
   899 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
   900 ;; Parameters:    Size  Location     Type
   901 ;;  fp              2   63[COMRAM] PTR struct _IO_FILE
   902 ;;		 -> sprintf@f(6), 
   903 ;;  fmt             2   65[COMRAM] PTR PTR unsigned char 
   904 ;;		 -> vfprintf@cfmt(2), 
   905 ;;  ap              2   67[COMRAM] PTR PTR void 
   906 ;;		 -> sprintf@ap(2), 
   907 ;; Auto vars:     Size  Location     Type
   908 ;;  ll              8   73[COMRAM] long long 
   909 ;;  llu             8    0        unsigned long long 
   910 ;;  f               4    0        unsigned long long 
   911 ;;  vp              3    0        PTR void 
   912 ;;  ct              3    0        unsigned char [3]
   913 ;;  cp              3    0        PTR unsigned char 
   914 ;;  done            2   81[COMRAM] int 
   915 ;;  i               2    0        int 
   916 ;;  c               1    0        unsigned char 
   917 ;; Return value:  Size  Location     Type
   918 ;;                  2   63[COMRAM] int 
   919 ;; Registers used:
   920 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   921 ;; Tracked objects:
   922 ;;		On entry : 0/0
   923 ;;		On exit  : 0/0
   924 ;;		Unchanged: 0/0
   925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   926 ;;      Params:         6       0       0       0       0       0       0
   927 ;;      Locals:        12       0       0       0       0       0       0
   928 ;;      Temps:          4       0       0       0       0       0       0
   929 ;;      Totals:        22       0       0       0       0       0       0
   930 ;;Total ram usage:       22 bytes
   931 ;; Hardware stack levels used:    1
   932 ;; Hardware stack levels required when called:    6
   933 ;; This function calls:
   934 ;;		_atoi
   935 ;;		_dtoa
   936 ;;		_fputc
   937 ;;		_isdigit
   938 ;; This function is called by:
   939 ;;		_vfprintf
   940 ;; This function uses a non-reentrant model
   941 ;;
   942                           
   943                           	psect	text3
   944  000626                     __ptext3:
   945                           	opt callstack 0
   946  000626                     _vfpfcnvrt:
   947                           	opt callstack 22
   948                           
   949                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 674:     long long ll;
   950                           
   951                           ; BSR set to: 0
   952                           ;incstack = 0
   953  000626  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   954  00062A  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   955  00062E  CFDE FFF6          	movff	postinc2,tblptrl
   956  000632  CFDD FFF7          	movff	postdec2,tblptrh
   957  000636                     	if	0	;tblptru may be non-zero
   958  000636                     	endif
   959  000636                     	if	0	;tblptru may be non-zero
   960  000636                     	endif
   961  000636  0008               	tblrd		*
   962  000638  50F5               	movf	tablat,w,c
   963  00063A  0A25               	xorlw	37
   964  00063C  A4D8               	btfss	status,2,c
   965  00063E  D143               	goto	l1878
   966                           
   967                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
   968  000640  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   969  000644  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   970  000648  2ADE               	incf	postinc2,f,c
   971  00064A  0E00               	movlw	0
   972  00064C  22DD               	addwfc	postdec2,f,c
   973                           
   974                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
   975  00064E  0E00               	movlw	0
   976  000650  6E75               	movwf	_width+1,c
   977  000652  0E00               	movlw	0
   978  000654  6E74               	movwf	_width,c
   979  000656  C074  F078         	movff	_width,_flags
   980  00065A  C075  F079         	movff	_width+1,_flags+1
   981                           
   982                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
   983  00065E  6876               	setf	_prec,c
   984  000660  6877               	setf	_prec+1,c
   985                           
   986                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 688:       
      +                            done = 0;
   987  000662  0E00               	movlw	0
   988  000664  6E53               	movwf	vfpfcnvrt@done+1,c
   989  000666  0E00               	movlw	0
   990  000668  D014               	goto	L1
   991  00066A                     l1804:
   992                           
   993                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 692:       
      +                                        flags |= (1 << 0);
   994  00066A  8078               	bsf	_flags,0,c
   995  00066C                     l1806:
   996                           
   997                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 693:       
      +                                        ++*fmt;
   998  00066C  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   999  000670  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1000  000674  2ADE               	incf	postinc2,f,c
  1001  000676  0E00               	movlw	0
  1002  000678  22DD               	addwfc	postdec2,f,c
  1003                           
  1004                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 694:       
      +                                        break;
  1005  00067A  D02E               	goto	l1830
  1006  00067C                     l1808:
  1007                           
  1008                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 696:       
      +                                        flags |= (1 << 1);
  1009  00067C  8278               	bsf	_flags,1,c
  1010  00067E  D7F6               	goto	l1806
  1011  000680                     l1812:
  1012                           
  1013                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 700:       
      +                                        flags |= (1 << 2);
  1014  000680  8478               	bsf	_flags,2,c
  1015  000682  D7F4               	goto	l1806
  1016  000684                     l1816:
  1017                           
  1018                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 704:       
      +                                        flags |= (1 << 3);
  1019  000684  8678               	bsf	_flags,3,c
  1020  000686  D7F2               	goto	l1806
  1021  000688                     l1820:
  1022                           
  1023                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 708:       
      +                                        flags |= (1 << 4);
  1024  000688  8878               	bsf	_flags,4,c
  1025  00068A  D7F0               	goto	l1806
  1026  00068C                     l1824:
  1027                           
  1028                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 712:       
      +                                        done = 1;
  1029  00068C  0E00               	movlw	0
  1030  00068E  6E53               	movwf	vfpfcnvrt@done+1,c
  1031  000690  0E01               	movlw	1
  1032  000692                     L1:
  1033  000692  6E52               	movwf	vfpfcnvrt@done,c
  1034                           
  1035                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 713:       
      +                                        break;
  1036  000694  D021               	goto	l1830
  1037  000696                     l1828:
  1038  000696  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1039  00069A  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1040  00069E  CFDE FFF6          	movff	postinc2,tblptrl
  1041  0006A2  CFDD FFF7          	movff	postdec2,tblptrh
  1042  0006A6                     	if	0	;tblptru may be non-zero
  1043  0006A6                     	endif
  1044  0006A6                     	if	0	;tblptru may be non-zero
  1045  0006A6                     	endif
  1046  0006A6  0008               	tblrd		*
  1047  0006A8  50F5               	movf	tablat,w,c
  1048  0006AA  6E46               	movwf	??_vfpfcnvrt& (0+255),c
  1049  0006AC  6A47               	clrf	(??_vfpfcnvrt+1)& (0+255),c
  1050                           
  1051                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1052                           ; Switch size 1, requested type "simple"
  1053                           ; Number of cases is 1, Range of values is 0 to 0
  1054                           ; switch strategies available:
  1055                           ; Name         Instructions Cycles
  1056                           ; simple_byte            4     3 (average)
  1057                           ;	Chosen strategy is simple_byte
  1058  0006AE  5047               	movf	??_vfpfcnvrt+1,w,c
  1059  0006B0  0A00               	xorlw	0	; case 0
  1060  0006B2  A4D8               	btfss	status,2,c
  1061  0006B4  D7EB               	goto	l1824
  1062                           
  1063                           ; Switch size 1, requested type "simple"
  1064                           ; Number of cases is 5, Range of values is 32 to 48
  1065                           ; switch strategies available:
  1066                           ; Name         Instructions Cycles
  1067                           ; simple_byte           16     9 (average)
  1068                           ;	Chosen strategy is simple_byte
  1069  0006B6  5046               	movf	??_vfpfcnvrt,w,c
  1070  0006B8  0A20               	xorlw	32	; case 32
  1071  0006BA  B4D8               	btfsc	status,2,c
  1072  0006BC  D7E3               	goto	l1816
  1073  0006BE  0A03               	xorlw	3	; case 35
  1074  0006C0  B4D8               	btfsc	status,2,c
  1075  0006C2  D7E2               	goto	l1820
  1076  0006C4  0A08               	xorlw	8	; case 43
  1077  0006C6  B4D8               	btfsc	status,2,c
  1078  0006C8  D7DB               	goto	l1812
  1079  0006CA  0A06               	xorlw	6	; case 45
  1080  0006CC  B4D8               	btfsc	status,2,c
  1081  0006CE  D7CD               	goto	l1804
  1082  0006D0  0A1D               	xorlw	29	; case 48
  1083  0006D2  B4D8               	btfsc	status,2,c
  1084  0006D4  D7D3               	goto	l1808
  1085  0006D6  D7DA               	goto	l1824
  1086  0006D8                     l1830:
  1087                           
  1088                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 689:       
      +                            while (!done) {
  1089  0006D8  5052               	movf	vfpfcnvrt@done,w,c
  1090  0006DA  1053               	iorwf	vfpfcnvrt@done+1,w,c
  1091  0006DC  B4D8               	btfsc	status,2,c
  1092  0006DE  D7DB               	goto	l1828
  1093                           
  1094                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 716:       
      +                            if (flags & (1 << 0)) {
  1095  0006E0  B078               	btfsc	_flags,0,c
  1096                           
  1097                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 717:       
      +                                flags &= ~(1 << 1);
  1098  0006E2  9278               	bcf	_flags,1,c
  1099                           
  1100                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 723:       
      +                            if ((*fmt)[0] == '*') {
  1101  0006E4  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1102  0006E8  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1103  0006EC  CFDE FFF6          	movff	postinc2,tblptrl
  1104  0006F0  CFDD FFF7          	movff	postdec2,tblptrh
  1105  0006F4                     	if	0	;tblptru may be non-zero
  1106  0006F4                     	endif
  1107  0006F4                     	if	0	;tblptru may be non-zero
  1108  0006F4                     	endif
  1109  0006F4  0008               	tblrd		*
  1110  0006F6  50F5               	movf	tablat,w,c
  1111  0006F8  0A2A               	xorlw	42
  1112  0006FA  A4D8               	btfss	status,2,c
  1113  0006FC  D023               	goto	l1842
  1114                           
  1115                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 724:       
      +                                ++*fmt;
  1116  0006FE  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1117  000702  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1118  000706  2ADE               	incf	postinc2,f,c
  1119  000708  0E00               	movlw	0
  1120  00070A  22DD               	addwfc	postdec2,f,c
  1121                           
  1122                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 725:       
      +                                width = (*(int *)__va_arg(*(int **)ap, (int)0));
  1123  00070C  C044  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1124  000710  C045  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1125  000714  CFDF F046          	movff	indf2,??_vfpfcnvrt
  1126  000718  0E02               	movlw	2
  1127  00071A  26DE               	addwf	postinc2,f,c
  1128  00071C  CFDF F047          	movff	indf2,??_vfpfcnvrt+1
  1129  000720  0E00               	movlw	0
  1130  000722  22DD               	addwfc	postdec2,f,c
  1131  000724  C046  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1132  000728  C047  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1133  00072C  CFDE F074          	movff	postinc2,_width
  1134  000730  CFDD F075          	movff	postdec2,_width+1
  1135                           
  1136                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 726:       
      +                                if (width < 0) {
  1137  000734  AE75               	btfss	_width+1,7,c
  1138  000736  D03F               	goto	u1370
  1139                           
  1140                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 727:       
      +                                    flags |= (1 << 0);
  1141  000738  8078               	bsf	_flags,0,c
  1142                           
  1143                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 728:       
      +                                    width = -width;
  1144  00073A  6C74               	negf	_width,c
  1145  00073C  1E75               	comf	_width+1,f,c
  1146  00073E  B0D8               	btfsc	status,0,c
  1147  000740  2A75               	incf	_width+1,f,c
  1148  000742  D039               	goto	u1370
  1149  000744                     l1842:
  1150                           
  1151                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 731:       
      +                                width = atoi(*fmt);
  1152  000744  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1153  000748  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1154  00074C  CFDE F008          	movff	postinc2,atoi@s
  1155  000750  CFDD F009          	movff	postdec2,atoi@s+1
  1156  000754  EC42  F006         	call	_atoi	;wreg free
  1157  000758  C008  F074         	movff	?_atoi,_width
  1158  00075C  C009  F075         	movff	?_atoi+1,_width+1
  1159                           
  1160                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 732:       
      +                                while ((0 ? isdigit((*fmt)[0]) : ((unsigned)((*fmt)[0])-'0') < 10)) {
  1161  000760  D007               	goto	l1846
  1162  000762                     l1844:
  1163                           
  1164                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 733:       
      +                                    ++*fmt;
  1165  000762  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1166  000766  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1167  00076A  2ADE               	incf	postinc2,f,c
  1168  00076C  0E00               	movlw	0
  1169  00076E  22DD               	addwfc	postdec2,f,c
  1170  000770                     l1846:
  1171  000770  0ED0               	movlw	208
  1172  000772  6E46               	movwf	??_vfpfcnvrt& (0+255),c
  1173  000774  0EFF               	movlw	255
  1174  000776  6E47               	movwf	(??_vfpfcnvrt+1)& (0+255),c
  1175  000778  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1176  00077C  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1177  000780  CFDE FFF6          	movff	postinc2,tblptrl
  1178  000784  CFDD FFF7          	movff	postdec2,tblptrh
  1179  000788                     	if	0	;tblptru may be non-zero
  1180  000788                     	endif
  1181  000788                     	if	0	;tblptru may be non-zero
  1182  000788                     	endif
  1183  000788  0008               	tblrd		*
  1184  00078A  50F5               	movf	tablat,w,c
  1185  00078C  6E48               	movwf	(??_vfpfcnvrt+2)& (0+255),c
  1186  00078E  6A49               	clrf	(??_vfpfcnvrt+3)& (0+255),c
  1187  000790  5046               	movf	??_vfpfcnvrt,w,c
  1188  000792  2648               	addwf	??_vfpfcnvrt+2,f,c
  1189  000794  5047               	movf	??_vfpfcnvrt+1,w,c
  1190  000796  2249               	addwfc	??_vfpfcnvrt+3,f,c
  1191  000798  5049               	movf	??_vfpfcnvrt+3,w,c
  1192  00079A  E106               	bnz	u1350
  1193  00079C  0E0A               	movlw	10
  1194  00079E  5C48               	subwf	??_vfpfcnvrt+2,w,c
  1195  0007A0  B0D8               	btfsc	status,0,c
  1196  0007A2  D002               	goto	u1350
  1197  0007A4  0E01               	movlw	1
  1198  0007A6  D001               	goto	u1360
  1199  0007A8                     u1350:
  1200  0007A8  0E00               	movlw	0
  1201  0007AA                     u1360:
  1202  0007AA  6E54               	movwf	_vfpfcnvrt$606,c
  1203  0007AC  6A55               	clrf	_vfpfcnvrt$606+1,c
  1204  0007AE  5054               	movf	_vfpfcnvrt$606,w,c
  1205  0007B0  1055               	iorwf	_vfpfcnvrt$606+1,w,c
  1206  0007B2  A4D8               	btfss	status,2,c
  1207  0007B4  D7D6               	goto	l1844
  1208  0007B6                     u1370:
  1209                           
  1210                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 825:       
      +                            if ((*fmt[0] == 'd') || (*fmt[0] == 'i')) {
  1211  0007B6  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1212  0007BA  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1213  0007BE  CFDE FFF6          	movff	postinc2,tblptrl
  1214  0007C2  CFDD FFF7          	movff	postdec2,tblptrh
  1215  0007C6                     	if	0	;tblptru may be non-zero
  1216  0007C6                     	endif
  1217  0007C6                     	if	0	;tblptru may be non-zero
  1218  0007C6                     	endif
  1219  0007C6  0008               	tblrd		*
  1220  0007C8  50F5               	movf	tablat,w,c
  1221  0007CA  0A64               	xorlw	100
  1222  0007CC  B4D8               	btfsc	status,2,c
  1223  0007CE  D00D               	goto	u1390
  1224  0007D0  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1225  0007D4  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1226  0007D8  CFDE FFF6          	movff	postinc2,tblptrl
  1227  0007DC  CFDD FFF7          	movff	postdec2,tblptrh
  1228  0007E0                     	if	0	;tblptru may be non-zero
  1229  0007E0                     	endif
  1230  0007E0                     	if	0	;tblptru may be non-zero
  1231  0007E0                     	endif
  1232  0007E0  0008               	tblrd		*
  1233  0007E2  50F5               	movf	tablat,w,c
  1234  0007E4  0A69               	xorlw	105
  1235  0007E6  A4D8               	btfss	status,2,c
  1236  0007E8  D03F               	goto	l1862
  1237  0007EA                     u1390:
  1238                           
  1239                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 827:       
      +                                ++*fmt;
  1240  0007EA  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1241  0007EE  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1242  0007F2  2ADE               	incf	postinc2,f,c
  1243  0007F4  0E00               	movlw	0
  1244  0007F6  22DD               	addwfc	postdec2,f,c
  1245                           
  1246                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 828:       
      +                                ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  1247  0007F8  C044  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1248  0007FC  C045  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1249  000800  CFDF F046          	movff	indf2,??_vfpfcnvrt
  1250  000804  0E02               	movlw	2
  1251  000806  26DE               	addwf	postinc2,f,c
  1252  000808  CFDF F047          	movff	indf2,??_vfpfcnvrt+1
  1253  00080C  0E00               	movlw	0
  1254  00080E  22DD               	addwfc	postdec2,f,c
  1255  000810  C046  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1256  000814  C047  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1257  000818  CFDE F04A          	movff	postinc2,vfpfcnvrt@ll
  1258  00081C  CFDD F04B          	movff	postdec2,vfpfcnvrt@ll+1
  1259  000820  0E00               	movlw	0
  1260  000822  BE4B               	btfsc	vfpfcnvrt@ll+1,7,c
  1261  000824  0EFF               	movlw	-1
  1262  000826  6E4C               	movwf	vfpfcnvrt@ll+2,c
  1263  000828  6E4D               	movwf	vfpfcnvrt@ll+3,c
  1264  00082A  6E4E               	movwf	vfpfcnvrt@ll+4,c
  1265  00082C  6E4F               	movwf	vfpfcnvrt@ll+5,c
  1266  00082E  6E50               	movwf	vfpfcnvrt@ll+6,c
  1267  000830  6E51               	movwf	vfpfcnvrt@ll+7,c
  1268                           
  1269                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 830:       
      +                                return dtoa(fp, ll);
  1270  000832  C040  F01C         	movff	vfpfcnvrt@fp,dtoa@fp
  1271  000836  C041  F01D         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  1272  00083A  C04A  F01E         	movff	vfpfcnvrt@ll,dtoa@d
  1273  00083E  C04B  F01F         	movff	vfpfcnvrt@ll+1,dtoa@d+1
  1274  000842  C04C  F020         	movff	vfpfcnvrt@ll+2,dtoa@d+2
  1275  000846  C04D  F021         	movff	vfpfcnvrt@ll+3,dtoa@d+3
  1276  00084A  C04E  F022         	movff	vfpfcnvrt@ll+4,dtoa@d+4
  1277  00084E  C04F  F023         	movff	vfpfcnvrt@ll+5,dtoa@d+5
  1278  000852  C050  F024         	movff	vfpfcnvrt@ll+6,dtoa@d+6
  1279  000856  C051  F025         	movff	vfpfcnvrt@ll+7,dtoa@d+7
  1280  00085A  EC7D  F004         	call	_dtoa	;wreg free
  1281  00085E  C01C  F040         	movff	?_dtoa,?_vfpfcnvrt
  1282  000862  C01D  F041         	movff	?_dtoa+1,?_vfpfcnvrt+1
  1283  000866  0012               	return	
  1284  000868                     l1862:
  1285                           
  1286                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
  1287  000868  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1288  00086C  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1289  000870  CFDE FFF6          	movff	postinc2,tblptrl
  1290  000874  CFDD FFF7          	movff	postdec2,tblptrh
  1291  000878                     	if	0	;tblptru may be non-zero
  1292  000878                     	endif
  1293  000878                     	if	0	;tblptru may be non-zero
  1294  000878                     	endif
  1295  000878  0008               	tblrd		*
  1296  00087A  50F5               	movf	tablat,w,c
  1297  00087C  0A25               	xorlw	37
  1298  00087E  A4D8               	btfss	status,2,c
  1299  000880  D016               	goto	l1872
  1300                           
  1301                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
  1302  000882  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1303  000886  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1304  00088A  2ADE               	incf	postinc2,f,c
  1305  00088C  0E00               	movlw	0
  1306  00088E  22DD               	addwfc	postdec2,f,c
  1307                           
  1308                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
  1309  000890  0E00               	movlw	0
  1310  000892  6E02               	movwf	fputc@c+1,c
  1311  000894  0E25               	movlw	37
  1312  000896  6E01               	movwf	fputc@c,c
  1313  000898  C040  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1314  00089C  C041  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1315  0008A0  EC55  F008         	call	_fputc	;wreg free
  1316  0008A4                     l1868:
  1317                           
  1318                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
  1319  0008A4  0E00               	movlw	0
  1320  0008A6  6E41               	movwf	?_vfpfcnvrt+1,c
  1321  0008A8  0E01               	movlw	1
  1322  0008AA  6E40               	movwf	?_vfpfcnvrt,c
  1323  0008AC  0012               	return	
  1324  0008AE                     l1872:
  1325                           
  1326                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
  1327  0008AE  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1328  0008B2  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1329  0008B6  2ADE               	incf	postinc2,f,c
  1330  0008B8  0E00               	movlw	0
  1331  0008BA  22DD               	addwfc	postdec2,f,c
  1332                           
  1333                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
  1334  0008BC  0E00               	movlw	0
  1335  0008BE  6E41               	movwf	?_vfpfcnvrt+1,c
  1336  0008C0  0E00               	movlw	0
  1337  0008C2  6E40               	movwf	?_vfpfcnvrt,c
  1338  0008C4  0012               	return	
  1339  0008C6                     l1878:
  1340                           
  1341                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
  1342  0008C6  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1343  0008CA  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1344  0008CE  CFDE FFF6          	movff	postinc2,tblptrl
  1345  0008D2  CFDD FFF7          	movff	postdec2,tblptrh
  1346  0008D6                     	if	0	;tblptru may be non-zero
  1347  0008D6                     	endif
  1348  0008D6                     	if	0	;tblptru may be non-zero
  1349  0008D6                     	endif
  1350  0008D6  0008               	tblrd		*
  1351  0008D8  50F5               	movf	tablat,w,c
  1352  0008DA  6E01               	movwf	fputc@c,c
  1353  0008DC  6A02               	clrf	fputc@c+1,c
  1354  0008DE  C040  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1355  0008E2  C041  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1356  0008E6  EC55  F008         	call	_fputc	;wreg free
  1357                           
  1358                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
  1359  0008EA  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1360  0008EE  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1361  0008F2  2ADE               	incf	postinc2,f,c
  1362  0008F4  0E00               	movlw	0
  1363  0008F6  22DD               	addwfc	postdec2,f,c
  1364  0008F8  D7D5               	goto	l1868
  1365  0008FA                     __end_of_vfpfcnvrt:
  1366                           	opt callstack 0
  1367                           
  1368 ;; *************** function _dtoa *****************
  1369 ;; Defined at:
  1370 ;;		line 274 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1371 ;; Parameters:    Size  Location     Type
  1372 ;;  fp              2   27[COMRAM] PTR struct _IO_FILE
  1373 ;;		 -> sprintf@f(6), 
  1374 ;;  d               8   29[COMRAM] long long 
  1375 ;; Auto vars:     Size  Location     Type
  1376 ;;  n               8   53[COMRAM] long long 
  1377 ;;  i               2   61[COMRAM] int 
  1378 ;;  s               2   51[COMRAM] int 
  1379 ;;  w               2   49[COMRAM] int 
  1380 ;;  p               2   47[COMRAM] int 
  1381 ;; Return value:  Size  Location     Type
  1382 ;;                  2   27[COMRAM] int 
  1383 ;; Registers used:
  1384 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1385 ;; Tracked objects:
  1386 ;;		On entry : 0/0
  1387 ;;		On exit  : 0/0
  1388 ;;		Unchanged: 0/0
  1389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1390 ;;      Params:        10       0       0       0       0       0       0
  1391 ;;      Locals:        18       0       0       0       0       0       0
  1392 ;;      Temps:          8       0       0       0       0       0       0
  1393 ;;      Totals:        36       0       0       0       0       0       0
  1394 ;;Total ram usage:       36 bytes
  1395 ;; Hardware stack levels used:    1
  1396 ;; Hardware stack levels required when called:    5
  1397 ;; This function calls:
  1398 ;;		___aodiv
  1399 ;;		___aomod
  1400 ;;		_abs
  1401 ;;		_pad
  1402 ;; This function is called by:
  1403 ;;		_vfpfcnvrt
  1404 ;; This function uses a non-reentrant model
  1405 ;;
  1406                           
  1407                           	psect	text4
  1408  0008FA                     __ptext4:
  1409                           	opt callstack 0
  1410  0008FA                     _dtoa:
  1411                           	opt callstack 22
  1412                           
  1413                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 274: static
      +                           int dtoa(FILE *fp, long long d);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\
      +                          c99\common\doprnt.c: 275: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\c
      +                          ommon\doprnt.c: 276:     int i, p, s, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\
      +                          sources\c99\common\doprnt.c: 277:     long long n;;C:\Program Files (x86)\Microchip\xc8\
      +                          v2.05\pic\sources\c99\common\doprnt.c: 280:     n = d;
  1414                           
  1415                           ;incstack = 0
  1416  0008FA  C01E  F036         	movff	dtoa@d,dtoa@n
  1417  0008FE  C01F  F037         	movff	dtoa@d+1,dtoa@n+1
  1418  000902  C020  F038         	movff	dtoa@d+2,dtoa@n+2
  1419  000906  C021  F039         	movff	dtoa@d+3,dtoa@n+3
  1420  00090A  C022  F03A         	movff	dtoa@d+4,dtoa@n+4
  1421  00090E  C023  F03B         	movff	dtoa@d+5,dtoa@n+5
  1422  000912  C024  F03C         	movff	dtoa@d+6,dtoa@n+6
  1423  000916  C025  F03D         	movff	dtoa@d+7,dtoa@n+7
  1424                           
  1425                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 281:     s 
      +                          = n < 0 ? 1 : 0;
  1426  00091A  AE3D               	btfss	dtoa@n+7,7,c
  1427  00091C  D002               	goto	u1080
  1428  00091E  0E01               	movlw	1
  1429  000920  D001               	goto	u1090
  1430  000922                     u1080:
  1431  000922  0E00               	movlw	0
  1432  000924                     u1090:
  1433  000924  6E34               	movwf	dtoa@s,c
  1434  000926  6A35               	clrf	dtoa@s+1,c
  1435                           
  1436                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 282:     if
      +                           (s) {
  1437  000928  5034               	movf	dtoa@s,w,c
  1438  00092A  1035               	iorwf	dtoa@s+1,w,c
  1439  00092C  B4D8               	btfsc	status,2,c
  1440  00092E  D010               	goto	l1676
  1441                           
  1442                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 283:       
      +                            n = -n;
  1443  000930  1E3D               	comf	dtoa@n+7,f,c
  1444  000932  1E3C               	comf	dtoa@n+6,f,c
  1445  000934  1E3B               	comf	dtoa@n+5,f,c
  1446  000936  1E3A               	comf	dtoa@n+4,f,c
  1447  000938  1E39               	comf	dtoa@n+3,f,c
  1448  00093A  1E38               	comf	dtoa@n+2,f,c
  1449  00093C  1E37               	comf	dtoa@n+1,f,c
  1450  00093E  6C36               	negf	dtoa@n,c
  1451  000940  0E00               	movlw	0
  1452  000942  2237               	addwfc	dtoa@n+1,f,c
  1453  000944  2238               	addwfc	dtoa@n+2,f,c
  1454  000946  2239               	addwfc	dtoa@n+3,f,c
  1455  000948  223A               	addwfc	dtoa@n+4,f,c
  1456  00094A  223B               	addwfc	dtoa@n+5,f,c
  1457  00094C  223C               	addwfc	dtoa@n+6,f,c
  1458  00094E  223D               	addwfc	dtoa@n+7,f,c
  1459  000950                     l1676:
  1460                           
  1461                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 287:     if
      +                           (!(prec < 0)) {
  1462  000950  AE77               	btfss	_prec+1,7,c
  1463                           
  1464                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 288:       
      +                            flags &= ~(1 << 1);
  1465  000952  9278               	bcf	_flags,1,c
  1466                           
  1467                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 290:     p 
      +                          = (0 < prec) ? prec : 1;
  1468  000954  BE77               	btfsc	_prec+1,7,c
  1469  000956  D005               	goto	u1120
  1470  000958  5077               	movf	_prec+1,w,c
  1471  00095A  E108               	bnz	l140
  1472  00095C  0476               	decf	_prec,w,c
  1473  00095E  B0D8               	btfsc	status,0,c
  1474  000960  D005               	goto	l140
  1475  000962                     u1120:
  1476  000962  0E00               	movlw	0
  1477  000964  6E31               	movwf	dtoa@p+1,c
  1478  000966  0E01               	movlw	1
  1479  000968  6E30               	movwf	dtoa@p,c
  1480  00096A  D004               	goto	l142
  1481  00096C                     l140:
  1482  00096C  C076  F030         	movff	_prec,dtoa@p
  1483  000970  C077  F031         	movff	_prec+1,dtoa@p+1
  1484  000974                     l142:
  1485                           
  1486                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 291:     w 
      +                          = width;
  1487  000974  C074  F032         	movff	_width,dtoa@w
  1488  000978  C075  F033         	movff	_width+1,dtoa@w+1
  1489                           
  1490                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 292:     if
      +                           (s || (flags & (1 << 2))) {
  1491  00097C  5034               	movf	dtoa@s,w,c
  1492  00097E  1035               	iorwf	dtoa@s+1,w,c
  1493  000980  A4D8               	btfss	status,2,c
  1494  000982  D002               	goto	u1140
  1495  000984  A478               	btfss	_flags,2,c
  1496  000986  D003               	goto	l1690
  1497  000988                     u1140:
  1498                           
  1499                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 293:       
      +                            --w;
  1500  000988  0632               	decf	dtoa@w,f,c
  1501  00098A  A0D8               	btfss	status,0,c
  1502  00098C  0633               	decf	dtoa@w+1,f,c
  1503  00098E                     l1690:
  1504                           
  1505                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 297:     i 
      +                          = sizeof(dbuf) - 1;
  1506  00098E  0E00               	movlw	0
  1507  000990  6E3F               	movwf	dtoa@i+1,c
  1508  000992  0E1F               	movlw	31
  1509  000994  6E3E               	movwf	dtoa@i,c
  1510                           
  1511                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 298:     db
      +                          uf[i] = '\0';
  1512  000996  0E00               	movlw	0
  1513  000998  0100               	movlb	0	; () banked
  1514  00099A  6FA3               	movwf	(_dbuf+31)& (0+255),b
  1515                           
  1516                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1517  00099C  D07C               	goto	l1704
  1518  00099E                     l1694:
  1519                           
  1520                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 300:       
      +                            --i;
  1521  00099E  063E               	decf	dtoa@i,f,c
  1522  0009A0  A0D8               	btfss	status,0,c
  1523  0009A2  063F               	decf	dtoa@i+1,f,c
  1524                           
  1525                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 301:       
      +                            dbuf[i] = '0' + abs(n % 10);
  1526  0009A4  0E84               	movlw	low _dbuf
  1527  0009A6  243E               	addwf	dtoa@i,w,c
  1528  0009A8  6ED9               	movwf	fsr2l,c
  1529  0009AA  0E00               	movlw	high _dbuf
  1530  0009AC  203F               	addwfc	dtoa@i+1,w,c
  1531  0009AE  6EDA               	movwf	fsr2h,c
  1532  0009B0  C036  F001         	movff	dtoa@n,___aomod@dividend
  1533  0009B4  C037  F002         	movff	dtoa@n+1,___aomod@dividend+1
  1534  0009B8  C038  F003         	movff	dtoa@n+2,___aomod@dividend+2
  1535  0009BC  C039  F004         	movff	dtoa@n+3,___aomod@dividend+3
  1536  0009C0  C03A  F005         	movff	dtoa@n+4,___aomod@dividend+4
  1537  0009C4  C03B  F006         	movff	dtoa@n+5,___aomod@dividend+5
  1538  0009C8  C03C  F007         	movff	dtoa@n+6,___aomod@dividend+6
  1539  0009CC  C03D  F008         	movff	dtoa@n+7,___aomod@dividend+7
  1540  0009D0  0E0A               	movlw	10
  1541  0009D2  6E09               	movwf	___aomod@divisor,c
  1542  0009D4  0E00               	movlw	0
  1543  0009D6  6E0A               	movwf	___aomod@divisor+1,c
  1544  0009D8  0E00               	movlw	0
  1545  0009DA  6E0B               	movwf	___aomod@divisor+2,c
  1546  0009DC  0E00               	movlw	0
  1547  0009DE  6E0C               	movwf	___aomod@divisor+3,c
  1548  0009E0  0E00               	movlw	0
  1549  0009E2  6E0D               	movwf	___aomod@divisor+4,c
  1550  0009E4  0E00               	movlw	0
  1551  0009E6  6E0E               	movwf	___aomod@divisor+5,c
  1552  0009E8  0E00               	movlw	0
  1553  0009EA  6E0F               	movwf	___aomod@divisor+6,c
  1554  0009EC  0E00               	movlw	0
  1555  0009EE  6E10               	movwf	___aomod@divisor+7,c
  1556  0009F0  ECE2  F006         	call	___aomod	;wreg free
  1557  0009F4  C001  F026         	movff	?___aomod,??_dtoa
  1558  0009F8  C002  F027         	movff	?___aomod+1,??_dtoa+1
  1559  0009FC  C003  F028         	movff	?___aomod+2,??_dtoa+2
  1560  000A00  C004  F029         	movff	?___aomod+3,??_dtoa+3
  1561  000A04  C005  F02A         	movff	?___aomod+4,??_dtoa+4
  1562  000A08  C006  F02B         	movff	?___aomod+5,??_dtoa+5
  1563  000A0C  C007  F02C         	movff	?___aomod+6,??_dtoa+6
  1564  000A10  C008  F02D         	movff	?___aomod+7,??_dtoa+7
  1565  000A14  C026  F013         	movff	??_dtoa,abs@a
  1566  000A18  C028  F014         	movff	??_dtoa+2,abs@a+1
  1567  000A1C  EC38  F00A         	call	_abs	;wreg free
  1568  000A20  5013               	movf	?_abs,w,c
  1569  000A22  0F30               	addlw	48
  1570  000A24  6EDF               	movwf	indf2,c
  1571                           
  1572                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 302:       
      +                            --p;
  1573  000A26  0630               	decf	dtoa@p,f,c
  1574  000A28  A0D8               	btfss	status,0,c
  1575  000A2A  0631               	decf	dtoa@p+1,f,c
  1576                           
  1577                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 303:       
      +                            --w;
  1578  000A2C  0632               	decf	dtoa@w,f,c
  1579  000A2E  A0D8               	btfss	status,0,c
  1580  000A30  0633               	decf	dtoa@w+1,f,c
  1581                           
  1582                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 304:       
      +                            n = n / 10;
  1583  000A32  C036  F001         	movff	dtoa@n,___aodiv@dividend
  1584  000A36  C037  F002         	movff	dtoa@n+1,___aodiv@dividend+1
  1585  000A3A  C038  F003         	movff	dtoa@n+2,___aodiv@dividend+2
  1586  000A3E  C039  F004         	movff	dtoa@n+3,___aodiv@dividend+3
  1587  000A42  C03A  F005         	movff	dtoa@n+4,___aodiv@dividend+4
  1588  000A46  C03B  F006         	movff	dtoa@n+5,___aodiv@dividend+5
  1589  000A4A  C03C  F007         	movff	dtoa@n+6,___aodiv@dividend+6
  1590  000A4E  C03D  F008         	movff	dtoa@n+7,___aodiv@dividend+7
  1591  000A52  0E0A               	movlw	10
  1592  000A54  6E09               	movwf	___aodiv@divisor,c
  1593  000A56  0E00               	movlw	0
  1594  000A58  6E0A               	movwf	___aodiv@divisor+1,c
  1595  000A5A  0E00               	movlw	0
  1596  000A5C  6E0B               	movwf	___aodiv@divisor+2,c
  1597  000A5E  0E00               	movlw	0
  1598  000A60  6E0C               	movwf	___aodiv@divisor+3,c
  1599  000A62  0E00               	movlw	0
  1600  000A64  6E0D               	movwf	___aodiv@divisor+4,c
  1601  000A66  0E00               	movlw	0
  1602  000A68  6E0E               	movwf	___aodiv@divisor+5,c
  1603  000A6A  0E00               	movlw	0
  1604  000A6C  6E0F               	movwf	___aodiv@divisor+6,c
  1605  000A6E  0E00               	movlw	0
  1606  000A70  6E10               	movwf	___aodiv@divisor+7,c
  1607  000A72  EC9E  F005         	call	___aodiv	;wreg free
  1608  000A76  C001  F036         	movff	?___aodiv,dtoa@n
  1609  000A7A  C002  F037         	movff	?___aodiv+1,dtoa@n+1
  1610  000A7E  C003  F038         	movff	?___aodiv+2,dtoa@n+2
  1611  000A82  C004  F039         	movff	?___aodiv+3,dtoa@n+3
  1612  000A86  C005  F03A         	movff	?___aodiv+4,dtoa@n+4
  1613  000A8A  C006  F03B         	movff	?___aodiv+5,dtoa@n+5
  1614  000A8E  C007  F03C         	movff	?___aodiv+6,dtoa@n+6
  1615  000A92  C008  F03D         	movff	?___aodiv+7,dtoa@n+7
  1616  000A96                     l1704:
  1617                           
  1618                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1619  000A96  BE3F               	btfsc	dtoa@i+1,7,c
  1620  000A98  D01F               	goto	u1190
  1621  000A9A  503F               	movf	dtoa@i+1,w,c
  1622  000A9C  E103               	bnz	u1150
  1623  000A9E  043E               	decf	dtoa@i,w,c
  1624  000AA0  A0D8               	btfss	status,0,c
  1625  000AA2  D01A               	goto	u1190
  1626  000AA4                     u1150:
  1627  000AA4  5036               	movf	dtoa@n,w,c
  1628  000AA6  1037               	iorwf	dtoa@n+1,w,c
  1629  000AA8  1038               	iorwf	dtoa@n+2,w,c
  1630  000AAA  1039               	iorwf	dtoa@n+3,w,c
  1631  000AAC  103A               	iorwf	dtoa@n+4,w,c
  1632  000AAE  103B               	iorwf	dtoa@n+5,w,c
  1633  000AB0  103C               	iorwf	dtoa@n+6,w,c
  1634  000AB2  103D               	iorwf	dtoa@n+7,w,c
  1635  000AB4  A4D8               	btfss	status,2,c
  1636  000AB6  D773               	goto	l1694
  1637  000AB8  BE31               	btfsc	dtoa@p+1,7,c
  1638  000ABA  D005               	goto	u1170
  1639  000ABC  5031               	movf	dtoa@p+1,w,c
  1640  000ABE  E102               	bnz	u1171
  1641  000AC0  0430               	decf	dtoa@p,w,c
  1642  000AC2  B0D8               	btfsc	status,0,c
  1643  000AC4                     u1171:
  1644  000AC4  D76C               	goto	l1694
  1645  000AC6                     u1170:
  1646  000AC6  BE33               	btfsc	dtoa@w+1,7,c
  1647  000AC8  D007               	goto	u1190
  1648  000ACA  5033               	movf	dtoa@w+1,w,c
  1649  000ACC  E103               	bnz	u1180
  1650  000ACE  0432               	decf	dtoa@w,w,c
  1651  000AD0  A0D8               	btfss	status,0,c
  1652  000AD2  D002               	goto	u1190
  1653  000AD4                     u1180:
  1654  000AD4  B278               	btfsc	_flags,1,c
  1655  000AD6  D763               	goto	l1694
  1656  000AD8                     u1190:
  1657                           
  1658                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 308:     if
      +                           (s || (flags & (1 << 2))) {
  1659  000AD8  5034               	movf	dtoa@s,w,c
  1660  000ADA  1035               	iorwf	dtoa@s+1,w,c
  1661  000ADC  A4D8               	btfss	status,2,c
  1662  000ADE  D002               	goto	u1210
  1663  000AE0  A478               	btfss	_flags,2,c
  1664  000AE2  D017               	goto	l1728
  1665  000AE4                     u1210:
  1666                           
  1667                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 309:       
      +                            --i;
  1668  000AE4  063E               	decf	dtoa@i,f,c
  1669  000AE6  A0D8               	btfss	status,0,c
  1670  000AE8  063F               	decf	dtoa@i+1,f,c
  1671                           
  1672                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 310:       
      +                            dbuf[i] = s ? '-' : '+';
  1673  000AEA  5034               	movf	dtoa@s,w,c
  1674  000AEC  1035               	iorwf	dtoa@s+1,w,c
  1675  000AEE  A4D8               	btfss	status,2,c
  1676  000AF0  D004               	goto	l1724
  1677  000AF2  0E00               	movlw	0
  1678  000AF4  6E2F               	movwf	_dtoa$591+1,c
  1679  000AF6  0E2B               	movlw	43
  1680  000AF8  D003               	goto	L2
  1681  000AFA                     l1724:
  1682  000AFA  0E00               	movlw	0
  1683  000AFC  6E2F               	movwf	_dtoa$591+1,c
  1684  000AFE  0E2D               	movlw	45
  1685  000B00                     L2:
  1686  000B00  6E2E               	movwf	_dtoa$591,c
  1687  000B02  0E84               	movlw	low _dbuf
  1688  000B04  243E               	addwf	dtoa@i,w,c
  1689  000B06  6ED9               	movwf	fsr2l,c
  1690  000B08  0E00               	movlw	high _dbuf
  1691  000B0A  203F               	addwfc	dtoa@i+1,w,c
  1692  000B0C  6EDA               	movwf	fsr2h,c
  1693  000B0E  C02E  FFDF         	movff	_dtoa$591,indf2
  1694  000B12                     l1728:
  1695                           
  1696                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 314:     re
      +                          turn pad(fp, &dbuf[i], w);
  1697  000B12  C01C  F011         	movff	dtoa@fp,pad@fp
  1698  000B16  C01D  F012         	movff	dtoa@fp+1,pad@fp+1
  1699  000B1A  0E84               	movlw	low _dbuf
  1700  000B1C  243E               	addwf	dtoa@i,w,c
  1701  000B1E  6E13               	movwf	pad@buf,c
  1702  000B20  0E00               	movlw	high _dbuf
  1703  000B22  203F               	addwfc	dtoa@i+1,w,c
  1704  000B24  6E14               	movwf	pad@buf+1,c
  1705  000B26  C032  F015         	movff	dtoa@w,pad@p
  1706  000B2A  C033  F016         	movff	dtoa@w+1,pad@p+1
  1707  000B2E  ECA5  F008         	call	_pad	;wreg free
  1708  000B32  C011  F01C         	movff	?_pad,?_dtoa
  1709  000B36  C012  F01D         	movff	?_pad+1,?_dtoa+1
  1710  000B3A  0012               	return		;funcret
  1711  000B3C                     __end_of_dtoa:
  1712                           	opt callstack 0
  1713                           
  1714 ;; *************** function _pad *****************
  1715 ;; Defined at:
  1716 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1717 ;; Parameters:    Size  Location     Type
  1718 ;;  fp              2   16[COMRAM] PTR struct _IO_FILE
  1719 ;;		 -> sprintf@f(6), 
  1720 ;;  buf             2   18[COMRAM] PTR unsigned char 
  1721 ;;		 -> dbuf(32), 
  1722 ;;  p               2   20[COMRAM] int 
  1723 ;; Auto vars:     Size  Location     Type
  1724 ;;  w               2   25[COMRAM] int 
  1725 ;;  i               2   23[COMRAM] int 
  1726 ;; Return value:  Size  Location     Type
  1727 ;;                  2   16[COMRAM] int 
  1728 ;; Registers used:
  1729 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1730 ;; Tracked objects:
  1731 ;;		On entry : 0/0
  1732 ;;		On exit  : 0/0
  1733 ;;		Unchanged: 0/0
  1734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1735 ;;      Params:         6       0       0       0       0       0       0
  1736 ;;      Locals:         4       0       0       0       0       0       0
  1737 ;;      Temps:          1       0       0       0       0       0       0
  1738 ;;      Totals:        11       0       0       0       0       0       0
  1739 ;;Total ram usage:       11 bytes
  1740 ;; Hardware stack levels used:    1
  1741 ;; Hardware stack levels required when called:    4
  1742 ;; This function calls:
  1743 ;;		_fputc
  1744 ;;		_fputs
  1745 ;;		_strlen
  1746 ;; This function is called by:
  1747 ;;		_dtoa
  1748 ;; This function uses a non-reentrant model
  1749 ;;
  1750                           
  1751                           	psect	text5
  1752  00114A                     __ptext5:
  1753                           	opt callstack 0
  1754  00114A                     _pad:
  1755                           	opt callstack 22
  1756                           
  1757                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
  1758                           
  1759                           ;incstack = 0
  1760  00114A  A078               	btfss	_flags,0,c
  1761  00114C  D00A               	goto	l1534
  1762                           
  1763                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
  1764  00114E  C013  F00A         	movff	pad@buf,fputs@s
  1765  001152  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1766  001156  C011  F00C         	movff	pad@fp,fputs@fp
  1767  00115A  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1768  00115E  EC1C  F00A         	call	_fputs	;wreg free
  1769  001162                     l1534:
  1770                           
  1771                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
  1772  001162  BE16               	btfsc	pad@p+1,7,c
  1773  001164  D005               	goto	l1538
  1774  001166  C015  F01A         	movff	pad@p,pad@w
  1775  00116A  C016  F01B         	movff	pad@p+1,pad@w+1
  1776  00116E  D004               	goto	l129
  1777  001170                     l1538:
  1778  001170  0E00               	movlw	0
  1779  001172  6E1B               	movwf	pad@w+1,c
  1780  001174  0E00               	movlw	0
  1781  001176  6E1A               	movwf	pad@w,c
  1782  001178                     l129:
  1783                           
  1784                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
  1785  001178  0E00               	movlw	0
  1786  00117A  6E19               	movwf	pad@i+1,c
  1787  00117C  0E00               	movlw	0
  1788  00117E  6E18               	movwf	pad@i,c
  1789                           
  1790                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  1791  001180  D00C               	goto	l1544
  1792  001182                     l1540:
  1793                           
  1794                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
  1795  001182  0E00               	movlw	0
  1796  001184  6E02               	movwf	fputc@c+1,c
  1797  001186  0E20               	movlw	32
  1798  001188  6E01               	movwf	fputc@c,c
  1799  00118A  C011  F003         	movff	pad@fp,fputc@fp
  1800  00118E  C012  F004         	movff	pad@fp+1,fputc@fp+1
  1801  001192  EC55  F008         	call	_fputc	;wreg free
  1802                           
  1803                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
  1804  001196  4A18               	infsnz	pad@i,f,c
  1805  001198  2A19               	incf	pad@i+1,f,c
  1806  00119A                     l1544:
  1807                           
  1808                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  1809  00119A  501A               	movf	pad@w,w,c
  1810  00119C  5C18               	subwf	pad@i,w,c
  1811  00119E  5019               	movf	pad@i+1,w,c
  1812  0011A0  0A80               	xorlw	128
  1813  0011A2  6E17               	movwf	??_pad& (0+255),c
  1814  0011A4  501B               	movf	pad@w+1,w,c
  1815  0011A6  0A80               	xorlw	128
  1816  0011A8  5817               	subwfb	??_pad& (0+255),w,c
  1817  0011AA  A0D8               	btfss	status,0,c
  1818  0011AC  D7EA               	goto	l1540
  1819                           
  1820                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
  1821  0011AE  B078               	btfsc	_flags,0,c
  1822  0011B0  D00A               	goto	l1548
  1823                           
  1824                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
  1825  0011B2  C013  F00A         	movff	pad@buf,fputs@s
  1826  0011B6  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1827  0011BA  C011  F00C         	movff	pad@fp,fputs@fp
  1828  0011BE  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1829  0011C2  EC1C  F00A         	call	_fputs	;wreg free
  1830  0011C6                     l1548:
  1831                           
  1832                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
  1833  0011C6  C013  F001         	movff	pad@buf,strlen@s
  1834  0011CA  C014  F002         	movff	pad@buf+1,strlen@s+1
  1835  0011CE  EC69  F00A         	call	_strlen	;wreg free
  1836  0011D2  501A               	movf	pad@w,w,c
  1837  0011D4  2401               	addwf	?_strlen,w,c
  1838  0011D6  6E11               	movwf	?_pad,c
  1839  0011D8  501B               	movf	pad@w+1,w,c
  1840  0011DA  2002               	addwfc	?_strlen+1,w,c
  1841  0011DC  6E12               	movwf	?_pad+1,c
  1842  0011DE  0012               	return		;funcret
  1843  0011E0                     __end_of_pad:
  1844                           	opt callstack 0
  1845                           
  1846 ;; *************** function _strlen *****************
  1847 ;; Defined at:
  1848 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
  1849 ;; Parameters:    Size  Location     Type
  1850 ;;  s               2    0[COMRAM] PTR const unsigned char 
  1851 ;;		 -> dbuf(32), 
  1852 ;; Auto vars:     Size  Location     Type
  1853 ;;  a               2    2[COMRAM] PTR const unsigned char 
  1854 ;;		 -> dbuf(32), 
  1855 ;; Return value:  Size  Location     Type
  1856 ;;                  2    0[COMRAM] unsigned int 
  1857 ;; Registers used:
  1858 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1859 ;; Tracked objects:
  1860 ;;		On entry : 0/0
  1861 ;;		On exit  : 0/0
  1862 ;;		Unchanged: 0/0
  1863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1864 ;;      Params:         2       0       0       0       0       0       0
  1865 ;;      Locals:         2       0       0       0       0       0       0
  1866 ;;      Temps:          0       0       0       0       0       0       0
  1867 ;;      Totals:         4       0       0       0       0       0       0
  1868 ;;Total ram usage:        4 bytes
  1869 ;; Hardware stack levels used:    1
  1870 ;; Hardware stack levels required when called:    1
  1871 ;; This function calls:
  1872 ;;		Nothing
  1873 ;; This function is called by:
  1874 ;;		_pad
  1875 ;; This function uses a non-reentrant model
  1876 ;;
  1877                           
  1878                           	psect	text6
  1879  0014D2                     __ptext6:
  1880                           	opt callstack 0
  1881  0014D2                     _strlen:
  1882                           	opt callstack 24
  1883                           
  1884                           ;incstack = 0
  1885  0014D2  C001  F003         	movff	strlen@s,strlen@a
  1886  0014D6  C002  F004         	movff	strlen@s+1,strlen@a+1
  1887  0014DA  D002               	goto	l1524
  1888  0014DC                     l1522:
  1889  0014DC  4A01               	infsnz	strlen@s,f,c
  1890  0014DE  2A02               	incf	strlen@s+1,f,c
  1891  0014E0                     l1524:
  1892  0014E0  C001  FFD9         	movff	strlen@s,fsr2l
  1893  0014E4  C002  FFDA         	movff	strlen@s+1,fsr2h
  1894  0014E8  50DF               	movf	indf2,w,c
  1895  0014EA  A4D8               	btfss	status,2,c
  1896  0014EC  D7F7               	goto	l1522
  1897  0014EE  5003               	movf	strlen@a,w,c
  1898  0014F0  5C01               	subwf	strlen@s,w,c
  1899  0014F2  6E01               	movwf	?_strlen,c
  1900  0014F4  5004               	movf	strlen@a+1,w,c
  1901  0014F6  5802               	subwfb	strlen@s+1,w,c
  1902  0014F8  6E02               	movwf	?_strlen+1,c
  1903  0014FA  0012               	return		;funcret
  1904  0014FC                     __end_of_strlen:
  1905                           	opt callstack 0
  1906                           
  1907 ;; *************** function _fputs *****************
  1908 ;; Defined at:
  1909 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputs.c"
  1910 ;; Parameters:    Size  Location     Type
  1911 ;;  s               2    9[COMRAM] PTR const unsigned char 
  1912 ;;		 -> dbuf(32), 
  1913 ;;  fp              2   11[COMRAM] PTR struct _IO_FILE
  1914 ;;		 -> sprintf@f(6), 
  1915 ;; Auto vars:     Size  Location     Type
  1916 ;;  i               2   14[COMRAM] int 
  1917 ;;  c               1   13[COMRAM] unsigned char 
  1918 ;; Return value:  Size  Location     Type
  1919 ;;                  2    9[COMRAM] int 
  1920 ;; Registers used:
  1921 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1922 ;; Tracked objects:
  1923 ;;		On entry : 0/0
  1924 ;;		On exit  : 0/0
  1925 ;;		Unchanged: 0/0
  1926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1927 ;;      Params:         4       0       0       0       0       0       0
  1928 ;;      Locals:         3       0       0       0       0       0       0
  1929 ;;      Temps:          0       0       0       0       0       0       0
  1930 ;;      Totals:         7       0       0       0       0       0       0
  1931 ;;Total ram usage:        7 bytes
  1932 ;; Hardware stack levels used:    1
  1933 ;; Hardware stack levels required when called:    3
  1934 ;; This function calls:
  1935 ;;		_fputc
  1936 ;; This function is called by:
  1937 ;;		_pad
  1938 ;; This function uses a non-reentrant model
  1939 ;;
  1940                           
  1941                           	psect	text7
  1942  001438                     __ptext7:
  1943                           	opt callstack 0
  1944  001438                     _fputs:
  1945                           	opt callstack 22
  1946                           
  1947                           ;incstack = 0
  1948  001438  0E00               	movlw	0
  1949  00143A  6E10               	movwf	fputs@i+1,c
  1950  00143C  0E00               	movlw	0
  1951  00143E  6E0F               	movwf	fputs@i,c
  1952  001440  D00B               	goto	l1518
  1953  001442                     l1514:
  1954  001442  C00E  F001         	movff	fputs@c,fputc@c
  1955  001446  6A02               	clrf	fputc@c+1,c
  1956  001448  C00C  F003         	movff	fputs@fp,fputc@fp
  1957  00144C  C00D  F004         	movff	fputs@fp+1,fputc@fp+1
  1958  001450  EC55  F008         	call	_fputc	;wreg free
  1959  001454  4A0F               	infsnz	fputs@i,f,c
  1960  001456  2A10               	incf	fputs@i+1,f,c
  1961  001458                     l1518:
  1962  001458  500F               	movf	fputs@i,w,c
  1963  00145A  240A               	addwf	fputs@s,w,c
  1964  00145C  6ED9               	movwf	fsr2l,c
  1965  00145E  5010               	movf	fputs@i+1,w,c
  1966  001460  200B               	addwfc	fputs@s+1,w,c
  1967  001462  6EDA               	movwf	fsr2h,c
  1968  001464  50DF               	movf	indf2,w,c
  1969  001466  6E0E               	movwf	fputs@c,c
  1970  001468  500E               	movf	fputs@c,w,c
  1971  00146A  B4D8               	btfsc	status,2,c
  1972  00146C  0012               	return	
  1973  00146E  D7E9               	goto	l1514
  1974  001470                     __end_of_fputs:
  1975                           	opt callstack 0
  1976                           
  1977 ;; *************** function _fputc *****************
  1978 ;; Defined at:
  1979 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputc.c"
  1980 ;; Parameters:    Size  Location     Type
  1981 ;;  c               2    0[COMRAM] int 
  1982 ;;  fp              2    2[COMRAM] PTR struct _IO_FILE
  1983 ;;		 -> sprintf@f(6), 
  1984 ;; Auto vars:     Size  Location     Type
  1985 ;;		None
  1986 ;; Return value:  Size  Location     Type
  1987 ;;                  2    0[COMRAM] int 
  1988 ;; Registers used:
  1989 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1990 ;; Tracked objects:
  1991 ;;		On entry : 0/0
  1992 ;;		On exit  : 0/0
  1993 ;;		Unchanged: 0/0
  1994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1995 ;;      Params:         4       0       0       0       0       0       0
  1996 ;;      Locals:         0       0       0       0       0       0       0
  1997 ;;      Temps:          5       0       0       0       0       0       0
  1998 ;;      Totals:         9       0       0       0       0       0       0
  1999 ;;Total ram usage:        9 bytes
  2000 ;; Hardware stack levels used:    1
  2001 ;; Hardware stack levels required when called:    2
  2002 ;; This function calls:
  2003 ;;		_putch
  2004 ;; This function is called by:
  2005 ;;		_pad
  2006 ;;		_vfpfcnvrt
  2007 ;;		_fputs
  2008 ;; This function uses a non-reentrant model
  2009 ;;
  2010                           
  2011                           	psect	text8
  2012  0010AA                     __ptext8:
  2013                           	opt callstack 0
  2014  0010AA                     _fputc:
  2015                           	opt callstack 25
  2016                           
  2017                           ;incstack = 0
  2018  0010AA  5003               	movf	fputc@fp,w,c
  2019  0010AC  1004               	iorwf	fputc@fp+1,w,c
  2020  0010AE  B4D8               	btfsc	status,2,c
  2021  0010B0  D004               	goto	u800
  2022  0010B2  5003               	movf	fputc@fp,w,c
  2023  0010B4  1004               	iorwf	fputc@fp+1,w,c
  2024  0010B6  A4D8               	btfss	status,2,c
  2025  0010B8  D004               	goto	l1504
  2026  0010BA                     u800:
  2027  0010BA  5001               	movf	fputc@c,w,c
  2028  0010BC  ECBD  F00A         	call	_putch
  2029  0010C0  0012               	return	
  2030  0010C2                     l1504:
  2031  0010C2  EE20 F004          	lfsr	2,4
  2032  0010C6  5003               	movf	fputc@fp,w,c
  2033  0010C8  26D9               	addwf	fsr2l,f,c
  2034  0010CA  5004               	movf	fputc@fp+1,w,c
  2035  0010CC  22DA               	addwfc	fsr2h,f,c
  2036  0010CE  50DE               	movf	postinc2,w,c
  2037  0010D0  10DE               	iorwf	postinc2,w,c
  2038  0010D2  B4D8               	btfsc	status,2,c
  2039  0010D4  D016               	goto	u820
  2040  0010D6  EE20 F004          	lfsr	2,4
  2041  0010DA  5003               	movf	fputc@fp,w,c
  2042  0010DC  26D9               	addwf	fsr2l,f,c
  2043  0010DE  5004               	movf	fputc@fp+1,w,c
  2044  0010E0  22DA               	addwfc	fsr2h,f,c
  2045  0010E2  EE10 F002          	lfsr	1,2
  2046  0010E6  5003               	movf	fputc@fp,w,c
  2047  0010E8  26E1               	addwf	fsr1l,f,c
  2048  0010EA  5004               	movf	fputc@fp+1,w,c
  2049  0010EC  22E2               	addwfc	fsr1h,f,c
  2050  0010EE  50DE               	movf	postinc2,w,c
  2051  0010F0  5CE6               	subwf	postinc1,w,c
  2052  0010F2  50E6               	movf	postinc1,w,c
  2053  0010F4  0A80               	xorlw	128
  2054  0010F6  6E09               	movwf	(??_fputc+4)& (0+255),c
  2055  0010F8  50DE               	movf	postinc2,w,c
  2056  0010FA  0A80               	xorlw	128
  2057  0010FC  5809               	subwfb	(??_fputc+4)& (0+255),w,c
  2058  0010FE  B0D8               	btfsc	status,0,c
  2059  001100  0012               	return	
  2060  001102                     u820:
  2061  001102  EE20 F002          	lfsr	2,2
  2062  001106  5003               	movf	fputc@fp,w,c
  2063  001108  26D9               	addwf	fsr2l,f,c
  2064  00110A  5004               	movf	fputc@fp+1,w,c
  2065  00110C  22DA               	addwfc	fsr2h,f,c
  2066  00110E  CFDE F005          	movff	postinc2,??_fputc
  2067  001112  CFDD F006          	movff	postdec2,??_fputc+1
  2068  001116  C003  FFD9         	movff	fputc@fp,fsr2l
  2069  00111A  C004  FFDA         	movff	fputc@fp+1,fsr2h
  2070  00111E  CFDE F007          	movff	postinc2,??_fputc+2
  2071  001122  CFDD F008          	movff	postdec2,??_fputc+3
  2072  001126  5005               	movf	??_fputc,w,c
  2073  001128  2407               	addwf	??_fputc+2,w,c
  2074  00112A  6ED9               	movwf	fsr2l,c
  2075  00112C  5006               	movf	??_fputc+1,w,c
  2076  00112E  2008               	addwfc	??_fputc+3,w,c
  2077  001130  6EDA               	movwf	fsr2h,c
  2078  001132  C001  FFDF         	movff	fputc@c,indf2
  2079  001136  EE20 F002          	lfsr	2,2
  2080  00113A  5003               	movf	fputc@fp,w,c
  2081  00113C  26D9               	addwf	fsr2l,f,c
  2082  00113E  5004               	movf	fputc@fp+1,w,c
  2083  001140  22DA               	addwfc	fsr2h,f,c
  2084  001142  2ADE               	incf	postinc2,f,c
  2085  001144  0E00               	movlw	0
  2086  001146  22DD               	addwfc	postdec2,f,c
  2087  001148  0012               	return		;funcret
  2088  00114A                     __end_of_fputc:
  2089                           	opt callstack 0
  2090                           
  2091 ;; *************** function _putch *****************
  2092 ;; Defined at:
  2093 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\putch.c"
  2094 ;; Parameters:    Size  Location     Type
  2095 ;;  c               1    wreg     unsigned char 
  2096 ;; Auto vars:     Size  Location     Type
  2097 ;;  c               1    0[COMRAM] unsigned char 
  2098 ;; Return value:  Size  Location     Type
  2099 ;;                  1    wreg      void 
  2100 ;; Registers used:
  2101 ;;		wreg
  2102 ;; Tracked objects:
  2103 ;;		On entry : 0/0
  2104 ;;		On exit  : 0/0
  2105 ;;		Unchanged: 0/0
  2106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2107 ;;      Params:         0       0       0       0       0       0       0
  2108 ;;      Locals:         0       0       0       0       0       0       0
  2109 ;;      Temps:          0       0       0       0       0       0       0
  2110 ;;      Totals:         0       0       0       0       0       0       0
  2111 ;;Total ram usage:        0 bytes
  2112 ;; Hardware stack levels used:    1
  2113 ;; Hardware stack levels required when called:    1
  2114 ;; This function calls:
  2115 ;;		Nothing
  2116 ;; This function is called by:
  2117 ;;		_fputc
  2118 ;; This function uses a non-reentrant model
  2119 ;;
  2120                           
  2121                           	psect	text9
  2122  00157A                     __ptext9:
  2123                           	opt callstack 0
  2124  00157A                     _putch:
  2125                           	opt callstack 25
  2126                           
  2127                           ;incstack = 0
  2128  00157A  0012               	return		;funcret
  2129  00157C                     __end_of_putch:
  2130                           	opt callstack 0
  2131                           
  2132 ;; *************** function _abs *****************
  2133 ;; Defined at:
  2134 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\abs.c"
  2135 ;; Parameters:    Size  Location     Type
  2136 ;;  a               2   18[COMRAM] int 
  2137 ;; Auto vars:     Size  Location     Type
  2138 ;;		None
  2139 ;; Return value:  Size  Location     Type
  2140 ;;                  2   18[COMRAM] int 
  2141 ;; Registers used:
  2142 ;;		wreg, status,2, status,0
  2143 ;; Tracked objects:
  2144 ;;		On entry : 0/0
  2145 ;;		On exit  : 0/0
  2146 ;;		Unchanged: 0/0
  2147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2148 ;;      Params:         2       0       0       0       0       0       0
  2149 ;;      Locals:         0       0       0       0       0       0       0
  2150 ;;      Temps:          2       0       0       0       0       0       0
  2151 ;;      Totals:         4       0       0       0       0       0       0
  2152 ;;Total ram usage:        4 bytes
  2153 ;; Hardware stack levels used:    1
  2154 ;; Hardware stack levels required when called:    1
  2155 ;; This function calls:
  2156 ;;		Nothing
  2157 ;; This function is called by:
  2158 ;;		_dtoa
  2159 ;; This function uses a non-reentrant model
  2160 ;;
  2161                           
  2162                           	psect	text10
  2163  001470                     __ptext10:
  2164                           	opt callstack 0
  2165  001470                     _abs:
  2166                           	opt callstack 25
  2167                           
  2168                           ;incstack = 0
  2169  001470  BE14               	btfsc	abs@a+1,7,c
  2170  001472  D005               	goto	u890
  2171  001474  5014               	movf	abs@a+1,w,c
  2172  001476  E110               	bnz	l874
  2173  001478  0413               	decf	abs@a,w,c
  2174  00147A  B0D8               	btfsc	status,0,c
  2175  00147C  D00D               	goto	l874
  2176  00147E                     u890:
  2177  00147E  C013  F015         	movff	abs@a,??_abs
  2178  001482  C014  F016         	movff	abs@a+1,??_abs+1
  2179  001486  1E15               	comf	??_abs,f,c
  2180  001488  1E16               	comf	??_abs+1,f,c
  2181  00148A  4A15               	infsnz	??_abs,f,c
  2182  00148C  2A16               	incf	??_abs+1,f,c
  2183  00148E  C015  F013         	movff	??_abs,?_abs
  2184  001492  C016  F014         	movff	??_abs+1,?_abs+1
  2185  001496  0012               	return	
  2186  001498                     l874:
  2187  001498  C013  F013         	movff	abs@a,?_abs
  2188  00149C  C014  F014         	movff	abs@a+1,?_abs+1
  2189  0014A0  0012               	return		;funcret
  2190  0014A2                     __end_of_abs:
  2191                           	opt callstack 0
  2192                           
  2193 ;; *************** function ___aomod *****************
  2194 ;; Defined at:
  2195 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aomod.c"
  2196 ;; Parameters:    Size  Location     Type
  2197 ;;  dividend        8    0[COMRAM] long long 
  2198 ;;  divisor         8    8[COMRAM] long long 
  2199 ;; Auto vars:     Size  Location     Type
  2200 ;;  sign            1   17[COMRAM] unsigned char 
  2201 ;;  counter         1   16[COMRAM] unsigned char 
  2202 ;; Return value:  Size  Location     Type
  2203 ;;                  8    0[COMRAM] long long 
  2204 ;; Registers used:
  2205 ;;		wreg, status,2, status,0
  2206 ;; Tracked objects:
  2207 ;;		On entry : 0/0
  2208 ;;		On exit  : 0/0
  2209 ;;		Unchanged: 0/0
  2210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2211 ;;      Params:        16       0       0       0       0       0       0
  2212 ;;      Locals:         2       0       0       0       0       0       0
  2213 ;;      Temps:          0       0       0       0       0       0       0
  2214 ;;      Totals:        18       0       0       0       0       0       0
  2215 ;;Total ram usage:       18 bytes
  2216 ;; Hardware stack levels used:    1
  2217 ;; Hardware stack levels required when called:    1
  2218 ;; This function calls:
  2219 ;;		Nothing
  2220 ;; This function is called by:
  2221 ;;		_dtoa
  2222 ;; This function uses a non-reentrant model
  2223 ;;
  2224                           
  2225                           	psect	text11
  2226  000DC4                     __ptext11:
  2227                           	opt callstack 0
  2228  000DC4                     ___aomod:
  2229                           	opt callstack 25
  2230                           
  2231                           ;incstack = 0
  2232  000DC4  0E00               	movlw	0
  2233  000DC6  6E12               	movwf	___aomod@sign,c
  2234  000DC8  AE08               	btfss	___aomod@dividend+7,7,c
  2235  000DCA  D012               	goto	l1618
  2236  000DCC  1E08               	comf	___aomod@dividend+7,f,c
  2237  000DCE  1E07               	comf	___aomod@dividend+6,f,c
  2238  000DD0  1E06               	comf	___aomod@dividend+5,f,c
  2239  000DD2  1E05               	comf	___aomod@dividend+4,f,c
  2240  000DD4  1E04               	comf	___aomod@dividend+3,f,c
  2241  000DD6  1E03               	comf	___aomod@dividend+2,f,c
  2242  000DD8  1E02               	comf	___aomod@dividend+1,f,c
  2243  000DDA  6C01               	negf	___aomod@dividend,c
  2244  000DDC  0E00               	movlw	0
  2245  000DDE  2202               	addwfc	___aomod@dividend+1,f,c
  2246  000DE0  2203               	addwfc	___aomod@dividend+2,f,c
  2247  000DE2  2204               	addwfc	___aomod@dividend+3,f,c
  2248  000DE4  2205               	addwfc	___aomod@dividend+4,f,c
  2249  000DE6  2206               	addwfc	___aomod@dividend+5,f,c
  2250  000DE8  2207               	addwfc	___aomod@dividend+6,f,c
  2251  000DEA  2208               	addwfc	___aomod@dividend+7,f,c
  2252  000DEC  0E01               	movlw	1
  2253  000DEE  6E12               	movwf	___aomod@sign,c
  2254  000DF0                     l1618:
  2255  000DF0  AE10               	btfss	___aomod@divisor+7,7,c
  2256  000DF2  D010               	goto	l1622
  2257  000DF4  1E10               	comf	___aomod@divisor+7,f,c
  2258  000DF6  1E0F               	comf	___aomod@divisor+6,f,c
  2259  000DF8  1E0E               	comf	___aomod@divisor+5,f,c
  2260  000DFA  1E0D               	comf	___aomod@divisor+4,f,c
  2261  000DFC  1E0C               	comf	___aomod@divisor+3,f,c
  2262  000DFE  1E0B               	comf	___aomod@divisor+2,f,c
  2263  000E00  1E0A               	comf	___aomod@divisor+1,f,c
  2264  000E02  6C09               	negf	___aomod@divisor,c
  2265  000E04  0E00               	movlw	0
  2266  000E06  220A               	addwfc	___aomod@divisor+1,f,c
  2267  000E08  220B               	addwfc	___aomod@divisor+2,f,c
  2268  000E0A  220C               	addwfc	___aomod@divisor+3,f,c
  2269  000E0C  220D               	addwfc	___aomod@divisor+4,f,c
  2270  000E0E  220E               	addwfc	___aomod@divisor+5,f,c
  2271  000E10  220F               	addwfc	___aomod@divisor+6,f,c
  2272  000E12  2210               	addwfc	___aomod@divisor+7,f,c
  2273  000E14                     l1622:
  2274  000E14  5009               	movf	___aomod@divisor,w,c
  2275  000E16  100A               	iorwf	___aomod@divisor+1,w,c
  2276  000E18  100B               	iorwf	___aomod@divisor+2,w,c
  2277  000E1A  100C               	iorwf	___aomod@divisor+3,w,c
  2278  000E1C  100D               	iorwf	___aomod@divisor+4,w,c
  2279  000E1E  100E               	iorwf	___aomod@divisor+5,w,c
  2280  000E20  100F               	iorwf	___aomod@divisor+6,w,c
  2281  000E22  1010               	iorwf	___aomod@divisor+7,w,c
  2282  000E24  B4D8               	btfsc	status,2,c
  2283  000E26  D03C               	goto	l1638
  2284  000E28  0E01               	movlw	1
  2285  000E2A  6E11               	movwf	___aomod@counter,c
  2286  000E2C  D00A               	goto	l1628
  2287  000E2E                     l1626:
  2288  000E2E  90D8               	bcf	status,0,c
  2289  000E30  3609               	rlcf	___aomod@divisor,f,c
  2290  000E32  360A               	rlcf	___aomod@divisor+1,f,c
  2291  000E34  360B               	rlcf	___aomod@divisor+2,f,c
  2292  000E36  360C               	rlcf	___aomod@divisor+3,f,c
  2293  000E38  360D               	rlcf	___aomod@divisor+4,f,c
  2294  000E3A  360E               	rlcf	___aomod@divisor+5,f,c
  2295  000E3C  360F               	rlcf	___aomod@divisor+6,f,c
  2296  000E3E  3610               	rlcf	___aomod@divisor+7,f,c
  2297  000E40  2A11               	incf	___aomod@counter,f,c
  2298  000E42                     l1628:
  2299  000E42  AE10               	btfss	___aomod@divisor+7,7,c
  2300  000E44  D7F4               	goto	l1626
  2301  000E46                     u1020:
  2302  000E46  5009               	movf	___aomod@divisor,w,c
  2303  000E48  5C01               	subwf	___aomod@dividend,w,c
  2304  000E4A  500A               	movf	___aomod@divisor+1,w,c
  2305  000E4C  5802               	subwfb	___aomod@dividend+1,w,c
  2306  000E4E  500B               	movf	___aomod@divisor+2,w,c
  2307  000E50  5803               	subwfb	___aomod@dividend+2,w,c
  2308  000E52  500C               	movf	___aomod@divisor+3,w,c
  2309  000E54  5804               	subwfb	___aomod@dividend+3,w,c
  2310  000E56  500D               	movf	___aomod@divisor+4,w,c
  2311  000E58  5805               	subwfb	___aomod@dividend+4,w,c
  2312  000E5A  500E               	movf	___aomod@divisor+5,w,c
  2313  000E5C  5806               	subwfb	___aomod@dividend+5,w,c
  2314  000E5E  500F               	movf	___aomod@divisor+6,w,c
  2315  000E60  5807               	subwfb	___aomod@dividend+6,w,c
  2316  000E62  5010               	movf	___aomod@divisor+7,w,c
  2317  000E64  5808               	subwfb	___aomod@dividend+7,w,c
  2318  000E66  A0D8               	btfss	status,0,c
  2319  000E68  D010               	goto	l1634
  2320  000E6A  5009               	movf	___aomod@divisor,w,c
  2321  000E6C  5E01               	subwf	___aomod@dividend,f,c
  2322  000E6E  500A               	movf	___aomod@divisor+1,w,c
  2323  000E70  5A02               	subwfb	___aomod@dividend+1,f,c
  2324  000E72  500B               	movf	___aomod@divisor+2,w,c
  2325  000E74  5A03               	subwfb	___aomod@dividend+2,f,c
  2326  000E76  500C               	movf	___aomod@divisor+3,w,c
  2327  000E78  5A04               	subwfb	___aomod@dividend+3,f,c
  2328  000E7A  500D               	movf	___aomod@divisor+4,w,c
  2329  000E7C  5A05               	subwfb	___aomod@dividend+4,f,c
  2330  000E7E  500E               	movf	___aomod@divisor+5,w,c
  2331  000E80  5A06               	subwfb	___aomod@dividend+5,f,c
  2332  000E82  500F               	movf	___aomod@divisor+6,w,c
  2333  000E84  5A07               	subwfb	___aomod@dividend+6,f,c
  2334  000E86  5010               	movf	___aomod@divisor+7,w,c
  2335  000E88  5A08               	subwfb	___aomod@dividend+7,f,c
  2336  000E8A                     l1634:
  2337  000E8A  90D8               	bcf	status,0,c
  2338  000E8C  3210               	rrcf	___aomod@divisor+7,f,c
  2339  000E8E  320F               	rrcf	___aomod@divisor+6,f,c
  2340  000E90  320E               	rrcf	___aomod@divisor+5,f,c
  2341  000E92  320D               	rrcf	___aomod@divisor+4,f,c
  2342  000E94  320C               	rrcf	___aomod@divisor+3,f,c
  2343  000E96  320B               	rrcf	___aomod@divisor+2,f,c
  2344  000E98  320A               	rrcf	___aomod@divisor+1,f,c
  2345  000E9A  3209               	rrcf	___aomod@divisor,f,c
  2346  000E9C  2E11               	decfsz	___aomod@counter,f,c
  2347  000E9E  D7D3               	goto	u1020
  2348  000EA0                     l1638:
  2349  000EA0  5012               	movf	___aomod@sign,w,c
  2350  000EA2  B4D8               	btfsc	status,2,c
  2351  000EA4  D010               	goto	l1642
  2352  000EA6  1E08               	comf	___aomod@dividend+7,f,c
  2353  000EA8  1E07               	comf	___aomod@dividend+6,f,c
  2354  000EAA  1E06               	comf	___aomod@dividend+5,f,c
  2355  000EAC  1E05               	comf	___aomod@dividend+4,f,c
  2356  000EAE  1E04               	comf	___aomod@dividend+3,f,c
  2357  000EB0  1E03               	comf	___aomod@dividend+2,f,c
  2358  000EB2  1E02               	comf	___aomod@dividend+1,f,c
  2359  000EB4  6C01               	negf	___aomod@dividend,c
  2360  000EB6  0E00               	movlw	0
  2361  000EB8  2202               	addwfc	___aomod@dividend+1,f,c
  2362  000EBA  2203               	addwfc	___aomod@dividend+2,f,c
  2363  000EBC  2204               	addwfc	___aomod@dividend+3,f,c
  2364  000EBE  2205               	addwfc	___aomod@dividend+4,f,c
  2365  000EC0  2206               	addwfc	___aomod@dividend+5,f,c
  2366  000EC2  2207               	addwfc	___aomod@dividend+6,f,c
  2367  000EC4  2208               	addwfc	___aomod@dividend+7,f,c
  2368  000EC6                     l1642:
  2369  000EC6  C001  F001         	movff	___aomod@dividend,?___aomod
  2370  000ECA  C002  F002         	movff	___aomod@dividend+1,?___aomod+1
  2371  000ECE  C003  F003         	movff	___aomod@dividend+2,?___aomod+2
  2372  000ED2  C004  F004         	movff	___aomod@dividend+3,?___aomod+3
  2373  000ED6  C005  F005         	movff	___aomod@dividend+4,?___aomod+4
  2374  000EDA  C006  F006         	movff	___aomod@dividend+5,?___aomod+5
  2375  000EDE  C007  F007         	movff	___aomod@dividend+6,?___aomod+6
  2376  000EE2  C008  F008         	movff	___aomod@dividend+7,?___aomod+7
  2377  000EE6  0012               	return		;funcret
  2378  000EE8                     __end_of___aomod:
  2379                           	opt callstack 0
  2380                           
  2381 ;; *************** function ___aodiv *****************
  2382 ;; Defined at:
  2383 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aodiv.c"
  2384 ;; Parameters:    Size  Location     Type
  2385 ;;  dividend        8    0[COMRAM] long long 
  2386 ;;  divisor         8    8[COMRAM] long long 
  2387 ;; Auto vars:     Size  Location     Type
  2388 ;;  quotient        8   18[COMRAM] long long 
  2389 ;;  sign            1   17[COMRAM] unsigned char 
  2390 ;;  counter         1   16[COMRAM] unsigned char 
  2391 ;; Return value:  Size  Location     Type
  2392 ;;                  8    0[COMRAM] long long 
  2393 ;; Registers used:
  2394 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2395 ;; Tracked objects:
  2396 ;;		On entry : 0/0
  2397 ;;		On exit  : 0/0
  2398 ;;		Unchanged: 0/0
  2399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2400 ;;      Params:        16       0       0       0       0       0       0
  2401 ;;      Locals:        10       0       0       0       0       0       0
  2402 ;;      Temps:          0       0       0       0       0       0       0
  2403 ;;      Totals:        26       0       0       0       0       0       0
  2404 ;;Total ram usage:       26 bytes
  2405 ;; Hardware stack levels used:    1
  2406 ;; Hardware stack levels required when called:    1
  2407 ;; This function calls:
  2408 ;;		Nothing
  2409 ;; This function is called by:
  2410 ;;		_dtoa
  2411 ;; This function uses a non-reentrant model
  2412 ;;
  2413                           
  2414                           	psect	text12
  2415  000B3C                     __ptext12:
  2416                           	opt callstack 0
  2417  000B3C                     ___aodiv:
  2418                           	opt callstack 25
  2419                           
  2420                           ;incstack = 0
  2421  000B3C  0E00               	movlw	0
  2422  000B3E  6E12               	movwf	___aodiv@sign,c
  2423  000B40  AE10               	btfss	___aodiv@divisor+7,7,c
  2424  000B42  D012               	goto	l1574
  2425  000B44  1E10               	comf	___aodiv@divisor+7,f,c
  2426  000B46  1E0F               	comf	___aodiv@divisor+6,f,c
  2427  000B48  1E0E               	comf	___aodiv@divisor+5,f,c
  2428  000B4A  1E0D               	comf	___aodiv@divisor+4,f,c
  2429  000B4C  1E0C               	comf	___aodiv@divisor+3,f,c
  2430  000B4E  1E0B               	comf	___aodiv@divisor+2,f,c
  2431  000B50  1E0A               	comf	___aodiv@divisor+1,f,c
  2432  000B52  6C09               	negf	___aodiv@divisor,c
  2433  000B54  0E00               	movlw	0
  2434  000B56  220A               	addwfc	___aodiv@divisor+1,f,c
  2435  000B58  220B               	addwfc	___aodiv@divisor+2,f,c
  2436  000B5A  220C               	addwfc	___aodiv@divisor+3,f,c
  2437  000B5C  220D               	addwfc	___aodiv@divisor+4,f,c
  2438  000B5E  220E               	addwfc	___aodiv@divisor+5,f,c
  2439  000B60  220F               	addwfc	___aodiv@divisor+6,f,c
  2440  000B62  2210               	addwfc	___aodiv@divisor+7,f,c
  2441  000B64  0E01               	movlw	1
  2442  000B66  6E12               	movwf	___aodiv@sign,c
  2443  000B68                     l1574:
  2444  000B68  AE08               	btfss	___aodiv@dividend+7,7,c
  2445  000B6A  D012               	goto	l1580
  2446  000B6C  1E08               	comf	___aodiv@dividend+7,f,c
  2447  000B6E  1E07               	comf	___aodiv@dividend+6,f,c
  2448  000B70  1E06               	comf	___aodiv@dividend+5,f,c
  2449  000B72  1E05               	comf	___aodiv@dividend+4,f,c
  2450  000B74  1E04               	comf	___aodiv@dividend+3,f,c
  2451  000B76  1E03               	comf	___aodiv@dividend+2,f,c
  2452  000B78  1E02               	comf	___aodiv@dividend+1,f,c
  2453  000B7A  6C01               	negf	___aodiv@dividend,c
  2454  000B7C  0E00               	movlw	0
  2455  000B7E  2202               	addwfc	___aodiv@dividend+1,f,c
  2456  000B80  2203               	addwfc	___aodiv@dividend+2,f,c
  2457  000B82  2204               	addwfc	___aodiv@dividend+3,f,c
  2458  000B84  2205               	addwfc	___aodiv@dividend+4,f,c
  2459  000B86  2206               	addwfc	___aodiv@dividend+5,f,c
  2460  000B88  2207               	addwfc	___aodiv@dividend+6,f,c
  2461  000B8A  2208               	addwfc	___aodiv@dividend+7,f,c
  2462  000B8C  0E01               	movlw	1
  2463  000B8E  1A12               	xorwf	___aodiv@sign,f,c
  2464  000B90                     l1580:
  2465  000B90  EE20  F013         	lfsr	2,___aodiv@quotient
  2466  000B94  0E07               	movlw	7
  2467  000B96                     u941:
  2468  000B96  6ADE               	clrf	postinc2,c
  2469  000B98  06E8               	decf	wreg,f,c
  2470  000B9A  E2FD               	bc	u941
  2471  000B9C  5009               	movf	___aodiv@divisor,w,c
  2472  000B9E  100A               	iorwf	___aodiv@divisor+1,w,c
  2473  000BA0  100B               	iorwf	___aodiv@divisor+2,w,c
  2474  000BA2  100C               	iorwf	___aodiv@divisor+3,w,c
  2475  000BA4  100D               	iorwf	___aodiv@divisor+4,w,c
  2476  000BA6  100E               	iorwf	___aodiv@divisor+5,w,c
  2477  000BA8  100F               	iorwf	___aodiv@divisor+6,w,c
  2478  000BAA  1010               	iorwf	___aodiv@divisor+7,w,c
  2479  000BAC  B4D8               	btfsc	status,2,c
  2480  000BAE  D046               	goto	l1602
  2481  000BB0  0E01               	movlw	1
  2482  000BB2  6E11               	movwf	___aodiv@counter,c
  2483  000BB4  D00A               	goto	l1588
  2484  000BB6                     l1586:
  2485  000BB6  90D8               	bcf	status,0,c
  2486  000BB8  3609               	rlcf	___aodiv@divisor,f,c
  2487  000BBA  360A               	rlcf	___aodiv@divisor+1,f,c
  2488  000BBC  360B               	rlcf	___aodiv@divisor+2,f,c
  2489  000BBE  360C               	rlcf	___aodiv@divisor+3,f,c
  2490  000BC0  360D               	rlcf	___aodiv@divisor+4,f,c
  2491  000BC2  360E               	rlcf	___aodiv@divisor+5,f,c
  2492  000BC4  360F               	rlcf	___aodiv@divisor+6,f,c
  2493  000BC6  3610               	rlcf	___aodiv@divisor+7,f,c
  2494  000BC8  2A11               	incf	___aodiv@counter,f,c
  2495  000BCA                     l1588:
  2496  000BCA  AE10               	btfss	___aodiv@divisor+7,7,c
  2497  000BCC  D7F4               	goto	l1586
  2498  000BCE                     u960:
  2499  000BCE  90D8               	bcf	status,0,c
  2500  000BD0  3613               	rlcf	___aodiv@quotient,f,c
  2501  000BD2  3614               	rlcf	___aodiv@quotient+1,f,c
  2502  000BD4  3615               	rlcf	___aodiv@quotient+2,f,c
  2503  000BD6  3616               	rlcf	___aodiv@quotient+3,f,c
  2504  000BD8  3617               	rlcf	___aodiv@quotient+4,f,c
  2505  000BDA  3618               	rlcf	___aodiv@quotient+5,f,c
  2506  000BDC  3619               	rlcf	___aodiv@quotient+6,f,c
  2507  000BDE  361A               	rlcf	___aodiv@quotient+7,f,c
  2508  000BE0  5009               	movf	___aodiv@divisor,w,c
  2509  000BE2  5C01               	subwf	___aodiv@dividend,w,c
  2510  000BE4  500A               	movf	___aodiv@divisor+1,w,c
  2511  000BE6  5802               	subwfb	___aodiv@dividend+1,w,c
  2512  000BE8  500B               	movf	___aodiv@divisor+2,w,c
  2513  000BEA  5803               	subwfb	___aodiv@dividend+2,w,c
  2514  000BEC  500C               	movf	___aodiv@divisor+3,w,c
  2515  000BEE  5804               	subwfb	___aodiv@dividend+3,w,c
  2516  000BF0  500D               	movf	___aodiv@divisor+4,w,c
  2517  000BF2  5805               	subwfb	___aodiv@dividend+4,w,c
  2518  000BF4  500E               	movf	___aodiv@divisor+5,w,c
  2519  000BF6  5806               	subwfb	___aodiv@dividend+5,w,c
  2520  000BF8  500F               	movf	___aodiv@divisor+6,w,c
  2521  000BFA  5807               	subwfb	___aodiv@dividend+6,w,c
  2522  000BFC  5010               	movf	___aodiv@divisor+7,w,c
  2523  000BFE  5808               	subwfb	___aodiv@dividend+7,w,c
  2524  000C00  A0D8               	btfss	status,0,c
  2525  000C02  D011               	goto	l1598
  2526  000C04  5009               	movf	___aodiv@divisor,w,c
  2527  000C06  5E01               	subwf	___aodiv@dividend,f,c
  2528  000C08  500A               	movf	___aodiv@divisor+1,w,c
  2529  000C0A  5A02               	subwfb	___aodiv@dividend+1,f,c
  2530  000C0C  500B               	movf	___aodiv@divisor+2,w,c
  2531  000C0E  5A03               	subwfb	___aodiv@dividend+2,f,c
  2532  000C10  500C               	movf	___aodiv@divisor+3,w,c
  2533  000C12  5A04               	subwfb	___aodiv@dividend+3,f,c
  2534  000C14  500D               	movf	___aodiv@divisor+4,w,c
  2535  000C16  5A05               	subwfb	___aodiv@dividend+4,f,c
  2536  000C18  500E               	movf	___aodiv@divisor+5,w,c
  2537  000C1A  5A06               	subwfb	___aodiv@dividend+5,f,c
  2538  000C1C  500F               	movf	___aodiv@divisor+6,w,c
  2539  000C1E  5A07               	subwfb	___aodiv@dividend+6,f,c
  2540  000C20  5010               	movf	___aodiv@divisor+7,w,c
  2541  000C22  5A08               	subwfb	___aodiv@dividend+7,f,c
  2542  000C24  8013               	bsf	___aodiv@quotient,0,c
  2543  000C26                     l1598:
  2544  000C26  90D8               	bcf	status,0,c
  2545  000C28  3210               	rrcf	___aodiv@divisor+7,f,c
  2546  000C2A  320F               	rrcf	___aodiv@divisor+6,f,c
  2547  000C2C  320E               	rrcf	___aodiv@divisor+5,f,c
  2548  000C2E  320D               	rrcf	___aodiv@divisor+4,f,c
  2549  000C30  320C               	rrcf	___aodiv@divisor+3,f,c
  2550  000C32  320B               	rrcf	___aodiv@divisor+2,f,c
  2551  000C34  320A               	rrcf	___aodiv@divisor+1,f,c
  2552  000C36  3209               	rrcf	___aodiv@divisor,f,c
  2553  000C38  2E11               	decfsz	___aodiv@counter,f,c
  2554  000C3A  D7C9               	goto	u960
  2555  000C3C                     l1602:
  2556  000C3C  5012               	movf	___aodiv@sign,w,c
  2557  000C3E  B4D8               	btfsc	status,2,c
  2558  000C40  D010               	goto	l1606
  2559  000C42  1E1A               	comf	___aodiv@quotient+7,f,c
  2560  000C44  1E19               	comf	___aodiv@quotient+6,f,c
  2561  000C46  1E18               	comf	___aodiv@quotient+5,f,c
  2562  000C48  1E17               	comf	___aodiv@quotient+4,f,c
  2563  000C4A  1E16               	comf	___aodiv@quotient+3,f,c
  2564  000C4C  1E15               	comf	___aodiv@quotient+2,f,c
  2565  000C4E  1E14               	comf	___aodiv@quotient+1,f,c
  2566  000C50  6C13               	negf	___aodiv@quotient,c
  2567  000C52  0E00               	movlw	0
  2568  000C54  2214               	addwfc	___aodiv@quotient+1,f,c
  2569  000C56  2215               	addwfc	___aodiv@quotient+2,f,c
  2570  000C58  2216               	addwfc	___aodiv@quotient+3,f,c
  2571  000C5A  2217               	addwfc	___aodiv@quotient+4,f,c
  2572  000C5C  2218               	addwfc	___aodiv@quotient+5,f,c
  2573  000C5E  2219               	addwfc	___aodiv@quotient+6,f,c
  2574  000C60  221A               	addwfc	___aodiv@quotient+7,f,c
  2575  000C62                     l1606:
  2576  000C62  C013  F001         	movff	___aodiv@quotient,?___aodiv
  2577  000C66  C014  F002         	movff	___aodiv@quotient+1,?___aodiv+1
  2578  000C6A  C015  F003         	movff	___aodiv@quotient+2,?___aodiv+2
  2579  000C6E  C016  F004         	movff	___aodiv@quotient+3,?___aodiv+3
  2580  000C72  C017  F005         	movff	___aodiv@quotient+4,?___aodiv+4
  2581  000C76  C018  F006         	movff	___aodiv@quotient+5,?___aodiv+5
  2582  000C7A  C019  F007         	movff	___aodiv@quotient+6,?___aodiv+6
  2583  000C7E  C01A  F008         	movff	___aodiv@quotient+7,?___aodiv+7
  2584  000C82  0012               	return		;funcret
  2585  000C84                     __end_of___aodiv:
  2586                           	opt callstack 0
  2587                           
  2588 ;; *************** function _atoi *****************
  2589 ;; Defined at:
  2590 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\atoi.c"
  2591 ;; Parameters:    Size  Location     Type
  2592 ;;  s               2    7[COMRAM] PTR const unsigned char 
  2593 ;;		 -> STR_3(15), 
  2594 ;; Auto vars:     Size  Location     Type
  2595 ;;  n               2   20[COMRAM] int 
  2596 ;;  neg             2   13[COMRAM] int 
  2597 ;; Return value:  Size  Location     Type
  2598 ;;                  2    7[COMRAM] int 
  2599 ;; Registers used:
  2600 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2601 ;; Tracked objects:
  2602 ;;		On entry : 0/0
  2603 ;;		On exit  : 0/0
  2604 ;;		Unchanged: 0/0
  2605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2606 ;;      Params:         2       0       0       0       0       0       0
  2607 ;;      Locals:         9       0       0       0       0       0       0
  2608 ;;      Temps:          4       0       0       0       0       0       0
  2609 ;;      Totals:        15       0       0       0       0       0       0
  2610 ;;Total ram usage:       15 bytes
  2611 ;; Hardware stack levels used:    1
  2612 ;; Hardware stack levels required when called:    2
  2613 ;; This function calls:
  2614 ;;		___wmul
  2615 ;;		_isdigit
  2616 ;;		_isspace
  2617 ;; This function is called by:
  2618 ;;		_vfpfcnvrt
  2619 ;; This function uses a non-reentrant model
  2620 ;;
  2621                           
  2622                           	psect	text13
  2623  000C84                     __ptext13:
  2624                           	opt callstack 0
  2625  000C84                     _atoi:
  2626                           	opt callstack 25
  2627                           
  2628                           ;incstack = 0
  2629  000C84  0E00               	movlw	0
  2630  000C86  6E16               	movwf	atoi@n+1,c
  2631  000C88  0E00               	movlw	0
  2632  000C8A  6E15               	movwf	atoi@n,c
  2633  000C8C  0E00               	movlw	0
  2634  000C8E  6E0F               	movwf	atoi@neg+1,c
  2635  000C90  0E00               	movlw	0
  2636  000C92  6E0E               	movwf	atoi@neg,c
  2637  000C94  D002               	goto	l1736
  2638  000C96                     l1734:
  2639  000C96  4A08               	infsnz	atoi@s,f,c
  2640  000C98  2A09               	incf	atoi@s+1,f,c
  2641  000C9A                     l1736:
  2642  000C9A  0E01               	movlw	1
  2643  000C9C  6E14               	movwf	_atoi$1064,c
  2644  000C9E  C008  FFF6         	movff	atoi@s,tblptrl
  2645  000CA2  C009  FFF7         	movff	atoi@s+1,tblptrh
  2646  000CA6                     	if	0	;tblptru may be non-zero
  2647  000CA6                     	endif
  2648  000CA6                     	if	0	;tblptru may be non-zero
  2649  000CA6                     	endif
  2650  000CA6  0008               	tblrd		*
  2651  000CA8  50F5               	movf	tablat,w,c
  2652  000CAA  0A20               	xorlw	32
  2653  000CAC  B4D8               	btfsc	status,2,c
  2654  000CAE  D018               	goto	l1744
  2655  000CB0  0EF7               	movlw	247
  2656  000CB2  6E0A               	movwf	??_atoi& (0+255),c
  2657  000CB4  0EFF               	movlw	255
  2658  000CB6  6E0B               	movwf	(??_atoi+1)& (0+255),c
  2659  000CB8  C008  FFF6         	movff	atoi@s,tblptrl
  2660  000CBC  C009  FFF7         	movff	atoi@s+1,tblptrh
  2661  000CC0                     	if	0	;tblptru may be non-zero
  2662  000CC0                     	endif
  2663  000CC0                     	if	0	;tblptru may be non-zero
  2664  000CC0                     	endif
  2665  000CC0  0008               	tblrd		*
  2666  000CC2  50F5               	movf	tablat,w,c
  2667  000CC4  6E0C               	movwf	(??_atoi+2)& (0+255),c
  2668  000CC6  6A0D               	clrf	(??_atoi+3)& (0+255),c
  2669  000CC8  500A               	movf	??_atoi,w,c
  2670  000CCA  260C               	addwf	??_atoi+2,f,c
  2671  000CCC  500B               	movf	??_atoi+1,w,c
  2672  000CCE  220D               	addwfc	??_atoi+3,f,c
  2673  000CD0  500D               	movf	??_atoi+3,w,c
  2674  000CD2  E104               	bnz	u1240
  2675  000CD4  0E05               	movlw	5
  2676  000CD6  5C0C               	subwf	??_atoi+2,w,c
  2677  000CD8  A0D8               	btfss	status,0,c
  2678  000CDA  D002               	goto	l1744
  2679  000CDC                     u1240:
  2680  000CDC  0E00               	movlw	0
  2681  000CDE  6E14               	movwf	_atoi$1064,c
  2682  000CE0                     l1744:
  2683  000CE0  C014  F010         	movff	_atoi$1064,_atoi$1063
  2684  000CE4  6A11               	clrf	_atoi$1063+1,c
  2685  000CE6  5010               	movf	_atoi$1063,w,c
  2686  000CE8  1011               	iorwf	_atoi$1063+1,w,c
  2687  000CEA  B4D8               	btfsc	status,2,c
  2688  000CEC  D008               	goto	l1754
  2689  000CEE  D7D3               	goto	l1734
  2690  000CF0                     l1750:
  2691  000CF0  0E00               	movlw	0
  2692  000CF2  6E0F               	movwf	atoi@neg+1,c
  2693  000CF4  0E01               	movlw	1
  2694  000CF6  6E0E               	movwf	atoi@neg,c
  2695  000CF8                     l1752:
  2696  000CF8  4A08               	infsnz	atoi@s,f,c
  2697  000CFA  2A09               	incf	atoi@s+1,f,c
  2698  000CFC  D02E               	goto	l1760
  2699  000CFE                     l1754:
  2700  000CFE  C008  FFF6         	movff	atoi@s,tblptrl
  2701  000D02  C009  FFF7         	movff	atoi@s+1,tblptrh
  2702  000D06                     	if	0	;tblptru may be non-zero
  2703  000D06                     	endif
  2704  000D06                     	if	0	;tblptru may be non-zero
  2705  000D06                     	endif
  2706  000D06  0008               	tblrd		*
  2707  000D08  50F5               	movf	tablat,w,c
  2708  000D0A  6E0A               	movwf	??_atoi& (0+255),c
  2709  000D0C  6A0B               	clrf	(??_atoi+1)& (0+255),c
  2710                           
  2711                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2712                           ; Switch size 1, requested type "simple"
  2713                           ; Number of cases is 1, Range of values is 0 to 0
  2714                           ; switch strategies available:
  2715                           ; Name         Instructions Cycles
  2716                           ; simple_byte            4     3 (average)
  2717                           ;	Chosen strategy is simple_byte
  2718  000D0E  500B               	movf	??_atoi+1,w,c
  2719  000D10  0A00               	xorlw	0	; case 0
  2720  000D12  A4D8               	btfss	status,2,c
  2721  000D14  D022               	goto	l1760
  2722                           
  2723                           ; Switch size 1, requested type "simple"
  2724                           ; Number of cases is 2, Range of values is 43 to 45
  2725                           ; switch strategies available:
  2726                           ; Name         Instructions Cycles
  2727                           ; simple_byte            7     4 (average)
  2728                           ;	Chosen strategy is simple_byte
  2729  000D16  500A               	movf	??_atoi,w,c
  2730  000D18  0A2B               	xorlw	43	; case 43
  2731  000D1A  B4D8               	btfsc	status,2,c
  2732  000D1C  D7ED               	goto	l1752
  2733  000D1E  0A06               	xorlw	6	; case 45
  2734  000D20  B4D8               	btfsc	status,2,c
  2735  000D22  D7E6               	goto	l1750
  2736  000D24  D01A               	goto	l1760
  2737  000D26                     l1756:
  2738  000D26  C015  F001         	movff	atoi@n,___wmul@multiplier
  2739  000D2A  C016  F002         	movff	atoi@n+1,___wmul@multiplier+1
  2740  000D2E  0E00               	movlw	0
  2741  000D30  6E04               	movwf	___wmul@multiplicand+1,c
  2742  000D32  0E0A               	movlw	10
  2743  000D34  6E03               	movwf	___wmul@multiplicand,c
  2744  000D36  EC91  F00A         	call	___wmul	;wreg free
  2745  000D3A  C008  FFF6         	movff	atoi@s,tblptrl
  2746  000D3E  C009  FFF7         	movff	atoi@s+1,tblptrh
  2747  000D42                     	if	0	;tblptru may be non-zero
  2748  000D42                     	endif
  2749  000D42                     	if	0	;tblptru may be non-zero
  2750  000D42                     	endif
  2751  000D42  0008               	tblrd		*
  2752  000D44  50F5               	movf	tablat,w,c
  2753  000D46  5E01               	subwf	?___wmul,f,c
  2754  000D48  0E00               	movlw	0
  2755  000D4A  5A02               	subwfb	?___wmul+1,f,c
  2756  000D4C  0E30               	movlw	48
  2757  000D4E  2401               	addwf	?___wmul,w,c
  2758  000D50  6E15               	movwf	atoi@n,c
  2759  000D52  0E00               	movlw	0
  2760  000D54  2002               	addwfc	?___wmul+1,w,c
  2761  000D56  6E16               	movwf	atoi@n+1,c
  2762  000D58  D7CF               	goto	l1752
  2763  000D5A                     l1760:
  2764  000D5A  0ED0               	movlw	208
  2765  000D5C  6E0A               	movwf	??_atoi& (0+255),c
  2766  000D5E  0EFF               	movlw	255
  2767  000D60  6E0B               	movwf	(??_atoi+1)& (0+255),c
  2768  000D62  C008  FFF6         	movff	atoi@s,tblptrl
  2769  000D66  C009  FFF7         	movff	atoi@s+1,tblptrh
  2770  000D6A                     	if	0	;tblptru may be non-zero
  2771  000D6A                     	endif
  2772  000D6A                     	if	0	;tblptru may be non-zero
  2773  000D6A                     	endif
  2774  000D6A  0008               	tblrd		*
  2775  000D6C  50F5               	movf	tablat,w,c
  2776  000D6E  6E0C               	movwf	(??_atoi+2)& (0+255),c
  2777  000D70  6A0D               	clrf	(??_atoi+3)& (0+255),c
  2778  000D72  500A               	movf	??_atoi,w,c
  2779  000D74  260C               	addwf	??_atoi+2,f,c
  2780  000D76  500B               	movf	??_atoi+1,w,c
  2781  000D78  220D               	addwfc	??_atoi+3,f,c
  2782  000D7A  500D               	movf	??_atoi+3,w,c
  2783  000D7C  E106               	bnz	u1260
  2784  000D7E  0E0A               	movlw	10
  2785  000D80  5C0C               	subwf	??_atoi+2,w,c
  2786  000D82  B0D8               	btfsc	status,0,c
  2787  000D84  D002               	goto	u1260
  2788  000D86  0E01               	movlw	1
  2789  000D88  D001               	goto	u1270
  2790  000D8A                     u1260:
  2791  000D8A  0E00               	movlw	0
  2792  000D8C                     u1270:
  2793  000D8C  6E12               	movwf	_atoi$1065,c
  2794  000D8E  6A13               	clrf	_atoi$1065+1,c
  2795  000D90  5012               	movf	_atoi$1065,w,c
  2796  000D92  1013               	iorwf	_atoi$1065+1,w,c
  2797  000D94  A4D8               	btfss	status,2,c
  2798  000D96  D7C7               	goto	l1756
  2799  000D98  500E               	movf	atoi@neg,w,c
  2800  000D9A  100F               	iorwf	atoi@neg+1,w,c
  2801  000D9C  A4D8               	btfss	status,2,c
  2802  000D9E  D00D               	goto	l905
  2803  000DA0  C015  F00A         	movff	atoi@n,??_atoi
  2804  000DA4  C016  F00B         	movff	atoi@n+1,??_atoi+1
  2805  000DA8  1E0A               	comf	??_atoi,f,c
  2806  000DAA  1E0B               	comf	??_atoi+1,f,c
  2807  000DAC  4A0A               	infsnz	??_atoi,f,c
  2808  000DAE  2A0B               	incf	??_atoi+1,f,c
  2809  000DB0  C00A  F008         	movff	??_atoi,?_atoi
  2810  000DB4  C00B  F009         	movff	??_atoi+1,?_atoi+1
  2811  000DB8  0012               	return	
  2812  000DBA                     l905:
  2813  000DBA  C015  F008         	movff	atoi@n,?_atoi
  2814  000DBE  C016  F009         	movff	atoi@n+1,?_atoi+1
  2815  000DC2  0012               	return		;funcret
  2816  000DC4                     __end_of_atoi:
  2817                           	opt callstack 0
  2818                           
  2819 ;; *************** function _isspace *****************
  2820 ;; Defined at:
  2821 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\isspace.c"
  2822 ;; Parameters:    Size  Location     Type
  2823 ;;  c               2    0[COMRAM] int 
  2824 ;; Auto vars:     Size  Location     Type
  2825 ;;		None
  2826 ;; Return value:  Size  Location     Type
  2827 ;;                  2    0[COMRAM] int 
  2828 ;; Registers used:
  2829 ;;		wreg, status,2, status,0
  2830 ;; Tracked objects:
  2831 ;;		On entry : 0/0
  2832 ;;		On exit  : 0/0
  2833 ;;		Unchanged: 0/0
  2834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2835 ;;      Params:         2       0       0       0       0       0       0
  2836 ;;      Locals:         1       0       0       0       0       0       0
  2837 ;;      Temps:          4       0       0       0       0       0       0
  2838 ;;      Totals:         7       0       0       0       0       0       0
  2839 ;;Total ram usage:        7 bytes
  2840 ;; Hardware stack levels used:    1
  2841 ;; Hardware stack levels required when called:    1
  2842 ;; This function calls:
  2843 ;;		Nothing
  2844 ;; This function is called by:
  2845 ;;		_atoi
  2846 ;; This function uses a non-reentrant model
  2847 ;;
  2848                           
  2849                           	psect	text14
  2850  0013FA                     __ptext14:
  2851                           	opt callstack 0
  2852  0013FA                     _isspace:
  2853                           	opt callstack 25
  2854                           
  2855                           ;incstack = 0
  2856  0013FA  0E01               	movlw	1
  2857  0013FC  6E07               	movwf	_isspace$1081,c
  2858  0013FE  0E20               	movlw	32
  2859  001400  1801               	xorwf	isspace@c,w,c
  2860  001402  1002               	iorwf	isspace@c+1,w,c
  2861  001404  B4D8               	btfsc	status,2,c
  2862  001406  D014               	goto	l1654
  2863  001408  0EF7               	movlw	247
  2864  00140A  6E03               	movwf	??_isspace& (0+255),c
  2865  00140C  0EFF               	movlw	255
  2866  00140E  6E04               	movwf	(??_isspace+1)& (0+255),c
  2867  001410  C001  F005         	movff	isspace@c,??_isspace+2
  2868  001414  C002  F006         	movff	isspace@c+1,??_isspace+3
  2869  001418  5003               	movf	??_isspace,w,c
  2870  00141A  2605               	addwf	??_isspace+2,f,c
  2871  00141C  5004               	movf	??_isspace+1,w,c
  2872  00141E  2206               	addwfc	??_isspace+3,f,c
  2873  001420  5006               	movf	??_isspace+3,w,c
  2874  001422  E104               	bnz	u1060
  2875  001424  0E05               	movlw	5
  2876  001426  5C05               	subwf	??_isspace+2,w,c
  2877  001428  A0D8               	btfss	status,0,c
  2878  00142A  D002               	goto	l1654
  2879  00142C                     u1060:
  2880  00142C  0E00               	movlw	0
  2881  00142E  6E07               	movwf	_isspace$1081,c
  2882  001430                     l1654:
  2883  001430  C007  F001         	movff	_isspace$1081,?_isspace
  2884  001434  6A02               	clrf	?_isspace+1,c
  2885  001436  0012               	return		;funcret
  2886  001438                     __end_of_isspace:
  2887                           	opt callstack 0
  2888                           
  2889 ;; *************** function _isdigit *****************
  2890 ;; Defined at:
  2891 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\isdigit.c"
  2892 ;; Parameters:    Size  Location     Type
  2893 ;;  c               2    0[COMRAM] int 
  2894 ;; Auto vars:     Size  Location     Type
  2895 ;;		None
  2896 ;; Return value:  Size  Location     Type
  2897 ;;                  2    0[COMRAM] int 
  2898 ;; Registers used:
  2899 ;;		wreg, status,2, status,0
  2900 ;; Tracked objects:
  2901 ;;		On entry : 0/0
  2902 ;;		On exit  : 0/0
  2903 ;;		Unchanged: 0/0
  2904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2905 ;;      Params:         2       0       0       0       0       0       0
  2906 ;;      Locals:         0       0       0       0       0       0       0
  2907 ;;      Temps:          4       0       0       0       0       0       0
  2908 ;;      Totals:         6       0       0       0       0       0       0
  2909 ;;Total ram usage:        6 bytes
  2910 ;; Hardware stack levels used:    1
  2911 ;; Hardware stack levels required when called:    1
  2912 ;; This function calls:
  2913 ;;		Nothing
  2914 ;; This function is called by:
  2915 ;;		_vfpfcnvrt
  2916 ;;		_atoi
  2917 ;; This function uses a non-reentrant model
  2918 ;;
  2919                           
  2920                           	psect	text15
  2921  0014A2                     __ptext15:
  2922                           	opt callstack 0
  2923  0014A2                     _isdigit:
  2924                           	opt callstack 26
  2925                           
  2926                           ;incstack = 0
  2927  0014A2  0ED0               	movlw	208
  2928  0014A4  6E03               	movwf	??_isdigit& (0+255),c
  2929  0014A6  0EFF               	movlw	255
  2930  0014A8  6E04               	movwf	(??_isdigit+1)& (0+255),c
  2931  0014AA  C001  F005         	movff	isdigit@c,??_isdigit+2
  2932  0014AE  C002  F006         	movff	isdigit@c+1,??_isdigit+3
  2933  0014B2  5003               	movf	??_isdigit,w,c
  2934  0014B4  2605               	addwf	??_isdigit+2,f,c
  2935  0014B6  5004               	movf	??_isdigit+1,w,c
  2936  0014B8  2206               	addwfc	??_isdigit+3,f,c
  2937  0014BA  5006               	movf	??_isdigit+3,w,c
  2938  0014BC  E106               	bnz	u900
  2939  0014BE  0E0A               	movlw	10
  2940  0014C0  5C05               	subwf	??_isdigit+2,w,c
  2941  0014C2  B0D8               	btfsc	status,0,c
  2942  0014C4  D002               	goto	u900
  2943  0014C6  0E01               	movlw	1
  2944  0014C8  D001               	goto	u910
  2945  0014CA                     u900:
  2946  0014CA  0E00               	movlw	0
  2947  0014CC                     u910:
  2948  0014CC  6E01               	movwf	?_isdigit,c
  2949  0014CE  6A02               	clrf	?_isdigit+1,c
  2950  0014D0  0012               	return		;funcret
  2951  0014D2                     __end_of_isdigit:
  2952                           	opt callstack 0
  2953                           
  2954 ;; *************** function ___wmul *****************
  2955 ;; Defined at:
  2956 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
  2957 ;; Parameters:    Size  Location     Type
  2958 ;;  multiplier      2    0[COMRAM] unsigned int 
  2959 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2960 ;; Auto vars:     Size  Location     Type
  2961 ;;  product         2    4[COMRAM] unsigned int 
  2962 ;; Return value:  Size  Location     Type
  2963 ;;                  2    0[COMRAM] unsigned int 
  2964 ;; Registers used:
  2965 ;;		wreg, status,2, status,0, prodl, prodh
  2966 ;; Tracked objects:
  2967 ;;		On entry : 0/0
  2968 ;;		On exit  : 0/0
  2969 ;;		Unchanged: 0/0
  2970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2971 ;;      Params:         4       0       0       0       0       0       0
  2972 ;;      Locals:         2       0       0       0       0       0       0
  2973 ;;      Temps:          0       0       0       0       0       0       0
  2974 ;;      Totals:         6       0       0       0       0       0       0
  2975 ;;Total ram usage:        6 bytes
  2976 ;; Hardware stack levels used:    1
  2977 ;; Hardware stack levels required when called:    1
  2978 ;; This function calls:
  2979 ;;		Nothing
  2980 ;; This function is called by:
  2981 ;;		_atoi
  2982 ;; This function uses a non-reentrant model
  2983 ;;
  2984                           
  2985                           	psect	text16
  2986  001522                     __ptext16:
  2987                           	opt callstack 0
  2988  001522                     ___wmul:
  2989                           	opt callstack 25
  2990                           
  2991                           ;incstack = 0
  2992  001522  5001               	movf	___wmul@multiplier,w,c
  2993  001524  0203               	mulwf	___wmul@multiplicand,c
  2994  001526  CFF3 F005          	movff	prodl,___wmul@product
  2995  00152A  CFF4 F006          	movff	prodh,___wmul@product+1
  2996  00152E  5001               	movf	___wmul@multiplier,w,c
  2997  001530  0204               	mulwf	___wmul@multiplicand+1,c
  2998  001532  50F3               	movf	prodl,w,c
  2999  001534  2606               	addwf	___wmul@product+1,f,c
  3000  001536  5002               	movf	___wmul@multiplier+1,w,c
  3001  001538  0203               	mulwf	___wmul@multiplicand,c
  3002  00153A  50F3               	movf	prodl,w,c
  3003  00153C  2606               	addwf	___wmul@product+1,f,c
  3004  00153E  C005  F001         	movff	___wmul@product,?___wmul
  3005  001542  C006  F002         	movff	___wmul@product+1,?___wmul+1
  3006  001546  0012               	return		;funcret
  3007  001548                     __end_of___wmul:
  3008                           	opt callstack 0
  3009                           
  3010 ;; *************** function _lcd_ini *****************
  3011 ;; Defined at:
  3012 ;;		line 3 in file "../Bibliotecas/LCD4b.c"
  3013 ;; Parameters:    Size  Location     Type
  3014 ;;		None
  3015 ;; Auto vars:     Size  Location     Type
  3016 ;;  i               1    5[COMRAM] unsigned char 
  3017 ;; Return value:  Size  Location     Type
  3018 ;;                  1    wreg      void 
  3019 ;; Registers used:
  3020 ;;		wreg, status,2, status,0, cstack
  3021 ;; Tracked objects:
  3022 ;;		On entry : 0/0
  3023 ;;		On exit  : 0/0
  3024 ;;		Unchanged: 0/0
  3025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3026 ;;      Params:         0       0       0       0       0       0       0
  3027 ;;      Locals:         1       0       0       0       0       0       0
  3028 ;;      Temps:          1       0       0       0       0       0       0
  3029 ;;      Totals:         2       0       0       0       0       0       0
  3030 ;;Total ram usage:        2 bytes
  3031 ;; Hardware stack levels used:    1
  3032 ;; Hardware stack levels required when called:    3
  3033 ;; This function calls:
  3034 ;;		_lcd_cmd
  3035 ;; This function is called by:
  3036 ;;		_main
  3037 ;; This function uses a non-reentrant model
  3038 ;;
  3039                           
  3040                           	psect	text17
  3041  0011E0                     __ptext17:
  3042                           	opt callstack 0
  3043  0011E0                     _lcd_ini:
  3044                           	opt callstack 27
  3045                           
  3046                           ;../Bibliotecas/LCD4b.c: 5: char i;;../Bibliotecas/LCD4b.c: 7: TRISD = 0b00000000;
  3047                           
  3048                           ;incstack = 0
  3049  0011E0  0E00               	movlw	0
  3050  0011E2  6E95               	movwf	3989,c	;volatile
  3051                           
  3052                           ;../Bibliotecas/LCD4b.c: 8: TRISEbits.TRISE1 = 0;
  3053  0011E4  9296               	bcf	3990,1,c	;volatile
  3054                           
  3055                           ;../Bibliotecas/LCD4b.c: 9: TRISEbits.TRISE0 = 0;
  3056  0011E6  9096               	bcf	3990,0,c	;volatile
  3057                           
  3058                           ;../Bibliotecas/LCD4b.c: 11: PORTD = 0b00000000;
  3059  0011E8  0E00               	movlw	0
  3060  0011EA  6E83               	movwf	3971,c	;volatile
  3061                           
  3062                           ;../Bibliotecas/LCD4b.c: 12: PORTEbits.RE0 = 0;
  3063  0011EC  9084               	bcf	3972,0,c	;volatile
  3064                           
  3065                           ;../Bibliotecas/LCD4b.c: 13: PORTEbits.RE1 = 0;
  3066  0011EE  9284               	bcf	3972,1,c	;volatile
  3067                           
  3068                           ;../Bibliotecas/LCD4b.c: 15: _delay((unsigned long)((15)*(8000000/4000.0)));
  3069  0011F0  0E27               	movlw	39
  3070  0011F2  6E05               	movwf	??_lcd_ini& (0+255),c
  3071  0011F4  0EF5               	movlw	245
  3072  0011F6                     u1587:
  3073  0011F6  2EE8               	decfsz	wreg,f,c
  3074  0011F8  D7FE               	bra	u1587
  3075  0011FA  2E05               	decfsz	??_lcd_ini& (0+255),f,c
  3076  0011FC  D7FC               	bra	u1587
  3077  0011FE  F000               	nop	
  3078                           
  3079                           ;../Bibliotecas/LCD4b.c: 18: for(i=0;i<=2;i++)
  3080  001200  0E00               	movlw	0
  3081  001202  6E06               	movwf	lcd_ini@i,c
  3082  001204                     l1924:
  3083                           
  3084                           ;../Bibliotecas/LCD4b.c: 19:    {;../Bibliotecas/LCD4b.c: 20:    lcd_cmd(0x30);
  3085  001204  0E30               	movlw	48
  3086  001206  EC74  F007         	call	_lcd_cmd
  3087                           
  3088                           ;../Bibliotecas/LCD4b.c: 21:    _delay((unsigned long)((5)*(8000000/4000.0)));
  3089  00120A  0E0D               	movlw	13
  3090  00120C  6E05               	movwf	??_lcd_ini& (0+255),c
  3091  00120E  0EFC               	movlw	252
  3092  001210                     u1597:
  3093  001210  2EE8               	decfsz	wreg,f,c
  3094  001212  D7FE               	bra	u1597
  3095  001214  2E05               	decfsz	??_lcd_ini& (0+255),f,c
  3096  001216  D7FC               	bra	u1597
  3097                           
  3098                           ;../Bibliotecas/LCD4b.c: 22:    }
  3099  001218  2A06               	incf	lcd_ini@i,f,c
  3100  00121A  0E02               	movlw	2
  3101  00121C  6406               	cpfsgt	lcd_ini@i,c
  3102  00121E  D7F2               	goto	l1924
  3103                           
  3104                           ;../Bibliotecas/LCD4b.c: 24:    lcd_cmd(0x02);
  3105  001220  0E02               	movlw	2
  3106  001222  EC74  F007         	call	_lcd_cmd
  3107                           
  3108                           ;../Bibliotecas/LCD4b.c: 25:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3109  001226  0E1A               	movlw	26
  3110  001228                     u1607:
  3111  001228  2EE8               	decfsz	wreg,f,c
  3112  00122A  D7FE               	bra	u1607
  3113  00122C  D000               	nop2	
  3114                           
  3115                           ;../Bibliotecas/LCD4b.c: 26:    lcd_cmd(0x28);
  3116  00122E  0E28               	movlw	40
  3117  001230  EC74  F007         	call	_lcd_cmd
  3118                           
  3119                           ;../Bibliotecas/LCD4b.c: 27:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3120  001234  0E1A               	movlw	26
  3121  001236                     u1617:
  3122  001236  2EE8               	decfsz	wreg,f,c
  3123  001238  D7FE               	bra	u1617
  3124  00123A  D000               	nop2	
  3125                           
  3126                           ;../Bibliotecas/LCD4b.c: 28:    lcd_cmd(0x01);
  3127  00123C  0E01               	movlw	1
  3128  00123E  EC74  F007         	call	_lcd_cmd
  3129                           
  3130                           ;../Bibliotecas/LCD4b.c: 29:    _delay((unsigned long)((2)*(8000000/4000.0)));
  3131  001242  0E06               	movlw	6
  3132  001244  6E05               	movwf	??_lcd_ini& (0+255),c
  3133  001246  0E30               	movlw	48
  3134  001248                     u1627:
  3135  001248  2EE8               	decfsz	wreg,f,c
  3136  00124A  D7FE               	bra	u1627
  3137  00124C  2E05               	decfsz	??_lcd_ini& (0+255),f,c
  3138  00124E  D7FC               	bra	u1627
  3139  001250  D000               	nop2	
  3140                           
  3141                           ;../Bibliotecas/LCD4b.c: 30:    lcd_cmd(0x0C);
  3142  001252  0E0C               	movlw	12
  3143  001254  EC74  F007         	call	_lcd_cmd
  3144                           
  3145                           ;../Bibliotecas/LCD4b.c: 31:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3146  001258  0E1A               	movlw	26
  3147  00125A                     u1637:
  3148  00125A  2EE8               	decfsz	wreg,f,c
  3149  00125C  D7FE               	bra	u1637
  3150  00125E  D000               	nop2	
  3151                           
  3152                           ;../Bibliotecas/LCD4b.c: 32:    lcd_cmd(0x06);
  3153  001260  0E06               	movlw	6
  3154  001262  EC74  F007         	call	_lcd_cmd
  3155                           
  3156                           ;../Bibliotecas/LCD4b.c: 33:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3157  001266  0E1A               	movlw	26
  3158  001268                     u1647:
  3159  001268  2EE8               	decfsz	wreg,f,c
  3160  00126A  D7FE               	bra	u1647
  3161  00126C  D000               	nop2	
  3162  00126E  0012               	return		;funcret
  3163  001270                     __end_of_lcd_ini:
  3164                           	opt callstack 0
  3165                           
  3166 ;; *************** function _lcd_escreve_bf *****************
  3167 ;; Defined at:
  3168 ;;		line 82 in file "../Bibliotecas/LCD4b.c"
  3169 ;; Parameters:    Size  Location     Type
  3170 ;;  lin             1    wreg     unsigned char 
  3171 ;;  col             1    6[COMRAM] unsigned char 
  3172 ;;  str             2    7[COMRAM] PTR unsigned char 
  3173 ;;		 -> bufferLCD(16), STR_2(9), STR_1(11), 
  3174 ;; Auto vars:     Size  Location     Type
  3175 ;;  lin             1   10[COMRAM] unsigned char 
  3176 ;;  end             1    9[COMRAM] unsigned char 
  3177 ;; Return value:  Size  Location     Type
  3178 ;;                  1    wreg      void 
  3179 ;; Registers used:
  3180 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3181 ;; Tracked objects:
  3182 ;;		On entry : 0/0
  3183 ;;		On exit  : 0/0
  3184 ;;		Unchanged: 0/0
  3185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3186 ;;      Params:         3       0       0       0       0       0       0
  3187 ;;      Locals:         2       0       0       0       0       0       0
  3188 ;;      Temps:          0       0       0       0       0       0       0
  3189 ;;      Totals:         5       0       0       0       0       0       0
  3190 ;;Total ram usage:        5 bytes
  3191 ;; Hardware stack levels used:    1
  3192 ;; Hardware stack levels required when called:    4
  3193 ;; This function calls:
  3194 ;;		_lcd_envia_byte
  3195 ;; This function is called by:
  3196 ;;		_main
  3197 ;; This function uses a non-reentrant model
  3198 ;;
  3199                           
  3200                           	psect	text18
  3201  001270                     __ptext18:
  3202                           	opt callstack 0
  3203  001270                     _lcd_escreve_bf:
  3204                           	opt callstack 26
  3205                           
  3206                           ;incstack = 0
  3207                           ;lcd_escreve_bf@lin stored from wreg
  3208  001270  6E0B               	movwf	lcd_escreve_bf@lin,c
  3209                           
  3210                           ;../Bibliotecas/LCD4b.c: 82: void lcd_escreve_bf(char lin, char col, char *str);../Bibli
      +                          otecas/LCD4b.c: 83: {;../Bibliotecas/LCD4b.c: 84:     char end;;../Bibliotecas/LCD4b.c: 
      +                          87:     if (lin == 1) {
  3211  001272  040B               	decf	lcd_escreve_bf@lin,w,c
  3212  001274  A4D8               	btfss	status,2,c
  3213  001276  D003               	goto	l1950
  3214                           
  3215                           ;../Bibliotecas/LCD4b.c: 88:         end = col + 0x80 - 1;
  3216  001278  5007               	movf	lcd_escreve_bf@col,w,c
  3217  00127A  0F7F               	addlw	127
  3218  00127C  D006               	goto	L3
  3219  00127E                     l1950:
  3220  00127E  0E02               	movlw	2
  3221  001280  180B               	xorwf	lcd_escreve_bf@lin,w,c
  3222  001282  A4D8               	btfss	status,2,c
  3223  001284  D003               	goto	l1954
  3224                           
  3225                           ;../Bibliotecas/LCD4b.c: 91:         end = col + 0xC0 - 1;
  3226  001286  5007               	movf	lcd_escreve_bf@col,w,c
  3227  001288  0FBF               	addlw	191
  3228  00128A                     L3:
  3229  00128A  6E0A               	movwf	lcd_escreve_bf@end,c
  3230  00128C                     l1954:
  3231                           
  3232                           ;../Bibliotecas/LCD4b.c: 94:     lcd_envia_byte(0,end);
  3233  00128C  C00A  F005         	movff	lcd_escreve_bf@end,lcd_envia_byte@dado
  3234  001290  0E00               	movlw	0
  3235  001292  ECA4  F00A         	call	_lcd_envia_byte
  3236                           
  3237                           ;../Bibliotecas/LCD4b.c: 98:     while (*str){
  3238  001296  D016               	goto	l1960
  3239  001298                     l1956:
  3240                           
  3241                           ;../Bibliotecas/LCD4b.c: 99:         lcd_envia_byte(1,*str);
  3242  001298  C008  FFF6         	movff	lcd_escreve_bf@str,tblptrl
  3243  00129C  C009  FFF7         	movff	lcd_escreve_bf@str+1,tblptrh
  3244  0012A0  6AF8               	clrf	tblptru,c
  3245  0012A2  0E05               	movlw	(high __ramtop+-1)
  3246  0012A4  64F7               	cpfsgt	tblptrh,c
  3247  0012A6  D003               	bra	u1467
  3248  0012A8  0008               	tblrd		*
  3249  0012AA  50F5               	movf	tablat,w,c
  3250  0012AC  D005               	bra	u1460
  3251  0012AE                     u1467:
  3252  0012AE  CFF6 FFE1          	movff	tblptrl,fsr1l
  3253  0012B2  CFF7 FFE2          	movff	tblptrh,fsr1h
  3254  0012B6  50E7               	movf	indf1,w,c
  3255  0012B8                     u1460:
  3256  0012B8  6E05               	movwf	lcd_envia_byte@dado,c
  3257  0012BA  0E01               	movlw	1
  3258  0012BC  ECA4  F00A         	call	_lcd_envia_byte
  3259                           
  3260                           ;../Bibliotecas/LCD4b.c: 100:         str++;
  3261  0012C0  4A08               	infsnz	lcd_escreve_bf@str,f,c
  3262  0012C2  2A09               	incf	lcd_escreve_bf@str+1,f,c
  3263  0012C4                     l1960:
  3264                           
  3265                           ;../Bibliotecas/LCD4b.c: 98:     while (*str){
  3266  0012C4  C008  FFF6         	movff	lcd_escreve_bf@str,tblptrl
  3267  0012C8  C009  FFF7         	movff	lcd_escreve_bf@str+1,tblptrh
  3268  0012CC  6AF8               	clrf	tblptru,c
  3269  0012CE  0E05               	movlw	(high __ramtop+-1)
  3270  0012D0  64F7               	cpfsgt	tblptrh,c
  3271  0012D2  D003               	bra	u1477
  3272  0012D4  0008               	tblrd		*
  3273  0012D6  50F5               	movf	tablat,w,c
  3274  0012D8  D005               	bra	u1470
  3275  0012DA                     u1477:
  3276  0012DA  CFF6 FFE1          	movff	tblptrl,fsr1l
  3277  0012DE  CFF7 FFE2          	movff	tblptrh,fsr1h
  3278  0012E2  50E7               	movf	indf1,w,c
  3279  0012E4                     u1470:
  3280  0012E4  0900               	iorlw	0
  3281  0012E6  B4D8               	btfsc	status,2,c
  3282  0012E8  0012               	return	
  3283  0012EA  D7D6               	goto	l1956
  3284  0012EC                     __end_of_lcd_escreve_bf:
  3285                           	opt callstack 0
  3286                           
  3287 ;; *************** function _lcd_envia_byte *****************
  3288 ;; Defined at:
  3289 ;;		line 74 in file "../Bibliotecas/LCD4b.c"
  3290 ;; Parameters:    Size  Location     Type
  3291 ;;  nivel           1    wreg     unsigned char 
  3292 ;;  dado            1    4[COMRAM] unsigned char 
  3293 ;; Auto vars:     Size  Location     Type
  3294 ;;  nivel           1    5[COMRAM] unsigned char 
  3295 ;; Return value:  Size  Location     Type
  3296 ;;                  1    wreg      void 
  3297 ;; Registers used:
  3298 ;;		wreg, status,2, status,0, cstack
  3299 ;; Tracked objects:
  3300 ;;		On entry : 0/0
  3301 ;;		On exit  : 0/0
  3302 ;;		Unchanged: 0/0
  3303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3304 ;;      Params:         1       0       0       0       0       0       0
  3305 ;;      Locals:         1       0       0       0       0       0       0
  3306 ;;      Temps:          0       0       0       0       0       0       0
  3307 ;;      Totals:         2       0       0       0       0       0       0
  3308 ;;Total ram usage:        2 bytes
  3309 ;; Hardware stack levels used:    1
  3310 ;; Hardware stack levels required when called:    3
  3311 ;; This function calls:
  3312 ;;		_lcd_cmd
  3313 ;; This function is called by:
  3314 ;;		_lcd_escreve_bf
  3315 ;; This function uses a non-reentrant model
  3316 ;;
  3317                           
  3318                           	psect	text19
  3319  001548                     __ptext19:
  3320                           	opt callstack 0
  3321  001548                     _lcd_envia_byte:
  3322                           	opt callstack 26
  3323                           
  3324                           ;incstack = 0
  3325                           ;lcd_envia_byte@nivel stored from wreg
  3326  001548  6E06               	movwf	lcd_envia_byte@nivel,c
  3327                           
  3328                           ;../Bibliotecas/LCD4b.c: 74: void lcd_envia_byte(char nivel, char dado);../Bibliotecas/L
      +                          CD4b.c: 75: {;../Bibliotecas/LCD4b.c: 76:     PORTEbits.RE0 = nivel;
  3329  00154A  B006               	btfsc	lcd_envia_byte@nivel,0,c
  3330  00154C  D002               	bra	u1415
  3331  00154E  9084               	bcf	3972,0,c	;volatile
  3332  001550  D001               	bra	u1416
  3333  001552                     u1415:
  3334  001552  8084               	bsf	3972,0,c	;volatile
  3335  001554                     u1416:
  3336                           
  3337                           ;../Bibliotecas/LCD4b.c: 77:     _delay((unsigned long)((100)*(8000000/4000000.0)));
  3338  001554  0E42               	movlw	66
  3339  001556                     u1657:
  3340  001556  2EE8               	decfsz	wreg,f,c
  3341  001558  D7FE               	bra	u1657
  3342  00155A  D000               	nop2	
  3343                           
  3344                           ;../Bibliotecas/LCD4b.c: 78:     PORTEbits.RE1 = 0;
  3345  00155C  9284               	bcf	3972,1,c	;volatile
  3346                           
  3347                           ;../Bibliotecas/LCD4b.c: 79:     lcd_cmd(dado);
  3348  00155E  5005               	movf	lcd_envia_byte@dado,w,c
  3349  001560  EC74  F007         	call	_lcd_cmd
  3350  001564  0012               	return		;funcret
  3351  001566                     __end_of_lcd_envia_byte:
  3352                           	opt callstack 0
  3353                           
  3354 ;; *************** function _lcd_cmd *****************
  3355 ;; Defined at:
  3356 ;;		line 48 in file "../Bibliotecas/LCD4b.c"
  3357 ;; Parameters:    Size  Location     Type
  3358 ;;  cmd             1    wreg     unsigned char 
  3359 ;; Auto vars:     Size  Location     Type
  3360 ;;  cmd             1    3[COMRAM] unsigned char 
  3361 ;; Return value:  Size  Location     Type
  3362 ;;                  1    wreg      void 
  3363 ;; Registers used:
  3364 ;;		wreg, status,2, status,0, cstack
  3365 ;; Tracked objects:
  3366 ;;		On entry : 0/0
  3367 ;;		On exit  : 0/0
  3368 ;;		Unchanged: 0/0
  3369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3370 ;;      Params:         0       0       0       0       0       0       0
  3371 ;;      Locals:         1       0       0       0       0       0       0
  3372 ;;      Temps:          1       0       0       0       0       0       0
  3373 ;;      Totals:         2       0       0       0       0       0       0
  3374 ;;Total ram usage:        2 bytes
  3375 ;; Hardware stack levels used:    1
  3376 ;; Hardware stack levels required when called:    2
  3377 ;; This function calls:
  3378 ;;		_set_bit
  3379 ;; This function is called by:
  3380 ;;		_lcd_ini
  3381 ;;		_lcd_envia_byte
  3382 ;; This function uses a non-reentrant model
  3383 ;;
  3384                           
  3385                           	psect	text20
  3386  000EE8                     __ptext20:
  3387                           	opt callstack 0
  3388  000EE8                     _lcd_cmd:
  3389                           	opt callstack 27
  3390                           
  3391                           ;incstack = 0
  3392                           ;lcd_cmd@cmd stored from wreg
  3393  000EE8  6E04               	movwf	lcd_cmd@cmd,c
  3394                           
  3395                           ;../Bibliotecas/LCD4b.c: 48: void lcd_cmd(char cmd);../Bibliotecas/LCD4b.c: 49: {;../Bib
      +                          liotecas/LCD4b.c: 52:     PORTDbits.RD4 = set_bit(cmd,0b00010000);
  3396  000EEA  0E10               	movlw	16
  3397  000EEC  6E01               	movwf	set_bit@comp,c
  3398  000EEE  5004               	movf	lcd_cmd@cmd,w,c
  3399  000EF0  ECB3  F00A         	call	_set_bit
  3400  000EF4  6E03               	movwf	??_lcd_cmd& (0+255),c
  3401  000EF6  3A03               	swapf	??_lcd_cmd,f,c
  3402  000EF8  5083               	movf	3971,w,c	;volatile
  3403  000EFA  1803               	xorwf	??_lcd_cmd,w,c
  3404  000EFC  0BEF               	andlw	-17
  3405  000EFE  1803               	xorwf	??_lcd_cmd,w,c
  3406  000F00  6E83               	movwf	3971,c	;volatile
  3407                           
  3408                           ;../Bibliotecas/LCD4b.c: 53:     PORTDbits.RD5 = set_bit(cmd,0b00100000);
  3409  000F02  0E20               	movlw	32
  3410  000F04  6E01               	movwf	set_bit@comp,c
  3411  000F06  5004               	movf	lcd_cmd@cmd,w,c
  3412  000F08  ECB3  F00A         	call	_set_bit
  3413  000F0C  6E03               	movwf	??_lcd_cmd& (0+255),c
  3414  000F0E  3A03               	swapf	??_lcd_cmd,f,c
  3415  000F10  4603               	rlncf	??_lcd_cmd,f,c
  3416  000F12  5083               	movf	3971,w,c	;volatile
  3417  000F14  1803               	xorwf	??_lcd_cmd,w,c
  3418  000F16  0BDF               	andlw	-33
  3419  000F18  1803               	xorwf	??_lcd_cmd,w,c
  3420  000F1A  6E83               	movwf	3971,c	;volatile
  3421                           
  3422                           ;../Bibliotecas/LCD4b.c: 54:     PORTDbits.RD6 = set_bit(cmd,0b01000000);
  3423  000F1C  0E40               	movlw	64
  3424  000F1E  6E01               	movwf	set_bit@comp,c
  3425  000F20  5004               	movf	lcd_cmd@cmd,w,c
  3426  000F22  ECB3  F00A         	call	_set_bit
  3427  000F26  6E03               	movwf	??_lcd_cmd& (0+255),c
  3428  000F28  3A03               	swapf	??_lcd_cmd,f,c
  3429  000F2A  4603               	rlncf	??_lcd_cmd,f,c
  3430  000F2C  4603               	rlncf	??_lcd_cmd,f,c
  3431  000F2E  5083               	movf	3971,w,c	;volatile
  3432  000F30  1803               	xorwf	??_lcd_cmd,w,c
  3433  000F32  0BBF               	andlw	-65
  3434  000F34  1803               	xorwf	??_lcd_cmd,w,c
  3435  000F36  6E83               	movwf	3971,c	;volatile
  3436                           
  3437                           ;../Bibliotecas/LCD4b.c: 55:     PORTDbits.RD7 = set_bit(cmd,0b10000000);
  3438  000F38  0E80               	movlw	128
  3439  000F3A  6E01               	movwf	set_bit@comp,c
  3440  000F3C  5004               	movf	lcd_cmd@cmd,w,c
  3441  000F3E  ECB3  F00A         	call	_set_bit
  3442  000F42  6E03               	movwf	??_lcd_cmd& (0+255),c
  3443  000F44  3203               	rrcf	??_lcd_cmd,f,c
  3444  000F46  3203               	rrcf	??_lcd_cmd,f,c
  3445  000F48  5083               	movf	3971,w,c	;volatile
  3446  000F4A  1803               	xorwf	??_lcd_cmd,w,c
  3447  000F4C  0B7F               	andlw	-129
  3448  000F4E  1803               	xorwf	??_lcd_cmd,w,c
  3449  000F50  6E83               	movwf	3971,c	;volatile
  3450                           
  3451                           ;../Bibliotecas/LCD4b.c: 57:     PORTEbits.RE1 = 1;
  3452  000F52  8284               	bsf	3972,1,c	;volatile
  3453                           
  3454                           ;../Bibliotecas/LCD4b.c: 58:     PORTEbits.RE1 = 0;
  3455  000F54  9284               	bcf	3972,1,c	;volatile
  3456                           
  3457                           ;../Bibliotecas/LCD4b.c: 60:     _delay((unsigned long)((100)*(8000000/4000000.0)));
  3458  000F56  0E42               	movlw	66
  3459  000F58                     u1667:
  3460  000F58  2EE8               	decfsz	wreg,f,c
  3461  000F5A  D7FE               	bra	u1667
  3462  000F5C  D000               	nop2	
  3463                           
  3464                           ;../Bibliotecas/LCD4b.c: 64:     PORTDbits.RD4 = set_bit(cmd,0b00000001);
  3465  000F5E  0E01               	movlw	1
  3466  000F60  6E01               	movwf	set_bit@comp,c
  3467  000F62  5004               	movf	lcd_cmd@cmd,w,c
  3468  000F64  ECB3  F00A         	call	_set_bit
  3469  000F68  6E03               	movwf	??_lcd_cmd& (0+255),c
  3470  000F6A  3A03               	swapf	??_lcd_cmd,f,c
  3471  000F6C  5083               	movf	3971,w,c	;volatile
  3472  000F6E  1803               	xorwf	??_lcd_cmd,w,c
  3473  000F70  0BEF               	andlw	-17
  3474  000F72  1803               	xorwf	??_lcd_cmd,w,c
  3475  000F74  6E83               	movwf	3971,c	;volatile
  3476                           
  3477                           ;../Bibliotecas/LCD4b.c: 65:     PORTDbits.RD5 = set_bit(cmd,0b00000010);
  3478  000F76  0E02               	movlw	2
  3479  000F78  6E01               	movwf	set_bit@comp,c
  3480  000F7A  5004               	movf	lcd_cmd@cmd,w,c
  3481  000F7C  ECB3  F00A         	call	_set_bit
  3482  000F80  6E03               	movwf	??_lcd_cmd& (0+255),c
  3483  000F82  3A03               	swapf	??_lcd_cmd,f,c
  3484  000F84  4603               	rlncf	??_lcd_cmd,f,c
  3485  000F86  5083               	movf	3971,w,c	;volatile
  3486  000F88  1803               	xorwf	??_lcd_cmd,w,c
  3487  000F8A  0BDF               	andlw	-33
  3488  000F8C  1803               	xorwf	??_lcd_cmd,w,c
  3489  000F8E  6E83               	movwf	3971,c	;volatile
  3490                           
  3491                           ;../Bibliotecas/LCD4b.c: 66:     PORTDbits.RD6 = set_bit(cmd,0b00000100);
  3492  000F90  0E04               	movlw	4
  3493  000F92  6E01               	movwf	set_bit@comp,c
  3494  000F94  5004               	movf	lcd_cmd@cmd,w,c
  3495  000F96  ECB3  F00A         	call	_set_bit
  3496  000F9A  6E03               	movwf	??_lcd_cmd& (0+255),c
  3497  000F9C  3A03               	swapf	??_lcd_cmd,f,c
  3498  000F9E  4603               	rlncf	??_lcd_cmd,f,c
  3499  000FA0  4603               	rlncf	??_lcd_cmd,f,c
  3500  000FA2  5083               	movf	3971,w,c	;volatile
  3501  000FA4  1803               	xorwf	??_lcd_cmd,w,c
  3502  000FA6  0BBF               	andlw	-65
  3503  000FA8  1803               	xorwf	??_lcd_cmd,w,c
  3504  000FAA  6E83               	movwf	3971,c	;volatile
  3505                           
  3506                           ;../Bibliotecas/LCD4b.c: 67:     PORTDbits.RD7 = set_bit(cmd,0b00001000);
  3507  000FAC  0E08               	movlw	8
  3508  000FAE  6E01               	movwf	set_bit@comp,c
  3509  000FB0  5004               	movf	lcd_cmd@cmd,w,c
  3510  000FB2  ECB3  F00A         	call	_set_bit
  3511  000FB6  6E03               	movwf	??_lcd_cmd& (0+255),c
  3512  000FB8  3203               	rrcf	??_lcd_cmd,f,c
  3513  000FBA  3203               	rrcf	??_lcd_cmd,f,c
  3514  000FBC  5083               	movf	3971,w,c	;volatile
  3515  000FBE  1803               	xorwf	??_lcd_cmd,w,c
  3516  000FC0  0B7F               	andlw	-129
  3517  000FC2  1803               	xorwf	??_lcd_cmd,w,c
  3518  000FC4  6E83               	movwf	3971,c	;volatile
  3519                           
  3520                           ;../Bibliotecas/LCD4b.c: 69:     PORTEbits.RE1 = 1;
  3521  000FC6  8284               	bsf	3972,1,c	;volatile
  3522                           
  3523                           ;../Bibliotecas/LCD4b.c: 70:     PORTEbits.RE1 = 0;
  3524  000FC8  9284               	bcf	3972,1,c	;volatile
  3525  000FCA  0012               	return		;funcret
  3526  000FCC                     __end_of_lcd_cmd:
  3527                           	opt callstack 0
  3528                           
  3529 ;; *************** function _set_bit *****************
  3530 ;; Defined at:
  3531 ;;		line 38 in file "../Bibliotecas/LCD4b.c"
  3532 ;; Parameters:    Size  Location     Type
  3533 ;;  cmd             1    wreg     unsigned char 
  3534 ;;  comp            1    0[COMRAM] unsigned char 
  3535 ;; Auto vars:     Size  Location     Type
  3536 ;;  cmd             1    1[COMRAM] unsigned char 
  3537 ;; Return value:  Size  Location     Type
  3538 ;;                  1    wreg      unsigned char 
  3539 ;; Registers used:
  3540 ;;		wreg, status,2, status,0
  3541 ;; Tracked objects:
  3542 ;;		On entry : 0/0
  3543 ;;		On exit  : 0/0
  3544 ;;		Unchanged: 0/0
  3545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3546 ;;      Params:         1       0       0       0       0       0       0
  3547 ;;      Locals:         1       0       0       0       0       0       0
  3548 ;;      Temps:          0       0       0       0       0       0       0
  3549 ;;      Totals:         2       0       0       0       0       0       0
  3550 ;;Total ram usage:        2 bytes
  3551 ;; Hardware stack levels used:    1
  3552 ;; Hardware stack levels required when called:    1
  3553 ;; This function calls:
  3554 ;;		Nothing
  3555 ;; This function is called by:
  3556 ;;		_lcd_cmd
  3557 ;; This function uses a non-reentrant model
  3558 ;;
  3559                           
  3560                           	psect	text21
  3561  001566                     __ptext21:
  3562                           	opt callstack 0
  3563  001566                     _set_bit:
  3564                           	opt callstack 27
  3565                           
  3566                           ;incstack = 0
  3567                           ;set_bit@cmd stored from wreg
  3568  001566  6E02               	movwf	set_bit@cmd,c
  3569                           
  3570                           ;../Bibliotecas/LCD4b.c: 38: char set_bit(char cmd, char comp);../Bibliotecas/LCD4b.c: 3
      +                          9: {;../Bibliotecas/LCD4b.c: 41:     if ((cmd & comp) >= 1)
  3571  001568  5002               	movf	set_bit@cmd,w,c
  3572  00156A  1401               	andwf	set_bit@comp,w,c
  3573  00156C  0900               	iorlw	0
  3574  00156E  B4D8               	btfsc	status,2,c
  3575  001570  D002               	goto	l1666
  3576                           
  3577                           ;../Bibliotecas/LCD4b.c: 42:         return 1;
  3578  001572  0E01               	movlw	1
  3579  001574  0012               	return	
  3580  001576                     l1666:
  3581                           
  3582                           ;../Bibliotecas/LCD4b.c: 44:         return 0;
  3583  001576  0E00               	movlw	0
  3584  001578  0012               	return		;funcret
  3585  00157A                     __end_of_set_bit:
  3586                           	opt callstack 0
  3587                           
  3588 ;; *************** function _int_TMR *****************
  3589 ;; Defined at:
  3590 ;;		line 13 in file "EX18.c"
  3591 ;; Parameters:    Size  Location     Type
  3592 ;;		None
  3593 ;; Auto vars:     Size  Location     Type
  3594 ;;		None
  3595 ;; Return value:  Size  Location     Type
  3596 ;;                  1    wreg      void 
  3597 ;; Registers used:
  3598 ;;		wreg, status,2, status,0
  3599 ;; Tracked objects:
  3600 ;;		On entry : 0/0
  3601 ;;		On exit  : 0/0
  3602 ;;		Unchanged: 0/0
  3603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3604 ;;      Params:         0       0       0       0       0       0       0
  3605 ;;      Locals:         0       0       0       0       0       0       0
  3606 ;;      Temps:          0       0       0       0       0       0       0
  3607 ;;      Totals:         0       0       0       0       0       0       0
  3608 ;;Total ram usage:        0 bytes
  3609 ;; Hardware stack levels used:    1
  3610 ;; This function calls:
  3611 ;;		Nothing
  3612 ;; This function is called by:
  3613 ;;		Interrupt level 2
  3614 ;; This function uses a non-reentrant model
  3615 ;;
  3616                           
  3617                           	psect	intcode
  3618  000008                     __pintcode:
  3619                           	opt callstack 0
  3620  000008                     _int_TMR:
  3621                           	opt callstack 22
  3622                           
  3623                           ;incstack = 0
  3624  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3625  00000A  ED76  F009         	call	int_func,f	;refresh shadow registers
  3626                           
  3627                           	psect	intcode_body
  3628  0012EC                     __pintcode_body:
  3629                           	opt callstack 22
  3630  0012EC                     int_func:
  3631                           	opt callstack 22
  3632  0012EC  0006               	pop		; remove dummy address from shadow register refresh
  3633                           
  3634                           ;EX18.c: 15:     if (TMR1IF)
  3635  0012EE  A09E               	btfss	3998,0,c	;volatile
  3636  0012F0  D030               	goto	i2l47
  3637                           
  3638                           ;EX18.c: 16:     {;EX18.c: 17:      seg++;
  3639  0012F2  0100               	movlb	0	; () banked
  3640  0012F4  4B82               	infsnz	_seg& (0+255),f,b
  3641  0012F6  2B83               	incf	(_seg+1)& (0+255),f,b
  3642                           
  3643                           ; BSR set to: 0
  3644                           ;EX18.c: 19:      if (seg > 59)
  3645  0012F8  BF83               	btfsc	(_seg+1)& (0+255),7,b
  3646  0012FA  D026               	goto	i2l44
  3647  0012FC  5183               	movf	(_seg+1)& (0+255),w,b
  3648  0012FE  E104               	bnz	i2u150_40
  3649  001300  0E3C               	movlw	60
  3650  001302  5D82               	subwf	_seg& (0+255),w,b
  3651  001304  A0D8               	btfss	status,0,c
  3652  001306  D020               	goto	i2l44
  3653  001308                     i2u150_40:
  3654                           
  3655                           ; BSR set to: 0
  3656                           ;EX18.c: 20:      {;EX18.c: 21:          seg = 0;
  3657  001308  0E00               	movlw	0
  3658  00130A  6F83               	movwf	(_seg+1)& (0+255),b
  3659  00130C  0E00               	movlw	0
  3660  00130E  6F82               	movwf	_seg& (0+255),b
  3661                           
  3662                           ; BSR set to: 0
  3663                           ;EX18.c: 22:          min++;
  3664  001310  4A7C               	infsnz	_min,f,c
  3665  001312  2A7D               	incf	_min+1,f,c
  3666                           
  3667                           ; BSR set to: 0
  3668                           ;EX18.c: 23:          if (min > 59)
  3669  001314  BE7D               	btfsc	_min+1,7,c
  3670  001316  D018               	goto	i2l44
  3671  001318  507D               	movf	_min+1,w,c
  3672  00131A  E104               	bnz	i2u151_40
  3673  00131C  0E3C               	movlw	60
  3674  00131E  5C7C               	subwf	_min,w,c
  3675  001320  A0D8               	btfss	status,0,c
  3676  001322  D012               	goto	i2l44
  3677  001324                     i2u151_40:
  3678                           
  3679                           ; BSR set to: 0
  3680                           ;EX18.c: 24:          {;EX18.c: 25:              min = 0;
  3681  001324  0E00               	movlw	0
  3682  001326  6E7D               	movwf	_min+1,c
  3683  001328  0E00               	movlw	0
  3684  00132A  6E7C               	movwf	_min,c
  3685                           
  3686                           ; BSR set to: 0
  3687                           ;EX18.c: 26:              hor++;
  3688  00132C  4A7A               	infsnz	_hor,f,c
  3689  00132E  2A7B               	incf	_hor+1,f,c
  3690                           
  3691                           ; BSR set to: 0
  3692                           ;EX18.c: 27:              if (hor > 23)
  3693  001330  BE7B               	btfsc	_hor+1,7,c
  3694  001332  D00A               	goto	i2l44
  3695  001334  507B               	movf	_hor+1,w,c
  3696  001336  E104               	bnz	i2u152_40
  3697  001338  0E18               	movlw	24
  3698  00133A  5C7A               	subwf	_hor,w,c
  3699  00133C  A0D8               	btfss	status,0,c
  3700  00133E  D004               	goto	i2l44
  3701  001340                     i2u152_40:
  3702                           
  3703                           ; BSR set to: 0
  3704                           ;EX18.c: 28:                  hor = 0;
  3705  001340  0E00               	movlw	0
  3706  001342  6E7B               	movwf	_hor+1,c
  3707  001344  0E00               	movlw	0
  3708  001346  6E7A               	movwf	_hor,c
  3709  001348                     i2l44:
  3710                           
  3711                           ; BSR set to: 0
  3712                           ;EX18.c: 31:         TMR1H = 0x80;
  3713  001348  0E80               	movlw	128
  3714  00134A  6ECF               	movwf	4047,c	;volatile
  3715                           
  3716                           ;EX18.c: 32:         TMR1L = 0x00;
  3717  00134C  0E00               	movlw	0
  3718  00134E  6ECE               	movwf	4046,c	;volatile
  3719                           
  3720                           ; BSR set to: 0
  3721                           ;EX18.c: 33:         TMR1IF = 0;
  3722  001350  909E               	bcf	3998,0,c	;volatile
  3723  001352                     i2l47:
  3724  001352  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3725  001354  0011               	retfie		f
  3726  001356                     __end_of_int_TMR:
  3727                           	opt callstack 0
  3728                           
  3729                           	psect	rparam
  3730  0000                     
  3731                           	psect	temp
  3732  00007E                     btemp:
  3733                           	opt callstack 0
  3734  00007E                     	ds	1
  3735  0000                     int$flags	set	btemp
  3736  0000                     wtemp8	set	btemp+1
  3737  0000                     ttemp5	set	btemp+1
  3738  0000                     ttemp6	set	btemp+4
  3739  0000                     ttemp7	set	btemp+8
  3740                           tosu	equ	0xFFF
  3741                           tosh	equ	0xFFE
  3742                           tosl	equ	0xFFD
  3743                           stkptr	equ	0xFFC
  3744                           pclatu	equ	0xFFB
  3745                           pclath	equ	0xFFA
  3746                           pcl	equ	0xFF9
  3747                           tblptru	equ	0xFF8
  3748                           tblptrh	equ	0xFF7
  3749                           tblptrl	equ	0xFF6
  3750                           tablat	equ	0xFF5
  3751                           prodh	equ	0xFF4
  3752                           prodl	equ	0xFF3
  3753                           indf0	equ	0xFEF
  3754                           postinc0	equ	0xFEE
  3755                           postdec0	equ	0xFED
  3756                           preinc0	equ	0xFEC
  3757                           plusw0	equ	0xFEB
  3758                           fsr0h	equ	0xFEA
  3759                           fsr0l	equ	0xFE9
  3760                           wreg	equ	0xFE8
  3761                           indf1	equ	0xFE7
  3762                           postinc1	equ	0xFE6
  3763                           postdec1	equ	0xFE5
  3764                           preinc1	equ	0xFE4
  3765                           plusw1	equ	0xFE3
  3766                           fsr1h	equ	0xFE2
  3767                           fsr1l	equ	0xFE1
  3768                           bsr	equ	0xFE0
  3769                           indf2	equ	0xFDF
  3770                           postinc2	equ	0xFDE
  3771                           postdec2	equ	0xFDD
  3772                           preinc2	equ	0xFDC
  3773                           plusw2	equ	0xFDB
  3774                           fsr2h	equ	0xFDA
  3775                           fsr2l	equ	0xFD9
  3776                           status	equ	0xFD8


Data Sizes:
    Strings     35
    Constant    0
    Data        0
    BSS         62
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    115     125
    BANK0           128      0      52
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_3(CODE[15]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    S1085_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_3(CODE[15]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_3(CODE[15]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 15
		 -> STR_3(CODE[15]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    lcd_escreve_bf@str	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), STR_2(CODE[9]), STR_1(CODE[11]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _atoi->_isspace
    _lcd_ini->_lcd_cmd
    _lcd_escreve_bf->_lcd_envia_byte
    _lcd_envia_byte->_lcd_cmd
    _lcd_cmd->_set_bit

Critical Paths under _int_TMR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _int_TMR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _int_TMR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _int_TMR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _int_TMR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _int_TMR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _int_TMR in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   10803
                                            113 COMRAM     2     2      0
                     _lcd_escreve_bf
                            _lcd_ini
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             20    10     10    8292
                                             93 COMRAM    20    10     10
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    7939
                                             85 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           46    40      6    7566
                                             63 COMRAM    22    16      6
                               _atoi
                               _dtoa
                              _fputc
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                36    26     10    4358
                                             27 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    2709
                                             16 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     166
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1235
                                              9 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     834
                                              0 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                             18 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     448
                                              0 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     452
                                              0 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (4) _atoi                                                15    13      2    1244
                                              7 COMRAM    15    13      2
                             ___wmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (5) _isspace                                              7     5      2     207
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              6     4      2     237
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     403
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _lcd_ini                                              2     2      0     874
                                              4 COMRAM     2     2      0
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (1) _lcd_escreve_bf                                       5     2      3    1637
                                              6 COMRAM     5     2      3
                     _lcd_envia_byte
 ---------------------------------------------------------------------------------
 (2) _lcd_envia_byte                                       2     1      1    1024
                                              4 COMRAM     2     1      1
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (2) _lcd_cmd                                              2     2      0     828
                                              2 COMRAM     2     2      0
                            _set_bit
 ---------------------------------------------------------------------------------
 (3) _set_bit                                              2     1      1     652
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _int_TMR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _lcd_escreve_bf
     _lcd_envia_byte
       _lcd_cmd
         _set_bit
   _lcd_ini
     _lcd_cmd
       _set_bit
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _atoi
           ___wmul
           _isdigit
           _isspace
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
                 _putch
             _strlen
         _fputc
           _putch
         _isdigit

 _int_TMR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      34       5       40.6%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     73      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      B1      15        0.0%
DATA                 0      0      B1       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Mon Apr 08 08:03:35 2019

    ___wmul@multiplicand 0003              __CFG_BORV$3 000000             __CFG_CP0$OFF 000000  
           __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000  
            __CFG_OSC$HS 000000                      l140 096C                      l142 0974  
                    l129 1178                      l905 0DBA                      l874 1498  
           __CFG_CPB$OFF 000000             __CFG_CPD$OFF 000000                      u800 10BA  
                    u900 14CA                      u820 1102                      u910 14CC  
                    u941 0B96                      u960 0BCE                      u890 147E  
                    _abs 1470                      _pad 114A                      _hor 007A  
                    _min 007C                      _seg 0082                      wreg 000FE8  
           __CFG_LVP$OFF 000000             __CFG_WDT$OFF 000000                     ?_abs 0013  
                   l2006 1012                     l2024 106A                     l2016 104A  
                   l1504 10C2                     l1602 0C3C                     l1514 1442  
                   l1522 14DC                     l1524 14E0                     l1540 1182  
                   l1606 0C62                     l1622 0E14                     l1518 1458  
                   l1534 1162                     l1544 119A                     l1704 0A96  
                   l1642 0EC6                     l1634 0E8A                     l1626 0E2E  
                   l1618 0DF0                     l1538 1170                     l1580 0B90  
                   l1628 0E42                     l1548 11C6                     l1724 0AFA  
                   l1820 0688                     l1812 0680                     l1804 066A  
                   l1654 1430                     l1750 0CF0                     l1734 0C96  
                   l1574 0B68                     l1638 0EA0                     l1806 066C  
                   l1830 06D8                     l1902 136A                     l1760 0D5A  
                   l1752 0CF8                     l1744 0CE0                     l1736 0C9A  
                   l1728 0B12                     l1824 068C                     l1816 0684  
                   l1808 067C                     l1904 1390                     l1666 1576  
                   l1754 0CFE                     l1586 0BB6                     l1690 098E  
                   l1842 0744                     l1924 1204                     l1756 0D26  
                   l1588 0BCA                     l1676 0950                     l1844 0762  
                   l1828 0696                     l1950 127E                     l1598 0C26  
                   l1694 099E                     l1862 0868                     l1846 0770  
                   l1960 12C4                     l1872 08AE                     l1954 128C  
                   l1956 1298                     l1868 08A4                     l1878 08C6  
                   ?_pad 0011                     STR_1 0610                     STR_2 061B  
                   STR_3 0601                     u1020 0E46                     u1120 0962  
                   u1210 0AE4                     u1060 142C                     u1140 0988  
                   u1150 0AA4                     u1240 0CDC                     u1080 0922  
                   u1170 0AC6                     u1090 0924                     u1171 0AC4  
                   u1260 0D8A                     u1180 0AD4                     u1270 0D8C  
                   u1190 0AD8                     u1350 07A8                     u1415 1552  
                   u1416 1554                     u1360 07AA                     u1370 07B6  
                   u1460 12B8                     u1540 1042                     u1470 12E4  
                   u1390 07EA                     u1607 1228                     u1560 1062  
                   u1617 1236                     u1467 12AE                     u1627 1248  
                   u1477 12DA                     u1637 125A                     u1647 1268  
                   u1657 1556                     u1577 101C                     u1667 0F58  
                   u1587 11F6                     u1597 1210                     i2l44 1348  
                   i2l47 1352             __CFG_PWRT$ON 000000                     abs@a 0013  
                   _dbuf 0084                     _atoi 0C84                     _main 0FCC  
                   _dtoa 08FA                     _prec 0076                     _nout 0080  
                   pad@i 0018                     pad@p 0015                     fsr1h 000FE2  
                   fsr2h 000FDA                     indf1 000FE7                     indf2 000FDF  
                   fsr1l 000FE1                     pad@w 001A                     fsr2l 000FD9  
                   btemp 007E                     prodh 000FF4                     prodl 000FF3  
                   start 000E            __CFG_IESO$OFF 000000            __CFG_MCLRE$ON 000000  
           ___param_bank 000000                    ??_abs 0015                    ??_pad 0017  
        __end_of___aodiv 0C84                    ?_atoi 0008                    ?_main 0001  
                  ?_dtoa 001C          __end_of___aomod 0EE8                    _T1CON 000FCD  
           vfpfcnvrt@fmt 0042                    _TMR1H 000FCF                    _TMR1L 000FCE  
                  _PORTD 000F83                    _TRISA 000F92                    _TRISB 000F93  
                  _TRISD 000F95            __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000  
          __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000  
         __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000  
         __CFG_EBTR3$OFF 000000          __end_of_lcd_cmd 0FCC          __end_of_lcd_ini 1270  
          __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000  
         __CFG_EBTRB$OFF 000000          __end_of_int_TMR 1356                    _flags 0078  
                  _fputc 10AA                    _fputs 1438          __end_of_isdigit 14D2  
                  atoi@n 0015                    pad@fp 0011                    atoi@s 0008  
                  _width 0074                    _putch 157A                    dtoa@d 001E  
                  dtoa@i 003E                    dtoa@n 0036                    dtoa@p 0030  
                  dtoa@s 0034                    dtoa@w 0032          __end_of_isspace 1438  
         __CFG_BOREN$OFF 000000          __end_of_set_bit 157A                    tablat 000FF5  
                  ttemp5 007F                    ttemp6 0082                    ttemp7 0086  
                  status 000FD8                    wtemp8 007F          __end_of_sprintf 13FA  
        __initialization 14FC             __end_of_atoi 0DC4             __end_of_main 10AA  
           __end_of_dtoa 0B3C                   ??_atoi 000A                   ??_main 0072  
                 ??_dtoa 0026            __activetblptr 000002                   _ADCON1 000FC1  
                 ?_fputc 0001                   ?_fputs 000A                   ?_putch 0001  
                 _INTCON 000FF2            vfpfcnvrt@done 0052                   _TMR1IF 007CF0  
         __CFG_XINST$OFF 000000             vfprintf@cfmt 005C                ??___aodiv 0011  
              ??___aomod 0011                   ___wmul 1522           __CFG_STVREN$ON 000000  
       ??_lcd_escreve_bf 000A                   clear_0 1502                   clear_1 150E  
       ??_lcd_envia_byte 0006                   pad@buf 0013                ??_lcd_cmd 0003  
                 dtoa@fp 001C                ??_lcd_ini 0005                   _strlen 14D2  
              ??_int_TMR 0001                   fputc@c 0001                   fputs@c 000E  
                 fputs@i 000F                   fputs@s 000A                ??_isdigit 0003  
           __mediumconst 0000                ??_isspace 0003                ??_set_bit 0002  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
                 putch@c 0001         __end_of_vfprintf 13AC                ??_sprintf 0068  
             __accesstop 0080  __end_of__initialization 1514          __CFG_PBADEN$OFF 000000  
          ___rparam_used 000001           __pcstackCOMRAM 0001            __end_of_fputc 114A  
          __end_of_fputs 1470            __end_of_putch 157C                  ??_fputc 0005  
                ??_fputs 000E                  ??_putch 0001               __pbssBANK0 0080  
                ?___wmul 0001                  ?_strlen 0001       __size_of_vfpfcnvrt 02D4  
                __Hparam 0000                  __Lparam 0000                  ___aodiv 0B3C  
                ___aomod 0DC4          __size_of___wmul 0026                ?_vfprintf 0056  
            set_bit@comp 0001             __psmallconst 0600                  __pcinit 14FC  
                __ramtop 0600                  __ptext0 0FCC                  __ptext1 13AC  
                __ptext2 1356                  __ptext3 0626                  __ptext4 08FA  
                __ptext5 114A                  __ptext6 14D2                  __ptext7 1438  
                __ptext8 10AA                  __ptext9 157A                  _lcd_cmd 0EE8  
                _lcd_ini 11E0          __size_of_strlen 002A                  _int_TMR 0008  
           __size_of_abs 0032             __size_of_pad 0096                  _isdigit 14A2  
                _isspace 13FA                  _set_bit 1566                  atoi@neg 000E  
                _sprintf 13AC           __pintcode_body 12EC     end_of_initialization 1514  
     lcd_envia_byte@dado 0005                  fputc@fp 0003            __Lmediumconst 0000  
                int_func 12EC                  fputs@fp 000C        __end_of_vfpfcnvrt 08FA  
                postdec2 000FDD                  postinc0 000FEE                  postinc1 000FE6  
                postinc2 000FDE               ??_vfprintf 005C                  strlen@a 0003  
                strlen@s 0001                _PORTAbits 000F80                _PORTBbits 000F81  
              _PORTDbits 000F83                _PORTEbits 000F84                _TRISEbits 000F96  
             lcd_cmd@cmd 0004              vfpfcnvrt@ap 0044              vfpfcnvrt@fp 0040  
            vfpfcnvrt@ll 004A           __end_of___wmul 1548           __end_of_strlen 14FC  
    start_initialization 14FC              __end_of_abs 14A2              __end_of_pad 11E0  
            vfprintf@fmt 0058                 ??___wmul 0005         __CFG_LPT1OSC$OFF 000000  
               ??_strlen 0003              __pbssCOMRAM 0074         ___aodiv@dividend 0001  
__size_of_lcd_escreve_bf 007C  __size_of_lcd_envia_byte 001E                _atoi$1063 0010  
              _atoi$1064 0014                _atoi$1065 0012        __CFG_CCP2MX$PORTC 000000  
              __pintcode 0008                 ?___aodiv 0001                 ?___aomod 0001  
      lcd_escreve_bf@end 000A        lcd_escreve_bf@col 0007        lcd_escreve_bf@lin 000B  
       ___aodiv@quotient 0013        lcd_escreve_bf@str 0008                _bufferLCD 00A4  
               ?_lcd_cmd 0001        __size_of_vfprintf 0056                 ?_lcd_ini 0001  
            __smallconst 0600                 ?_int_TMR 0001                 ?_isdigit 0001  
               ?_isspace 0001                 ?_set_bit 0001               set_bit@cmd 0002  
               ?_sprintf 005E           __size_of_fputc 00A0           __size_of_fputs 0038  
         __size_of_putch 0002           ___wmul@product 0005                 _PIE1bits 000F9D  
               i2u150_40 1308                 i2u151_40 1324                 i2u152_40 1340  
       __CFG_WDTPS$32768 000000                _vfpfcnvrt 0626        ___wmul@multiplier 0001  
           _isspace$1081 0007                 __Hrparam 0000               vfprintf@ap 005A  
               __Lrparam 0000               vfprintf@fp 0056         __size_of___aodiv 0148  
       __size_of___aomod 0124               ?_vfpfcnvrt 0040          ___aodiv@divisor 0009  
        ___aodiv@counter 0011         __size_of_lcd_cmd 00E4         __size_of_lcd_ini 0090  
             sprintf@fmt 0060         __size_of_int_TMR 134E         __size_of_isdigit 0030  
               _dtoa$591 002E           _lcd_escreve_bf 1270         __size_of_isspace 003E  
               __ptext10 1470                 __ptext11 0DC4                 __ptext20 0EE8  
               __ptext12 0B3C                 __ptext21 1566                 __ptext13 0C84  
               __ptext14 13FA                 __ptext15 14A2                 __ptext16 1522  
               __ptext17 11E0                 __ptext18 1270                 __ptext19 1548  
       __size_of_set_bit 0014           _lcd_envia_byte 1548         __size_of_sprintf 004E  
          __size_of_atoi 0140            __size_of_main 00DE            __size_of_dtoa 0242  
               int$flags 007E                 lcd_ini@i 0006                 _vfprintf 1356  
       ___aomod@dividend 0001   __end_of_lcd_escreve_bf 12EC   __end_of_lcd_envia_byte 1566  
    lcd_envia_byte@nivel 0006                 isdigit@c 0001                 intlevel2 0000  
              sprintf@ap 006A                 isspace@c 0001          ___aomod@divisor 0009  
            ??_vfpfcnvrt 0046            _vfpfcnvrt$606 0054          ___aomod@counter 0011  
               sprintf@f 006C                 sprintf@s 005E          ?_lcd_escreve_bf 0007  
        ?_lcd_envia_byte 0005             ___aodiv@sign 0012             ___aomod@sign 0012  
