

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Thu Apr 04 16:02:42 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    34                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    35                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    36                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    37  0000                     
    38                           ; Version 2.05
    39                           ; Generated 20/12/2018 GMT
    40                           ; 
    41                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    42                           ; All rights reserved.
    43                           ; 
    44                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    45                           ; 
    46                           ; Redistribution and use in source and binary forms, with or without modification, are
    47                           ; permitted provided that the following conditions are met:
    48                           ; 
    49                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    50                           ;        conditions and the following disclaimer.
    51                           ; 
    52                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    53                           ;        of conditions and the following disclaimer in the documentation and/or other
    54                           ;        materials provided with the distribution.
    55                           ; 
    56                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    57                           ;        software without specific prior written permission.
    58                           ; 
    59                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    60                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    61                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    62                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    63                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    64                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    65                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    66                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    67                           ; 
    68                           ; 
    69                           ; Code-generator required, PIC18F4520 Definitions
    70                           ; 
    71                           ; SFR Addresses
    72  0000                     _TMR0	set	4054
    73  0000                     _PORTDbits	set	3971
    74  0000                     _PORTEbits	set	3972
    75  0000                     _PORTD	set	3971
    76  0000                     _TRISEbits	set	3990
    77  0000                     _TRISD	set	3989
    78  0000                     _PIE1bits	set	3997
    79  0000                     _T1CON	set	4045
    80  0000                     _T0CON	set	4053
    81  0000                     _INTCON	set	4082
    82  0000                     _ADCON1	set	4033
    83  0000                     _PORTBbits	set	3969
    84  0000                     _TRISBbits	set	3987
    85  0000                     _TMR1L	set	4046
    86  0000                     _TMR1H	set	4047
    87  0000                     _TMR1IF	set	31984
    88  0000                     _TMR0IF	set	32658
    89                           
    90                           	psect	smallconst
    91  000600                     __psmallconst:
    92                           	opt callstack 0
    93  000600  00                 	db	0
    94  000601                     STR_1:
    95  000601  43                 	db	67	;'C'
    96  000602  4F                 	db	79	;'O'
    97  000603  4E                 	db	78	;'N'
    98  000604  54                 	db	84	;'T'
    99  000605  41                 	db	65	;'A'
   100  000606  20                 	db	32
   101  000607  54                 	db	84	;'T'
   102  000608  4D                 	db	77	;'M'
   103  000609  52                 	db	82	;'R'
   104  00060A  30                 	db	48	;'0'
   105  00060B  3A                 	db	58	;':'
   106  00060C  20                 	db	32
   107  00060D  30                 	db	48	;'0'
   108  00060E  30                 	db	48	;'0'
   109  00060F  00                 	db	0
   110  000610                     STR_2:
   111  000610  43                 	db	67	;'C'
   112  000611  4F                 	db	79	;'O'
   113  000612  4E                 	db	78	;'N'
   114  000613  54                 	db	84	;'T'
   115  000614  41                 	db	65	;'A'
   116  000615  20                 	db	32
   117  000616  54                 	db	84	;'T'
   118  000617  4D                 	db	77	;'M'
   119  000618  52                 	db	82	;'R'
   120  000619  31                 	db	49	;'1'
   121  00061A  3A                 	db	58	;':'
   122  00061B  20                 	db	32
   123  00061C  30                 	db	48	;'0'
   124  00061D  30                 	db	48	;'0'
   125  00061E  00                 	db	0
   126  00061F                     STR_3:
   127  00061F  25                 	db	37
   128  000620  30                 	db	48	;'0'
   129  000621  32                 	db	50	;'2'
   130  000622  64                 	db	100	;'d'
   131  000623  00                 	db	0
   132  0000                     
   133                           ; #config settings
   134  000624  00                 	db	0	; dummy byte at the end
   135  0000                     
   136                           	psect	cinit
   137  001492                     __pcinit:
   138                           	opt callstack 0
   139  001492                     start_initialization:
   140                           	opt callstack 0
   141  001492                     __initialization:
   142                           	opt callstack 0
   143                           
   144                           ; Clear objects allocated to BANK0 (52 bytes)
   145  001492  EE00  F080         	lfsr	0,__pbssBANK0
   146  001496  0E34               	movlw	52
   147  001498                     clear_0:
   148  001498  6AEE               	clrf	postinc0,c
   149  00149A  06E8               	decf	wreg,f,c
   150  00149C  E1FD               	bnz	clear_0
   151                           
   152                           ; Clear objects allocated to COMRAM (12 bytes)
   153  00149E  EE00  F069         	lfsr	0,__pbssCOMRAM
   154  0014A2  0E0C               	movlw	12
   155  0014A4                     clear_1:
   156  0014A4  6AEE               	clrf	postinc0,c
   157  0014A6  06E8               	decf	wreg,f,c
   158  0014A8  E1FD               	bnz	clear_1
   159  0014AA                     end_of_initialization:
   160                           	opt callstack 0
   161  0014AA                     __end_of__initialization:
   162                           	opt callstack 0
   163  0014AA  9075               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   164  0014AC  9275               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   165  0014AE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   166  0014B0  6EF8               	movwf	tblptru,c
   167  0014B2  0100               	movlb	0
   168  0014B4  EFE6  F007         	goto	_main	;jump to C main() function
   169                           
   170                           	psect	bssCOMRAM
   171  000069                     __pbssCOMRAM:
   172                           	opt callstack 0
   173  000069                     _width:
   174                           	opt callstack 0
   175  000069                     	ds	2
   176  00006B                     _prec:
   177                           	opt callstack 0
   178  00006B                     	ds	2
   179  00006D                     _flags:
   180                           	opt callstack 0
   181  00006D                     	ds	2
   182  00006F                     _conta_t1:
   183                           	opt callstack 0
   184  00006F                     	ds	2
   185  000071                     _conta_t0:
   186                           	opt callstack 0
   187  000071                     	ds	2
   188  000073                     _T0_500ms:
   189                           	opt callstack 0
   190  000073                     	ds	2
   191                           
   192                           	psect	bssBANK0
   193  000080                     __pbssBANK0:
   194                           	opt callstack 0
   195  000080                     _nout:
   196                           	opt callstack 0
   197  000080                     	ds	2
   198  000082                     _T1_1000ms:
   199                           	opt callstack 0
   200  000082                     	ds	2
   201  000084                     _dbuf:
   202                           	opt callstack 0
   203  000084                     	ds	32
   204  0000A4                     _bufferLCD:
   205                           	opt callstack 0
   206  0000A4                     	ds	16
   207                           
   208                           	psect	cstackBANK0
   209  0000B4                     __pcstackBANK0:
   210                           	opt callstack 0
   211  0000B4                     	ds	2
   212  0000B6                     sprintf@ap:
   213                           	opt callstack 0
   214                           
   215                           ; 2 bytes @ 0x2
   216  0000B6                     	ds	2
   217  0000B8                     sprintf@f:
   218                           	opt callstack 0
   219                           
   220                           ; 6 bytes @ 0x4
   221  0000B8                     	ds	6
   222                           
   223                           	psect	cstackCOMRAM
   224  000001                     __pcstackCOMRAM:
   225                           	opt callstack 0
   226  000001                     ??_int_TIMERS:
   227  000001                     
   228                           ; 1 bytes @ 0x0
   229  000001                     	ds	3
   230  000004                     ?_strlen:
   231                           	opt callstack 0
   232  000004                     ?_isdigit:
   233                           	opt callstack 0
   234  000004                     ?_isspace:
   235                           	opt callstack 0
   236  000004                     ?___wmul:
   237                           	opt callstack 0
   238  000004                     ?___aodiv:
   239                           	opt callstack 0
   240  000004                     ?___aomod:
   241                           	opt callstack 0
   242  000004                     set_bit@comp:
   243                           	opt callstack 0
   244  000004                     ___wmul@multiplier:
   245                           	opt callstack 0
   246  000004                     isdigit@c:
   247                           	opt callstack 0
   248  000004                     isspace@c:
   249                           	opt callstack 0
   250  000004                     fputc@c:
   251                           	opt callstack 0
   252  000004                     strlen@s:
   253                           	opt callstack 0
   254  000004                     ___aodiv@dividend:
   255                           	opt callstack 0
   256  000004                     ___aomod@dividend:
   257                           	opt callstack 0
   258                           
   259                           ; 8 bytes @ 0x3
   260  000004                     	ds	1
   261  000005                     set_bit@cmd:
   262                           	opt callstack 0
   263                           
   264                           ; 1 bytes @ 0x4
   265  000005                     	ds	1
   266  000006                     ??_lcd_cmd:
   267  000006                     ??_isdigit:
   268  000006                     ??_isspace:
   269  000006                     ___wmul@multiplicand:
   270                           	opt callstack 0
   271  000006                     fputc@fp:
   272                           	opt callstack 0
   273  000006                     strlen@a:
   274                           	opt callstack 0
   275                           
   276                           ; 2 bytes @ 0x5
   277  000006                     	ds	1
   278  000007                     lcd_cmd@cmd:
   279                           	opt callstack 0
   280                           
   281                           ; 1 bytes @ 0x6
   282  000007                     	ds	1
   283  000008                     ??_lcd_ini:
   284  000008                     ??_fputc:
   285  000008                     lcd_envia_byte@dado:
   286                           	opt callstack 0
   287  000008                     ___wmul@product:
   288                           	opt callstack 0
   289                           
   290                           ; 2 bytes @ 0x7
   291  000008                     	ds	1
   292  000009                     lcd_ini@i:
   293                           	opt callstack 0
   294  000009                     lcd_envia_byte@nivel:
   295                           	opt callstack 0
   296                           
   297                           ; 1 bytes @ 0x8
   298  000009                     	ds	1
   299  00000A                     lcd_escreve_bf@col:
   300                           	opt callstack 0
   301  00000A                     _isspace$1017:
   302                           	opt callstack 0
   303                           
   304                           ; 1 bytes @ 0x9
   305  00000A                     	ds	1
   306  00000B                     ?_atoi:
   307                           	opt callstack 0
   308  00000B                     lcd_escreve_bf@str:
   309                           	opt callstack 0
   310  00000B                     atoi@s:
   311                           	opt callstack 0
   312                           
   313                           ; 2 bytes @ 0xA
   314  00000B                     	ds	1
   315  00000C                     ___aodiv@divisor:
   316                           	opt callstack 0
   317  00000C                     ___aomod@divisor:
   318                           	opt callstack 0
   319                           
   320                           ; 8 bytes @ 0xB
   321  00000C                     	ds	1
   322  00000D                     ??_atoi:
   323  00000D                     lcd_escreve_bf@end:
   324                           	opt callstack 0
   325  00000D                     fputs@s:
   326                           	opt callstack 0
   327                           
   328                           ; 2 bytes @ 0xC
   329  00000D                     	ds	1
   330  00000E                     lcd_escreve_bf@lin:
   331                           	opt callstack 0
   332                           
   333                           ; 1 bytes @ 0xD
   334  00000E                     	ds	1
   335  00000F                     fputs@fp:
   336                           	opt callstack 0
   337                           
   338                           ; 2 bytes @ 0xE
   339  00000F                     	ds	2
   340  000011                     fputs@c:
   341                           	opt callstack 0
   342  000011                     atoi@neg:
   343                           	opt callstack 0
   344                           
   345                           ; 2 bytes @ 0x10
   346  000011                     	ds	1
   347  000012                     fputs@i:
   348                           	opt callstack 0
   349                           
   350                           ; 2 bytes @ 0x11
   351  000012                     	ds	1
   352  000013                     _atoi$999:
   353                           	opt callstack 0
   354                           
   355                           ; 2 bytes @ 0x12
   356  000013                     	ds	1
   357  000014                     ?_pad:
   358                           	opt callstack 0
   359  000014                     ___aodiv@counter:
   360                           	opt callstack 0
   361  000014                     ___aomod@counter:
   362                           	opt callstack 0
   363  000014                     pad@fp:
   364                           	opt callstack 0
   365                           
   366                           ; 2 bytes @ 0x13
   367  000014                     	ds	1
   368  000015                     ___aodiv@sign:
   369                           	opt callstack 0
   370  000015                     ___aomod@sign:
   371                           	opt callstack 0
   372  000015                     _atoi$1001:
   373                           	opt callstack 0
   374                           
   375                           ; 2 bytes @ 0x14
   376  000015                     	ds	1
   377  000016                     ?_abs:
   378                           	opt callstack 0
   379  000016                     pad@buf:
   380                           	opt callstack 0
   381  000016                     abs@a:
   382                           	opt callstack 0
   383  000016                     ___aodiv@quotient:
   384                           	opt callstack 0
   385                           
   386                           ; 8 bytes @ 0x15
   387  000016                     	ds	1
   388  000017                     _atoi$1000:
   389                           	opt callstack 0
   390                           
   391                           ; 1 bytes @ 0x16
   392  000017                     	ds	1
   393  000018                     ??_abs:
   394  000018                     pad@p:
   395                           	opt callstack 0
   396  000018                     atoi@n:
   397                           	opt callstack 0
   398                           
   399                           ; 2 bytes @ 0x17
   400  000018                     	ds	2
   401  00001A                     ??_pad:
   402                           
   403                           ; 1 bytes @ 0x19
   404  00001A                     	ds	1
   405  00001B                     pad@i:
   406                           	opt callstack 0
   407                           
   408                           ; 2 bytes @ 0x1A
   409  00001B                     	ds	2
   410  00001D                     pad@w:
   411                           	opt callstack 0
   412                           
   413                           ; 2 bytes @ 0x1C
   414  00001D                     	ds	2
   415  00001F                     ?_dtoa:
   416                           	opt callstack 0
   417  00001F                     dtoa@fp:
   418                           	opt callstack 0
   419                           
   420                           ; 2 bytes @ 0x1E
   421  00001F                     	ds	2
   422  000021                     dtoa@d:
   423                           	opt callstack 0
   424                           
   425                           ; 8 bytes @ 0x20
   426  000021                     	ds	8
   427  000029                     ??_dtoa:
   428                           
   429                           ; 1 bytes @ 0x28
   430  000029                     	ds	8
   431  000031                     _dtoa$527:
   432                           	opt callstack 0
   433                           
   434                           ; 2 bytes @ 0x30
   435  000031                     	ds	2
   436  000033                     dtoa@p:
   437                           	opt callstack 0
   438                           
   439                           ; 2 bytes @ 0x32
   440  000033                     	ds	2
   441  000035                     dtoa@w:
   442                           	opt callstack 0
   443                           
   444                           ; 2 bytes @ 0x34
   445  000035                     	ds	2
   446  000037                     dtoa@s:
   447                           	opt callstack 0
   448                           
   449                           ; 2 bytes @ 0x36
   450  000037                     	ds	2
   451  000039                     dtoa@n:
   452                           	opt callstack 0
   453                           
   454                           ; 8 bytes @ 0x38
   455  000039                     	ds	8
   456  000041                     dtoa@i:
   457                           	opt callstack 0
   458                           
   459                           ; 2 bytes @ 0x40
   460  000041                     	ds	2
   461  000043                     ?_vfpfcnvrt:
   462                           	opt callstack 0
   463  000043                     vfpfcnvrt@fp:
   464                           	opt callstack 0
   465                           
   466                           ; 2 bytes @ 0x42
   467  000043                     	ds	2
   468  000045                     vfpfcnvrt@fmt:
   469                           	opt callstack 0
   470                           
   471                           ; 2 bytes @ 0x44
   472  000045                     	ds	2
   473  000047                     vfpfcnvrt@ap:
   474                           	opt callstack 0
   475                           
   476                           ; 2 bytes @ 0x46
   477  000047                     	ds	2
   478  000049                     ??_vfpfcnvrt:
   479                           
   480                           ; 1 bytes @ 0x48
   481  000049                     	ds	4
   482  00004D                     vfpfcnvrt@ll:
   483                           	opt callstack 0
   484                           
   485                           ; 8 bytes @ 0x4C
   486  00004D                     	ds	8
   487  000055                     vfpfcnvrt@done:
   488                           	opt callstack 0
   489                           
   490                           ; 2 bytes @ 0x54
   491  000055                     	ds	2
   492  000057                     _vfpfcnvrt$542:
   493                           	opt callstack 0
   494                           
   495                           ; 2 bytes @ 0x56
   496  000057                     	ds	2
   497  000059                     ?_vfprintf:
   498                           	opt callstack 0
   499  000059                     vfprintf@fp:
   500                           	opt callstack 0
   501                           
   502                           ; 2 bytes @ 0x58
   503  000059                     	ds	2
   504  00005B                     vfprintf@fmt:
   505                           	opt callstack 0
   506                           
   507                           ; 2 bytes @ 0x5A
   508  00005B                     	ds	2
   509  00005D                     vfprintf@ap:
   510                           	opt callstack 0
   511                           
   512                           ; 2 bytes @ 0x5C
   513  00005D                     	ds	2
   514  00005F                     vfprintf@cfmt:
   515                           	opt callstack 0
   516                           
   517                           ; 2 bytes @ 0x5E
   518  00005F                     	ds	2
   519  000061                     ?_sprintf:
   520                           	opt callstack 0
   521  000061                     sprintf@s:
   522                           	opt callstack 0
   523                           
   524                           ; 2 bytes @ 0x60
   525  000061                     	ds	2
   526  000063                     sprintf@fmt:
   527                           	opt callstack 0
   528                           
   529                           ; 2 bytes @ 0x62
   530  000063                     	ds	4
   531  000067                     ??_main:
   532                           
   533                           ; 1 bytes @ 0x66
   534  000067                     	ds	2
   535                           
   536 ;;
   537 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   538 ;;
   539 ;; *************** function _main *****************
   540 ;; Defined at:
   541 ;;		line 46 in file "EX16.c"
   542 ;; Parameters:    Size  Location     Type
   543 ;;		None
   544 ;; Auto vars:     Size  Location     Type
   545 ;;		None
   546 ;; Return value:  Size  Location     Type
   547 ;;                  1    wreg      void 
   548 ;; Registers used:
   549 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   550 ;; Tracked objects:
   551 ;;		On entry : 0/0
   552 ;;		On exit  : 0/0
   553 ;;		Unchanged: 0/0
   554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   555 ;;      Params:         0       0       0       0       0       0       0
   556 ;;      Locals:         0       0       0       0       0       0       0
   557 ;;      Temps:          2       0       0       0       0       0       0
   558 ;;      Totals:         2       0       0       0       0       0       0
   559 ;;Total ram usage:        2 bytes
   560 ;; Hardware stack levels required when called:    9
   561 ;; This function calls:
   562 ;;		_lcd_escreve_bf
   563 ;;		_lcd_ini
   564 ;;		_sprintf
   565 ;; This function is called by:
   566 ;;		Startup code after reset
   567 ;; This function uses a non-reentrant model
   568 ;;
   569                           
   570                           	psect	text0
   571  000FCC                     __ptext0:
   572                           	opt callstack 0
   573  000FCC                     _main:
   574                           	opt callstack 22
   575                           
   576                           ;EX16.c: 48:     TRISBbits.TRISB0 = 0;
   577                           
   578                           ;incstack = 0
   579  000FCC  9093               	bcf	3987,0,c	;volatile
   580                           
   581                           ;EX16.c: 49:     PORTBbits.RB0 = 0;
   582  000FCE  9081               	bcf	3969,0,c	;volatile
   583                           
   584                           ;EX16.c: 50:     ADCON1 = 0x0F;
   585  000FD0  0E0F               	movlw	15
   586  000FD2  6EC1               	movwf	4033,c	;volatile
   587                           
   588                           ;EX16.c: 52:     INTCON = 0b11100000;
   589  000FD4  0EE0               	movlw	224
   590  000FD6  6EF2               	movwf	4082,c	;volatile
   591                           
   592                           ;EX16.c: 57:     T0CON = 0b11000111;
   593  000FD8  0EC7               	movlw	199
   594  000FDA  6ED5               	movwf	4053,c	;volatile
   595                           
   596                           ;EX16.c: 65:     TMR0 = 61;
   597  000FDC  0E00               	movlw	0
   598  000FDE  6ED7               	movwf	4055,c	;volatile
   599  000FE0  0E3D               	movlw	61
   600  000FE2  6ED6               	movwf	4054,c	;volatile
   601                           
   602                           ;EX16.c: 67:     T1CON = 0b00110101;
   603  000FE4  0E35               	movlw	53
   604  000FE6  6ECD               	movwf	4045,c	;volatile
   605                           
   606                           ;EX16.c: 75:     PIE1bits.TMR1IE = 1;
   607  000FE8  809D               	bsf	3997,0,c	;volatile
   608                           
   609                           ;EX16.c: 77:     TMR1H = 0x0B;
   610  000FEA  0E0B               	movlw	11
   611  000FEC  6ECF               	movwf	4047,c	;volatile
   612                           
   613                           ;EX16.c: 78:     TMR1L = 0xDC;
   614  000FEE  0EDC               	movlw	220
   615  000FF0  6ECE               	movwf	4046,c	;volatile
   616                           
   617                           ;EX16.c: 80:     lcd_ini();
   618  000FF2  ECEE  F008         	call	_lcd_ini	;wreg free
   619                           
   620                           ;EX16.c: 83:     lcd_escreve_bf(1, 1, "CONTA TMR0: 00");
   621  000FF6  0E01               	movlw	1
   622  000FF8  6E0A               	movwf	lcd_escreve_bf@col,c
   623  000FFA  0E01               	movlw	low STR_1
   624  000FFC  6E0B               	movwf	lcd_escreve_bf@str,c
   625  000FFE  0E06               	movlw	high STR_1
   626  001000  6E0C               	movwf	lcd_escreve_bf@str+1,c
   627  001002  0E01               	movlw	1
   628  001004  EC36  F009         	call	_lcd_escreve_bf
   629                           
   630                           ;EX16.c: 86:     lcd_escreve_bf(2, 1, "CONTA TMR1: 00");
   631  001008  0E01               	movlw	1
   632  00100A  6E0A               	movwf	lcd_escreve_bf@col,c
   633  00100C  0E10               	movlw	low STR_2
   634  00100E  6E0B               	movwf	lcd_escreve_bf@str,c
   635  001010  0E06               	movlw	high STR_2
   636  001012  6E0C               	movwf	lcd_escreve_bf@str+1,c
   637  001014  0E02               	movlw	2
   638  001016  EC36  F009         	call	_lcd_escreve_bf
   639  00101A                     l2466:
   640                           
   641                           ;EX16.c: 89:     {;EX16.c: 90:         _delay((unsigned long)((500)*(8000000/4000.0)));
   642  00101A  0E06               	movlw	6
   643  00101C  6E68               	movwf	(??_main+1)& (0+255),c
   644  00101E  0E13               	movlw	19
   645  001020  6E67               	movwf	??_main& (0+255),c
   646  001022  0EAE               	movlw	174
   647  001024                     u2187:
   648  001024  2EE8               	decfsz	wreg,f,c
   649  001026  D7FE               	bra	u2187
   650  001028  2E67               	decfsz	??_main& (0+255),f,c
   651  00102A  D7FC               	bra	u2187
   652  00102C  2E68               	decfsz	(??_main+1)& (0+255),f,c
   653  00102E  D7FA               	bra	u2187
   654                           
   655                           ;EX16.c: 92:         PORTBbits.RB0 = ~PORTBbits.RB0;
   656  001030  A081               	btfss	3969,0,c	;volatile
   657  001032  D002               	goto	u2170
   658  001034  0E01               	movlw	1
   659  001036  D001               	goto	u2176
   660  001038                     u2170:
   661  001038  0E00               	movlw	0
   662  00103A                     u2176:
   663  00103A  0AFF               	xorlw	255
   664  00103C  6E67               	movwf	??_main& (0+255),c
   665  00103E  5081               	movf	3969,w,c	;volatile
   666  001040  1867               	xorwf	??_main,w,c
   667  001042  0BFE               	andlw	-2
   668  001044  1867               	xorwf	??_main,w,c
   669  001046  6E81               	movwf	3969,c	;volatile
   670                           
   671                           ;EX16.c: 95:         sprintf(bufferLCD, "%02d", conta_t0);
   672  001048  0EA4               	movlw	low _bufferLCD
   673  00104A  6E61               	movwf	sprintf@s,c
   674  00104C  0E00               	movlw	high _bufferLCD
   675  00104E  6E62               	movwf	sprintf@s+1,c
   676  001050  0E1F               	movlw	low STR_3
   677  001052  6E63               	movwf	sprintf@fmt,c
   678  001054  0E06               	movlw	high STR_3
   679  001056  6E64               	movwf	sprintf@fmt+1,c
   680  001058  C071  F065         	movff	_conta_t0,?_sprintf+4
   681  00105C  C072  F066         	movff	_conta_t0+1,?_sprintf+5
   682  001060  EC9F  F009         	call	_sprintf	;wreg free
   683                           
   684                           ;EX16.c: 98:         lcd_escreve_bf(1, 13, bufferLCD);
   685  001064  0E0D               	movlw	13
   686  001066  6E0A               	movwf	lcd_escreve_bf@col,c
   687  001068  0EA4               	movlw	low _bufferLCD
   688  00106A  6E0B               	movwf	lcd_escreve_bf@str,c
   689  00106C  0E00               	movlw	high _bufferLCD
   690  00106E  6E0C               	movwf	lcd_escreve_bf@str+1,c
   691  001070  0E01               	movlw	1
   692  001072  EC36  F009         	call	_lcd_escreve_bf
   693                           
   694                           ;EX16.c: 101:         sprintf(bufferLCD, "%02d", conta_t1);
   695  001076  0EA4               	movlw	low _bufferLCD
   696  001078  6E61               	movwf	sprintf@s,c
   697  00107A  0E00               	movlw	high _bufferLCD
   698  00107C  6E62               	movwf	sprintf@s+1,c
   699  00107E  0E1F               	movlw	low STR_3
   700  001080  6E63               	movwf	sprintf@fmt,c
   701  001082  0E06               	movlw	high STR_3
   702  001084  6E64               	movwf	sprintf@fmt+1,c
   703  001086  C06F  F065         	movff	_conta_t1,?_sprintf+4
   704  00108A  C070  F066         	movff	_conta_t1+1,?_sprintf+5
   705  00108E  EC9F  F009         	call	_sprintf	;wreg free
   706                           
   707                           ;EX16.c: 104:         lcd_escreve_bf(2, 13, bufferLCD);
   708  001092  0E0D               	movlw	13
   709  001094  6E0A               	movwf	lcd_escreve_bf@col,c
   710  001096  0EA4               	movlw	low _bufferLCD
   711  001098  6E0B               	movwf	lcd_escreve_bf@str,c
   712  00109A  0E00               	movlw	high _bufferLCD
   713  00109C  6E0C               	movwf	lcd_escreve_bf@str+1,c
   714  00109E  0E02               	movlw	2
   715  0010A0  EC36  F009         	call	_lcd_escreve_bf
   716  0010A4  D7BA               	goto	l2466
   717  0010A6                     __end_of_main:
   718                           	opt callstack 0
   719                           
   720 ;; *************** function _sprintf *****************
   721 ;; Defined at:
   722 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_sprintf.c"
   723 ;; Parameters:    Size  Location     Type
   724 ;;  s               2   96[COMRAM] PTR unsigned char 
   725 ;;		 -> bufferLCD(16), 
   726 ;;  fmt             2   98[COMRAM] PTR const unsigned char 
   727 ;;		 -> STR_4(5), STR_3(5), 
   728 ;; Auto vars:     Size  Location     Type
   729 ;;  f               6    4[BANK0 ] struct _IO_FILE
   730 ;;  ap              2    2[BANK0 ] PTR void [1]
   731 ;;		 -> ?_sprintf(2), 
   732 ;;  ret             2    0        int 
   733 ;; Return value:  Size  Location     Type
   734 ;;                  2   96[COMRAM] int 
   735 ;; Registers used:
   736 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   737 ;; Tracked objects:
   738 ;;		On entry : 0/0
   739 ;;		On exit  : 0/0
   740 ;;		Unchanged: 0/0
   741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   742 ;;      Params:         6       0       0       0       0       0       0
   743 ;;      Locals:         0      10       0       0       0       0       0
   744 ;;      Temps:          0       0       0       0       0       0       0
   745 ;;      Totals:         6      10       0       0       0       0       0
   746 ;;Total ram usage:       16 bytes
   747 ;; Hardware stack levels used:    1
   748 ;; Hardware stack levels required when called:    8
   749 ;; This function calls:
   750 ;;		_vfprintf
   751 ;; This function is called by:
   752 ;;		_main
   753 ;; This function uses a non-reentrant model
   754 ;;
   755                           
   756                           	psect	text1
   757  00133E                     __ptext1:
   758                           	opt callstack 0
   759  00133E                     _sprintf:
   760                           	opt callstack 22
   761                           
   762                           ;incstack = 0
   763  00133E  0E65               	movlw	low (?_sprintf+4)
   764  001340  0100               	movlb	0	; () banked
   765  001342  6FB6               	movwf	sprintf@ap& (0+255),b
   766  001344  0E00               	movlw	high (?_sprintf+4)
   767  001346  6FB7               	movwf	(sprintf@ap+1)& (0+255),b
   768  001348  C061  F0B8         	movff	sprintf@s,sprintf@f
   769  00134C  C062  F0B9         	movff	sprintf@s+1,sprintf@f+1
   770                           
   771                           ; BSR set to: 0
   772  001350  0E00               	movlw	0
   773  001352  6FBB               	movwf	(sprintf@f+3)& (0+255),b
   774  001354  0E00               	movlw	0
   775  001356  6FBA               	movwf	(sprintf@f+2)& (0+255),b
   776                           
   777                           ; BSR set to: 0
   778  001358  0E00               	movlw	0
   779  00135A  6FBD               	movwf	(sprintf@f+5)& (0+255),b
   780  00135C  0E00               	movlw	0
   781  00135E  6FBC               	movwf	(sprintf@f+4)& (0+255),b
   782                           
   783                           ; BSR set to: 0
   784  001360  0EB8               	movlw	low sprintf@f
   785  001362  6E59               	movwf	vfprintf@fp,c
   786  001364  0E00               	movlw	high sprintf@f
   787  001366  6E5A               	movwf	vfprintf@fp+1,c
   788  001368  C063  F05B         	movff	sprintf@fmt,vfprintf@fmt
   789  00136C  C064  F05C         	movff	sprintf@fmt+1,vfprintf@fmt+1
   790  001370  0EB6               	movlw	low sprintf@ap
   791  001372  6E5D               	movwf	vfprintf@ap,c
   792  001374  0E00               	movlw	high sprintf@ap
   793  001376  6E5E               	movwf	vfprintf@ap+1,c
   794  001378  EC74  F009         	call	_vfprintf	;wreg free
   795  00137C  0100               	movlb	0	; () banked
   796  00137E  51BA               	movf	(sprintf@f+2)& (0+255),w,b
   797  001380  2461               	addwf	sprintf@s,w,c
   798  001382  6ED9               	movwf	fsr2l,c
   799  001384  51BB               	movf	(sprintf@f+3)& (0+255),w,b
   800  001386  2062               	addwfc	sprintf@s+1,w,c
   801  001388  6EDA               	movwf	fsr2h,c
   802  00138A  0E00               	movlw	0
   803  00138C  6EDF               	movwf	indf2,c
   804                           
   805                           ; BSR set to: 0
   806  00138E  0012               	return		;funcret
   807  001390                     __end_of_sprintf:
   808                           	opt callstack 0
   809                           
   810 ;; *************** function _vfprintf *****************
   811 ;; Defined at:
   812 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
   813 ;; Parameters:    Size  Location     Type
   814 ;;  fp              2   88[COMRAM] PTR struct _IO_FILE
   815 ;;		 -> sprintf@f(6), 
   816 ;;  fmt             2   90[COMRAM] PTR const unsigned char 
   817 ;;		 -> STR_4(5), STR_3(5), 
   818 ;;  ap              2   92[COMRAM] PTR PTR void 
   819 ;;		 -> sprintf@ap(2), 
   820 ;; Auto vars:     Size  Location     Type
   821 ;;  cfmt            2   94[COMRAM] PTR unsigned char 
   822 ;;		 -> STR_4(5), STR_3(5), 
   823 ;; Return value:  Size  Location     Type
   824 ;;                  2   88[COMRAM] int 
   825 ;; Registers used:
   826 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   827 ;; Tracked objects:
   828 ;;		On entry : 0/0
   829 ;;		On exit  : 0/0
   830 ;;		Unchanged: 0/0
   831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   832 ;;      Params:         6       0       0       0       0       0       0
   833 ;;      Locals:         2       0       0       0       0       0       0
   834 ;;      Temps:          0       0       0       0       0       0       0
   835 ;;      Totals:         8       0       0       0       0       0       0
   836 ;;Total ram usage:        8 bytes
   837 ;; Hardware stack levels used:    1
   838 ;; Hardware stack levels required when called:    7
   839 ;; This function calls:
   840 ;;		_vfpfcnvrt
   841 ;; This function is called by:
   842 ;;		_sprintf
   843 ;; This function uses a non-reentrant model
   844 ;;
   845                           
   846                           	psect	text2
   847  0012E8                     __ptext2:
   848                           	opt callstack 0
   849  0012E8                     _vfprintf:
   850                           	opt callstack 22
   851                           
   852                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.05\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
   853                           
   854                           ; BSR set to: 0
   855                           ;incstack = 0
   856  0012E8  C05B  F05F         	movff	vfprintf@fmt,vfprintf@cfmt
   857  0012EC  C05C  F060         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
   858                           
   859                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
   860  0012F0  0E00               	movlw	0
   861  0012F2  0100               	movlb	0	; () banked
   862  0012F4  6F81               	movwf	(_nout+1)& (0+255),b
   863  0012F6  0E00               	movlw	0
   864  0012F8  6F80               	movwf	_nout& (0+255),b
   865                           
   866                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
   867  0012FA  D013               	goto	l2440
   868  0012FC                     l2438:
   869                           
   870                           ; BSR set to: 0
   871                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
   872  0012FC  C059  F043         	movff	vfprintf@fp,vfpfcnvrt@fp
   873  001300  C05A  F044         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
   874  001304  0E5F               	movlw	low vfprintf@cfmt
   875  001306  6E45               	movwf	vfpfcnvrt@fmt,c
   876  001308  0E00               	movlw	high vfprintf@cfmt
   877  00130A  6E46               	movwf	vfpfcnvrt@fmt+1,c
   878  00130C  C05D  F047         	movff	vfprintf@ap,vfpfcnvrt@ap
   879  001310  C05E  F048         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
   880  001314  EC13  F003         	call	_vfpfcnvrt	;wreg free
   881  001318  5043               	movf	?_vfpfcnvrt,w,c
   882  00131A  0100               	movlb	0	; () banked
   883  00131C  2780               	addwf	_nout& (0+255),f,b
   884  00131E  5044               	movf	?_vfpfcnvrt+1,w,c
   885  001320  2381               	addwfc	(_nout+1)& (0+255),f,b
   886  001322                     l2440:
   887                           
   888                           ; BSR set to: 0
   889                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
   890  001322  C05F  FFF6         	movff	vfprintf@cfmt,tblptrl
   891  001326  C060  FFF7         	movff	vfprintf@cfmt+1,tblptrh
   892  00132A                     	if	0	;tblptru may be non-zero
   893  00132A                     	endif
   894  00132A                     	if	0	;tblptru may be non-zero
   895  00132A                     	endif
   896  00132A  0008               	tblrd		*
   897  00132C  50F5               	movf	tablat,w,c
   898  00132E  0900               	iorlw	0
   899  001330  A4D8               	btfss	status,2,c
   900  001332  D7E4               	goto	l2438
   901                           
   902                           ; BSR set to: 0
   903                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
   904  001334  C080  F059         	movff	_nout,?_vfprintf
   905  001338  C081  F05A         	movff	_nout+1,?_vfprintf+1
   906                           
   907                           ; BSR set to: 0
   908  00133C  0012               	return		;funcret
   909  00133E                     __end_of_vfprintf:
   910                           	opt callstack 0
   911                           
   912 ;; *************** function _vfpfcnvrt *****************
   913 ;; Defined at:
   914 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
   915 ;; Parameters:    Size  Location     Type
   916 ;;  fp              2   66[COMRAM] PTR struct _IO_FILE
   917 ;;		 -> sprintf@f(6), 
   918 ;;  fmt             2   68[COMRAM] PTR PTR unsigned char 
   919 ;;		 -> vfprintf@cfmt(2), 
   920 ;;  ap              2   70[COMRAM] PTR PTR void 
   921 ;;		 -> sprintf@ap(2), 
   922 ;; Auto vars:     Size  Location     Type
   923 ;;  ll              8   76[COMRAM] long long 
   924 ;;  llu             8    0        unsigned long long 
   925 ;;  f               4    0        unsigned long long 
   926 ;;  vp              3    0        PTR void 
   927 ;;  ct              3    0        unsigned char [3]
   928 ;;  cp              3    0        PTR unsigned char 
   929 ;;  done            2   84[COMRAM] int 
   930 ;;  i               2    0        int 
   931 ;;  c               1    0        unsigned char 
   932 ;; Return value:  Size  Location     Type
   933 ;;                  2   66[COMRAM] int 
   934 ;; Registers used:
   935 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   936 ;; Tracked objects:
   937 ;;		On entry : 0/0
   938 ;;		On exit  : 0/0
   939 ;;		Unchanged: 0/0
   940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   941 ;;      Params:         6       0       0       0       0       0       0
   942 ;;      Locals:        12       0       0       0       0       0       0
   943 ;;      Temps:          4       0       0       0       0       0       0
   944 ;;      Totals:        22       0       0       0       0       0       0
   945 ;;Total ram usage:       22 bytes
   946 ;; Hardware stack levels used:    1
   947 ;; Hardware stack levels required when called:    6
   948 ;; This function calls:
   949 ;;		_atoi
   950 ;;		_dtoa
   951 ;;		_fputc
   952 ;;		_isdigit
   953 ;; This function is called by:
   954 ;;		_vfprintf
   955 ;; This function uses a non-reentrant model
   956 ;;
   957                           
   958                           	psect	text3
   959  000626                     __ptext3:
   960                           	opt callstack 0
   961  000626                     _vfpfcnvrt:
   962                           	opt callstack 22
   963                           
   964                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 674:     long long ll;
   965                           
   966                           ; BSR set to: 0
   967                           ;incstack = 0
   968  000626  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   969  00062A  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   970  00062E  CFDE FFF6          	movff	postinc2,tblptrl
   971  000632  CFDD FFF7          	movff	postdec2,tblptrh
   972  000636                     	if	0	;tblptru may be non-zero
   973  000636                     	endif
   974  000636                     	if	0	;tblptru may be non-zero
   975  000636                     	endif
   976  000636  0008               	tblrd		*
   977  000638  50F5               	movf	tablat,w,c
   978  00063A  0A25               	xorlw	37
   979  00063C  A4D8               	btfss	status,2,c
   980  00063E  D143               	goto	l2422
   981                           
   982                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
   983  000640  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   984  000644  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   985  000648  2ADE               	incf	postinc2,f,c
   986  00064A  0E00               	movlw	0
   987  00064C  22DD               	addwfc	postdec2,f,c
   988                           
   989                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
   990  00064E  0E00               	movlw	0
   991  000650  6E6A               	movwf	_width+1,c
   992  000652  0E00               	movlw	0
   993  000654  6E69               	movwf	_width,c
   994  000656  C069  F06D         	movff	_width,_flags
   995  00065A  C06A  F06E         	movff	_width+1,_flags+1
   996                           
   997                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
   998  00065E  686B               	setf	_prec,c
   999  000660  686C               	setf	_prec+1,c
  1000                           
  1001                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 688:       
      +                            done = 0;
  1002  000662  0E00               	movlw	0
  1003  000664  6E56               	movwf	vfpfcnvrt@done+1,c
  1004  000666  0E00               	movlw	0
  1005  000668  D014               	goto	L1
  1006  00066A                     l2348:
  1007                           
  1008                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 692:       
      +                                        flags |= (1 << 0);
  1009  00066A  806D               	bsf	_flags,0,c
  1010  00066C                     l2350:
  1011                           
  1012                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 693:       
      +                                        ++*fmt;
  1013  00066C  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1014  000670  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1015  000674  2ADE               	incf	postinc2,f,c
  1016  000676  0E00               	movlw	0
  1017  000678  22DD               	addwfc	postdec2,f,c
  1018                           
  1019                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 694:       
      +                                        break;
  1020  00067A  D02E               	goto	l2374
  1021  00067C                     l2352:
  1022                           
  1023                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 696:       
      +                                        flags |= (1 << 1);
  1024  00067C  826D               	bsf	_flags,1,c
  1025  00067E  D7F6               	goto	l2350
  1026  000680                     l2356:
  1027                           
  1028                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 700:       
      +                                        flags |= (1 << 2);
  1029  000680  846D               	bsf	_flags,2,c
  1030  000682  D7F4               	goto	l2350
  1031  000684                     l2360:
  1032                           
  1033                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 704:       
      +                                        flags |= (1 << 3);
  1034  000684  866D               	bsf	_flags,3,c
  1035  000686  D7F2               	goto	l2350
  1036  000688                     l2364:
  1037                           
  1038                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 708:       
      +                                        flags |= (1 << 4);
  1039  000688  886D               	bsf	_flags,4,c
  1040  00068A  D7F0               	goto	l2350
  1041  00068C                     l2368:
  1042                           
  1043                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 712:       
      +                                        done = 1;
  1044  00068C  0E00               	movlw	0
  1045  00068E  6E56               	movwf	vfpfcnvrt@done+1,c
  1046  000690  0E01               	movlw	1
  1047  000692                     L1:
  1048  000692  6E55               	movwf	vfpfcnvrt@done,c
  1049                           
  1050                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 713:       
      +                                        break;
  1051  000694  D021               	goto	l2374
  1052  000696                     l2372:
  1053  000696  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1054  00069A  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1055  00069E  CFDE FFF6          	movff	postinc2,tblptrl
  1056  0006A2  CFDD FFF7          	movff	postdec2,tblptrh
  1057  0006A6                     	if	0	;tblptru may be non-zero
  1058  0006A6                     	endif
  1059  0006A6                     	if	0	;tblptru may be non-zero
  1060  0006A6                     	endif
  1061  0006A6  0008               	tblrd		*
  1062  0006A8  50F5               	movf	tablat,w,c
  1063  0006AA  6E49               	movwf	??_vfpfcnvrt& (0+255),c
  1064  0006AC  6A4A               	clrf	(??_vfpfcnvrt+1)& (0+255),c
  1065                           
  1066                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1067                           ; Switch size 1, requested type "simple"
  1068                           ; Number of cases is 1, Range of values is 0 to 0
  1069                           ; switch strategies available:
  1070                           ; Name         Instructions Cycles
  1071                           ; simple_byte            4     3 (average)
  1072                           ;	Chosen strategy is simple_byte
  1073  0006AE  504A               	movf	??_vfpfcnvrt+1,w,c
  1074  0006B0  0A00               	xorlw	0	; case 0
  1075  0006B2  A4D8               	btfss	status,2,c
  1076  0006B4  D7EB               	goto	l2368
  1077                           
  1078                           ; Switch size 1, requested type "simple"
  1079                           ; Number of cases is 5, Range of values is 32 to 48
  1080                           ; switch strategies available:
  1081                           ; Name         Instructions Cycles
  1082                           ; simple_byte           16     9 (average)
  1083                           ;	Chosen strategy is simple_byte
  1084  0006B6  5049               	movf	??_vfpfcnvrt,w,c
  1085  0006B8  0A20               	xorlw	32	; case 32
  1086  0006BA  B4D8               	btfsc	status,2,c
  1087  0006BC  D7E3               	goto	l2360
  1088  0006BE  0A03               	xorlw	3	; case 35
  1089  0006C0  B4D8               	btfsc	status,2,c
  1090  0006C2  D7E2               	goto	l2364
  1091  0006C4  0A08               	xorlw	8	; case 43
  1092  0006C6  B4D8               	btfsc	status,2,c
  1093  0006C8  D7DB               	goto	l2356
  1094  0006CA  0A06               	xorlw	6	; case 45
  1095  0006CC  B4D8               	btfsc	status,2,c
  1096  0006CE  D7CD               	goto	l2348
  1097  0006D0  0A1D               	xorlw	29	; case 48
  1098  0006D2  B4D8               	btfsc	status,2,c
  1099  0006D4  D7D3               	goto	l2352
  1100  0006D6  D7DA               	goto	l2368
  1101  0006D8                     l2374:
  1102                           
  1103                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 689:       
      +                            while (!done) {
  1104  0006D8  5055               	movf	vfpfcnvrt@done,w,c
  1105  0006DA  1056               	iorwf	vfpfcnvrt@done+1,w,c
  1106  0006DC  B4D8               	btfsc	status,2,c
  1107  0006DE  D7DB               	goto	l2372
  1108                           
  1109                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 716:       
      +                            if (flags & (1 << 0)) {
  1110  0006E0  B06D               	btfsc	_flags,0,c
  1111                           
  1112                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 717:       
      +                                flags &= ~(1 << 1);
  1113  0006E2  926D               	bcf	_flags,1,c
  1114                           
  1115                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 723:       
      +                            if ((*fmt)[0] == '*') {
  1116  0006E4  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1117  0006E8  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1118  0006EC  CFDE FFF6          	movff	postinc2,tblptrl
  1119  0006F0  CFDD FFF7          	movff	postdec2,tblptrh
  1120  0006F4                     	if	0	;tblptru may be non-zero
  1121  0006F4                     	endif
  1122  0006F4                     	if	0	;tblptru may be non-zero
  1123  0006F4                     	endif
  1124  0006F4  0008               	tblrd		*
  1125  0006F6  50F5               	movf	tablat,w,c
  1126  0006F8  0A2A               	xorlw	42
  1127  0006FA  A4D8               	btfss	status,2,c
  1128  0006FC  D023               	goto	l2386
  1129                           
  1130                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 724:       
      +                                ++*fmt;
  1131  0006FE  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1132  000702  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1133  000706  2ADE               	incf	postinc2,f,c
  1134  000708  0E00               	movlw	0
  1135  00070A  22DD               	addwfc	postdec2,f,c
  1136                           
  1137                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 725:       
      +                                width = (*(int *)__va_arg(*(int **)ap, (int)0));
  1138  00070C  C047  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1139  000710  C048  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1140  000714  CFDF F049          	movff	indf2,??_vfpfcnvrt
  1141  000718  0E02               	movlw	2
  1142  00071A  26DE               	addwf	postinc2,f,c
  1143  00071C  CFDF F04A          	movff	indf2,??_vfpfcnvrt+1
  1144  000720  0E00               	movlw	0
  1145  000722  22DD               	addwfc	postdec2,f,c
  1146  000724  C049  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1147  000728  C04A  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1148  00072C  CFDE F069          	movff	postinc2,_width
  1149  000730  CFDD F06A          	movff	postdec2,_width+1
  1150                           
  1151                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 726:       
      +                                if (width < 0) {
  1152  000734  AE6A               	btfss	_width+1,7,c
  1153  000736  D03F               	goto	u2120
  1154                           
  1155                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 727:       
      +                                    flags |= (1 << 0);
  1156  000738  806D               	bsf	_flags,0,c
  1157                           
  1158                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 728:       
      +                                    width = -width;
  1159  00073A  6C69               	negf	_width,c
  1160  00073C  1E6A               	comf	_width+1,f,c
  1161  00073E  B0D8               	btfsc	status,0,c
  1162  000740  2A6A               	incf	_width+1,f,c
  1163  000742  D039               	goto	u2120
  1164  000744                     l2386:
  1165                           
  1166                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 731:       
      +                                width = atoi(*fmt);
  1167  000744  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1168  000748  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1169  00074C  CFDE F00B          	movff	postinc2,atoi@s
  1170  000750  CFDD F00C          	movff	postdec2,atoi@s+1
  1171  000754  EC42  F006         	call	_atoi	;wreg free
  1172  000758  C00B  F069         	movff	?_atoi,_width
  1173  00075C  C00C  F06A         	movff	?_atoi+1,_width+1
  1174                           
  1175                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 732:       
      +                                while ((0 ? isdigit((*fmt)[0]) : ((unsigned)((*fmt)[0])-'0') < 10)) {
  1176  000760  D007               	goto	l2390
  1177  000762                     l2388:
  1178                           
  1179                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 733:       
      +                                    ++*fmt;
  1180  000762  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1181  000766  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1182  00076A  2ADE               	incf	postinc2,f,c
  1183  00076C  0E00               	movlw	0
  1184  00076E  22DD               	addwfc	postdec2,f,c
  1185  000770                     l2390:
  1186  000770  0ED0               	movlw	208
  1187  000772  6E49               	movwf	??_vfpfcnvrt& (0+255),c
  1188  000774  0EFF               	movlw	255
  1189  000776  6E4A               	movwf	(??_vfpfcnvrt+1)& (0+255),c
  1190  000778  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1191  00077C  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1192  000780  CFDE FFF6          	movff	postinc2,tblptrl
  1193  000784  CFDD FFF7          	movff	postdec2,tblptrh
  1194  000788                     	if	0	;tblptru may be non-zero
  1195  000788                     	endif
  1196  000788                     	if	0	;tblptru may be non-zero
  1197  000788                     	endif
  1198  000788  0008               	tblrd		*
  1199  00078A  50F5               	movf	tablat,w,c
  1200  00078C  6E4B               	movwf	(??_vfpfcnvrt+2)& (0+255),c
  1201  00078E  6A4C               	clrf	(??_vfpfcnvrt+3)& (0+255),c
  1202  000790  5049               	movf	??_vfpfcnvrt,w,c
  1203  000792  264B               	addwf	??_vfpfcnvrt+2,f,c
  1204  000794  504A               	movf	??_vfpfcnvrt+1,w,c
  1205  000796  224C               	addwfc	??_vfpfcnvrt+3,f,c
  1206  000798  504C               	movf	??_vfpfcnvrt+3,w,c
  1207  00079A  E106               	bnz	u2100
  1208  00079C  0E0A               	movlw	10
  1209  00079E  5C4B               	subwf	??_vfpfcnvrt+2,w,c
  1210  0007A0  B0D8               	btfsc	status,0,c
  1211  0007A2  D002               	goto	u2100
  1212  0007A4  0E01               	movlw	1
  1213  0007A6  D001               	goto	u2110
  1214  0007A8                     u2100:
  1215  0007A8  0E00               	movlw	0
  1216  0007AA                     u2110:
  1217  0007AA  6E57               	movwf	_vfpfcnvrt$542,c
  1218  0007AC  6A58               	clrf	_vfpfcnvrt$542+1,c
  1219  0007AE  5057               	movf	_vfpfcnvrt$542,w,c
  1220  0007B0  1058               	iorwf	_vfpfcnvrt$542+1,w,c
  1221  0007B2  A4D8               	btfss	status,2,c
  1222  0007B4  D7D6               	goto	l2388
  1223  0007B6                     u2120:
  1224                           
  1225                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 825:       
      +                            if ((*fmt[0] == 'd') || (*fmt[0] == 'i')) {
  1226  0007B6  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1227  0007BA  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1228  0007BE  CFDE FFF6          	movff	postinc2,tblptrl
  1229  0007C2  CFDD FFF7          	movff	postdec2,tblptrh
  1230  0007C6                     	if	0	;tblptru may be non-zero
  1231  0007C6                     	endif
  1232  0007C6                     	if	0	;tblptru may be non-zero
  1233  0007C6                     	endif
  1234  0007C6  0008               	tblrd		*
  1235  0007C8  50F5               	movf	tablat,w,c
  1236  0007CA  0A64               	xorlw	100
  1237  0007CC  B4D8               	btfsc	status,2,c
  1238  0007CE  D00D               	goto	u2140
  1239  0007D0  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1240  0007D4  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1241  0007D8  CFDE FFF6          	movff	postinc2,tblptrl
  1242  0007DC  CFDD FFF7          	movff	postdec2,tblptrh
  1243  0007E0                     	if	0	;tblptru may be non-zero
  1244  0007E0                     	endif
  1245  0007E0                     	if	0	;tblptru may be non-zero
  1246  0007E0                     	endif
  1247  0007E0  0008               	tblrd		*
  1248  0007E2  50F5               	movf	tablat,w,c
  1249  0007E4  0A69               	xorlw	105
  1250  0007E6  A4D8               	btfss	status,2,c
  1251  0007E8  D03F               	goto	l2406
  1252  0007EA                     u2140:
  1253                           
  1254                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 827:       
      +                                ++*fmt;
  1255  0007EA  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1256  0007EE  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1257  0007F2  2ADE               	incf	postinc2,f,c
  1258  0007F4  0E00               	movlw	0
  1259  0007F6  22DD               	addwfc	postdec2,f,c
  1260                           
  1261                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 828:       
      +                                ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  1262  0007F8  C047  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1263  0007FC  C048  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1264  000800  CFDF F049          	movff	indf2,??_vfpfcnvrt
  1265  000804  0E02               	movlw	2
  1266  000806  26DE               	addwf	postinc2,f,c
  1267  000808  CFDF F04A          	movff	indf2,??_vfpfcnvrt+1
  1268  00080C  0E00               	movlw	0
  1269  00080E  22DD               	addwfc	postdec2,f,c
  1270  000810  C049  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1271  000814  C04A  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1272  000818  CFDE F04D          	movff	postinc2,vfpfcnvrt@ll
  1273  00081C  CFDD F04E          	movff	postdec2,vfpfcnvrt@ll+1
  1274  000820  0E00               	movlw	0
  1275  000822  BE4E               	btfsc	vfpfcnvrt@ll+1,7,c
  1276  000824  0EFF               	movlw	-1
  1277  000826  6E4F               	movwf	vfpfcnvrt@ll+2,c
  1278  000828  6E50               	movwf	vfpfcnvrt@ll+3,c
  1279  00082A  6E51               	movwf	vfpfcnvrt@ll+4,c
  1280  00082C  6E52               	movwf	vfpfcnvrt@ll+5,c
  1281  00082E  6E53               	movwf	vfpfcnvrt@ll+6,c
  1282  000830  6E54               	movwf	vfpfcnvrt@ll+7,c
  1283                           
  1284                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 830:       
      +                                return dtoa(fp, ll);
  1285  000832  C043  F01F         	movff	vfpfcnvrt@fp,dtoa@fp
  1286  000836  C044  F020         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  1287  00083A  C04D  F021         	movff	vfpfcnvrt@ll,dtoa@d
  1288  00083E  C04E  F022         	movff	vfpfcnvrt@ll+1,dtoa@d+1
  1289  000842  C04F  F023         	movff	vfpfcnvrt@ll+2,dtoa@d+2
  1290  000846  C050  F024         	movff	vfpfcnvrt@ll+3,dtoa@d+3
  1291  00084A  C051  F025         	movff	vfpfcnvrt@ll+4,dtoa@d+4
  1292  00084E  C052  F026         	movff	vfpfcnvrt@ll+5,dtoa@d+5
  1293  000852  C053  F027         	movff	vfpfcnvrt@ll+6,dtoa@d+6
  1294  000856  C054  F028         	movff	vfpfcnvrt@ll+7,dtoa@d+7
  1295  00085A  EC7D  F004         	call	_dtoa	;wreg free
  1296  00085E  C01F  F043         	movff	?_dtoa,?_vfpfcnvrt
  1297  000862  C020  F044         	movff	?_dtoa+1,?_vfpfcnvrt+1
  1298  000866  0012               	return	
  1299  000868                     l2406:
  1300                           
  1301                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
  1302  000868  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1303  00086C  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1304  000870  CFDE FFF6          	movff	postinc2,tblptrl
  1305  000874  CFDD FFF7          	movff	postdec2,tblptrh
  1306  000878                     	if	0	;tblptru may be non-zero
  1307  000878                     	endif
  1308  000878                     	if	0	;tblptru may be non-zero
  1309  000878                     	endif
  1310  000878  0008               	tblrd		*
  1311  00087A  50F5               	movf	tablat,w,c
  1312  00087C  0A25               	xorlw	37
  1313  00087E  A4D8               	btfss	status,2,c
  1314  000880  D016               	goto	l2416
  1315                           
  1316                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
  1317  000882  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1318  000886  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1319  00088A  2ADE               	incf	postinc2,f,c
  1320  00088C  0E00               	movlw	0
  1321  00088E  22DD               	addwfc	postdec2,f,c
  1322                           
  1323                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
  1324  000890  0E00               	movlw	0
  1325  000892  6E05               	movwf	fputc@c+1,c
  1326  000894  0E25               	movlw	37
  1327  000896  6E04               	movwf	fputc@c,c
  1328  000898  C043  F006         	movff	vfpfcnvrt@fp,fputc@fp
  1329  00089C  C044  F007         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1330  0008A0  EC53  F008         	call	_fputc	;wreg free
  1331  0008A4                     l2412:
  1332                           
  1333                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
  1334  0008A4  0E00               	movlw	0
  1335  0008A6  6E44               	movwf	?_vfpfcnvrt+1,c
  1336  0008A8  0E01               	movlw	1
  1337  0008AA  6E43               	movwf	?_vfpfcnvrt,c
  1338  0008AC  0012               	return	
  1339  0008AE                     l2416:
  1340                           
  1341                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
  1342  0008AE  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1343  0008B2  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1344  0008B6  2ADE               	incf	postinc2,f,c
  1345  0008B8  0E00               	movlw	0
  1346  0008BA  22DD               	addwfc	postdec2,f,c
  1347                           
  1348                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
  1349  0008BC  0E00               	movlw	0
  1350  0008BE  6E44               	movwf	?_vfpfcnvrt+1,c
  1351  0008C0  0E00               	movlw	0
  1352  0008C2  6E43               	movwf	?_vfpfcnvrt,c
  1353  0008C4  0012               	return	
  1354  0008C6                     l2422:
  1355                           
  1356                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
  1357  0008C6  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1358  0008CA  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1359  0008CE  CFDE FFF6          	movff	postinc2,tblptrl
  1360  0008D2  CFDD FFF7          	movff	postdec2,tblptrh
  1361  0008D6                     	if	0	;tblptru may be non-zero
  1362  0008D6                     	endif
  1363  0008D6                     	if	0	;tblptru may be non-zero
  1364  0008D6                     	endif
  1365  0008D6  0008               	tblrd		*
  1366  0008D8  50F5               	movf	tablat,w,c
  1367  0008DA  6E04               	movwf	fputc@c,c
  1368  0008DC  6A05               	clrf	fputc@c+1,c
  1369  0008DE  C043  F006         	movff	vfpfcnvrt@fp,fputc@fp
  1370  0008E2  C044  F007         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1371  0008E6  EC53  F008         	call	_fputc	;wreg free
  1372                           
  1373                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
  1374  0008EA  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1375  0008EE  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1376  0008F2  2ADE               	incf	postinc2,f,c
  1377  0008F4  0E00               	movlw	0
  1378  0008F6  22DD               	addwfc	postdec2,f,c
  1379  0008F8  D7D5               	goto	l2412
  1380  0008FA                     __end_of_vfpfcnvrt:
  1381                           	opt callstack 0
  1382                           
  1383 ;; *************** function _dtoa *****************
  1384 ;; Defined at:
  1385 ;;		line 274 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1386 ;; Parameters:    Size  Location     Type
  1387 ;;  fp              2   30[COMRAM] PTR struct _IO_FILE
  1388 ;;		 -> sprintf@f(6), 
  1389 ;;  d               8   32[COMRAM] long long 
  1390 ;; Auto vars:     Size  Location     Type
  1391 ;;  n               8   56[COMRAM] long long 
  1392 ;;  i               2   64[COMRAM] int 
  1393 ;;  s               2   54[COMRAM] int 
  1394 ;;  w               2   52[COMRAM] int 
  1395 ;;  p               2   50[COMRAM] int 
  1396 ;; Return value:  Size  Location     Type
  1397 ;;                  2   30[COMRAM] int 
  1398 ;; Registers used:
  1399 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1400 ;; Tracked objects:
  1401 ;;		On entry : 0/0
  1402 ;;		On exit  : 0/0
  1403 ;;		Unchanged: 0/0
  1404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1405 ;;      Params:        10       0       0       0       0       0       0
  1406 ;;      Locals:        18       0       0       0       0       0       0
  1407 ;;      Temps:          8       0       0       0       0       0       0
  1408 ;;      Totals:        36       0       0       0       0       0       0
  1409 ;;Total ram usage:       36 bytes
  1410 ;; Hardware stack levels used:    1
  1411 ;; Hardware stack levels required when called:    5
  1412 ;; This function calls:
  1413 ;;		___aodiv
  1414 ;;		___aomod
  1415 ;;		_abs
  1416 ;;		_pad
  1417 ;; This function is called by:
  1418 ;;		_vfpfcnvrt
  1419 ;; This function uses a non-reentrant model
  1420 ;;
  1421                           
  1422                           	psect	text4
  1423  0008FA                     __ptext4:
  1424                           	opt callstack 0
  1425  0008FA                     _dtoa:
  1426                           	opt callstack 22
  1427                           
  1428                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 274: static
      +                           int dtoa(FILE *fp, long long d);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\
      +                          c99\common\doprnt.c: 275: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\c
      +                          ommon\doprnt.c: 276:     int i, p, s, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\
      +                          sources\c99\common\doprnt.c: 277:     long long n;;C:\Program Files (x86)\Microchip\xc8\
      +                          v2.05\pic\sources\c99\common\doprnt.c: 280:     n = d;
  1429                           
  1430                           ;incstack = 0
  1431  0008FA  C021  F039         	movff	dtoa@d,dtoa@n
  1432  0008FE  C022  F03A         	movff	dtoa@d+1,dtoa@n+1
  1433  000902  C023  F03B         	movff	dtoa@d+2,dtoa@n+2
  1434  000906  C024  F03C         	movff	dtoa@d+3,dtoa@n+3
  1435  00090A  C025  F03D         	movff	dtoa@d+4,dtoa@n+4
  1436  00090E  C026  F03E         	movff	dtoa@d+5,dtoa@n+5
  1437  000912  C027  F03F         	movff	dtoa@d+6,dtoa@n+6
  1438  000916  C028  F040         	movff	dtoa@d+7,dtoa@n+7
  1439                           
  1440                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 281:     s 
      +                          = n < 0 ? 1 : 0;
  1441  00091A  AE40               	btfss	dtoa@n+7,7,c
  1442  00091C  D002               	goto	u1830
  1443  00091E  0E01               	movlw	1
  1444  000920  D001               	goto	u1840
  1445  000922                     u1830:
  1446  000922  0E00               	movlw	0
  1447  000924                     u1840:
  1448  000924  6E37               	movwf	dtoa@s,c
  1449  000926  6A38               	clrf	dtoa@s+1,c
  1450                           
  1451                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 282:     if
      +                           (s) {
  1452  000928  5037               	movf	dtoa@s,w,c
  1453  00092A  1038               	iorwf	dtoa@s+1,w,c
  1454  00092C  B4D8               	btfsc	status,2,c
  1455  00092E  D010               	goto	l2240
  1456                           
  1457                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 283:       
      +                            n = -n;
  1458  000930  1E40               	comf	dtoa@n+7,f,c
  1459  000932  1E3F               	comf	dtoa@n+6,f,c
  1460  000934  1E3E               	comf	dtoa@n+5,f,c
  1461  000936  1E3D               	comf	dtoa@n+4,f,c
  1462  000938  1E3C               	comf	dtoa@n+3,f,c
  1463  00093A  1E3B               	comf	dtoa@n+2,f,c
  1464  00093C  1E3A               	comf	dtoa@n+1,f,c
  1465  00093E  6C39               	negf	dtoa@n,c
  1466  000940  0E00               	movlw	0
  1467  000942  223A               	addwfc	dtoa@n+1,f,c
  1468  000944  223B               	addwfc	dtoa@n+2,f,c
  1469  000946  223C               	addwfc	dtoa@n+3,f,c
  1470  000948  223D               	addwfc	dtoa@n+4,f,c
  1471  00094A  223E               	addwfc	dtoa@n+5,f,c
  1472  00094C  223F               	addwfc	dtoa@n+6,f,c
  1473  00094E  2240               	addwfc	dtoa@n+7,f,c
  1474  000950                     l2240:
  1475                           
  1476                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 287:     if
      +                           (!(prec < 0)) {
  1477  000950  AE6C               	btfss	_prec+1,7,c
  1478                           
  1479                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 288:       
      +                            flags &= ~(1 << 1);
  1480  000952  926D               	bcf	_flags,1,c
  1481                           
  1482                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 290:     p 
      +                          = (0 < prec) ? prec : 1;
  1483  000954  BE6C               	btfsc	_prec+1,7,c
  1484  000956  D005               	goto	u1870
  1485  000958  506C               	movf	_prec+1,w,c
  1486  00095A  E108               	bnz	l142
  1487  00095C  046B               	decf	_prec,w,c
  1488  00095E  B0D8               	btfsc	status,0,c
  1489  000960  D005               	goto	l142
  1490  000962                     u1870:
  1491  000962  0E00               	movlw	0
  1492  000964  6E34               	movwf	dtoa@p+1,c
  1493  000966  0E01               	movlw	1
  1494  000968  6E33               	movwf	dtoa@p,c
  1495  00096A  D004               	goto	l144
  1496  00096C                     l142:
  1497  00096C  C06B  F033         	movff	_prec,dtoa@p
  1498  000970  C06C  F034         	movff	_prec+1,dtoa@p+1
  1499  000974                     l144:
  1500                           
  1501                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 291:     w 
      +                          = width;
  1502  000974  C069  F035         	movff	_width,dtoa@w
  1503  000978  C06A  F036         	movff	_width+1,dtoa@w+1
  1504                           
  1505                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 292:     if
      +                           (s || (flags & (1 << 2))) {
  1506  00097C  5037               	movf	dtoa@s,w,c
  1507  00097E  1038               	iorwf	dtoa@s+1,w,c
  1508  000980  A4D8               	btfss	status,2,c
  1509  000982  D002               	goto	u1890
  1510  000984  A46D               	btfss	_flags,2,c
  1511  000986  D003               	goto	l2254
  1512  000988                     u1890:
  1513                           
  1514                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 293:       
      +                            --w;
  1515  000988  0635               	decf	dtoa@w,f,c
  1516  00098A  A0D8               	btfss	status,0,c
  1517  00098C  0636               	decf	dtoa@w+1,f,c
  1518  00098E                     l2254:
  1519                           
  1520                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 297:     i 
      +                          = sizeof(dbuf) - 1;
  1521  00098E  0E00               	movlw	0
  1522  000990  6E42               	movwf	dtoa@i+1,c
  1523  000992  0E1F               	movlw	31
  1524  000994  6E41               	movwf	dtoa@i,c
  1525                           
  1526                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 298:     db
      +                          uf[i] = '\0';
  1527  000996  0E00               	movlw	0
  1528  000998  0100               	movlb	0	; () banked
  1529  00099A  6FA3               	movwf	(_dbuf+31)& (0+255),b
  1530                           
  1531                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1532  00099C  D07C               	goto	l2268
  1533  00099E                     l2258:
  1534                           
  1535                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 300:       
      +                            --i;
  1536  00099E  0641               	decf	dtoa@i,f,c
  1537  0009A0  A0D8               	btfss	status,0,c
  1538  0009A2  0642               	decf	dtoa@i+1,f,c
  1539                           
  1540                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 301:       
      +                            dbuf[i] = '0' + abs(n % 10);
  1541  0009A4  0E84               	movlw	low _dbuf
  1542  0009A6  2441               	addwf	dtoa@i,w,c
  1543  0009A8  6ED9               	movwf	fsr2l,c
  1544  0009AA  0E00               	movlw	high _dbuf
  1545  0009AC  2042               	addwfc	dtoa@i+1,w,c
  1546  0009AE  6EDA               	movwf	fsr2h,c
  1547  0009B0  C039  F004         	movff	dtoa@n,___aomod@dividend
  1548  0009B4  C03A  F005         	movff	dtoa@n+1,___aomod@dividend+1
  1549  0009B8  C03B  F006         	movff	dtoa@n+2,___aomod@dividend+2
  1550  0009BC  C03C  F007         	movff	dtoa@n+3,___aomod@dividend+3
  1551  0009C0  C03D  F008         	movff	dtoa@n+4,___aomod@dividend+4
  1552  0009C4  C03E  F009         	movff	dtoa@n+5,___aomod@dividend+5
  1553  0009C8  C03F  F00A         	movff	dtoa@n+6,___aomod@dividend+6
  1554  0009CC  C040  F00B         	movff	dtoa@n+7,___aomod@dividend+7
  1555  0009D0  0E0A               	movlw	10
  1556  0009D2  6E0C               	movwf	___aomod@divisor,c
  1557  0009D4  0E00               	movlw	0
  1558  0009D6  6E0D               	movwf	___aomod@divisor+1,c
  1559  0009D8  0E00               	movlw	0
  1560  0009DA  6E0E               	movwf	___aomod@divisor+2,c
  1561  0009DC  0E00               	movlw	0
  1562  0009DE  6E0F               	movwf	___aomod@divisor+3,c
  1563  0009E0  0E00               	movlw	0
  1564  0009E2  6E10               	movwf	___aomod@divisor+4,c
  1565  0009E4  0E00               	movlw	0
  1566  0009E6  6E11               	movwf	___aomod@divisor+5,c
  1567  0009E8  0E00               	movlw	0
  1568  0009EA  6E12               	movwf	___aomod@divisor+6,c
  1569  0009EC  0E00               	movlw	0
  1570  0009EE  6E13               	movwf	___aomod@divisor+7,c
  1571  0009F0  ECE2  F006         	call	___aomod	;wreg free
  1572  0009F4  C004  F029         	movff	?___aomod,??_dtoa
  1573  0009F8  C005  F02A         	movff	?___aomod+1,??_dtoa+1
  1574  0009FC  C006  F02B         	movff	?___aomod+2,??_dtoa+2
  1575  000A00  C007  F02C         	movff	?___aomod+3,??_dtoa+3
  1576  000A04  C008  F02D         	movff	?___aomod+4,??_dtoa+4
  1577  000A08  C009  F02E         	movff	?___aomod+5,??_dtoa+5
  1578  000A0C  C00A  F02F         	movff	?___aomod+6,??_dtoa+6
  1579  000A10  C00B  F030         	movff	?___aomod+7,??_dtoa+7
  1580  000A14  C029  F016         	movff	??_dtoa,abs@a
  1581  000A18  C02B  F017         	movff	??_dtoa+2,abs@a+1
  1582  000A1C  EC03  F00A         	call	_abs	;wreg free
  1583  000A20  5016               	movf	?_abs,w,c
  1584  000A22  0F30               	addlw	48
  1585  000A24  6EDF               	movwf	indf2,c
  1586                           
  1587                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 302:       
      +                            --p;
  1588  000A26  0633               	decf	dtoa@p,f,c
  1589  000A28  A0D8               	btfss	status,0,c
  1590  000A2A  0634               	decf	dtoa@p+1,f,c
  1591                           
  1592                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 303:       
      +                            --w;
  1593  000A2C  0635               	decf	dtoa@w,f,c
  1594  000A2E  A0D8               	btfss	status,0,c
  1595  000A30  0636               	decf	dtoa@w+1,f,c
  1596                           
  1597                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 304:       
      +                            n = n / 10;
  1598  000A32  C039  F004         	movff	dtoa@n,___aodiv@dividend
  1599  000A36  C03A  F005         	movff	dtoa@n+1,___aodiv@dividend+1
  1600  000A3A  C03B  F006         	movff	dtoa@n+2,___aodiv@dividend+2
  1601  000A3E  C03C  F007         	movff	dtoa@n+3,___aodiv@dividend+3
  1602  000A42  C03D  F008         	movff	dtoa@n+4,___aodiv@dividend+4
  1603  000A46  C03E  F009         	movff	dtoa@n+5,___aodiv@dividend+5
  1604  000A4A  C03F  F00A         	movff	dtoa@n+6,___aodiv@dividend+6
  1605  000A4E  C040  F00B         	movff	dtoa@n+7,___aodiv@dividend+7
  1606  000A52  0E0A               	movlw	10
  1607  000A54  6E0C               	movwf	___aodiv@divisor,c
  1608  000A56  0E00               	movlw	0
  1609  000A58  6E0D               	movwf	___aodiv@divisor+1,c
  1610  000A5A  0E00               	movlw	0
  1611  000A5C  6E0E               	movwf	___aodiv@divisor+2,c
  1612  000A5E  0E00               	movlw	0
  1613  000A60  6E0F               	movwf	___aodiv@divisor+3,c
  1614  000A62  0E00               	movlw	0
  1615  000A64  6E10               	movwf	___aodiv@divisor+4,c
  1616  000A66  0E00               	movlw	0
  1617  000A68  6E11               	movwf	___aodiv@divisor+5,c
  1618  000A6A  0E00               	movlw	0
  1619  000A6C  6E12               	movwf	___aodiv@divisor+6,c
  1620  000A6E  0E00               	movlw	0
  1621  000A70  6E13               	movwf	___aodiv@divisor+7,c
  1622  000A72  EC9E  F005         	call	___aodiv	;wreg free
  1623  000A76  C004  F039         	movff	?___aodiv,dtoa@n
  1624  000A7A  C005  F03A         	movff	?___aodiv+1,dtoa@n+1
  1625  000A7E  C006  F03B         	movff	?___aodiv+2,dtoa@n+2
  1626  000A82  C007  F03C         	movff	?___aodiv+3,dtoa@n+3
  1627  000A86  C008  F03D         	movff	?___aodiv+4,dtoa@n+4
  1628  000A8A  C009  F03E         	movff	?___aodiv+5,dtoa@n+5
  1629  000A8E  C00A  F03F         	movff	?___aodiv+6,dtoa@n+6
  1630  000A92  C00B  F040         	movff	?___aodiv+7,dtoa@n+7
  1631  000A96                     l2268:
  1632                           
  1633                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1634  000A96  BE42               	btfsc	dtoa@i+1,7,c
  1635  000A98  D01F               	goto	u1940
  1636  000A9A  5042               	movf	dtoa@i+1,w,c
  1637  000A9C  E103               	bnz	u1900
  1638  000A9E  0441               	decf	dtoa@i,w,c
  1639  000AA0  A0D8               	btfss	status,0,c
  1640  000AA2  D01A               	goto	u1940
  1641  000AA4                     u1900:
  1642  000AA4  5039               	movf	dtoa@n,w,c
  1643  000AA6  103A               	iorwf	dtoa@n+1,w,c
  1644  000AA8  103B               	iorwf	dtoa@n+2,w,c
  1645  000AAA  103C               	iorwf	dtoa@n+3,w,c
  1646  000AAC  103D               	iorwf	dtoa@n+4,w,c
  1647  000AAE  103E               	iorwf	dtoa@n+5,w,c
  1648  000AB0  103F               	iorwf	dtoa@n+6,w,c
  1649  000AB2  1040               	iorwf	dtoa@n+7,w,c
  1650  000AB4  A4D8               	btfss	status,2,c
  1651  000AB6  D773               	goto	l2258
  1652  000AB8  BE34               	btfsc	dtoa@p+1,7,c
  1653  000ABA  D005               	goto	u1920
  1654  000ABC  5034               	movf	dtoa@p+1,w,c
  1655  000ABE  E102               	bnz	u1921
  1656  000AC0  0433               	decf	dtoa@p,w,c
  1657  000AC2  B0D8               	btfsc	status,0,c
  1658  000AC4                     u1921:
  1659  000AC4  D76C               	goto	l2258
  1660  000AC6                     u1920:
  1661  000AC6  BE36               	btfsc	dtoa@w+1,7,c
  1662  000AC8  D007               	goto	u1940
  1663  000ACA  5036               	movf	dtoa@w+1,w,c
  1664  000ACC  E103               	bnz	u1930
  1665  000ACE  0435               	decf	dtoa@w,w,c
  1666  000AD0  A0D8               	btfss	status,0,c
  1667  000AD2  D002               	goto	u1940
  1668  000AD4                     u1930:
  1669  000AD4  B26D               	btfsc	_flags,1,c
  1670  000AD6  D763               	goto	l2258
  1671  000AD8                     u1940:
  1672                           
  1673                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 308:     if
      +                           (s || (flags & (1 << 2))) {
  1674  000AD8  5037               	movf	dtoa@s,w,c
  1675  000ADA  1038               	iorwf	dtoa@s+1,w,c
  1676  000ADC  A4D8               	btfss	status,2,c
  1677  000ADE  D002               	goto	u1960
  1678  000AE0  A46D               	btfss	_flags,2,c
  1679  000AE2  D017               	goto	l2292
  1680  000AE4                     u1960:
  1681                           
  1682                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 309:       
      +                            --i;
  1683  000AE4  0641               	decf	dtoa@i,f,c
  1684  000AE6  A0D8               	btfss	status,0,c
  1685  000AE8  0642               	decf	dtoa@i+1,f,c
  1686                           
  1687                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 310:       
      +                            dbuf[i] = s ? '-' : '+';
  1688  000AEA  5037               	movf	dtoa@s,w,c
  1689  000AEC  1038               	iorwf	dtoa@s+1,w,c
  1690  000AEE  A4D8               	btfss	status,2,c
  1691  000AF0  D004               	goto	l2288
  1692  000AF2  0E00               	movlw	0
  1693  000AF4  6E32               	movwf	_dtoa$527+1,c
  1694  000AF6  0E2B               	movlw	43
  1695  000AF8  D003               	goto	L2
  1696  000AFA                     l2288:
  1697  000AFA  0E00               	movlw	0
  1698  000AFC  6E32               	movwf	_dtoa$527+1,c
  1699  000AFE  0E2D               	movlw	45
  1700  000B00                     L2:
  1701  000B00  6E31               	movwf	_dtoa$527,c
  1702  000B02  0E84               	movlw	low _dbuf
  1703  000B04  2441               	addwf	dtoa@i,w,c
  1704  000B06  6ED9               	movwf	fsr2l,c
  1705  000B08  0E00               	movlw	high _dbuf
  1706  000B0A  2042               	addwfc	dtoa@i+1,w,c
  1707  000B0C  6EDA               	movwf	fsr2h,c
  1708  000B0E  C031  FFDF         	movff	_dtoa$527,indf2
  1709  000B12                     l2292:
  1710                           
  1711                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 314:     re
      +                          turn pad(fp, &dbuf[i], w);
  1712  000B12  C01F  F014         	movff	dtoa@fp,pad@fp
  1713  000B16  C020  F015         	movff	dtoa@fp+1,pad@fp+1
  1714  000B1A  0E84               	movlw	low _dbuf
  1715  000B1C  2441               	addwf	dtoa@i,w,c
  1716  000B1E  6E16               	movwf	pad@buf,c
  1717  000B20  0E00               	movlw	high _dbuf
  1718  000B22  2042               	addwfc	dtoa@i+1,w,c
  1719  000B24  6E17               	movwf	pad@buf+1,c
  1720  000B26  C035  F018         	movff	dtoa@w,pad@p
  1721  000B2A  C036  F019         	movff	dtoa@w+1,pad@p+1
  1722  000B2E  ECA3  F008         	call	_pad	;wreg free
  1723  000B32  C014  F01F         	movff	?_pad,?_dtoa
  1724  000B36  C015  F020         	movff	?_pad+1,?_dtoa+1
  1725  000B3A  0012               	return		;funcret
  1726  000B3C                     __end_of_dtoa:
  1727                           	opt callstack 0
  1728                           
  1729 ;; *************** function _pad *****************
  1730 ;; Defined at:
  1731 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1732 ;; Parameters:    Size  Location     Type
  1733 ;;  fp              2   19[COMRAM] PTR struct _IO_FILE
  1734 ;;		 -> sprintf@f(6), 
  1735 ;;  buf             2   21[COMRAM] PTR unsigned char 
  1736 ;;		 -> dbuf(32), 
  1737 ;;  p               2   23[COMRAM] int 
  1738 ;; Auto vars:     Size  Location     Type
  1739 ;;  w               2   28[COMRAM] int 
  1740 ;;  i               2   26[COMRAM] int 
  1741 ;; Return value:  Size  Location     Type
  1742 ;;                  2   19[COMRAM] int 
  1743 ;; Registers used:
  1744 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1745 ;; Tracked objects:
  1746 ;;		On entry : 0/0
  1747 ;;		On exit  : 0/0
  1748 ;;		Unchanged: 0/0
  1749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1750 ;;      Params:         6       0       0       0       0       0       0
  1751 ;;      Locals:         4       0       0       0       0       0       0
  1752 ;;      Temps:          1       0       0       0       0       0       0
  1753 ;;      Totals:        11       0       0       0       0       0       0
  1754 ;;Total ram usage:       11 bytes
  1755 ;; Hardware stack levels used:    1
  1756 ;; Hardware stack levels required when called:    4
  1757 ;; This function calls:
  1758 ;;		_fputc
  1759 ;;		_fputs
  1760 ;;		_strlen
  1761 ;; This function is called by:
  1762 ;;		_dtoa
  1763 ;; This function uses a non-reentrant model
  1764 ;;
  1765                           
  1766                           	psect	text5
  1767  001146                     __ptext5:
  1768                           	opt callstack 0
  1769  001146                     _pad:
  1770                           	opt callstack 22
  1771                           
  1772                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
  1773                           
  1774                           ;incstack = 0
  1775  001146  A06D               	btfss	_flags,0,c
  1776  001148  D00A               	goto	l2110
  1777                           
  1778                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
  1779  00114A  C016  F00D         	movff	pad@buf,fputs@s
  1780  00114E  C017  F00E         	movff	pad@buf+1,fputs@s+1
  1781  001152  C014  F00F         	movff	pad@fp,fputs@fp
  1782  001156  C015  F010         	movff	pad@fp+1,fputs@fp+1
  1783  00115A  ECE7  F009         	call	_fputs	;wreg free
  1784  00115E                     l2110:
  1785                           
  1786                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
  1787  00115E  BE19               	btfsc	pad@p+1,7,c
  1788  001160  D005               	goto	l2114
  1789  001162  C018  F01D         	movff	pad@p,pad@w
  1790  001166  C019  F01E         	movff	pad@p+1,pad@w+1
  1791  00116A  D004               	goto	l131
  1792  00116C                     l2114:
  1793  00116C  0E00               	movlw	0
  1794  00116E  6E1E               	movwf	pad@w+1,c
  1795  001170  0E00               	movlw	0
  1796  001172  6E1D               	movwf	pad@w,c
  1797  001174                     l131:
  1798                           
  1799                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
  1800  001174  0E00               	movlw	0
  1801  001176  6E1C               	movwf	pad@i+1,c
  1802  001178  0E00               	movlw	0
  1803  00117A  6E1B               	movwf	pad@i,c
  1804                           
  1805                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  1806  00117C  D00C               	goto	l2120
  1807  00117E                     l2116:
  1808                           
  1809                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
  1810  00117E  0E00               	movlw	0
  1811  001180  6E05               	movwf	fputc@c+1,c
  1812  001182  0E20               	movlw	32
  1813  001184  6E04               	movwf	fputc@c,c
  1814  001186  C014  F006         	movff	pad@fp,fputc@fp
  1815  00118A  C015  F007         	movff	pad@fp+1,fputc@fp+1
  1816  00118E  EC53  F008         	call	_fputc	;wreg free
  1817                           
  1818                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
  1819  001192  4A1B               	infsnz	pad@i,f,c
  1820  001194  2A1C               	incf	pad@i+1,f,c
  1821  001196                     l2120:
  1822                           
  1823                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  1824  001196  501D               	movf	pad@w,w,c
  1825  001198  5C1B               	subwf	pad@i,w,c
  1826  00119A  501C               	movf	pad@i+1,w,c
  1827  00119C  0A80               	xorlw	128
  1828  00119E  6E1A               	movwf	??_pad& (0+255),c
  1829  0011A0  501E               	movf	pad@w+1,w,c
  1830  0011A2  0A80               	xorlw	128
  1831  0011A4  581A               	subwfb	??_pad& (0+255),w,c
  1832  0011A6  A0D8               	btfss	status,0,c
  1833  0011A8  D7EA               	goto	l2116
  1834                           
  1835                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
  1836  0011AA  B06D               	btfsc	_flags,0,c
  1837  0011AC  D00A               	goto	l2124
  1838                           
  1839                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
  1840  0011AE  C016  F00D         	movff	pad@buf,fputs@s
  1841  0011B2  C017  F00E         	movff	pad@buf+1,fputs@s+1
  1842  0011B6  C014  F00F         	movff	pad@fp,fputs@fp
  1843  0011BA  C015  F010         	movff	pad@fp+1,fputs@fp+1
  1844  0011BE  ECE7  F009         	call	_fputs	;wreg free
  1845  0011C2                     l2124:
  1846                           
  1847                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
  1848  0011C2  C016  F004         	movff	pad@buf,strlen@s
  1849  0011C6  C017  F005         	movff	pad@buf+1,strlen@s+1
  1850  0011CA  EC34  F00A         	call	_strlen	;wreg free
  1851  0011CE  501D               	movf	pad@w,w,c
  1852  0011D0  2404               	addwf	?_strlen,w,c
  1853  0011D2  6E14               	movwf	?_pad,c
  1854  0011D4  501E               	movf	pad@w+1,w,c
  1855  0011D6  2005               	addwfc	?_strlen+1,w,c
  1856  0011D8  6E15               	movwf	?_pad+1,c
  1857  0011DA  0012               	return		;funcret
  1858  0011DC                     __end_of_pad:
  1859                           	opt callstack 0
  1860                           
  1861 ;; *************** function _strlen *****************
  1862 ;; Defined at:
  1863 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
  1864 ;; Parameters:    Size  Location     Type
  1865 ;;  s               2    3[COMRAM] PTR const unsigned char 
  1866 ;;		 -> dbuf(32), 
  1867 ;; Auto vars:     Size  Location     Type
  1868 ;;  a               2    5[COMRAM] PTR const unsigned char 
  1869 ;;		 -> dbuf(32), 
  1870 ;; Return value:  Size  Location     Type
  1871 ;;                  2    3[COMRAM] unsigned int 
  1872 ;; Registers used:
  1873 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1874 ;; Tracked objects:
  1875 ;;		On entry : 0/0
  1876 ;;		On exit  : 0/0
  1877 ;;		Unchanged: 0/0
  1878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1879 ;;      Params:         2       0       0       0       0       0       0
  1880 ;;      Locals:         2       0       0       0       0       0       0
  1881 ;;      Temps:          0       0       0       0       0       0       0
  1882 ;;      Totals:         4       0       0       0       0       0       0
  1883 ;;Total ram usage:        4 bytes
  1884 ;; Hardware stack levels used:    1
  1885 ;; Hardware stack levels required when called:    1
  1886 ;; This function calls:
  1887 ;;		Nothing
  1888 ;; This function is called by:
  1889 ;;		_pad
  1890 ;; This function uses a non-reentrant model
  1891 ;;
  1892                           
  1893                           	psect	text6
  1894  001468                     __ptext6:
  1895                           	opt callstack 0
  1896  001468                     _strlen:
  1897                           	opt callstack 24
  1898                           
  1899                           ;incstack = 0
  1900  001468  C004  F006         	movff	strlen@s,strlen@a
  1901  00146C  C005  F007         	movff	strlen@s+1,strlen@a+1
  1902  001470  D002               	goto	l2100
  1903  001472                     l2098:
  1904  001472  4A04               	infsnz	strlen@s,f,c
  1905  001474  2A05               	incf	strlen@s+1,f,c
  1906  001476                     l2100:
  1907  001476  C004  FFD9         	movff	strlen@s,fsr2l
  1908  00147A  C005  FFDA         	movff	strlen@s+1,fsr2h
  1909  00147E  50DF               	movf	indf2,w,c
  1910  001480  A4D8               	btfss	status,2,c
  1911  001482  D7F7               	goto	l2098
  1912  001484  5006               	movf	strlen@a,w,c
  1913  001486  5C04               	subwf	strlen@s,w,c
  1914  001488  6E04               	movwf	?_strlen,c
  1915  00148A  5007               	movf	strlen@a+1,w,c
  1916  00148C  5805               	subwfb	strlen@s+1,w,c
  1917  00148E  6E05               	movwf	?_strlen+1,c
  1918  001490  0012               	return		;funcret
  1919  001492                     __end_of_strlen:
  1920                           	opt callstack 0
  1921                           
  1922 ;; *************** function _fputs *****************
  1923 ;; Defined at:
  1924 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputs.c"
  1925 ;; Parameters:    Size  Location     Type
  1926 ;;  s               2   12[COMRAM] PTR const unsigned char 
  1927 ;;		 -> dbuf(32), 
  1928 ;;  fp              2   14[COMRAM] PTR struct _IO_FILE
  1929 ;;		 -> sprintf@f(6), 
  1930 ;; Auto vars:     Size  Location     Type
  1931 ;;  i               2   17[COMRAM] int 
  1932 ;;  c               1   16[COMRAM] unsigned char 
  1933 ;; Return value:  Size  Location     Type
  1934 ;;                  2   12[COMRAM] int 
  1935 ;; Registers used:
  1936 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1937 ;; Tracked objects:
  1938 ;;		On entry : 0/0
  1939 ;;		On exit  : 0/0
  1940 ;;		Unchanged: 0/0
  1941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1942 ;;      Params:         4       0       0       0       0       0       0
  1943 ;;      Locals:         3       0       0       0       0       0       0
  1944 ;;      Temps:          0       0       0       0       0       0       0
  1945 ;;      Totals:         7       0       0       0       0       0       0
  1946 ;;Total ram usage:        7 bytes
  1947 ;; Hardware stack levels used:    1
  1948 ;; Hardware stack levels required when called:    3
  1949 ;; This function calls:
  1950 ;;		_fputc
  1951 ;; This function is called by:
  1952 ;;		_pad
  1953 ;; This function uses a non-reentrant model
  1954 ;;
  1955                           
  1956                           	psect	text7
  1957  0013CE                     __ptext7:
  1958                           	opt callstack 0
  1959  0013CE                     _fputs:
  1960                           	opt callstack 22
  1961                           
  1962                           ;incstack = 0
  1963  0013CE  0E00               	movlw	0
  1964  0013D0  6E13               	movwf	fputs@i+1,c
  1965  0013D2  0E00               	movlw	0
  1966  0013D4  6E12               	movwf	fputs@i,c
  1967  0013D6  D00B               	goto	l2094
  1968  0013D8                     l2090:
  1969  0013D8  C011  F004         	movff	fputs@c,fputc@c
  1970  0013DC  6A05               	clrf	fputc@c+1,c
  1971  0013DE  C00F  F006         	movff	fputs@fp,fputc@fp
  1972  0013E2  C010  F007         	movff	fputs@fp+1,fputc@fp+1
  1973  0013E6  EC53  F008         	call	_fputc	;wreg free
  1974  0013EA  4A12               	infsnz	fputs@i,f,c
  1975  0013EC  2A13               	incf	fputs@i+1,f,c
  1976  0013EE                     l2094:
  1977  0013EE  5012               	movf	fputs@i,w,c
  1978  0013F0  240D               	addwf	fputs@s,w,c
  1979  0013F2  6ED9               	movwf	fsr2l,c
  1980  0013F4  5013               	movf	fputs@i+1,w,c
  1981  0013F6  200E               	addwfc	fputs@s+1,w,c
  1982  0013F8  6EDA               	movwf	fsr2h,c
  1983  0013FA  50DF               	movf	indf2,w,c
  1984  0013FC  6E11               	movwf	fputs@c,c
  1985  0013FE  5011               	movf	fputs@c,w,c
  1986  001400  B4D8               	btfsc	status,2,c
  1987  001402  0012               	return	
  1988  001404  D7E9               	goto	l2090
  1989  001406                     __end_of_fputs:
  1990                           	opt callstack 0
  1991                           
  1992 ;; *************** function _fputc *****************
  1993 ;; Defined at:
  1994 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputc.c"
  1995 ;; Parameters:    Size  Location     Type
  1996 ;;  c               2    3[COMRAM] int 
  1997 ;;  fp              2    5[COMRAM] PTR struct _IO_FILE
  1998 ;;		 -> sprintf@f(6), 
  1999 ;; Auto vars:     Size  Location     Type
  2000 ;;		None
  2001 ;; Return value:  Size  Location     Type
  2002 ;;                  2    3[COMRAM] int 
  2003 ;; Registers used:
  2004 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2005 ;; Tracked objects:
  2006 ;;		On entry : 0/0
  2007 ;;		On exit  : 0/0
  2008 ;;		Unchanged: 0/0
  2009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2010 ;;      Params:         4       0       0       0       0       0       0
  2011 ;;      Locals:         0       0       0       0       0       0       0
  2012 ;;      Temps:          5       0       0       0       0       0       0
  2013 ;;      Totals:         9       0       0       0       0       0       0
  2014 ;;Total ram usage:        9 bytes
  2015 ;; Hardware stack levels used:    1
  2016 ;; Hardware stack levels required when called:    2
  2017 ;; This function calls:
  2018 ;;		_putch
  2019 ;; This function is called by:
  2020 ;;		_pad
  2021 ;;		_vfpfcnvrt
  2022 ;;		_fputs
  2023 ;; This function uses a non-reentrant model
  2024 ;;
  2025                           
  2026                           	psect	text8
  2027  0010A6                     __ptext8:
  2028                           	opt callstack 0
  2029  0010A6                     _fputc:
  2030                           	opt callstack 25
  2031                           
  2032                           ;incstack = 0
  2033  0010A6  5006               	movf	fputc@fp,w,c
  2034  0010A8  1007               	iorwf	fputc@fp+1,w,c
  2035  0010AA  B4D8               	btfsc	status,2,c
  2036  0010AC  D004               	goto	u1560
  2037  0010AE  5006               	movf	fputc@fp,w,c
  2038  0010B0  1007               	iorwf	fputc@fp+1,w,c
  2039  0010B2  A4D8               	btfss	status,2,c
  2040  0010B4  D004               	goto	l2080
  2041  0010B6                     u1560:
  2042  0010B6  5004               	movf	fputc@c,w,c
  2043  0010B8  EC88  F00A         	call	_putch
  2044  0010BC  0012               	return	
  2045  0010BE                     l2080:
  2046  0010BE  EE20 F004          	lfsr	2,4
  2047  0010C2  5006               	movf	fputc@fp,w,c
  2048  0010C4  26D9               	addwf	fsr2l,f,c
  2049  0010C6  5007               	movf	fputc@fp+1,w,c
  2050  0010C8  22DA               	addwfc	fsr2h,f,c
  2051  0010CA  50DE               	movf	postinc2,w,c
  2052  0010CC  10DE               	iorwf	postinc2,w,c
  2053  0010CE  B4D8               	btfsc	status,2,c
  2054  0010D0  D016               	goto	u1580
  2055  0010D2  EE20 F004          	lfsr	2,4
  2056  0010D6  5006               	movf	fputc@fp,w,c
  2057  0010D8  26D9               	addwf	fsr2l,f,c
  2058  0010DA  5007               	movf	fputc@fp+1,w,c
  2059  0010DC  22DA               	addwfc	fsr2h,f,c
  2060  0010DE  EE10 F002          	lfsr	1,2
  2061  0010E2  5006               	movf	fputc@fp,w,c
  2062  0010E4  26E1               	addwf	fsr1l,f,c
  2063  0010E6  5007               	movf	fputc@fp+1,w,c
  2064  0010E8  22E2               	addwfc	fsr1h,f,c
  2065  0010EA  50DE               	movf	postinc2,w,c
  2066  0010EC  5CE6               	subwf	postinc1,w,c
  2067  0010EE  50E6               	movf	postinc1,w,c
  2068  0010F0  0A80               	xorlw	128
  2069  0010F2  6E0C               	movwf	(??_fputc+4)& (0+255),c
  2070  0010F4  50DE               	movf	postinc2,w,c
  2071  0010F6  0A80               	xorlw	128
  2072  0010F8  580C               	subwfb	(??_fputc+4)& (0+255),w,c
  2073  0010FA  B0D8               	btfsc	status,0,c
  2074  0010FC  0012               	return	
  2075  0010FE                     u1580:
  2076  0010FE  EE20 F002          	lfsr	2,2
  2077  001102  5006               	movf	fputc@fp,w,c
  2078  001104  26D9               	addwf	fsr2l,f,c
  2079  001106  5007               	movf	fputc@fp+1,w,c
  2080  001108  22DA               	addwfc	fsr2h,f,c
  2081  00110A  CFDE F008          	movff	postinc2,??_fputc
  2082  00110E  CFDD F009          	movff	postdec2,??_fputc+1
  2083  001112  C006  FFD9         	movff	fputc@fp,fsr2l
  2084  001116  C007  FFDA         	movff	fputc@fp+1,fsr2h
  2085  00111A  CFDE F00A          	movff	postinc2,??_fputc+2
  2086  00111E  CFDD F00B          	movff	postdec2,??_fputc+3
  2087  001122  5008               	movf	??_fputc,w,c
  2088  001124  240A               	addwf	??_fputc+2,w,c
  2089  001126  6ED9               	movwf	fsr2l,c
  2090  001128  5009               	movf	??_fputc+1,w,c
  2091  00112A  200B               	addwfc	??_fputc+3,w,c
  2092  00112C  6EDA               	movwf	fsr2h,c
  2093  00112E  C004  FFDF         	movff	fputc@c,indf2
  2094  001132  EE20 F002          	lfsr	2,2
  2095  001136  5006               	movf	fputc@fp,w,c
  2096  001138  26D9               	addwf	fsr2l,f,c
  2097  00113A  5007               	movf	fputc@fp+1,w,c
  2098  00113C  22DA               	addwfc	fsr2h,f,c
  2099  00113E  2ADE               	incf	postinc2,f,c
  2100  001140  0E00               	movlw	0
  2101  001142  22DD               	addwfc	postdec2,f,c
  2102  001144  0012               	return		;funcret
  2103  001146                     __end_of_fputc:
  2104                           	opt callstack 0
  2105                           
  2106 ;; *************** function _putch *****************
  2107 ;; Defined at:
  2108 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\putch.c"
  2109 ;; Parameters:    Size  Location     Type
  2110 ;;  c               1    wreg     unsigned char 
  2111 ;; Auto vars:     Size  Location     Type
  2112 ;;  c               1    0[COMRAM] unsigned char 
  2113 ;; Return value:  Size  Location     Type
  2114 ;;                  1    wreg      void 
  2115 ;; Registers used:
  2116 ;;		wreg
  2117 ;; Tracked objects:
  2118 ;;		On entry : 0/0
  2119 ;;		On exit  : 0/0
  2120 ;;		Unchanged: 0/0
  2121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2122 ;;      Params:         0       0       0       0       0       0       0
  2123 ;;      Locals:         0       0       0       0       0       0       0
  2124 ;;      Temps:          0       0       0       0       0       0       0
  2125 ;;      Totals:         0       0       0       0       0       0       0
  2126 ;;Total ram usage:        0 bytes
  2127 ;; Hardware stack levels used:    1
  2128 ;; Hardware stack levels required when called:    1
  2129 ;; This function calls:
  2130 ;;		Nothing
  2131 ;; This function is called by:
  2132 ;;		_fputc
  2133 ;; This function uses a non-reentrant model
  2134 ;;
  2135                           
  2136                           	psect	text9
  2137  001510                     __ptext9:
  2138                           	opt callstack 0
  2139  001510                     _putch:
  2140                           	opt callstack 25
  2141                           
  2142                           ;incstack = 0
  2143  001510  0012               	return		;funcret
  2144  001512                     __end_of_putch:
  2145                           	opt callstack 0
  2146                           
  2147 ;; *************** function _abs *****************
  2148 ;; Defined at:
  2149 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\abs.c"
  2150 ;; Parameters:    Size  Location     Type
  2151 ;;  a               2   21[COMRAM] int 
  2152 ;; Auto vars:     Size  Location     Type
  2153 ;;		None
  2154 ;; Return value:  Size  Location     Type
  2155 ;;                  2   21[COMRAM] int 
  2156 ;; Registers used:
  2157 ;;		wreg, status,2, status,0
  2158 ;; Tracked objects:
  2159 ;;		On entry : 0/0
  2160 ;;		On exit  : 0/0
  2161 ;;		Unchanged: 0/0
  2162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2163 ;;      Params:         2       0       0       0       0       0       0
  2164 ;;      Locals:         0       0       0       0       0       0       0
  2165 ;;      Temps:          2       0       0       0       0       0       0
  2166 ;;      Totals:         4       0       0       0       0       0       0
  2167 ;;Total ram usage:        4 bytes
  2168 ;; Hardware stack levels used:    1
  2169 ;; Hardware stack levels required when called:    1
  2170 ;; This function calls:
  2171 ;;		Nothing
  2172 ;; This function is called by:
  2173 ;;		_dtoa
  2174 ;; This function uses a non-reentrant model
  2175 ;;
  2176                           
  2177                           	psect	text10
  2178  001406                     __ptext10:
  2179                           	opt callstack 0
  2180  001406                     _abs:
  2181                           	opt callstack 25
  2182                           
  2183                           ;incstack = 0
  2184  001406  BE17               	btfsc	abs@a+1,7,c
  2185  001408  D005               	goto	u1650
  2186  00140A  5017               	movf	abs@a+1,w,c
  2187  00140C  E110               	bnz	l876
  2188  00140E  0416               	decf	abs@a,w,c
  2189  001410  B0D8               	btfsc	status,0,c
  2190  001412  D00D               	goto	l876
  2191  001414                     u1650:
  2192  001414  C016  F018         	movff	abs@a,??_abs
  2193  001418  C017  F019         	movff	abs@a+1,??_abs+1
  2194  00141C  1E18               	comf	??_abs,f,c
  2195  00141E  1E19               	comf	??_abs+1,f,c
  2196  001420  4A18               	infsnz	??_abs,f,c
  2197  001422  2A19               	incf	??_abs+1,f,c
  2198  001424  C018  F016         	movff	??_abs,?_abs
  2199  001428  C019  F017         	movff	??_abs+1,?_abs+1
  2200  00142C  0012               	return	
  2201  00142E                     l876:
  2202  00142E  C016  F016         	movff	abs@a,?_abs
  2203  001432  C017  F017         	movff	abs@a+1,?_abs+1
  2204  001436  0012               	return		;funcret
  2205  001438                     __end_of_abs:
  2206                           	opt callstack 0
  2207                           
  2208 ;; *************** function ___aomod *****************
  2209 ;; Defined at:
  2210 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aomod.c"
  2211 ;; Parameters:    Size  Location     Type
  2212 ;;  dividend        8    3[COMRAM] long long 
  2213 ;;  divisor         8   11[COMRAM] long long 
  2214 ;; Auto vars:     Size  Location     Type
  2215 ;;  sign            1   20[COMRAM] unsigned char 
  2216 ;;  counter         1   19[COMRAM] unsigned char 
  2217 ;; Return value:  Size  Location     Type
  2218 ;;                  8    3[COMRAM] long long 
  2219 ;; Registers used:
  2220 ;;		wreg, status,2, status,0
  2221 ;; Tracked objects:
  2222 ;;		On entry : 0/0
  2223 ;;		On exit  : 0/0
  2224 ;;		Unchanged: 0/0
  2225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2226 ;;      Params:        16       0       0       0       0       0       0
  2227 ;;      Locals:         2       0       0       0       0       0       0
  2228 ;;      Temps:          0       0       0       0       0       0       0
  2229 ;;      Totals:        18       0       0       0       0       0       0
  2230 ;;Total ram usage:       18 bytes
  2231 ;; Hardware stack levels used:    1
  2232 ;; Hardware stack levels required when called:    1
  2233 ;; This function calls:
  2234 ;;		Nothing
  2235 ;; This function is called by:
  2236 ;;		_dtoa
  2237 ;; This function uses a non-reentrant model
  2238 ;;
  2239                           
  2240                           	psect	text11
  2241  000DC4                     __ptext11:
  2242                           	opt callstack 0
  2243  000DC4                     ___aomod:
  2244                           	opt callstack 25
  2245                           
  2246                           ;incstack = 0
  2247  000DC4  0E00               	movlw	0
  2248  000DC6  6E15               	movwf	___aomod@sign,c
  2249  000DC8  AE0B               	btfss	___aomod@dividend+7,7,c
  2250  000DCA  D012               	goto	l2194
  2251  000DCC  1E0B               	comf	___aomod@dividend+7,f,c
  2252  000DCE  1E0A               	comf	___aomod@dividend+6,f,c
  2253  000DD0  1E09               	comf	___aomod@dividend+5,f,c
  2254  000DD2  1E08               	comf	___aomod@dividend+4,f,c
  2255  000DD4  1E07               	comf	___aomod@dividend+3,f,c
  2256  000DD6  1E06               	comf	___aomod@dividend+2,f,c
  2257  000DD8  1E05               	comf	___aomod@dividend+1,f,c
  2258  000DDA  6C04               	negf	___aomod@dividend,c
  2259  000DDC  0E00               	movlw	0
  2260  000DDE  2205               	addwfc	___aomod@dividend+1,f,c
  2261  000DE0  2206               	addwfc	___aomod@dividend+2,f,c
  2262  000DE2  2207               	addwfc	___aomod@dividend+3,f,c
  2263  000DE4  2208               	addwfc	___aomod@dividend+4,f,c
  2264  000DE6  2209               	addwfc	___aomod@dividend+5,f,c
  2265  000DE8  220A               	addwfc	___aomod@dividend+6,f,c
  2266  000DEA  220B               	addwfc	___aomod@dividend+7,f,c
  2267  000DEC  0E01               	movlw	1
  2268  000DEE  6E15               	movwf	___aomod@sign,c
  2269  000DF0                     l2194:
  2270  000DF0  AE13               	btfss	___aomod@divisor+7,7,c
  2271  000DF2  D010               	goto	l2198
  2272  000DF4  1E13               	comf	___aomod@divisor+7,f,c
  2273  000DF6  1E12               	comf	___aomod@divisor+6,f,c
  2274  000DF8  1E11               	comf	___aomod@divisor+5,f,c
  2275  000DFA  1E10               	comf	___aomod@divisor+4,f,c
  2276  000DFC  1E0F               	comf	___aomod@divisor+3,f,c
  2277  000DFE  1E0E               	comf	___aomod@divisor+2,f,c
  2278  000E00  1E0D               	comf	___aomod@divisor+1,f,c
  2279  000E02  6C0C               	negf	___aomod@divisor,c
  2280  000E04  0E00               	movlw	0
  2281  000E06  220D               	addwfc	___aomod@divisor+1,f,c
  2282  000E08  220E               	addwfc	___aomod@divisor+2,f,c
  2283  000E0A  220F               	addwfc	___aomod@divisor+3,f,c
  2284  000E0C  2210               	addwfc	___aomod@divisor+4,f,c
  2285  000E0E  2211               	addwfc	___aomod@divisor+5,f,c
  2286  000E10  2212               	addwfc	___aomod@divisor+6,f,c
  2287  000E12  2213               	addwfc	___aomod@divisor+7,f,c
  2288  000E14                     l2198:
  2289  000E14  500C               	movf	___aomod@divisor,w,c
  2290  000E16  100D               	iorwf	___aomod@divisor+1,w,c
  2291  000E18  100E               	iorwf	___aomod@divisor+2,w,c
  2292  000E1A  100F               	iorwf	___aomod@divisor+3,w,c
  2293  000E1C  1010               	iorwf	___aomod@divisor+4,w,c
  2294  000E1E  1011               	iorwf	___aomod@divisor+5,w,c
  2295  000E20  1012               	iorwf	___aomod@divisor+6,w,c
  2296  000E22  1013               	iorwf	___aomod@divisor+7,w,c
  2297  000E24  B4D8               	btfsc	status,2,c
  2298  000E26  D03C               	goto	l2214
  2299  000E28  0E01               	movlw	1
  2300  000E2A  6E14               	movwf	___aomod@counter,c
  2301  000E2C  D00A               	goto	l2204
  2302  000E2E                     l2202:
  2303  000E2E  90D8               	bcf	status,0,c
  2304  000E30  360C               	rlcf	___aomod@divisor,f,c
  2305  000E32  360D               	rlcf	___aomod@divisor+1,f,c
  2306  000E34  360E               	rlcf	___aomod@divisor+2,f,c
  2307  000E36  360F               	rlcf	___aomod@divisor+3,f,c
  2308  000E38  3610               	rlcf	___aomod@divisor+4,f,c
  2309  000E3A  3611               	rlcf	___aomod@divisor+5,f,c
  2310  000E3C  3612               	rlcf	___aomod@divisor+6,f,c
  2311  000E3E  3613               	rlcf	___aomod@divisor+7,f,c
  2312  000E40  2A14               	incf	___aomod@counter,f,c
  2313  000E42                     l2204:
  2314  000E42  AE13               	btfss	___aomod@divisor+7,7,c
  2315  000E44  D7F4               	goto	l2202
  2316  000E46                     u1780:
  2317  000E46  500C               	movf	___aomod@divisor,w,c
  2318  000E48  5C04               	subwf	___aomod@dividend,w,c
  2319  000E4A  500D               	movf	___aomod@divisor+1,w,c
  2320  000E4C  5805               	subwfb	___aomod@dividend+1,w,c
  2321  000E4E  500E               	movf	___aomod@divisor+2,w,c
  2322  000E50  5806               	subwfb	___aomod@dividend+2,w,c
  2323  000E52  500F               	movf	___aomod@divisor+3,w,c
  2324  000E54  5807               	subwfb	___aomod@dividend+3,w,c
  2325  000E56  5010               	movf	___aomod@divisor+4,w,c
  2326  000E58  5808               	subwfb	___aomod@dividend+4,w,c
  2327  000E5A  5011               	movf	___aomod@divisor+5,w,c
  2328  000E5C  5809               	subwfb	___aomod@dividend+5,w,c
  2329  000E5E  5012               	movf	___aomod@divisor+6,w,c
  2330  000E60  580A               	subwfb	___aomod@dividend+6,w,c
  2331  000E62  5013               	movf	___aomod@divisor+7,w,c
  2332  000E64  580B               	subwfb	___aomod@dividend+7,w,c
  2333  000E66  A0D8               	btfss	status,0,c
  2334  000E68  D010               	goto	l2210
  2335  000E6A  500C               	movf	___aomod@divisor,w,c
  2336  000E6C  5E04               	subwf	___aomod@dividend,f,c
  2337  000E6E  500D               	movf	___aomod@divisor+1,w,c
  2338  000E70  5A05               	subwfb	___aomod@dividend+1,f,c
  2339  000E72  500E               	movf	___aomod@divisor+2,w,c
  2340  000E74  5A06               	subwfb	___aomod@dividend+2,f,c
  2341  000E76  500F               	movf	___aomod@divisor+3,w,c
  2342  000E78  5A07               	subwfb	___aomod@dividend+3,f,c
  2343  000E7A  5010               	movf	___aomod@divisor+4,w,c
  2344  000E7C  5A08               	subwfb	___aomod@dividend+4,f,c
  2345  000E7E  5011               	movf	___aomod@divisor+5,w,c
  2346  000E80  5A09               	subwfb	___aomod@dividend+5,f,c
  2347  000E82  5012               	movf	___aomod@divisor+6,w,c
  2348  000E84  5A0A               	subwfb	___aomod@dividend+6,f,c
  2349  000E86  5013               	movf	___aomod@divisor+7,w,c
  2350  000E88  5A0B               	subwfb	___aomod@dividend+7,f,c
  2351  000E8A                     l2210:
  2352  000E8A  90D8               	bcf	status,0,c
  2353  000E8C  3213               	rrcf	___aomod@divisor+7,f,c
  2354  000E8E  3212               	rrcf	___aomod@divisor+6,f,c
  2355  000E90  3211               	rrcf	___aomod@divisor+5,f,c
  2356  000E92  3210               	rrcf	___aomod@divisor+4,f,c
  2357  000E94  320F               	rrcf	___aomod@divisor+3,f,c
  2358  000E96  320E               	rrcf	___aomod@divisor+2,f,c
  2359  000E98  320D               	rrcf	___aomod@divisor+1,f,c
  2360  000E9A  320C               	rrcf	___aomod@divisor,f,c
  2361  000E9C  2E14               	decfsz	___aomod@counter,f,c
  2362  000E9E  D7D3               	goto	u1780
  2363  000EA0                     l2214:
  2364  000EA0  5015               	movf	___aomod@sign,w,c
  2365  000EA2  B4D8               	btfsc	status,2,c
  2366  000EA4  D010               	goto	l2218
  2367  000EA6  1E0B               	comf	___aomod@dividend+7,f,c
  2368  000EA8  1E0A               	comf	___aomod@dividend+6,f,c
  2369  000EAA  1E09               	comf	___aomod@dividend+5,f,c
  2370  000EAC  1E08               	comf	___aomod@dividend+4,f,c
  2371  000EAE  1E07               	comf	___aomod@dividend+3,f,c
  2372  000EB0  1E06               	comf	___aomod@dividend+2,f,c
  2373  000EB2  1E05               	comf	___aomod@dividend+1,f,c
  2374  000EB4  6C04               	negf	___aomod@dividend,c
  2375  000EB6  0E00               	movlw	0
  2376  000EB8  2205               	addwfc	___aomod@dividend+1,f,c
  2377  000EBA  2206               	addwfc	___aomod@dividend+2,f,c
  2378  000EBC  2207               	addwfc	___aomod@dividend+3,f,c
  2379  000EBE  2208               	addwfc	___aomod@dividend+4,f,c
  2380  000EC0  2209               	addwfc	___aomod@dividend+5,f,c
  2381  000EC2  220A               	addwfc	___aomod@dividend+6,f,c
  2382  000EC4  220B               	addwfc	___aomod@dividend+7,f,c
  2383  000EC6                     l2218:
  2384  000EC6  C004  F004         	movff	___aomod@dividend,?___aomod
  2385  000ECA  C005  F005         	movff	___aomod@dividend+1,?___aomod+1
  2386  000ECE  C006  F006         	movff	___aomod@dividend+2,?___aomod+2
  2387  000ED2  C007  F007         	movff	___aomod@dividend+3,?___aomod+3
  2388  000ED6  C008  F008         	movff	___aomod@dividend+4,?___aomod+4
  2389  000EDA  C009  F009         	movff	___aomod@dividend+5,?___aomod+5
  2390  000EDE  C00A  F00A         	movff	___aomod@dividend+6,?___aomod+6
  2391  000EE2  C00B  F00B         	movff	___aomod@dividend+7,?___aomod+7
  2392  000EE6  0012               	return		;funcret
  2393  000EE8                     __end_of___aomod:
  2394                           	opt callstack 0
  2395                           
  2396 ;; *************** function ___aodiv *****************
  2397 ;; Defined at:
  2398 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aodiv.c"
  2399 ;; Parameters:    Size  Location     Type
  2400 ;;  dividend        8    3[COMRAM] long long 
  2401 ;;  divisor         8   11[COMRAM] long long 
  2402 ;; Auto vars:     Size  Location     Type
  2403 ;;  quotient        8   21[COMRAM] long long 
  2404 ;;  sign            1   20[COMRAM] unsigned char 
  2405 ;;  counter         1   19[COMRAM] unsigned char 
  2406 ;; Return value:  Size  Location     Type
  2407 ;;                  8    3[COMRAM] long long 
  2408 ;; Registers used:
  2409 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2410 ;; Tracked objects:
  2411 ;;		On entry : 0/0
  2412 ;;		On exit  : 0/0
  2413 ;;		Unchanged: 0/0
  2414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2415 ;;      Params:        16       0       0       0       0       0       0
  2416 ;;      Locals:        10       0       0       0       0       0       0
  2417 ;;      Temps:          0       0       0       0       0       0       0
  2418 ;;      Totals:        26       0       0       0       0       0       0
  2419 ;;Total ram usage:       26 bytes
  2420 ;; Hardware stack levels used:    1
  2421 ;; Hardware stack levels required when called:    1
  2422 ;; This function calls:
  2423 ;;		Nothing
  2424 ;; This function is called by:
  2425 ;;		_dtoa
  2426 ;; This function uses a non-reentrant model
  2427 ;;
  2428                           
  2429                           	psect	text12
  2430  000B3C                     __ptext12:
  2431                           	opt callstack 0
  2432  000B3C                     ___aodiv:
  2433                           	opt callstack 25
  2434                           
  2435                           ;incstack = 0
  2436  000B3C  0E00               	movlw	0
  2437  000B3E  6E15               	movwf	___aodiv@sign,c
  2438  000B40  AE13               	btfss	___aodiv@divisor+7,7,c
  2439  000B42  D012               	goto	l2150
  2440  000B44  1E13               	comf	___aodiv@divisor+7,f,c
  2441  000B46  1E12               	comf	___aodiv@divisor+6,f,c
  2442  000B48  1E11               	comf	___aodiv@divisor+5,f,c
  2443  000B4A  1E10               	comf	___aodiv@divisor+4,f,c
  2444  000B4C  1E0F               	comf	___aodiv@divisor+3,f,c
  2445  000B4E  1E0E               	comf	___aodiv@divisor+2,f,c
  2446  000B50  1E0D               	comf	___aodiv@divisor+1,f,c
  2447  000B52  6C0C               	negf	___aodiv@divisor,c
  2448  000B54  0E00               	movlw	0
  2449  000B56  220D               	addwfc	___aodiv@divisor+1,f,c
  2450  000B58  220E               	addwfc	___aodiv@divisor+2,f,c
  2451  000B5A  220F               	addwfc	___aodiv@divisor+3,f,c
  2452  000B5C  2210               	addwfc	___aodiv@divisor+4,f,c
  2453  000B5E  2211               	addwfc	___aodiv@divisor+5,f,c
  2454  000B60  2212               	addwfc	___aodiv@divisor+6,f,c
  2455  000B62  2213               	addwfc	___aodiv@divisor+7,f,c
  2456  000B64  0E01               	movlw	1
  2457  000B66  6E15               	movwf	___aodiv@sign,c
  2458  000B68                     l2150:
  2459  000B68  AE0B               	btfss	___aodiv@dividend+7,7,c
  2460  000B6A  D012               	goto	l2156
  2461  000B6C  1E0B               	comf	___aodiv@dividend+7,f,c
  2462  000B6E  1E0A               	comf	___aodiv@dividend+6,f,c
  2463  000B70  1E09               	comf	___aodiv@dividend+5,f,c
  2464  000B72  1E08               	comf	___aodiv@dividend+4,f,c
  2465  000B74  1E07               	comf	___aodiv@dividend+3,f,c
  2466  000B76  1E06               	comf	___aodiv@dividend+2,f,c
  2467  000B78  1E05               	comf	___aodiv@dividend+1,f,c
  2468  000B7A  6C04               	negf	___aodiv@dividend,c
  2469  000B7C  0E00               	movlw	0
  2470  000B7E  2205               	addwfc	___aodiv@dividend+1,f,c
  2471  000B80  2206               	addwfc	___aodiv@dividend+2,f,c
  2472  000B82  2207               	addwfc	___aodiv@dividend+3,f,c
  2473  000B84  2208               	addwfc	___aodiv@dividend+4,f,c
  2474  000B86  2209               	addwfc	___aodiv@dividend+5,f,c
  2475  000B88  220A               	addwfc	___aodiv@dividend+6,f,c
  2476  000B8A  220B               	addwfc	___aodiv@dividend+7,f,c
  2477  000B8C  0E01               	movlw	1
  2478  000B8E  1A15               	xorwf	___aodiv@sign,f,c
  2479  000B90                     l2156:
  2480  000B90  EE20  F016         	lfsr	2,___aodiv@quotient
  2481  000B94  0E07               	movlw	7
  2482  000B96                     u1701:
  2483  000B96  6ADE               	clrf	postinc2,c
  2484  000B98  06E8               	decf	wreg,f,c
  2485  000B9A  E2FD               	bc	u1701
  2486  000B9C  500C               	movf	___aodiv@divisor,w,c
  2487  000B9E  100D               	iorwf	___aodiv@divisor+1,w,c
  2488  000BA0  100E               	iorwf	___aodiv@divisor+2,w,c
  2489  000BA2  100F               	iorwf	___aodiv@divisor+3,w,c
  2490  000BA4  1010               	iorwf	___aodiv@divisor+4,w,c
  2491  000BA6  1011               	iorwf	___aodiv@divisor+5,w,c
  2492  000BA8  1012               	iorwf	___aodiv@divisor+6,w,c
  2493  000BAA  1013               	iorwf	___aodiv@divisor+7,w,c
  2494  000BAC  B4D8               	btfsc	status,2,c
  2495  000BAE  D046               	goto	l2178
  2496  000BB0  0E01               	movlw	1
  2497  000BB2  6E14               	movwf	___aodiv@counter,c
  2498  000BB4  D00A               	goto	l2164
  2499  000BB6                     l2162:
  2500  000BB6  90D8               	bcf	status,0,c
  2501  000BB8  360C               	rlcf	___aodiv@divisor,f,c
  2502  000BBA  360D               	rlcf	___aodiv@divisor+1,f,c
  2503  000BBC  360E               	rlcf	___aodiv@divisor+2,f,c
  2504  000BBE  360F               	rlcf	___aodiv@divisor+3,f,c
  2505  000BC0  3610               	rlcf	___aodiv@divisor+4,f,c
  2506  000BC2  3611               	rlcf	___aodiv@divisor+5,f,c
  2507  000BC4  3612               	rlcf	___aodiv@divisor+6,f,c
  2508  000BC6  3613               	rlcf	___aodiv@divisor+7,f,c
  2509  000BC8  2A14               	incf	___aodiv@counter,f,c
  2510  000BCA                     l2164:
  2511  000BCA  AE13               	btfss	___aodiv@divisor+7,7,c
  2512  000BCC  D7F4               	goto	l2162
  2513  000BCE                     u1720:
  2514  000BCE  90D8               	bcf	status,0,c
  2515  000BD0  3616               	rlcf	___aodiv@quotient,f,c
  2516  000BD2  3617               	rlcf	___aodiv@quotient+1,f,c
  2517  000BD4  3618               	rlcf	___aodiv@quotient+2,f,c
  2518  000BD6  3619               	rlcf	___aodiv@quotient+3,f,c
  2519  000BD8  361A               	rlcf	___aodiv@quotient+4,f,c
  2520  000BDA  361B               	rlcf	___aodiv@quotient+5,f,c
  2521  000BDC  361C               	rlcf	___aodiv@quotient+6,f,c
  2522  000BDE  361D               	rlcf	___aodiv@quotient+7,f,c
  2523  000BE0  500C               	movf	___aodiv@divisor,w,c
  2524  000BE2  5C04               	subwf	___aodiv@dividend,w,c
  2525  000BE4  500D               	movf	___aodiv@divisor+1,w,c
  2526  000BE6  5805               	subwfb	___aodiv@dividend+1,w,c
  2527  000BE8  500E               	movf	___aodiv@divisor+2,w,c
  2528  000BEA  5806               	subwfb	___aodiv@dividend+2,w,c
  2529  000BEC  500F               	movf	___aodiv@divisor+3,w,c
  2530  000BEE  5807               	subwfb	___aodiv@dividend+3,w,c
  2531  000BF0  5010               	movf	___aodiv@divisor+4,w,c
  2532  000BF2  5808               	subwfb	___aodiv@dividend+4,w,c
  2533  000BF4  5011               	movf	___aodiv@divisor+5,w,c
  2534  000BF6  5809               	subwfb	___aodiv@dividend+5,w,c
  2535  000BF8  5012               	movf	___aodiv@divisor+6,w,c
  2536  000BFA  580A               	subwfb	___aodiv@dividend+6,w,c
  2537  000BFC  5013               	movf	___aodiv@divisor+7,w,c
  2538  000BFE  580B               	subwfb	___aodiv@dividend+7,w,c
  2539  000C00  A0D8               	btfss	status,0,c
  2540  000C02  D011               	goto	l2174
  2541  000C04  500C               	movf	___aodiv@divisor,w,c
  2542  000C06  5E04               	subwf	___aodiv@dividend,f,c
  2543  000C08  500D               	movf	___aodiv@divisor+1,w,c
  2544  000C0A  5A05               	subwfb	___aodiv@dividend+1,f,c
  2545  000C0C  500E               	movf	___aodiv@divisor+2,w,c
  2546  000C0E  5A06               	subwfb	___aodiv@dividend+2,f,c
  2547  000C10  500F               	movf	___aodiv@divisor+3,w,c
  2548  000C12  5A07               	subwfb	___aodiv@dividend+3,f,c
  2549  000C14  5010               	movf	___aodiv@divisor+4,w,c
  2550  000C16  5A08               	subwfb	___aodiv@dividend+4,f,c
  2551  000C18  5011               	movf	___aodiv@divisor+5,w,c
  2552  000C1A  5A09               	subwfb	___aodiv@dividend+5,f,c
  2553  000C1C  5012               	movf	___aodiv@divisor+6,w,c
  2554  000C1E  5A0A               	subwfb	___aodiv@dividend+6,f,c
  2555  000C20  5013               	movf	___aodiv@divisor+7,w,c
  2556  000C22  5A0B               	subwfb	___aodiv@dividend+7,f,c
  2557  000C24  8016               	bsf	___aodiv@quotient,0,c
  2558  000C26                     l2174:
  2559  000C26  90D8               	bcf	status,0,c
  2560  000C28  3213               	rrcf	___aodiv@divisor+7,f,c
  2561  000C2A  3212               	rrcf	___aodiv@divisor+6,f,c
  2562  000C2C  3211               	rrcf	___aodiv@divisor+5,f,c
  2563  000C2E  3210               	rrcf	___aodiv@divisor+4,f,c
  2564  000C30  320F               	rrcf	___aodiv@divisor+3,f,c
  2565  000C32  320E               	rrcf	___aodiv@divisor+2,f,c
  2566  000C34  320D               	rrcf	___aodiv@divisor+1,f,c
  2567  000C36  320C               	rrcf	___aodiv@divisor,f,c
  2568  000C38  2E14               	decfsz	___aodiv@counter,f,c
  2569  000C3A  D7C9               	goto	u1720
  2570  000C3C                     l2178:
  2571  000C3C  5015               	movf	___aodiv@sign,w,c
  2572  000C3E  B4D8               	btfsc	status,2,c
  2573  000C40  D010               	goto	l2182
  2574  000C42  1E1D               	comf	___aodiv@quotient+7,f,c
  2575  000C44  1E1C               	comf	___aodiv@quotient+6,f,c
  2576  000C46  1E1B               	comf	___aodiv@quotient+5,f,c
  2577  000C48  1E1A               	comf	___aodiv@quotient+4,f,c
  2578  000C4A  1E19               	comf	___aodiv@quotient+3,f,c
  2579  000C4C  1E18               	comf	___aodiv@quotient+2,f,c
  2580  000C4E  1E17               	comf	___aodiv@quotient+1,f,c
  2581  000C50  6C16               	negf	___aodiv@quotient,c
  2582  000C52  0E00               	movlw	0
  2583  000C54  2217               	addwfc	___aodiv@quotient+1,f,c
  2584  000C56  2218               	addwfc	___aodiv@quotient+2,f,c
  2585  000C58  2219               	addwfc	___aodiv@quotient+3,f,c
  2586  000C5A  221A               	addwfc	___aodiv@quotient+4,f,c
  2587  000C5C  221B               	addwfc	___aodiv@quotient+5,f,c
  2588  000C5E  221C               	addwfc	___aodiv@quotient+6,f,c
  2589  000C60  221D               	addwfc	___aodiv@quotient+7,f,c
  2590  000C62                     l2182:
  2591  000C62  C016  F004         	movff	___aodiv@quotient,?___aodiv
  2592  000C66  C017  F005         	movff	___aodiv@quotient+1,?___aodiv+1
  2593  000C6A  C018  F006         	movff	___aodiv@quotient+2,?___aodiv+2
  2594  000C6E  C019  F007         	movff	___aodiv@quotient+3,?___aodiv+3
  2595  000C72  C01A  F008         	movff	___aodiv@quotient+4,?___aodiv+4
  2596  000C76  C01B  F009         	movff	___aodiv@quotient+5,?___aodiv+5
  2597  000C7A  C01C  F00A         	movff	___aodiv@quotient+6,?___aodiv+6
  2598  000C7E  C01D  F00B         	movff	___aodiv@quotient+7,?___aodiv+7
  2599  000C82  0012               	return		;funcret
  2600  000C84                     __end_of___aodiv:
  2601                           	opt callstack 0
  2602                           
  2603 ;; *************** function _atoi *****************
  2604 ;; Defined at:
  2605 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\atoi.c"
  2606 ;; Parameters:    Size  Location     Type
  2607 ;;  s               2   10[COMRAM] PTR const unsigned char 
  2608 ;;		 -> STR_4(5), STR_3(5), 
  2609 ;; Auto vars:     Size  Location     Type
  2610 ;;  n               2   23[COMRAM] int 
  2611 ;;  neg             2   16[COMRAM] int 
  2612 ;; Return value:  Size  Location     Type
  2613 ;;                  2   10[COMRAM] int 
  2614 ;; Registers used:
  2615 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2616 ;; Tracked objects:
  2617 ;;		On entry : 0/0
  2618 ;;		On exit  : 0/0
  2619 ;;		Unchanged: 0/0
  2620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2621 ;;      Params:         2       0       0       0       0       0       0
  2622 ;;      Locals:         9       0       0       0       0       0       0
  2623 ;;      Temps:          4       0       0       0       0       0       0
  2624 ;;      Totals:        15       0       0       0       0       0       0
  2625 ;;Total ram usage:       15 bytes
  2626 ;; Hardware stack levels used:    1
  2627 ;; Hardware stack levels required when called:    2
  2628 ;; This function calls:
  2629 ;;		___wmul
  2630 ;;		_isdigit
  2631 ;;		_isspace
  2632 ;; This function is called by:
  2633 ;;		_vfpfcnvrt
  2634 ;; This function uses a non-reentrant model
  2635 ;;
  2636                           
  2637                           	psect	text13
  2638  000C84                     __ptext13:
  2639                           	opt callstack 0
  2640  000C84                     _atoi:
  2641                           	opt callstack 25
  2642                           
  2643                           ;incstack = 0
  2644  000C84  0E00               	movlw	0
  2645  000C86  6E19               	movwf	atoi@n+1,c
  2646  000C88  0E00               	movlw	0
  2647  000C8A  6E18               	movwf	atoi@n,c
  2648  000C8C  0E00               	movlw	0
  2649  000C8E  6E12               	movwf	atoi@neg+1,c
  2650  000C90  0E00               	movlw	0
  2651  000C92  6E11               	movwf	atoi@neg,c
  2652  000C94  D002               	goto	l2300
  2653  000C96                     l2298:
  2654  000C96  4A0B               	infsnz	atoi@s,f,c
  2655  000C98  2A0C               	incf	atoi@s+1,f,c
  2656  000C9A                     l2300:
  2657  000C9A  0E01               	movlw	1
  2658  000C9C  6E17               	movwf	_atoi$1000,c
  2659  000C9E  C00B  FFF6         	movff	atoi@s,tblptrl
  2660  000CA2  C00C  FFF7         	movff	atoi@s+1,tblptrh
  2661  000CA6                     	if	0	;tblptru may be non-zero
  2662  000CA6                     	endif
  2663  000CA6                     	if	0	;tblptru may be non-zero
  2664  000CA6                     	endif
  2665  000CA6  0008               	tblrd		*
  2666  000CA8  50F5               	movf	tablat,w,c
  2667  000CAA  0A20               	xorlw	32
  2668  000CAC  B4D8               	btfsc	status,2,c
  2669  000CAE  D018               	goto	l2308
  2670  000CB0  0EF7               	movlw	247
  2671  000CB2  6E0D               	movwf	??_atoi& (0+255),c
  2672  000CB4  0EFF               	movlw	255
  2673  000CB6  6E0E               	movwf	(??_atoi+1)& (0+255),c
  2674  000CB8  C00B  FFF6         	movff	atoi@s,tblptrl
  2675  000CBC  C00C  FFF7         	movff	atoi@s+1,tblptrh
  2676  000CC0                     	if	0	;tblptru may be non-zero
  2677  000CC0                     	endif
  2678  000CC0                     	if	0	;tblptru may be non-zero
  2679  000CC0                     	endif
  2680  000CC0  0008               	tblrd		*
  2681  000CC2  50F5               	movf	tablat,w,c
  2682  000CC4  6E0F               	movwf	(??_atoi+2)& (0+255),c
  2683  000CC6  6A10               	clrf	(??_atoi+3)& (0+255),c
  2684  000CC8  500D               	movf	??_atoi,w,c
  2685  000CCA  260F               	addwf	??_atoi+2,f,c
  2686  000CCC  500E               	movf	??_atoi+1,w,c
  2687  000CCE  2210               	addwfc	??_atoi+3,f,c
  2688  000CD0  5010               	movf	??_atoi+3,w,c
  2689  000CD2  E104               	bnz	u1990
  2690  000CD4  0E05               	movlw	5
  2691  000CD6  5C0F               	subwf	??_atoi+2,w,c
  2692  000CD8  A0D8               	btfss	status,0,c
  2693  000CDA  D002               	goto	l2308
  2694  000CDC                     u1990:
  2695  000CDC  0E00               	movlw	0
  2696  000CDE  6E17               	movwf	_atoi$1000,c
  2697  000CE0                     l2308:
  2698  000CE0  C017  F013         	movff	_atoi$1000,_atoi$999
  2699  000CE4  6A14               	clrf	_atoi$999+1,c
  2700  000CE6  5013               	movf	_atoi$999,w,c
  2701  000CE8  1014               	iorwf	_atoi$999+1,w,c
  2702  000CEA  B4D8               	btfsc	status,2,c
  2703  000CEC  D008               	goto	l2318
  2704  000CEE  D7D3               	goto	l2298
  2705  000CF0                     l2314:
  2706  000CF0  0E00               	movlw	0
  2707  000CF2  6E12               	movwf	atoi@neg+1,c
  2708  000CF4  0E01               	movlw	1
  2709  000CF6  6E11               	movwf	atoi@neg,c
  2710  000CF8                     l2316:
  2711  000CF8  4A0B               	infsnz	atoi@s,f,c
  2712  000CFA  2A0C               	incf	atoi@s+1,f,c
  2713  000CFC  D02E               	goto	l2324
  2714  000CFE                     l2318:
  2715  000CFE  C00B  FFF6         	movff	atoi@s,tblptrl
  2716  000D02  C00C  FFF7         	movff	atoi@s+1,tblptrh
  2717  000D06                     	if	0	;tblptru may be non-zero
  2718  000D06                     	endif
  2719  000D06                     	if	0	;tblptru may be non-zero
  2720  000D06                     	endif
  2721  000D06  0008               	tblrd		*
  2722  000D08  50F5               	movf	tablat,w,c
  2723  000D0A  6E0D               	movwf	??_atoi& (0+255),c
  2724  000D0C  6A0E               	clrf	(??_atoi+1)& (0+255),c
  2725                           
  2726                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2727                           ; Switch size 1, requested type "simple"
  2728                           ; Number of cases is 1, Range of values is 0 to 0
  2729                           ; switch strategies available:
  2730                           ; Name         Instructions Cycles
  2731                           ; simple_byte            4     3 (average)
  2732                           ;	Chosen strategy is simple_byte
  2733  000D0E  500E               	movf	??_atoi+1,w,c
  2734  000D10  0A00               	xorlw	0	; case 0
  2735  000D12  A4D8               	btfss	status,2,c
  2736  000D14  D022               	goto	l2324
  2737                           
  2738                           ; Switch size 1, requested type "simple"
  2739                           ; Number of cases is 2, Range of values is 43 to 45
  2740                           ; switch strategies available:
  2741                           ; Name         Instructions Cycles
  2742                           ; simple_byte            7     4 (average)
  2743                           ;	Chosen strategy is simple_byte
  2744  000D16  500D               	movf	??_atoi,w,c
  2745  000D18  0A2B               	xorlw	43	; case 43
  2746  000D1A  B4D8               	btfsc	status,2,c
  2747  000D1C  D7ED               	goto	l2316
  2748  000D1E  0A06               	xorlw	6	; case 45
  2749  000D20  B4D8               	btfsc	status,2,c
  2750  000D22  D7E6               	goto	l2314
  2751  000D24  D01A               	goto	l2324
  2752  000D26                     l2320:
  2753  000D26  C018  F004         	movff	atoi@n,___wmul@multiplier
  2754  000D2A  C019  F005         	movff	atoi@n+1,___wmul@multiplier+1
  2755  000D2E  0E00               	movlw	0
  2756  000D30  6E07               	movwf	___wmul@multiplicand+1,c
  2757  000D32  0E0A               	movlw	10
  2758  000D34  6E06               	movwf	___wmul@multiplicand,c
  2759  000D36  EC5C  F00A         	call	___wmul	;wreg free
  2760  000D3A  C00B  FFF6         	movff	atoi@s,tblptrl
  2761  000D3E  C00C  FFF7         	movff	atoi@s+1,tblptrh
  2762  000D42                     	if	0	;tblptru may be non-zero
  2763  000D42                     	endif
  2764  000D42                     	if	0	;tblptru may be non-zero
  2765  000D42                     	endif
  2766  000D42  0008               	tblrd		*
  2767  000D44  50F5               	movf	tablat,w,c
  2768  000D46  5E04               	subwf	?___wmul,f,c
  2769  000D48  0E00               	movlw	0
  2770  000D4A  5A05               	subwfb	?___wmul+1,f,c
  2771  000D4C  0E30               	movlw	48
  2772  000D4E  2404               	addwf	?___wmul,w,c
  2773  000D50  6E18               	movwf	atoi@n,c
  2774  000D52  0E00               	movlw	0
  2775  000D54  2005               	addwfc	?___wmul+1,w,c
  2776  000D56  6E19               	movwf	atoi@n+1,c
  2777  000D58  D7CF               	goto	l2316
  2778  000D5A                     l2324:
  2779  000D5A  0ED0               	movlw	208
  2780  000D5C  6E0D               	movwf	??_atoi& (0+255),c
  2781  000D5E  0EFF               	movlw	255
  2782  000D60  6E0E               	movwf	(??_atoi+1)& (0+255),c
  2783  000D62  C00B  FFF6         	movff	atoi@s,tblptrl
  2784  000D66  C00C  FFF7         	movff	atoi@s+1,tblptrh
  2785  000D6A                     	if	0	;tblptru may be non-zero
  2786  000D6A                     	endif
  2787  000D6A                     	if	0	;tblptru may be non-zero
  2788  000D6A                     	endif
  2789  000D6A  0008               	tblrd		*
  2790  000D6C  50F5               	movf	tablat,w,c
  2791  000D6E  6E0F               	movwf	(??_atoi+2)& (0+255),c
  2792  000D70  6A10               	clrf	(??_atoi+3)& (0+255),c
  2793  000D72  500D               	movf	??_atoi,w,c
  2794  000D74  260F               	addwf	??_atoi+2,f,c
  2795  000D76  500E               	movf	??_atoi+1,w,c
  2796  000D78  2210               	addwfc	??_atoi+3,f,c
  2797  000D7A  5010               	movf	??_atoi+3,w,c
  2798  000D7C  E106               	bnz	u2010
  2799  000D7E  0E0A               	movlw	10
  2800  000D80  5C0F               	subwf	??_atoi+2,w,c
  2801  000D82  B0D8               	btfsc	status,0,c
  2802  000D84  D002               	goto	u2010
  2803  000D86  0E01               	movlw	1
  2804  000D88  D001               	goto	u2020
  2805  000D8A                     u2010:
  2806  000D8A  0E00               	movlw	0
  2807  000D8C                     u2020:
  2808  000D8C  6E15               	movwf	_atoi$1001,c
  2809  000D8E  6A16               	clrf	_atoi$1001+1,c
  2810  000D90  5015               	movf	_atoi$1001,w,c
  2811  000D92  1016               	iorwf	_atoi$1001+1,w,c
  2812  000D94  A4D8               	btfss	status,2,c
  2813  000D96  D7C7               	goto	l2320
  2814  000D98  5011               	movf	atoi@neg,w,c
  2815  000D9A  1012               	iorwf	atoi@neg+1,w,c
  2816  000D9C  A4D8               	btfss	status,2,c
  2817  000D9E  D00D               	goto	l907
  2818  000DA0  C018  F00D         	movff	atoi@n,??_atoi
  2819  000DA4  C019  F00E         	movff	atoi@n+1,??_atoi+1
  2820  000DA8  1E0D               	comf	??_atoi,f,c
  2821  000DAA  1E0E               	comf	??_atoi+1,f,c
  2822  000DAC  4A0D               	infsnz	??_atoi,f,c
  2823  000DAE  2A0E               	incf	??_atoi+1,f,c
  2824  000DB0  C00D  F00B         	movff	??_atoi,?_atoi
  2825  000DB4  C00E  F00C         	movff	??_atoi+1,?_atoi+1
  2826  000DB8  0012               	return	
  2827  000DBA                     l907:
  2828  000DBA  C018  F00B         	movff	atoi@n,?_atoi
  2829  000DBE  C019  F00C         	movff	atoi@n+1,?_atoi+1
  2830  000DC2  0012               	return		;funcret
  2831  000DC4                     __end_of_atoi:
  2832                           	opt callstack 0
  2833                           
  2834 ;; *************** function _isspace *****************
  2835 ;; Defined at:
  2836 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\isspace.c"
  2837 ;; Parameters:    Size  Location     Type
  2838 ;;  c               2    3[COMRAM] int 
  2839 ;; Auto vars:     Size  Location     Type
  2840 ;;		None
  2841 ;; Return value:  Size  Location     Type
  2842 ;;                  2    3[COMRAM] int 
  2843 ;; Registers used:
  2844 ;;		wreg, status,2, status,0
  2845 ;; Tracked objects:
  2846 ;;		On entry : 0/0
  2847 ;;		On exit  : 0/0
  2848 ;;		Unchanged: 0/0
  2849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2850 ;;      Params:         2       0       0       0       0       0       0
  2851 ;;      Locals:         1       0       0       0       0       0       0
  2852 ;;      Temps:          4       0       0       0       0       0       0
  2853 ;;      Totals:         7       0       0       0       0       0       0
  2854 ;;Total ram usage:        7 bytes
  2855 ;; Hardware stack levels used:    1
  2856 ;; Hardware stack levels required when called:    1
  2857 ;; This function calls:
  2858 ;;		Nothing
  2859 ;; This function is called by:
  2860 ;;		_atoi
  2861 ;; This function uses a non-reentrant model
  2862 ;;
  2863                           
  2864                           	psect	text14
  2865  001390                     __ptext14:
  2866                           	opt callstack 0
  2867  001390                     _isspace:
  2868                           	opt callstack 25
  2869                           
  2870                           ;incstack = 0
  2871  001390  0E01               	movlw	1
  2872  001392  6E0A               	movwf	_isspace$1017,c
  2873  001394  0E20               	movlw	32
  2874  001396  1804               	xorwf	isspace@c,w,c
  2875  001398  1005               	iorwf	isspace@c+1,w,c
  2876  00139A  B4D8               	btfsc	status,2,c
  2877  00139C  D014               	goto	l2230
  2878  00139E  0EF7               	movlw	247
  2879  0013A0  6E06               	movwf	??_isspace& (0+255),c
  2880  0013A2  0EFF               	movlw	255
  2881  0013A4  6E07               	movwf	(??_isspace+1)& (0+255),c
  2882  0013A6  C004  F008         	movff	isspace@c,??_isspace+2
  2883  0013AA  C005  F009         	movff	isspace@c+1,??_isspace+3
  2884  0013AE  5006               	movf	??_isspace,w,c
  2885  0013B0  2608               	addwf	??_isspace+2,f,c
  2886  0013B2  5007               	movf	??_isspace+1,w,c
  2887  0013B4  2209               	addwfc	??_isspace+3,f,c
  2888  0013B6  5009               	movf	??_isspace+3,w,c
  2889  0013B8  E104               	bnz	u1820
  2890  0013BA  0E05               	movlw	5
  2891  0013BC  5C08               	subwf	??_isspace+2,w,c
  2892  0013BE  A0D8               	btfss	status,0,c
  2893  0013C0  D002               	goto	l2230
  2894  0013C2                     u1820:
  2895  0013C2  0E00               	movlw	0
  2896  0013C4  6E0A               	movwf	_isspace$1017,c
  2897  0013C6                     l2230:
  2898  0013C6  C00A  F004         	movff	_isspace$1017,?_isspace
  2899  0013CA  6A05               	clrf	?_isspace+1,c
  2900  0013CC  0012               	return		;funcret
  2901  0013CE                     __end_of_isspace:
  2902                           	opt callstack 0
  2903                           
  2904 ;; *************** function _isdigit *****************
  2905 ;; Defined at:
  2906 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\isdigit.c"
  2907 ;; Parameters:    Size  Location     Type
  2908 ;;  c               2    3[COMRAM] int 
  2909 ;; Auto vars:     Size  Location     Type
  2910 ;;		None
  2911 ;; Return value:  Size  Location     Type
  2912 ;;                  2    3[COMRAM] int 
  2913 ;; Registers used:
  2914 ;;		wreg, status,2, status,0
  2915 ;; Tracked objects:
  2916 ;;		On entry : 0/0
  2917 ;;		On exit  : 0/0
  2918 ;;		Unchanged: 0/0
  2919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2920 ;;      Params:         2       0       0       0       0       0       0
  2921 ;;      Locals:         0       0       0       0       0       0       0
  2922 ;;      Temps:          4       0       0       0       0       0       0
  2923 ;;      Totals:         6       0       0       0       0       0       0
  2924 ;;Total ram usage:        6 bytes
  2925 ;; Hardware stack levels used:    1
  2926 ;; Hardware stack levels required when called:    1
  2927 ;; This function calls:
  2928 ;;		Nothing
  2929 ;; This function is called by:
  2930 ;;		_vfpfcnvrt
  2931 ;;		_atoi
  2932 ;; This function uses a non-reentrant model
  2933 ;;
  2934                           
  2935                           	psect	text15
  2936  001438                     __ptext15:
  2937                           	opt callstack 0
  2938  001438                     _isdigit:
  2939                           	opt callstack 26
  2940                           
  2941                           ;incstack = 0
  2942  001438  0ED0               	movlw	208
  2943  00143A  6E06               	movwf	??_isdigit& (0+255),c
  2944  00143C  0EFF               	movlw	255
  2945  00143E  6E07               	movwf	(??_isdigit+1)& (0+255),c
  2946  001440  C004  F008         	movff	isdigit@c,??_isdigit+2
  2947  001444  C005  F009         	movff	isdigit@c+1,??_isdigit+3
  2948  001448  5006               	movf	??_isdigit,w,c
  2949  00144A  2608               	addwf	??_isdigit+2,f,c
  2950  00144C  5007               	movf	??_isdigit+1,w,c
  2951  00144E  2209               	addwfc	??_isdigit+3,f,c
  2952  001450  5009               	movf	??_isdigit+3,w,c
  2953  001452  E106               	bnz	u1660
  2954  001454  0E0A               	movlw	10
  2955  001456  5C08               	subwf	??_isdigit+2,w,c
  2956  001458  B0D8               	btfsc	status,0,c
  2957  00145A  D002               	goto	u1660
  2958  00145C  0E01               	movlw	1
  2959  00145E  D001               	goto	u1670
  2960  001460                     u1660:
  2961  001460  0E00               	movlw	0
  2962  001462                     u1670:
  2963  001462  6E04               	movwf	?_isdigit,c
  2964  001464  6A05               	clrf	?_isdigit+1,c
  2965  001466  0012               	return		;funcret
  2966  001468                     __end_of_isdigit:
  2967                           	opt callstack 0
  2968                           
  2969 ;; *************** function ___wmul *****************
  2970 ;; Defined at:
  2971 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
  2972 ;; Parameters:    Size  Location     Type
  2973 ;;  multiplier      2    3[COMRAM] unsigned int 
  2974 ;;  multiplicand    2    5[COMRAM] unsigned int 
  2975 ;; Auto vars:     Size  Location     Type
  2976 ;;  product         2    7[COMRAM] unsigned int 
  2977 ;; Return value:  Size  Location     Type
  2978 ;;                  2    3[COMRAM] unsigned int 
  2979 ;; Registers used:
  2980 ;;		wreg, status,2, status,0, prodl, prodh
  2981 ;; Tracked objects:
  2982 ;;		On entry : 0/0
  2983 ;;		On exit  : 0/0
  2984 ;;		Unchanged: 0/0
  2985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2986 ;;      Params:         4       0       0       0       0       0       0
  2987 ;;      Locals:         2       0       0       0       0       0       0
  2988 ;;      Temps:          0       0       0       0       0       0       0
  2989 ;;      Totals:         6       0       0       0       0       0       0
  2990 ;;Total ram usage:        6 bytes
  2991 ;; Hardware stack levels used:    1
  2992 ;; Hardware stack levels required when called:    1
  2993 ;; This function calls:
  2994 ;;		Nothing
  2995 ;; This function is called by:
  2996 ;;		_atoi
  2997 ;; This function uses a non-reentrant model
  2998 ;;
  2999                           
  3000                           	psect	text16
  3001  0014B8                     __ptext16:
  3002                           	opt callstack 0
  3003  0014B8                     ___wmul:
  3004                           	opt callstack 25
  3005                           
  3006                           ;incstack = 0
  3007  0014B8  5004               	movf	___wmul@multiplier,w,c
  3008  0014BA  0206               	mulwf	___wmul@multiplicand,c
  3009  0014BC  CFF3 F008          	movff	prodl,___wmul@product
  3010  0014C0  CFF4 F009          	movff	prodh,___wmul@product+1
  3011  0014C4  5004               	movf	___wmul@multiplier,w,c
  3012  0014C6  0207               	mulwf	___wmul@multiplicand+1,c
  3013  0014C8  50F3               	movf	prodl,w,c
  3014  0014CA  2609               	addwf	___wmul@product+1,f,c
  3015  0014CC  5005               	movf	___wmul@multiplier+1,w,c
  3016  0014CE  0206               	mulwf	___wmul@multiplicand,c
  3017  0014D0  50F3               	movf	prodl,w,c
  3018  0014D2  2609               	addwf	___wmul@product+1,f,c
  3019  0014D4  C008  F004         	movff	___wmul@product,?___wmul
  3020  0014D8  C009  F005         	movff	___wmul@product+1,?___wmul+1
  3021  0014DC  0012               	return		;funcret
  3022  0014DE                     __end_of___wmul:
  3023                           	opt callstack 0
  3024                           
  3025 ;; *************** function _lcd_ini *****************
  3026 ;; Defined at:
  3027 ;;		line 3 in file "../Bibliotecas/LCD4b.c"
  3028 ;; Parameters:    Size  Location     Type
  3029 ;;		None
  3030 ;; Auto vars:     Size  Location     Type
  3031 ;;  i               1    8[COMRAM] unsigned char 
  3032 ;; Return value:  Size  Location     Type
  3033 ;;                  1    wreg      void 
  3034 ;; Registers used:
  3035 ;;		wreg, status,2, status,0, cstack
  3036 ;; Tracked objects:
  3037 ;;		On entry : 0/0
  3038 ;;		On exit  : 0/0
  3039 ;;		Unchanged: 0/0
  3040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3041 ;;      Params:         0       0       0       0       0       0       0
  3042 ;;      Locals:         1       0       0       0       0       0       0
  3043 ;;      Temps:          1       0       0       0       0       0       0
  3044 ;;      Totals:         2       0       0       0       0       0       0
  3045 ;;Total ram usage:        2 bytes
  3046 ;; Hardware stack levels used:    1
  3047 ;; Hardware stack levels required when called:    3
  3048 ;; This function calls:
  3049 ;;		_lcd_cmd
  3050 ;; This function is called by:
  3051 ;;		_main
  3052 ;; This function uses a non-reentrant model
  3053 ;;
  3054                           
  3055                           	psect	text17
  3056  0011DC                     __ptext17:
  3057                           	opt callstack 0
  3058  0011DC                     _lcd_ini:
  3059                           	opt callstack 27
  3060                           
  3061                           ;../Bibliotecas/LCD4b.c: 5: char i;;../Bibliotecas/LCD4b.c: 7: TRISD = 0b00000000;
  3062                           
  3063                           ;incstack = 0
  3064  0011DC  0E00               	movlw	0
  3065  0011DE  6E95               	movwf	3989,c	;volatile
  3066                           
  3067                           ;../Bibliotecas/LCD4b.c: 8: TRISEbits.TRISE1 = 0;
  3068  0011E0  9296               	bcf	3990,1,c	;volatile
  3069                           
  3070                           ;../Bibliotecas/LCD4b.c: 9: TRISEbits.TRISE0 = 0;
  3071  0011E2  9096               	bcf	3990,0,c	;volatile
  3072                           
  3073                           ;../Bibliotecas/LCD4b.c: 11: PORTD = 0b00000000;
  3074  0011E4  0E00               	movlw	0
  3075  0011E6  6E83               	movwf	3971,c	;volatile
  3076                           
  3077                           ;../Bibliotecas/LCD4b.c: 12: PORTEbits.RE0 = 0;
  3078  0011E8  9084               	bcf	3972,0,c	;volatile
  3079                           
  3080                           ;../Bibliotecas/LCD4b.c: 13: PORTEbits.RE1 = 0;
  3081  0011EA  9284               	bcf	3972,1,c	;volatile
  3082                           
  3083                           ;../Bibliotecas/LCD4b.c: 15: _delay((unsigned long)((15)*(8000000/4000.0)));
  3084  0011EC  0E27               	movlw	39
  3085  0011EE  6E08               	movwf	??_lcd_ini& (0+255),c
  3086  0011F0  0EF5               	movlw	245
  3087  0011F2                     u2197:
  3088  0011F2  2EE8               	decfsz	wreg,f,c
  3089  0011F4  D7FE               	bra	u2197
  3090  0011F6  2E08               	decfsz	??_lcd_ini& (0+255),f,c
  3091  0011F8  D7FC               	bra	u2197
  3092  0011FA  F000               	nop	
  3093                           
  3094                           ;../Bibliotecas/LCD4b.c: 18: for(i=0;i<=2;i++)
  3095  0011FC  0E00               	movlw	0
  3096  0011FE  6E09               	movwf	lcd_ini@i,c
  3097  001200                     l1928:
  3098                           
  3099                           ;../Bibliotecas/LCD4b.c: 19:    {;../Bibliotecas/LCD4b.c: 20:    lcd_cmd(0x30);
  3100  001200  0E30               	movlw	48
  3101  001202  EC74  F007         	call	_lcd_cmd
  3102                           
  3103                           ;../Bibliotecas/LCD4b.c: 21:    _delay((unsigned long)((5)*(8000000/4000.0)));
  3104  001206  0E0D               	movlw	13
  3105  001208  6E08               	movwf	??_lcd_ini& (0+255),c
  3106  00120A  0EFC               	movlw	252
  3107  00120C                     u2207:
  3108  00120C  2EE8               	decfsz	wreg,f,c
  3109  00120E  D7FE               	bra	u2207
  3110  001210  2E08               	decfsz	??_lcd_ini& (0+255),f,c
  3111  001212  D7FC               	bra	u2207
  3112                           
  3113                           ;../Bibliotecas/LCD4b.c: 22:    }
  3114  001214  2A09               	incf	lcd_ini@i,f,c
  3115  001216  0E02               	movlw	2
  3116  001218  6409               	cpfsgt	lcd_ini@i,c
  3117  00121A  D7F2               	goto	l1928
  3118                           
  3119                           ;../Bibliotecas/LCD4b.c: 24:    lcd_cmd(0x02);
  3120  00121C  0E02               	movlw	2
  3121  00121E  EC74  F007         	call	_lcd_cmd
  3122                           
  3123                           ;../Bibliotecas/LCD4b.c: 25:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3124  001222  0E1A               	movlw	26
  3125  001224                     u2217:
  3126  001224  2EE8               	decfsz	wreg,f,c
  3127  001226  D7FE               	bra	u2217
  3128  001228  D000               	nop2	
  3129                           
  3130                           ;../Bibliotecas/LCD4b.c: 26:    lcd_cmd(0x28);
  3131  00122A  0E28               	movlw	40
  3132  00122C  EC74  F007         	call	_lcd_cmd
  3133                           
  3134                           ;../Bibliotecas/LCD4b.c: 27:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3135  001230  0E1A               	movlw	26
  3136  001232                     u2227:
  3137  001232  2EE8               	decfsz	wreg,f,c
  3138  001234  D7FE               	bra	u2227
  3139  001236  D000               	nop2	
  3140                           
  3141                           ;../Bibliotecas/LCD4b.c: 28:    lcd_cmd(0x01);
  3142  001238  0E01               	movlw	1
  3143  00123A  EC74  F007         	call	_lcd_cmd
  3144                           
  3145                           ;../Bibliotecas/LCD4b.c: 29:    _delay((unsigned long)((2)*(8000000/4000.0)));
  3146  00123E  0E06               	movlw	6
  3147  001240  6E08               	movwf	??_lcd_ini& (0+255),c
  3148  001242  0E30               	movlw	48
  3149  001244                     u2237:
  3150  001244  2EE8               	decfsz	wreg,f,c
  3151  001246  D7FE               	bra	u2237
  3152  001248  2E08               	decfsz	??_lcd_ini& (0+255),f,c
  3153  00124A  D7FC               	bra	u2237
  3154  00124C  D000               	nop2	
  3155                           
  3156                           ;../Bibliotecas/LCD4b.c: 30:    lcd_cmd(0x0C);
  3157  00124E  0E0C               	movlw	12
  3158  001250  EC74  F007         	call	_lcd_cmd
  3159                           
  3160                           ;../Bibliotecas/LCD4b.c: 31:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3161  001254  0E1A               	movlw	26
  3162  001256                     u2247:
  3163  001256  2EE8               	decfsz	wreg,f,c
  3164  001258  D7FE               	bra	u2247
  3165  00125A  D000               	nop2	
  3166                           
  3167                           ;../Bibliotecas/LCD4b.c: 32:    lcd_cmd(0x06);
  3168  00125C  0E06               	movlw	6
  3169  00125E  EC74  F007         	call	_lcd_cmd
  3170                           
  3171                           ;../Bibliotecas/LCD4b.c: 33:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3172  001262  0E1A               	movlw	26
  3173  001264                     u2257:
  3174  001264  2EE8               	decfsz	wreg,f,c
  3175  001266  D7FE               	bra	u2257
  3176  001268  D000               	nop2	
  3177  00126A  0012               	return		;funcret
  3178  00126C                     __end_of_lcd_ini:
  3179                           	opt callstack 0
  3180                           
  3181 ;; *************** function _lcd_escreve_bf *****************
  3182 ;; Defined at:
  3183 ;;		line 82 in file "../Bibliotecas/LCD4b.c"
  3184 ;; Parameters:    Size  Location     Type
  3185 ;;  lin             1    wreg     unsigned char 
  3186 ;;  col             1    9[COMRAM] unsigned char 
  3187 ;;  str             2   10[COMRAM] PTR unsigned char 
  3188 ;;		 -> bufferLCD(16), STR_2(15), STR_1(15), 
  3189 ;; Auto vars:     Size  Location     Type
  3190 ;;  lin             1   13[COMRAM] unsigned char 
  3191 ;;  end             1   12[COMRAM] unsigned char 
  3192 ;; Return value:  Size  Location     Type
  3193 ;;                  1    wreg      void 
  3194 ;; Registers used:
  3195 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3196 ;; Tracked objects:
  3197 ;;		On entry : 0/0
  3198 ;;		On exit  : 0/0
  3199 ;;		Unchanged: 0/0
  3200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3201 ;;      Params:         3       0       0       0       0       0       0
  3202 ;;      Locals:         2       0       0       0       0       0       0
  3203 ;;      Temps:          0       0       0       0       0       0       0
  3204 ;;      Totals:         5       0       0       0       0       0       0
  3205 ;;Total ram usage:        5 bytes
  3206 ;; Hardware stack levels used:    1
  3207 ;; Hardware stack levels required when called:    4
  3208 ;; This function calls:
  3209 ;;		_lcd_envia_byte
  3210 ;; This function is called by:
  3211 ;;		_main
  3212 ;; This function uses a non-reentrant model
  3213 ;;
  3214                           
  3215                           	psect	text18
  3216  00126C                     __ptext18:
  3217                           	opt callstack 0
  3218  00126C                     _lcd_escreve_bf:
  3219                           	opt callstack 26
  3220                           
  3221                           ;incstack = 0
  3222                           ;lcd_escreve_bf@lin stored from wreg
  3223  00126C  6E0E               	movwf	lcd_escreve_bf@lin,c
  3224                           
  3225                           ;../Bibliotecas/LCD4b.c: 82: void lcd_escreve_bf(char lin, char col, char *str);../Bibli
      +                          otecas/LCD4b.c: 83: {;../Bibliotecas/LCD4b.c: 84:     char end;;../Bibliotecas/LCD4b.c: 
      +                          87:     if (lin == 1) {
  3226  00126E  040E               	decf	lcd_escreve_bf@lin,w,c
  3227  001270  A4D8               	btfss	status,2,c
  3228  001272  D003               	goto	l1954
  3229                           
  3230                           ;../Bibliotecas/LCD4b.c: 88:         end = col + 0x80 - 1;
  3231  001274  500A               	movf	lcd_escreve_bf@col,w,c
  3232  001276  0F7F               	addlw	127
  3233  001278  D006               	goto	L3
  3234  00127A                     l1954:
  3235  00127A  0E02               	movlw	2
  3236  00127C  180E               	xorwf	lcd_escreve_bf@lin,w,c
  3237  00127E  A4D8               	btfss	status,2,c
  3238  001280  D003               	goto	l1958
  3239                           
  3240                           ;../Bibliotecas/LCD4b.c: 91:         end = col + 0xC0 - 1;
  3241  001282  500A               	movf	lcd_escreve_bf@col,w,c
  3242  001284  0FBF               	addlw	191
  3243  001286                     L3:
  3244  001286  6E0D               	movwf	lcd_escreve_bf@end,c
  3245  001288                     l1958:
  3246                           
  3247                           ;../Bibliotecas/LCD4b.c: 94:     lcd_envia_byte(0,end);
  3248  001288  C00D  F008         	movff	lcd_escreve_bf@end,lcd_envia_byte@dado
  3249  00128C  0E00               	movlw	0
  3250  00128E  EC6F  F00A         	call	_lcd_envia_byte
  3251                           
  3252                           ;../Bibliotecas/LCD4b.c: 98:     while (*str){
  3253  001292  D016               	goto	l1964
  3254  001294                     l1960:
  3255                           
  3256                           ;../Bibliotecas/LCD4b.c: 99:         lcd_envia_byte(1,*str);
  3257  001294  C00B  FFF6         	movff	lcd_escreve_bf@str,tblptrl
  3258  001298  C00C  FFF7         	movff	lcd_escreve_bf@str+1,tblptrh
  3259  00129C  6AF8               	clrf	tblptru,c
  3260  00129E  0E05               	movlw	(high __ramtop+-1)
  3261  0012A0  64F7               	cpfsgt	tblptrh,c
  3262  0012A2  D003               	bra	u1457
  3263  0012A4  0008               	tblrd		*
  3264  0012A6  50F5               	movf	tablat,w,c
  3265  0012A8  D005               	bra	u1450
  3266  0012AA                     u1457:
  3267  0012AA  CFF6 FFE1          	movff	tblptrl,fsr1l
  3268  0012AE  CFF7 FFE2          	movff	tblptrh,fsr1h
  3269  0012B2  50E7               	movf	indf1,w,c
  3270  0012B4                     u1450:
  3271  0012B4  6E08               	movwf	lcd_envia_byte@dado,c
  3272  0012B6  0E01               	movlw	1
  3273  0012B8  EC6F  F00A         	call	_lcd_envia_byte
  3274                           
  3275                           ;../Bibliotecas/LCD4b.c: 100:         str++;
  3276  0012BC  4A0B               	infsnz	lcd_escreve_bf@str,f,c
  3277  0012BE  2A0C               	incf	lcd_escreve_bf@str+1,f,c
  3278  0012C0                     l1964:
  3279                           
  3280                           ;../Bibliotecas/LCD4b.c: 98:     while (*str){
  3281  0012C0  C00B  FFF6         	movff	lcd_escreve_bf@str,tblptrl
  3282  0012C4  C00C  FFF7         	movff	lcd_escreve_bf@str+1,tblptrh
  3283  0012C8  6AF8               	clrf	tblptru,c
  3284  0012CA  0E05               	movlw	(high __ramtop+-1)
  3285  0012CC  64F7               	cpfsgt	tblptrh,c
  3286  0012CE  D003               	bra	u1467
  3287  0012D0  0008               	tblrd		*
  3288  0012D2  50F5               	movf	tablat,w,c
  3289  0012D4  D005               	bra	u1460
  3290  0012D6                     u1467:
  3291  0012D6  CFF6 FFE1          	movff	tblptrl,fsr1l
  3292  0012DA  CFF7 FFE2          	movff	tblptrh,fsr1h
  3293  0012DE  50E7               	movf	indf1,w,c
  3294  0012E0                     u1460:
  3295  0012E0  0900               	iorlw	0
  3296  0012E2  B4D8               	btfsc	status,2,c
  3297  0012E4  0012               	return	
  3298  0012E6  D7D6               	goto	l1960
  3299  0012E8                     __end_of_lcd_escreve_bf:
  3300                           	opt callstack 0
  3301                           
  3302 ;; *************** function _lcd_envia_byte *****************
  3303 ;; Defined at:
  3304 ;;		line 74 in file "../Bibliotecas/LCD4b.c"
  3305 ;; Parameters:    Size  Location     Type
  3306 ;;  nivel           1    wreg     unsigned char 
  3307 ;;  dado            1    7[COMRAM] unsigned char 
  3308 ;; Auto vars:     Size  Location     Type
  3309 ;;  nivel           1    8[COMRAM] unsigned char 
  3310 ;; Return value:  Size  Location     Type
  3311 ;;                  1    wreg      void 
  3312 ;; Registers used:
  3313 ;;		wreg, status,2, status,0, cstack
  3314 ;; Tracked objects:
  3315 ;;		On entry : 0/0
  3316 ;;		On exit  : 0/0
  3317 ;;		Unchanged: 0/0
  3318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3319 ;;      Params:         1       0       0       0       0       0       0
  3320 ;;      Locals:         1       0       0       0       0       0       0
  3321 ;;      Temps:          0       0       0       0       0       0       0
  3322 ;;      Totals:         2       0       0       0       0       0       0
  3323 ;;Total ram usage:        2 bytes
  3324 ;; Hardware stack levels used:    1
  3325 ;; Hardware stack levels required when called:    3
  3326 ;; This function calls:
  3327 ;;		_lcd_cmd
  3328 ;; This function is called by:
  3329 ;;		_lcd_escreve_bf
  3330 ;; This function uses a non-reentrant model
  3331 ;;
  3332                           
  3333                           	psect	text19
  3334  0014DE                     __ptext19:
  3335                           	opt callstack 0
  3336  0014DE                     _lcd_envia_byte:
  3337                           	opt callstack 26
  3338                           
  3339                           ;incstack = 0
  3340                           ;lcd_envia_byte@nivel stored from wreg
  3341  0014DE  6E09               	movwf	lcd_envia_byte@nivel,c
  3342                           
  3343                           ;../Bibliotecas/LCD4b.c: 74: void lcd_envia_byte(char nivel, char dado);../Bibliotecas/L
      +                          CD4b.c: 75: {;../Bibliotecas/LCD4b.c: 76:     PORTEbits.RE0 = nivel;
  3344  0014E0  B009               	btfsc	lcd_envia_byte@nivel,0,c
  3345  0014E2  D002               	bra	u1405
  3346  0014E4  9084               	bcf	3972,0,c	;volatile
  3347  0014E6  D001               	bra	u1406
  3348  0014E8                     u1405:
  3349  0014E8  8084               	bsf	3972,0,c	;volatile
  3350  0014EA                     u1406:
  3351                           
  3352                           ;../Bibliotecas/LCD4b.c: 77:     _delay((unsigned long)((100)*(8000000/4000000.0)));
  3353  0014EA  0E42               	movlw	66
  3354  0014EC                     u2267:
  3355  0014EC  2EE8               	decfsz	wreg,f,c
  3356  0014EE  D7FE               	bra	u2267
  3357  0014F0  D000               	nop2	
  3358                           
  3359                           ;../Bibliotecas/LCD4b.c: 78:     PORTEbits.RE1 = 0;
  3360  0014F2  9284               	bcf	3972,1,c	;volatile
  3361                           
  3362                           ;../Bibliotecas/LCD4b.c: 79:     lcd_cmd(dado);
  3363  0014F4  5008               	movf	lcd_envia_byte@dado,w,c
  3364  0014F6  EC74  F007         	call	_lcd_cmd
  3365  0014FA  0012               	return		;funcret
  3366  0014FC                     __end_of_lcd_envia_byte:
  3367                           	opt callstack 0
  3368                           
  3369 ;; *************** function _lcd_cmd *****************
  3370 ;; Defined at:
  3371 ;;		line 48 in file "../Bibliotecas/LCD4b.c"
  3372 ;; Parameters:    Size  Location     Type
  3373 ;;  cmd             1    wreg     unsigned char 
  3374 ;; Auto vars:     Size  Location     Type
  3375 ;;  cmd             1    6[COMRAM] unsigned char 
  3376 ;; Return value:  Size  Location     Type
  3377 ;;                  1    wreg      void 
  3378 ;; Registers used:
  3379 ;;		wreg, status,2, status,0, cstack
  3380 ;; Tracked objects:
  3381 ;;		On entry : 0/0
  3382 ;;		On exit  : 0/0
  3383 ;;		Unchanged: 0/0
  3384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3385 ;;      Params:         0       0       0       0       0       0       0
  3386 ;;      Locals:         1       0       0       0       0       0       0
  3387 ;;      Temps:          1       0       0       0       0       0       0
  3388 ;;      Totals:         2       0       0       0       0       0       0
  3389 ;;Total ram usage:        2 bytes
  3390 ;; Hardware stack levels used:    1
  3391 ;; Hardware stack levels required when called:    2
  3392 ;; This function calls:
  3393 ;;		_set_bit
  3394 ;; This function is called by:
  3395 ;;		_lcd_ini
  3396 ;;		_lcd_envia_byte
  3397 ;; This function uses a non-reentrant model
  3398 ;;
  3399                           
  3400                           	psect	text20
  3401  000EE8                     __ptext20:
  3402                           	opt callstack 0
  3403  000EE8                     _lcd_cmd:
  3404                           	opt callstack 27
  3405                           
  3406                           ;incstack = 0
  3407                           ;lcd_cmd@cmd stored from wreg
  3408  000EE8  6E07               	movwf	lcd_cmd@cmd,c
  3409                           
  3410                           ;../Bibliotecas/LCD4b.c: 48: void lcd_cmd(char cmd);../Bibliotecas/LCD4b.c: 49: {;../Bib
      +                          liotecas/LCD4b.c: 52:     PORTDbits.RD4 = set_bit(cmd,0b00010000);
  3411  000EEA  0E10               	movlw	16
  3412  000EEC  6E04               	movwf	set_bit@comp,c
  3413  000EEE  5007               	movf	lcd_cmd@cmd,w,c
  3414  000EF0  EC7E  F00A         	call	_set_bit
  3415  000EF4  6E06               	movwf	??_lcd_cmd& (0+255),c
  3416  000EF6  3A06               	swapf	??_lcd_cmd,f,c
  3417  000EF8  5083               	movf	3971,w,c	;volatile
  3418  000EFA  1806               	xorwf	??_lcd_cmd,w,c
  3419  000EFC  0BEF               	andlw	-17
  3420  000EFE  1806               	xorwf	??_lcd_cmd,w,c
  3421  000F00  6E83               	movwf	3971,c	;volatile
  3422                           
  3423                           ;../Bibliotecas/LCD4b.c: 53:     PORTDbits.RD5 = set_bit(cmd,0b00100000);
  3424  000F02  0E20               	movlw	32
  3425  000F04  6E04               	movwf	set_bit@comp,c
  3426  000F06  5007               	movf	lcd_cmd@cmd,w,c
  3427  000F08  EC7E  F00A         	call	_set_bit
  3428  000F0C  6E06               	movwf	??_lcd_cmd& (0+255),c
  3429  000F0E  3A06               	swapf	??_lcd_cmd,f,c
  3430  000F10  4606               	rlncf	??_lcd_cmd,f,c
  3431  000F12  5083               	movf	3971,w,c	;volatile
  3432  000F14  1806               	xorwf	??_lcd_cmd,w,c
  3433  000F16  0BDF               	andlw	-33
  3434  000F18  1806               	xorwf	??_lcd_cmd,w,c
  3435  000F1A  6E83               	movwf	3971,c	;volatile
  3436                           
  3437                           ;../Bibliotecas/LCD4b.c: 54:     PORTDbits.RD6 = set_bit(cmd,0b01000000);
  3438  000F1C  0E40               	movlw	64
  3439  000F1E  6E04               	movwf	set_bit@comp,c
  3440  000F20  5007               	movf	lcd_cmd@cmd,w,c
  3441  000F22  EC7E  F00A         	call	_set_bit
  3442  000F26  6E06               	movwf	??_lcd_cmd& (0+255),c
  3443  000F28  3A06               	swapf	??_lcd_cmd,f,c
  3444  000F2A  4606               	rlncf	??_lcd_cmd,f,c
  3445  000F2C  4606               	rlncf	??_lcd_cmd,f,c
  3446  000F2E  5083               	movf	3971,w,c	;volatile
  3447  000F30  1806               	xorwf	??_lcd_cmd,w,c
  3448  000F32  0BBF               	andlw	-65
  3449  000F34  1806               	xorwf	??_lcd_cmd,w,c
  3450  000F36  6E83               	movwf	3971,c	;volatile
  3451                           
  3452                           ;../Bibliotecas/LCD4b.c: 55:     PORTDbits.RD7 = set_bit(cmd,0b10000000);
  3453  000F38  0E80               	movlw	128
  3454  000F3A  6E04               	movwf	set_bit@comp,c
  3455  000F3C  5007               	movf	lcd_cmd@cmd,w,c
  3456  000F3E  EC7E  F00A         	call	_set_bit
  3457  000F42  6E06               	movwf	??_lcd_cmd& (0+255),c
  3458  000F44  3206               	rrcf	??_lcd_cmd,f,c
  3459  000F46  3206               	rrcf	??_lcd_cmd,f,c
  3460  000F48  5083               	movf	3971,w,c	;volatile
  3461  000F4A  1806               	xorwf	??_lcd_cmd,w,c
  3462  000F4C  0B7F               	andlw	-129
  3463  000F4E  1806               	xorwf	??_lcd_cmd,w,c
  3464  000F50  6E83               	movwf	3971,c	;volatile
  3465                           
  3466                           ;../Bibliotecas/LCD4b.c: 57:     PORTEbits.RE1 = 1;
  3467  000F52  8284               	bsf	3972,1,c	;volatile
  3468                           
  3469                           ;../Bibliotecas/LCD4b.c: 58:     PORTEbits.RE1 = 0;
  3470  000F54  9284               	bcf	3972,1,c	;volatile
  3471                           
  3472                           ;../Bibliotecas/LCD4b.c: 60:     _delay((unsigned long)((100)*(8000000/4000000.0)));
  3473  000F56  0E42               	movlw	66
  3474  000F58                     u2277:
  3475  000F58  2EE8               	decfsz	wreg,f,c
  3476  000F5A  D7FE               	bra	u2277
  3477  000F5C  D000               	nop2	
  3478                           
  3479                           ;../Bibliotecas/LCD4b.c: 64:     PORTDbits.RD4 = set_bit(cmd,0b00000001);
  3480  000F5E  0E01               	movlw	1
  3481  000F60  6E04               	movwf	set_bit@comp,c
  3482  000F62  5007               	movf	lcd_cmd@cmd,w,c
  3483  000F64  EC7E  F00A         	call	_set_bit
  3484  000F68  6E06               	movwf	??_lcd_cmd& (0+255),c
  3485  000F6A  3A06               	swapf	??_lcd_cmd,f,c
  3486  000F6C  5083               	movf	3971,w,c	;volatile
  3487  000F6E  1806               	xorwf	??_lcd_cmd,w,c
  3488  000F70  0BEF               	andlw	-17
  3489  000F72  1806               	xorwf	??_lcd_cmd,w,c
  3490  000F74  6E83               	movwf	3971,c	;volatile
  3491                           
  3492                           ;../Bibliotecas/LCD4b.c: 65:     PORTDbits.RD5 = set_bit(cmd,0b00000010);
  3493  000F76  0E02               	movlw	2
  3494  000F78  6E04               	movwf	set_bit@comp,c
  3495  000F7A  5007               	movf	lcd_cmd@cmd,w,c
  3496  000F7C  EC7E  F00A         	call	_set_bit
  3497  000F80  6E06               	movwf	??_lcd_cmd& (0+255),c
  3498  000F82  3A06               	swapf	??_lcd_cmd,f,c
  3499  000F84  4606               	rlncf	??_lcd_cmd,f,c
  3500  000F86  5083               	movf	3971,w,c	;volatile
  3501  000F88  1806               	xorwf	??_lcd_cmd,w,c
  3502  000F8A  0BDF               	andlw	-33
  3503  000F8C  1806               	xorwf	??_lcd_cmd,w,c
  3504  000F8E  6E83               	movwf	3971,c	;volatile
  3505                           
  3506                           ;../Bibliotecas/LCD4b.c: 66:     PORTDbits.RD6 = set_bit(cmd,0b00000100);
  3507  000F90  0E04               	movlw	4
  3508  000F92  6E04               	movwf	set_bit@comp,c
  3509  000F94  5007               	movf	lcd_cmd@cmd,w,c
  3510  000F96  EC7E  F00A         	call	_set_bit
  3511  000F9A  6E06               	movwf	??_lcd_cmd& (0+255),c
  3512  000F9C  3A06               	swapf	??_lcd_cmd,f,c
  3513  000F9E  4606               	rlncf	??_lcd_cmd,f,c
  3514  000FA0  4606               	rlncf	??_lcd_cmd,f,c
  3515  000FA2  5083               	movf	3971,w,c	;volatile
  3516  000FA4  1806               	xorwf	??_lcd_cmd,w,c
  3517  000FA6  0BBF               	andlw	-65
  3518  000FA8  1806               	xorwf	??_lcd_cmd,w,c
  3519  000FAA  6E83               	movwf	3971,c	;volatile
  3520                           
  3521                           ;../Bibliotecas/LCD4b.c: 67:     PORTDbits.RD7 = set_bit(cmd,0b00001000);
  3522  000FAC  0E08               	movlw	8
  3523  000FAE  6E04               	movwf	set_bit@comp,c
  3524  000FB0  5007               	movf	lcd_cmd@cmd,w,c
  3525  000FB2  EC7E  F00A         	call	_set_bit
  3526  000FB6  6E06               	movwf	??_lcd_cmd& (0+255),c
  3527  000FB8  3206               	rrcf	??_lcd_cmd,f,c
  3528  000FBA  3206               	rrcf	??_lcd_cmd,f,c
  3529  000FBC  5083               	movf	3971,w,c	;volatile
  3530  000FBE  1806               	xorwf	??_lcd_cmd,w,c
  3531  000FC0  0B7F               	andlw	-129
  3532  000FC2  1806               	xorwf	??_lcd_cmd,w,c
  3533  000FC4  6E83               	movwf	3971,c	;volatile
  3534                           
  3535                           ;../Bibliotecas/LCD4b.c: 69:     PORTEbits.RE1 = 1;
  3536  000FC6  8284               	bsf	3972,1,c	;volatile
  3537                           
  3538                           ;../Bibliotecas/LCD4b.c: 70:     PORTEbits.RE1 = 0;
  3539  000FC8  9284               	bcf	3972,1,c	;volatile
  3540  000FCA  0012               	return		;funcret
  3541  000FCC                     __end_of_lcd_cmd:
  3542                           	opt callstack 0
  3543                           
  3544 ;; *************** function _set_bit *****************
  3545 ;; Defined at:
  3546 ;;		line 38 in file "../Bibliotecas/LCD4b.c"
  3547 ;; Parameters:    Size  Location     Type
  3548 ;;  cmd             1    wreg     unsigned char 
  3549 ;;  comp            1    3[COMRAM] unsigned char 
  3550 ;; Auto vars:     Size  Location     Type
  3551 ;;  cmd             1    4[COMRAM] unsigned char 
  3552 ;; Return value:  Size  Location     Type
  3553 ;;                  1    wreg      unsigned char 
  3554 ;; Registers used:
  3555 ;;		wreg, status,2, status,0
  3556 ;; Tracked objects:
  3557 ;;		On entry : 0/0
  3558 ;;		On exit  : 0/0
  3559 ;;		Unchanged: 0/0
  3560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3561 ;;      Params:         1       0       0       0       0       0       0
  3562 ;;      Locals:         1       0       0       0       0       0       0
  3563 ;;      Temps:          0       0       0       0       0       0       0
  3564 ;;      Totals:         2       0       0       0       0       0       0
  3565 ;;Total ram usage:        2 bytes
  3566 ;; Hardware stack levels used:    1
  3567 ;; Hardware stack levels required when called:    1
  3568 ;; This function calls:
  3569 ;;		Nothing
  3570 ;; This function is called by:
  3571 ;;		_lcd_cmd
  3572 ;; This function uses a non-reentrant model
  3573 ;;
  3574                           
  3575                           	psect	text21
  3576  0014FC                     __ptext21:
  3577                           	opt callstack 0
  3578  0014FC                     _set_bit:
  3579                           	opt callstack 27
  3580                           
  3581                           ;incstack = 0
  3582                           ;set_bit@cmd stored from wreg
  3583  0014FC  6E05               	movwf	set_bit@cmd,c
  3584                           
  3585                           ;../Bibliotecas/LCD4b.c: 38: char set_bit(char cmd, char comp);../Bibliotecas/LCD4b.c: 3
      +                          9: {;../Bibliotecas/LCD4b.c: 41:     if ((cmd & comp) >= 1)
  3586  0014FE  5005               	movf	set_bit@cmd,w,c
  3587  001500  1404               	andwf	set_bit@comp,w,c
  3588  001502  0900               	iorlw	0
  3589  001504  B4D8               	btfsc	status,2,c
  3590  001506  D002               	goto	l1670
  3591                           
  3592                           ;../Bibliotecas/LCD4b.c: 42:         return 1;
  3593  001508  0E01               	movlw	1
  3594  00150A  0012               	return	
  3595  00150C                     l1670:
  3596                           
  3597                           ;../Bibliotecas/LCD4b.c: 44:         return 0;
  3598  00150C  0E00               	movlw	0
  3599  00150E  0012               	return		;funcret
  3600  001510                     __end_of_set_bit:
  3601                           	opt callstack 0
  3602                           
  3603 ;; *************** function _int_TIMERS *****************
  3604 ;; Defined at:
  3605 ;;		line 12 in file "EX16.c"
  3606 ;; Parameters:    Size  Location     Type
  3607 ;;		None
  3608 ;; Auto vars:     Size  Location     Type
  3609 ;;		None
  3610 ;; Return value:  Size  Location     Type
  3611 ;;                  1    wreg      void 
  3612 ;; Registers used:
  3613 ;;		wreg, status,2, status,0
  3614 ;; Tracked objects:
  3615 ;;		On entry : 0/0
  3616 ;;		On exit  : 0/0
  3617 ;;		Unchanged: 0/0
  3618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3619 ;;      Params:         0       0       0       0       0       0       0
  3620 ;;      Locals:         0       0       0       0       0       0       0
  3621 ;;      Temps:          3       0       0       0       0       0       0
  3622 ;;      Totals:         3       0       0       0       0       0       0
  3623 ;;Total ram usage:        3 bytes
  3624 ;; Hardware stack levels used:    1
  3625 ;; This function calls:
  3626 ;;		Nothing
  3627 ;; This function is called by:
  3628 ;;		Interrupt level 1
  3629 ;; This function uses a non-reentrant model
  3630 ;;
  3631                           
  3632                           	psect	intcodelo
  3633  000018                     __pintcodelo:
  3634                           	opt callstack 0
  3635  000018                     _int_TIMERS:
  3636                           	opt callstack 22
  3637                           
  3638                           ;incstack = 0
  3639  000018  8075               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  3640  00001A  CFD8 F001          	movff	status,??_int_TIMERS
  3641  00001E  CFE8 F002          	movff	wreg,??_int_TIMERS+1
  3642  000022  CFE0 F003          	movff	bsr,??_int_TIMERS+2
  3643                           
  3644                           ;EX16.c: 14:     if (TMR0IF)
  3645  000026  A4F2               	btfss	4082,2,c	;volatile
  3646  000028  D021               	goto	i1l1994
  3647                           
  3648                           ;EX16.c: 15:     {;EX16.c: 16:         T0_500ms++;
  3649  00002A  4A73               	infsnz	_T0_500ms,f,c
  3650  00002C  2A74               	incf	_T0_500ms+1,f,c
  3651                           
  3652                           ;EX16.c: 17:         if (T0_500ms>=20)
  3653  00002E  BE74               	btfsc	_T0_500ms+1,7,c
  3654  000030  D018               	goto	i1l48
  3655  000032  5074               	movf	_T0_500ms+1,w,c
  3656  000034  E104               	bnz	i1u149_20
  3657  000036  0E14               	movlw	20
  3658  000038  5C73               	subwf	_T0_500ms,w,c
  3659  00003A  A0D8               	btfss	status,0,c
  3660  00003C  D012               	goto	i1l48
  3661  00003E                     i1u149_20:
  3662                           
  3663                           ;EX16.c: 18:         {;EX16.c: 19:             T0_500ms=0;
  3664  00003E  0E00               	movlw	0
  3665  000040  6E74               	movwf	_T0_500ms+1,c
  3666  000042  0E00               	movlw	0
  3667  000044  6E73               	movwf	_T0_500ms,c
  3668                           
  3669                           ;EX16.c: 20:             conta_t0++;
  3670  000046  4A71               	infsnz	_conta_t0,f,c
  3671  000048  2A72               	incf	_conta_t0+1,f,c
  3672                           
  3673                           ;EX16.c: 21:             if (conta_t0>=100)
  3674  00004A  BE72               	btfsc	_conta_t0+1,7,c
  3675  00004C  D00A               	goto	i1l48
  3676  00004E  5072               	movf	_conta_t0+1,w,c
  3677  000050  E104               	bnz	i1u150_20
  3678  000052  0E64               	movlw	100
  3679  000054  5C71               	subwf	_conta_t0,w,c
  3680  000056  A0D8               	btfss	status,0,c
  3681  000058  D004               	goto	i1l48
  3682  00005A                     i1u150_20:
  3683                           
  3684                           ;EX16.c: 22:                 conta_t0=0;
  3685  00005A  0E00               	movlw	0
  3686  00005C  6E72               	movwf	_conta_t0+1,c
  3687  00005E  0E00               	movlw	0
  3688  000060  6E71               	movwf	_conta_t0,c
  3689  000062                     i1l48:
  3690                           
  3691                           ;EX16.c: 25:      TMR0 = 61;
  3692  000062  0E00               	movlw	0
  3693  000064  6ED7               	movwf	4055,c	;volatile
  3694  000066  0E3D               	movlw	61
  3695  000068  6ED6               	movwf	4054,c	;volatile
  3696                           
  3697                           ;EX16.c: 26:      TMR0IF = 0;
  3698  00006A  94F2               	bcf	4082,2,c	;volatile
  3699  00006C                     i1l1994:
  3700                           
  3701                           ;EX16.c: 29:     if (TMR1IF)
  3702  00006C  A09E               	btfss	3998,0,c	;volatile
  3703  00006E  D022               	goto	i1l53
  3704                           
  3705                           ;EX16.c: 30:     {;EX16.c: 31:         T1_1000ms++;
  3706  000070  0100               	movlb	0	; () banked
  3707  000072  4B82               	infsnz	_T1_1000ms& (0+255),f,b
  3708  000074  2B83               	incf	(_T1_1000ms+1)& (0+255),f,b
  3709                           
  3710                           ; BSR set to: 0
  3711                           ;EX16.c: 32:         if (T1_1000ms>=4)
  3712  000076  BF83               	btfsc	(_T1_1000ms+1)& (0+255),7,b
  3713  000078  D018               	goto	i1l51
  3714  00007A  5183               	movf	(_T1_1000ms+1)& (0+255),w,b
  3715  00007C  E104               	bnz	i1u152_20
  3716  00007E  0E04               	movlw	4
  3717  000080  5D82               	subwf	_T1_1000ms& (0+255),w,b
  3718  000082  A0D8               	btfss	status,0,c
  3719  000084  D012               	goto	i1l51
  3720  000086                     i1u152_20:
  3721                           
  3722                           ; BSR set to: 0
  3723                           ;EX16.c: 33:         {;EX16.c: 34:             T1_1000ms=0;
  3724  000086  0E00               	movlw	0
  3725  000088  6F83               	movwf	(_T1_1000ms+1)& (0+255),b
  3726  00008A  0E00               	movlw	0
  3727  00008C  6F82               	movwf	_T1_1000ms& (0+255),b
  3728                           
  3729                           ; BSR set to: 0
  3730                           ;EX16.c: 35:             conta_t1++;
  3731  00008E  4A6F               	infsnz	_conta_t1,f,c
  3732  000090  2A70               	incf	_conta_t1+1,f,c
  3733                           
  3734                           ; BSR set to: 0
  3735                           ;EX16.c: 36:             if (conta_t1>=100)
  3736  000092  BE70               	btfsc	_conta_t1+1,7,c
  3737  000094  D00A               	goto	i1l51
  3738  000096  5070               	movf	_conta_t1+1,w,c
  3739  000098  E104               	bnz	i1u153_20
  3740  00009A  0E64               	movlw	100
  3741  00009C  5C6F               	subwf	_conta_t1,w,c
  3742  00009E  A0D8               	btfss	status,0,c
  3743  0000A0  D004               	goto	i1l51
  3744  0000A2                     i1u153_20:
  3745                           
  3746                           ; BSR set to: 0
  3747                           ;EX16.c: 37:                 conta_t1=0;
  3748  0000A2  0E00               	movlw	0
  3749  0000A4  6E70               	movwf	_conta_t1+1,c
  3750  0000A6  0E00               	movlw	0
  3751  0000A8  6E6F               	movwf	_conta_t1,c
  3752  0000AA                     i1l51:
  3753                           
  3754                           ; BSR set to: 0
  3755                           ;EX16.c: 40:      TMR1H = 0x0B;
  3756  0000AA  0E0B               	movlw	11
  3757  0000AC  6ECF               	movwf	4047,c	;volatile
  3758                           
  3759                           ;EX16.c: 41:      TMR1L = 0xDC;
  3760  0000AE  0EDC               	movlw	220
  3761  0000B0  6ECE               	movwf	4046,c	;volatile
  3762                           
  3763                           ; BSR set to: 0
  3764                           ;EX16.c: 42:      TMR1IF = 0;
  3765  0000B2  909E               	bcf	3998,0,c	;volatile
  3766  0000B4                     i1l53:
  3767  0000B4  C003  FFE0         	movff	??_int_TIMERS+2,bsr
  3768  0000B8  C002  FFE8         	movff	??_int_TIMERS+1,wreg
  3769  0000BC  C001  FFD8         	movff	??_int_TIMERS,status
  3770  0000C0  9075               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  3771  0000C2  0010               	retfie	
  3772  0000C4                     __end_of_int_TIMERS:
  3773                           	opt callstack 0
  3774                           
  3775                           	psect	rparam
  3776  0000                     
  3777                           	psect	temp
  3778  000075                     btemp:
  3779                           	opt callstack 0
  3780  000075                     	ds	1
  3781  0000                     int$flags	set	btemp
  3782  0000                     wtemp8	set	btemp+1
  3783  0000                     ttemp5	set	btemp+1
  3784  0000                     ttemp6	set	btemp+4
  3785  0000                     ttemp7	set	btemp+8
  3786                           tosu	equ	0xFFF
  3787                           tosh	equ	0xFFE
  3788                           tosl	equ	0xFFD
  3789                           stkptr	equ	0xFFC
  3790                           pclatu	equ	0xFFB
  3791                           pclath	equ	0xFFA
  3792                           pcl	equ	0xFF9
  3793                           tblptru	equ	0xFF8
  3794                           tblptrh	equ	0xFF7
  3795                           tblptrl	equ	0xFF6
  3796                           tablat	equ	0xFF5
  3797                           prodh	equ	0xFF4
  3798                           prodl	equ	0xFF3
  3799                           indf0	equ	0xFEF
  3800                           postinc0	equ	0xFEE
  3801                           postdec0	equ	0xFED
  3802                           preinc0	equ	0xFEC
  3803                           plusw0	equ	0xFEB
  3804                           fsr0h	equ	0xFEA
  3805                           fsr0l	equ	0xFE9
  3806                           wreg	equ	0xFE8
  3807                           indf1	equ	0xFE7
  3808                           postinc1	equ	0xFE6
  3809                           postdec1	equ	0xFE5
  3810                           preinc1	equ	0xFE4
  3811                           plusw1	equ	0xFE3
  3812                           fsr1h	equ	0xFE2
  3813                           fsr1l	equ	0xFE1
  3814                           bsr	equ	0xFE0
  3815                           indf2	equ	0xFDF
  3816                           postinc2	equ	0xFDE
  3817                           postdec2	equ	0xFDD
  3818                           preinc2	equ	0xFDC
  3819                           plusw2	equ	0xFDB
  3820                           fsr2h	equ	0xFDA
  3821                           fsr2l	equ	0xFD9
  3822                           status	equ	0xFD8


Data Sizes:
    Strings     35
    Constant    0
    Data        0
    BSS         64
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    104     116
    BANK0           128     10      62
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_4(CODE[5]), STR_3(CODE[5]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    S1021_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_4(CODE[5]), STR_3(CODE[5]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_4(CODE[5]), STR_3(CODE[5]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 5
		 -> STR_4(CODE[5]), STR_3(CODE[5]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    lcd_escreve_bf@str	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), STR_2(CODE[15]), STR_1(CODE[15]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _atoi->_isspace
    _lcd_ini->_lcd_cmd
    _lcd_escreve_bf->_lcd_envia_byte
    _lcd_envia_byte->_lcd_cmd
    _lcd_cmd->_set_bit

Critical Paths under _int_TIMERS in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _int_TIMERS in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _int_TIMERS in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _int_TIMERS in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _int_TIMERS in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _int_TIMERS in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _int_TIMERS in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   13696
                                            102 COMRAM     2     2      0
                     _lcd_escreve_bf
                            _lcd_ini
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             16    10      6   11033
                                             96 COMRAM     6     0      6
                                              0 BANK0     10    10      0
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6   10361
                                             88 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           46    40      6    9831
                                             66 COMRAM    22    16      6
                               _atoi
                               _dtoa
                              _fputc
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                36    26     10    5683
                                             30 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    3417
                                             19 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     220
                                              3 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1537
                                             12 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4    1037
                                              3 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     183
                                             21 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     613
                                              3 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     625
                                              3 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (4) _atoi                                                15    13      2    1615
                                             10 COMRAM    15    13      2
                             ___wmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (5) _isspace                                              7     5      2     259
                                              3 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              6     4      2     281
                                              3 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     512
                                              3 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _lcd_ini                                              2     2      0     874
                                              7 COMRAM     2     2      0
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (1) _lcd_escreve_bf                                       5     2      3    1789
                                              9 COMRAM     5     2      3
                     _lcd_envia_byte
 ---------------------------------------------------------------------------------
 (2) _lcd_envia_byte                                       2     1      1    1024
                                              7 COMRAM     2     1      1
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (2) _lcd_cmd                                              2     2      0     828
                                              5 COMRAM     2     2      0
                            _set_bit
 ---------------------------------------------------------------------------------
 (3) _set_bit                                              2     1      1     652
                                              3 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _int_TIMERS                                           3     3      0       0
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _lcd_escreve_bf
     _lcd_envia_byte
       _lcd_cmd
         _set_bit
   _lcd_ini
     _lcd_cmd
       _set_bit
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _atoi
           ___wmul
           _isdigit
           _isspace
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
                 _putch
             _strlen
         _fputc
           _putch
         _isdigit

 _int_TIMERS (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      A      3E       5       48.4%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     68      74       1       92.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      B2      15        0.0%
DATA                 0      0      B2       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Thu Apr 04 16:02:42 2019

                     bsr 000FE0      ___wmul@multiplicand 0006              __CFG_BORV$3 000000  
           __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000  
           __CFG_CP3$OFF 000000              __CFG_OSC$HS 000000                      l131 1174  
                    l142 096C                      l144 0974                      l907 0DBA  
                    l876 142E             __CFG_CPB$OFF 000000             __CFG_CPD$OFF 000000  
                    _abs 1406                      _pad 1146                      wreg 000FE8  
           __CFG_LVP$OFF 000000             __CFG_WDT$OFF 000000                     ?_abs 0016  
                   l2100 1476                     l2110 115E                     l2120 1196  
                   l2210 0E8A                     l2202 0E2E                     l2114 116C  
                   l2300 0C9A                     l2204 0E42                     l2124 11C2  
                   l2116 117E                     l2230 13C6                     l2150 0B68  
                   l2214 0EA0                     l2320 0D26                     l2080 10BE  
                   l2240 0950                     l2314 0CF0                     l2162 0BB6  
                   l2218 0EC6                     l2090 13D8                     l2324 0D5A  
                   l2316 0CF8                     l2308 0CE0                     l2164 0BCA  
                   l2156 0B90                     l2412 08A4                     l2318 0CFE  
                   l2182 0C62                     l2174 0C26                     l2094 13EE  
                   l2254 098E                     l2406 0868                     l2350 066C  
                   l2422 08C6                     l2416 08AE                     l2360 0684  
                   l2352 067C                     l2440 1322                     l2178 0C3C  
                   l2194 0DF0                     l2098 1472                     l2258 099E  
                   l2292 0B12                     l2268 0A96                     l2372 0696  
                   l2364 0688                     l2356 0680                     l2348 066A  
                   l1670 150C                     l2198 0E14                     l2390 0770  
                   l2374 06D8                     l2438 12FC                     l2288 0AFA  
                   l2368 068C                     l2298 0C96                     l2386 0744  
                   l2466 101A                     l2388 0762                     l1960 1294  
                   l1928 1200                     l1954 127A                     l1964 12C0  
                   l1958 1288                     ?_pad 0014                     STR_1 0601  
                   STR_2 0610                     STR_3 061F                     STR_4 061F  
                   u2010 0D8A                     u2020 0D8C                     u2100 07A8  
                   u2110 07AA                     u2120 07B6                     u2140 07EA  
                   u1405 14E8                     u1406 14EA                     u2207 120C  
                   u2217 1224                     u1450 12B4                     u2170 1038  
                   u2227 1232                     u1460 12E0                     u2237 1244  
                   u1701 0B96                     u2247 1256                     u1720 0BCE  
                   u1560 10B6                     u2176 103A                     u1457 12AA  
                   u2257 1264                     u1650 1414                     u2267 14EC  
                   u1467 12D6                     u2187 1024                     u1660 1460  
                   u1820 13C2                     u1580 10FE                     u1900 0AA4  
                   u2277 0F58                     u2197 11F2                     u1670 1462  
                   u1830 0922                     u1920 0AC6                     u1840 0924  
                   u1921 0AC4                     u1930 0AD4                     u1780 0E46  
                   u1940 0AD8                     u1870 0962                     u1960 0AE4  
                   u1890 0988                     u1990 0CDC                     i1l51 00AA  
                   i1l53 00B4                     i1l48 0062                     _TMR0 000FD6  
           __CFG_PWRT$ON 000000                     abs@a 0016                     _dbuf 0084  
                   _atoi 0C84                     _main 0FCC                     _dtoa 08FA  
                   _prec 006B                     _nout 0080                     pad@i 001B  
                   pad@p 0018                     fsr1h 000FE2                     fsr2h 000FDA  
                   indf1 000FE7                     indf2 000FDF                     fsr1l 000FE1  
                   pad@w 001D                     fsr2l 000FD9                     btemp 0075  
                   prodh 000FF4                     prodl 000FF3                     start 00C4  
          __CFG_IESO$OFF 000000            __CFG_MCLRE$ON 000000             ___param_bank 000000  
                  ??_abs 0018                    ??_pad 001A          __end_of___aodiv 0C84  
                  ?_atoi 000B                    ?_main 0001                    ?_dtoa 001F  
        __end_of___aomod 0EE8                    _T0CON 000FD5                    _T1CON 000FCD  
           vfpfcnvrt@fmt 0045                    _TMR1H 000FCF                    _TMR1L 000FCE  
                  _PORTD 000F83                    _TRISD 000F95            __CFG_WRT0$OFF 000000  
          __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000  
         __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000  
         __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000          __end_of_lcd_cmd 0FCC  
        __end_of_lcd_ini 126C            __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000  
          __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000                    _flags 006D  
                  _fputc 10A6                    _fputs 13CE          __end_of_isdigit 1468  
                  atoi@n 0018                    pad@fp 0014                    atoi@s 000B  
                  _width 0069                    _putch 1510                    dtoa@d 0021  
                  dtoa@i 0041                    dtoa@n 0039                    dtoa@p 0033  
                  dtoa@s 0037                    dtoa@w 0035          __end_of_isspace 13CE  
         __CFG_BOREN$OFF 000000          __end_of_set_bit 1510                    tablat 000FF5  
                  ttemp5 0076                    ttemp6 0079                    ttemp7 007D  
                  status 000FD8                    wtemp8 0076          __end_of_sprintf 1390  
        __initialization 1492             __end_of_atoi 0DC4             __end_of_main 10A6  
           __end_of_dtoa 0B3C                   ??_atoi 000D                   ??_main 0067  
                 ??_dtoa 0029            __activetblptr 000002                   _ADCON1 000FC1  
                 ?_fputc 0004                   ?_fputs 000D                   ?_putch 0001  
                 i1l1994 006C                   _INTCON 000FF2            vfpfcnvrt@done 0055  
                 _TMR0IF 007F92                   _TMR1IF 007CF0           __CFG_XINST$OFF 000000  
           vfprintf@cfmt 005F                ??___aodiv 0014                ??___aomod 0014  
                 ___wmul 14B8           __CFG_STVREN$ON 000000         ??_lcd_escreve_bf 000D  
                 clear_0 1498                   clear_1 14A4         ??_lcd_envia_byte 0009  
                 pad@buf 0016                ??_lcd_cmd 0006                   dtoa@fp 001F  
              ??_lcd_ini 0008                   _strlen 1468                   fputc@c 0004  
                 fputs@c 0011                   fputs@i 0012                   fputs@s 000D  
              ??_isdigit 0006             __mediumconst 0000                ??_isspace 0006  
              ??_set_bit 0005                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8                   putch@c 0001         __end_of_vfprintf 133E  
              ??_sprintf 0067               __accesstop 0080  __end_of__initialization 14AA  
        __CFG_PBADEN$OFF 000000            ___rparam_used 000001           __pcstackCOMRAM 0001  
          __end_of_fputc 1146            __end_of_fputs 1406            __end_of_putch 1512  
                ??_fputc 0008                  ??_fputs 0011                  ??_putch 0004  
             __pbssBANK0 0080                  ?___wmul 0004                  ?_strlen 0004  
     __size_of_vfpfcnvrt 02D4               _int_TIMERS 0018                  __Hparam 0000  
                __Lparam 0000                  ___aodiv 0B3C                  ___aomod 0DC4  
        __size_of___wmul 0026                ?_vfprintf 0059              set_bit@comp 0004  
           __psmallconst 0600                  __pcinit 1492                  __ramtop 0600  
                __ptext0 0FCC                _T1_1000ms 0082                  __ptext1 133E  
                __ptext2 12E8                  __ptext3 0626                  __ptext4 08FA  
                __ptext5 1146                  __ptext6 1468                  __ptext7 13CE  
                __ptext8 10A6                  __ptext9 1510                  _lcd_cmd 0EE8  
                _lcd_ini 11DC          __size_of_strlen 002A             __size_of_abs 0032  
           __size_of_pad 0096                  _isdigit 1438                  _isspace 1390  
                _set_bit 14FC                  atoi@neg 0011                  _sprintf 133E  
   end_of_initialization 14AA       lcd_envia_byte@dado 0008                  fputc@fp 0006  
          __Lmediumconst 0000                  fputs@fp 000F        __end_of_vfpfcnvrt 08FA  
                postdec2 000FDD                  postinc0 000FEE                  postinc1 000FE6  
                postinc2 000FDE               ??_vfprintf 005F                  strlen@a 0006  
                strlen@s 0004                _PORTBbits 000F81                _PORTDbits 000F83  
              _PORTEbits 000F84                _TRISBbits 000F93                _TRISEbits 000F96  
             lcd_cmd@cmd 0007              ?_int_TIMERS 0001              vfpfcnvrt@ap 0047  
            vfpfcnvrt@fp 0043              vfpfcnvrt@ll 004D           __end_of___wmul 14DE  
         __end_of_strlen 1492      start_initialization 1492              __end_of_abs 1438  
            __end_of_pad 11DC              vfprintf@fmt 005B                 ??___wmul 0008  
       __CFG_LPT1OSC$OFF 000000                 ??_strlen 0006              __pbssCOMRAM 0069  
    __size_of_int_TIMERS 00AC            __pcstackBANK0 00B4         ___aodiv@dividend 0004  
__size_of_lcd_escreve_bf 007C  __size_of_lcd_envia_byte 001E                _atoi$1000 0017  
              _atoi$1001 0015        __CFG_CCP2MX$PORTC 000000                 ?___aodiv 0004  
               ?___aomod 0004        lcd_escreve_bf@end 000D        lcd_escreve_bf@col 000A  
      lcd_escreve_bf@lin 000E         ___aodiv@quotient 0016        lcd_escreve_bf@str 000B  
              _bufferLCD 00A4              __pintcodelo 0018                 ?_lcd_cmd 0001  
      __size_of_vfprintf 0056                 ?_lcd_ini 0001              __smallconst 0600  
               ?_isdigit 0004                 ?_isspace 0004                 ?_set_bit 0004  
             set_bit@cmd 0005                 ?_sprintf 0061           __size_of_fputc 00A0  
         __size_of_fputs 0038           __size_of_putch 0002                 _T0_500ms 0073  
         ___wmul@product 0008                 _PIE1bits 000F9D                 i1u150_20 005A  
               i1u152_20 0086                 i1u153_20 00A2                 i1u149_20 003E  
       __CFG_WDTPS$32768 000000                _vfpfcnvrt 0626        ___wmul@multiplier 0004  
           _isspace$1017 000A             ??_int_TIMERS 0001                 __Hrparam 0000  
             vfprintf@ap 005D                 __Lrparam 0000               vfprintf@fp 0059  
       __size_of___aodiv 0148         __size_of___aomod 0124               ?_vfpfcnvrt 0043  
        ___aodiv@divisor 000C          ___aodiv@counter 0014         __size_of_lcd_cmd 00E4  
       __size_of_lcd_ini 0090               sprintf@fmt 0063                 _atoi$999 0013  
       __size_of_isdigit 0030                 _dtoa$527 0031       __end_of_int_TIMERS 00C4  
         _lcd_escreve_bf 126C         __size_of_isspace 003E                 __ptext10 1406  
               __ptext11 0DC4                 __ptext20 0EE8                 __ptext12 0B3C  
               __ptext21 14FC                 __ptext13 0C84                 __ptext14 1390  
               __ptext15 1438                 __ptext16 14B8                 __ptext17 11DC  
               __ptext18 126C                 __ptext19 14DE         __size_of_set_bit 0014  
         _lcd_envia_byte 14DE                 _conta_t0 0071                 _conta_t1 006F  
       __size_of_sprintf 0052            __size_of_atoi 0140            __size_of_main 00DA  
          __size_of_dtoa 0242                 int$flags 0075                 lcd_ini@i 0009  
               _vfprintf 12E8         ___aomod@dividend 0004   __end_of_lcd_escreve_bf 12E8  
 __end_of_lcd_envia_byte 14FC      lcd_envia_byte@nivel 0009                 isdigit@c 0004  
               intlevel1 0000                sprintf@ap 00B6                 isspace@c 0004  
        ___aomod@divisor 000C              ??_vfpfcnvrt 0049            _vfpfcnvrt$542 0057  
        ___aomod@counter 0014                 sprintf@f 00B8                 sprintf@s 0061  
        ?_lcd_escreve_bf 000A          ?_lcd_envia_byte 0008             ___aodiv@sign 0015  
           ___aomod@sign 0015  
