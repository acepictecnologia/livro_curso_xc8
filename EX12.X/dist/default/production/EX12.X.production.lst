

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Thu Apr 04 14:25:24 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    34                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    35                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    36                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    37                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    38  0000                     
    39                           ; Version 2.05
    40                           ; Generated 20/12/2018 GMT
    41                           ; 
    42                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    43                           ; All rights reserved.
    44                           ; 
    45                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    46                           ; 
    47                           ; Redistribution and use in source and binary forms, with or without modification, are
    48                           ; permitted provided that the following conditions are met:
    49                           ; 
    50                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    51                           ;        conditions and the following disclaimer.
    52                           ; 
    53                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    54                           ;        of conditions and the following disclaimer in the documentation and/or other
    55                           ;        materials provided with the distribution.
    56                           ; 
    57                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    58                           ;        software without specific prior written permission.
    59                           ; 
    60                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    61                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    62                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    63                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    64                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    65                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    66                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    67                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    68                           ; 
    69                           ; 
    70                           ; Code-generator required, PIC18F4520 Definitions
    71                           ; 
    72                           ; SFR Addresses
    73  0000                     _PORTDbits	set	3971
    74  0000                     _PORTEbits	set	3972
    75  0000                     _PORTD	set	3971
    76  0000                     _TRISEbits	set	3990
    77  0000                     _TRISD	set	3989
    78  0000                     _INTCON2	set	4081
    79  0000                     _INTCON	set	4082
    80  0000                     _ADCON1	set	4033
    81  0000                     _TRISB	set	3987
    82  0000                     _PORTB	set	3969
    83  0000                     _PORTBbits	set	3969
    84  0000                     _INT0IF	set	32657
    85                           
    86                           	psect	smallconst
    87  000600                     __psmallconst:
    88                           	opt callstack 0
    89  000600  00                 	db	0
    90  000601                     STR_2:
    91  000601  43                 	db	67	;'C'
    92  000602  4F                 	db	79	;'O'
    93  000603  4E                 	db	78	;'N'
    94  000604  54                 	db	84	;'T'
    95  000605  41                 	db	65	;'A'
    96  000606  47                 	db	71	;'G'
    97  000607  45                 	db	69	;'E'
    98  000608  4D                 	db	77	;'M'
    99  000609  3A                 	db	58	;':'
   100  00060A  20                 	db	32
   101  00060B  30                 	db	48	;'0'
   102  00060C  30                 	db	48	;'0'
   103  00060D  00                 	db	0
   104  00060E                     STR_1:
   105  00060E  49                 	db	73	;'I'
   106  00060F  4E                 	db	78	;'N'
   107  000610  54                 	db	84	;'T'
   108  000611  2E                 	db	46
   109  000612  20                 	db	32
   110  000613  45                 	db	69	;'E'
   111  000614  58                 	db	88	;'X'
   112  000615  54                 	db	84	;'T'
   113  000616  45                 	db	69	;'E'
   114  000617  52                 	db	82	;'R'
   115  000618  4E                 	db	78	;'N'
   116  000619  41                 	db	65	;'A'
   117  00061A  00                 	db	0
   118  00061B                     STR_3:
   119  00061B  25                 	db	37
   120  00061C  30                 	db	48	;'0'
   121  00061D  32                 	db	50	;'2'
   122  00061E  64                 	db	100	;'d'
   123  00061F  00                 	db	0
   124                           
   125                           ; #config settings
   126  000620  00                 	db	0	; dummy byte at the end
   127  0000                     
   128                           	psect	cinit
   129  0014AE                     __pcinit:
   130                           	opt callstack 0
   131  0014AE                     start_initialization:
   132                           	opt callstack 0
   133  0014AE                     __initialization:
   134                           	opt callstack 0
   135                           
   136                           ; Clear objects allocated to BANK0 (48 bytes)
   137  0014AE  EE00  F080         	lfsr	0,__pbssBANK0
   138  0014B2  0E30               	movlw	48
   139  0014B4                     clear_0:
   140  0014B4  6AEE               	clrf	postinc0,c
   141  0014B6  06E8               	decf	wreg,f,c
   142  0014B8  E1FD               	bnz	clear_0
   143                           
   144                           ; Clear objects allocated to COMRAM (12 bytes)
   145  0014BA  EE00  F070         	lfsr	0,__pbssCOMRAM
   146  0014BE  0E0C               	movlw	12
   147  0014C0                     clear_1:
   148  0014C0  6AEE               	clrf	postinc0,c
   149  0014C2  06E8               	decf	wreg,f,c
   150  0014C4  E1FD               	bnz	clear_1
   151  0014C6                     end_of_initialization:
   152                           	opt callstack 0
   153  0014C6                     __end_of__initialization:
   154                           	opt callstack 0
   155  0014C6  907C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   156  0014C8  927C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   157  0014CA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   158  0014CC  6EF8               	movwf	tblptru,c
   159  0014CE  0100               	movlb	0
   160  0014D0  EFC7  F008         	goto	_main	;jump to C main() function
   161                           
   162                           	psect	bssCOMRAM
   163  000070                     __pbssCOMRAM:
   164                           	opt callstack 0
   165  000070                     _nout:
   166                           	opt callstack 0
   167  000070                     	ds	2
   168  000072                     _width:
   169                           	opt callstack 0
   170  000072                     	ds	2
   171  000074                     _prec:
   172                           	opt callstack 0
   173  000074                     	ds	2
   174  000076                     _flags:
   175                           	opt callstack 0
   176  000076                     	ds	2
   177  000078                     _controle:
   178                           	opt callstack 0
   179  000078                     	ds	2
   180  00007A                     _conta:
   181                           	opt callstack 0
   182  00007A                     	ds	2
   183                           
   184                           	psect	bssBANK0
   185  000080                     __pbssBANK0:
   186                           	opt callstack 0
   187  000080                     _dbuf:
   188                           	opt callstack 0
   189  000080                     	ds	32
   190  0000A0                     _bufferLCD:
   191                           	opt callstack 0
   192  0000A0                     	ds	16
   193                           
   194                           	psect	cstackBANK0
   195  0000B0                     __pcstackBANK0:
   196                           	opt callstack 0
   197  0000B0                     ??_main:
   198                           
   199                           ; 1 bytes @ 0x0
   200  0000B0                     	ds	2
   201                           
   202                           	psect	cstackCOMRAM
   203  000001                     __pcstackCOMRAM:
   204                           	opt callstack 0
   205  000001                     ??_int_EXT:
   206  000001                     
   207                           ; 1 bytes @ 0x0
   208  000001                     	ds	2
   209  000003                     ?_strlen:
   210                           	opt callstack 0
   211  000003                     ?_isdigit:
   212                           	opt callstack 0
   213  000003                     ?_isspace:
   214                           	opt callstack 0
   215  000003                     ?___wmul:
   216                           	opt callstack 0
   217  000003                     ?___aodiv:
   218                           	opt callstack 0
   219  000003                     ?___aomod:
   220                           	opt callstack 0
   221  000003                     set_bit@comp:
   222                           	opt callstack 0
   223  000003                     ___wmul@multiplier:
   224                           	opt callstack 0
   225  000003                     isdigit@c:
   226                           	opt callstack 0
   227  000003                     isspace@c:
   228                           	opt callstack 0
   229  000003                     fputc@c:
   230                           	opt callstack 0
   231  000003                     strlen@s:
   232                           	opt callstack 0
   233  000003                     ___aodiv@dividend:
   234                           	opt callstack 0
   235  000003                     ___aomod@dividend:
   236                           	opt callstack 0
   237                           
   238                           ; 8 bytes @ 0x2
   239  000003                     	ds	1
   240  000004                     set_bit@cmd:
   241                           	opt callstack 0
   242                           
   243                           ; 1 bytes @ 0x3
   244  000004                     	ds	1
   245  000005                     ??_lcd_cmd:
   246  000005                     ??_isdigit:
   247  000005                     ??_isspace:
   248  000005                     ___wmul@multiplicand:
   249                           	opt callstack 0
   250  000005                     fputc@fp:
   251                           	opt callstack 0
   252  000005                     strlen@a:
   253                           	opt callstack 0
   254                           
   255                           ; 2 bytes @ 0x4
   256  000005                     	ds	1
   257  000006                     lcd_cmd@cmd:
   258                           	opt callstack 0
   259                           
   260                           ; 1 bytes @ 0x5
   261  000006                     	ds	1
   262  000007                     ??_lcd_ini:
   263  000007                     ??_fputc:
   264  000007                     lcd_envia_byte@dado:
   265                           	opt callstack 0
   266  000007                     ___wmul@product:
   267                           	opt callstack 0
   268                           
   269                           ; 2 bytes @ 0x6
   270  000007                     	ds	1
   271  000008                     lcd_ini@i:
   272                           	opt callstack 0
   273  000008                     lcd_envia_byte@nivel:
   274                           	opt callstack 0
   275                           
   276                           ; 1 bytes @ 0x7
   277  000008                     	ds	1
   278  000009                     lcd_escreve_bf@col:
   279                           	opt callstack 0
   280  000009                     _isspace$925:
   281                           	opt callstack 0
   282                           
   283                           ; 1 bytes @ 0x8
   284  000009                     	ds	1
   285  00000A                     ?_atoi:
   286                           	opt callstack 0
   287  00000A                     lcd_escreve_bf@str:
   288                           	opt callstack 0
   289  00000A                     atoi@s:
   290                           	opt callstack 0
   291                           
   292                           ; 2 bytes @ 0x9
   293  00000A                     	ds	1
   294  00000B                     ___aodiv@divisor:
   295                           	opt callstack 0
   296  00000B                     ___aomod@divisor:
   297                           	opt callstack 0
   298                           
   299                           ; 8 bytes @ 0xA
   300  00000B                     	ds	1
   301  00000C                     ??_atoi:
   302  00000C                     lcd_escreve_bf@end:
   303                           	opt callstack 0
   304  00000C                     fputs@s:
   305                           	opt callstack 0
   306                           
   307                           ; 2 bytes @ 0xB
   308  00000C                     	ds	1
   309  00000D                     lcd_escreve_bf@lin:
   310                           	opt callstack 0
   311                           
   312                           ; 1 bytes @ 0xC
   313  00000D                     	ds	1
   314  00000E                     fputs@fp:
   315                           	opt callstack 0
   316                           
   317                           ; 2 bytes @ 0xD
   318  00000E                     	ds	2
   319  000010                     fputs@c:
   320                           	opt callstack 0
   321  000010                     atoi@neg:
   322                           	opt callstack 0
   323                           
   324                           ; 2 bytes @ 0xF
   325  000010                     	ds	1
   326  000011                     fputs@i:
   327                           	opt callstack 0
   328                           
   329                           ; 2 bytes @ 0x10
   330  000011                     	ds	1
   331  000012                     _atoi$907:
   332                           	opt callstack 0
   333                           
   334                           ; 2 bytes @ 0x11
   335  000012                     	ds	1
   336  000013                     ?_pad:
   337                           	opt callstack 0
   338  000013                     ___aodiv@counter:
   339                           	opt callstack 0
   340  000013                     ___aomod@counter:
   341                           	opt callstack 0
   342  000013                     pad@fp:
   343                           	opt callstack 0
   344                           
   345                           ; 2 bytes @ 0x12
   346  000013                     	ds	1
   347  000014                     ___aodiv@sign:
   348                           	opt callstack 0
   349  000014                     ___aomod@sign:
   350                           	opt callstack 0
   351  000014                     _atoi$909:
   352                           	opt callstack 0
   353                           
   354                           ; 2 bytes @ 0x13
   355  000014                     	ds	1
   356  000015                     ?_abs:
   357                           	opt callstack 0
   358  000015                     pad@buf:
   359                           	opt callstack 0
   360  000015                     abs@a:
   361                           	opt callstack 0
   362  000015                     ___aodiv@quotient:
   363                           	opt callstack 0
   364                           
   365                           ; 8 bytes @ 0x14
   366  000015                     	ds	1
   367  000016                     _atoi$908:
   368                           	opt callstack 0
   369                           
   370                           ; 1 bytes @ 0x15
   371  000016                     	ds	1
   372  000017                     ??_abs:
   373  000017                     pad@p:
   374                           	opt callstack 0
   375  000017                     atoi@n:
   376                           	opt callstack 0
   377                           
   378                           ; 2 bytes @ 0x16
   379  000017                     	ds	2
   380  000019                     ??_pad:
   381                           
   382                           ; 1 bytes @ 0x18
   383  000019                     	ds	1
   384  00001A                     pad@i:
   385                           	opt callstack 0
   386                           
   387                           ; 2 bytes @ 0x19
   388  00001A                     	ds	2
   389  00001C                     pad@w:
   390                           	opt callstack 0
   391                           
   392                           ; 2 bytes @ 0x1B
   393  00001C                     	ds	2
   394  00001E                     ?_dtoa:
   395                           	opt callstack 0
   396  00001E                     dtoa@fp:
   397                           	opt callstack 0
   398                           
   399                           ; 2 bytes @ 0x1D
   400  00001E                     	ds	2
   401  000020                     dtoa@d:
   402                           	opt callstack 0
   403                           
   404                           ; 8 bytes @ 0x1F
   405  000020                     	ds	8
   406  000028                     ??_dtoa:
   407                           
   408                           ; 1 bytes @ 0x27
   409  000028                     	ds	8
   410  000030                     _dtoa$435:
   411                           	opt callstack 0
   412                           
   413                           ; 2 bytes @ 0x2F
   414  000030                     	ds	2
   415  000032                     dtoa@p:
   416                           	opt callstack 0
   417                           
   418                           ; 2 bytes @ 0x31
   419  000032                     	ds	2
   420  000034                     dtoa@w:
   421                           	opt callstack 0
   422                           
   423                           ; 2 bytes @ 0x33
   424  000034                     	ds	2
   425  000036                     dtoa@s:
   426                           	opt callstack 0
   427                           
   428                           ; 2 bytes @ 0x35
   429  000036                     	ds	2
   430  000038                     dtoa@n:
   431                           	opt callstack 0
   432                           
   433                           ; 8 bytes @ 0x37
   434  000038                     	ds	8
   435  000040                     dtoa@i:
   436                           	opt callstack 0
   437                           
   438                           ; 2 bytes @ 0x3F
   439  000040                     	ds	2
   440  000042                     ?_vfpfcnvrt:
   441                           	opt callstack 0
   442  000042                     vfpfcnvrt@fp:
   443                           	opt callstack 0
   444                           
   445                           ; 2 bytes @ 0x41
   446  000042                     	ds	2
   447  000044                     vfpfcnvrt@fmt:
   448                           	opt callstack 0
   449                           
   450                           ; 2 bytes @ 0x43
   451  000044                     	ds	2
   452  000046                     vfpfcnvrt@ap:
   453                           	opt callstack 0
   454                           
   455                           ; 2 bytes @ 0x45
   456  000046                     	ds	2
   457  000048                     ??_vfpfcnvrt:
   458                           
   459                           ; 1 bytes @ 0x47
   460  000048                     	ds	4
   461  00004C                     vfpfcnvrt@ll:
   462                           	opt callstack 0
   463                           
   464                           ; 8 bytes @ 0x4B
   465  00004C                     	ds	8
   466  000054                     vfpfcnvrt@done:
   467                           	opt callstack 0
   468                           
   469                           ; 2 bytes @ 0x53
   470  000054                     	ds	2
   471  000056                     _vfpfcnvrt$450:
   472                           	opt callstack 0
   473                           
   474                           ; 2 bytes @ 0x55
   475  000056                     	ds	2
   476  000058                     ?_vfprintf:
   477                           	opt callstack 0
   478  000058                     vfprintf@fp:
   479                           	opt callstack 0
   480                           
   481                           ; 2 bytes @ 0x57
   482  000058                     	ds	2
   483  00005A                     vfprintf@fmt:
   484                           	opt callstack 0
   485                           
   486                           ; 2 bytes @ 0x59
   487  00005A                     	ds	2
   488  00005C                     vfprintf@ap:
   489                           	opt callstack 0
   490                           
   491                           ; 2 bytes @ 0x5B
   492  00005C                     	ds	2
   493  00005E                     vfprintf@cfmt:
   494                           	opt callstack 0
   495                           
   496                           ; 2 bytes @ 0x5D
   497  00005E                     	ds	2
   498  000060                     ?_sprintf:
   499                           	opt callstack 0
   500  000060                     sprintf@s:
   501                           	opt callstack 0
   502                           
   503                           ; 2 bytes @ 0x5F
   504  000060                     	ds	2
   505  000062                     sprintf@fmt:
   506                           	opt callstack 0
   507                           
   508                           ; 2 bytes @ 0x61
   509  000062                     	ds	4
   510  000066                     
   511                           ; 1 bytes @ 0x65
   512  000066                     	ds	2
   513  000068                     sprintf@ap:
   514                           	opt callstack 0
   515                           
   516                           ; 2 bytes @ 0x67
   517  000068                     	ds	2
   518  00006A                     sprintf@f:
   519                           	opt callstack 0
   520                           
   521                           ; 6 bytes @ 0x69
   522  00006A                     	ds	6
   523                           
   524 ;;
   525 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   526 ;;
   527 ;; *************** function _main *****************
   528 ;; Defined at:
   529 ;;		line 42 in file "EX12.c"
   530 ;; Parameters:    Size  Location     Type
   531 ;;		None
   532 ;; Auto vars:     Size  Location     Type
   533 ;;		None
   534 ;; Return value:  Size  Location     Type
   535 ;;                  1    wreg      void 
   536 ;; Registers used:
   537 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   538 ;; Tracked objects:
   539 ;;		On entry : 0/0
   540 ;;		On exit  : 0/0
   541 ;;		Unchanged: 0/0
   542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   543 ;;      Params:         0       0       0       0       0       0       0
   544 ;;      Locals:         0       0       0       0       0       0       0
   545 ;;      Temps:          0       2       0       0       0       0       0
   546 ;;      Totals:         0       2       0       0       0       0       0
   547 ;;Total ram usage:        2 bytes
   548 ;; Hardware stack levels required when called:    9
   549 ;; This function calls:
   550 ;;		_lcd_escreve_bf
   551 ;;		_lcd_ini
   552 ;;		_sprintf
   553 ;; This function is called by:
   554 ;;		Startup code after reset
   555 ;; This function uses a non-reentrant model
   556 ;;
   557                           
   558                           	psect	text0
   559  00118E                     __ptext0:
   560                           	opt callstack 0
   561  00118E                     _main:
   562                           	opt callstack 22
   563                           
   564                           ;EX12.c: 44:     TRISB = 0b00000001;
   565                           
   566                           ;incstack = 0
   567  00118E  0E01               	movlw	1
   568  001190  6E93               	movwf	3987,c	;volatile
   569                           
   570                           ;EX12.c: 46:     PORTB = 0b00000000;
   571  001192  0E00               	movlw	0
   572  001194  6E81               	movwf	3969,c	;volatile
   573                           
   574                           ;EX12.c: 47:     ADCON1 = 0x0F;
   575  001196  0E0F               	movlw	15
   576  001198  6EC1               	movwf	4033,c	;volatile
   577                           
   578                           ;EX12.c: 49:     INTCON = 0b10010000;
   579  00119A  0E90               	movlw	144
   580  00119C  6EF2               	movwf	4082,c	;volatile
   581                           
   582                           ;EX12.c: 60:     INTCON2 = 0b11000000;
   583  00119E  0EC0               	movlw	192
   584  0011A0  6EF1               	movwf	4081,c	;volatile
   585                           
   586                           ;EX12.c: 65:     lcd_ini();
   587  0011A2  EC7F  F008         	call	_lcd_ini	;wreg free
   588                           
   589                           ;EX12.c: 68:     lcd_escreve_bf(1, 2, "INT. EXTERNA");
   590  0011A6  0E02               	movlw	2
   591  0011A8  6E09               	movwf	lcd_escreve_bf@col,c
   592  0011AA  0E0E               	movlw	low STR_1
   593  0011AC  6E0A               	movwf	lcd_escreve_bf@str,c
   594  0011AE  0E06               	movlw	high STR_1
   595  0011B0  6E0B               	movwf	lcd_escreve_bf@str+1,c
   596  0011B2  0E01               	movlw	1
   597  0011B4  EC0A  F009         	call	_lcd_escreve_bf
   598                           
   599                           ;EX12.c: 71:     lcd_escreve_bf(2, 2, "CONTAGEM: 00");
   600  0011B8  0E02               	movlw	2
   601  0011BA  6E09               	movwf	lcd_escreve_bf@col,c
   602  0011BC  0E01               	movlw	low STR_2
   603  0011BE  6E0A               	movwf	lcd_escreve_bf@str,c
   604  0011C0  0E06               	movlw	high STR_2
   605  0011C2  6E0B               	movwf	lcd_escreve_bf@str+1,c
   606  0011C4  0E02               	movlw	2
   607  0011C6  EC0A  F009         	call	_lcd_escreve_bf
   608  0011CA                     l2027:
   609                           
   610                           ;EX12.c: 74:     {;EX12.c: 75:         _delay((unsigned long)((100)*(8000000/4000.0)));
   611  0011CA  0E02               	movlw	2
   612  0011CC  0100               	movlb	0	; () banked
   613  0011CE  6FB1               	movwf	(??_main+1)& (0+255),b
   614  0011D0  0E04               	movlw	4
   615  0011D2  6FB0               	movwf	??_main& (0+255),b
   616  0011D4  0EBA               	movlw	186
   617  0011D6                     u1437:
   618  0011D6  2EE8               	decfsz	wreg,f,c
   619  0011D8  D7FE               	bra	u1437
   620  0011DA  2FB0               	decfsz	??_main& (0+255),f,b
   621  0011DC  D7FC               	bra	u1437
   622  0011DE  2FB1               	decfsz	(??_main+1)& (0+255),f,b
   623  0011E0  D7FA               	bra	u1437
   624  0011E2  F000               	nop	
   625                           
   626                           ;EX12.c: 78:         sprintf(bufferLCD, "%02d", conta);
   627  0011E4  0EA0               	movlw	low _bufferLCD
   628  0011E6  6E60               	movwf	sprintf@s,c
   629  0011E8  0E00               	movlw	high _bufferLCD
   630  0011EA  6E61               	movwf	sprintf@s+1,c
   631  0011EC  0E1B               	movlw	low STR_3
   632  0011EE  6E62               	movwf	sprintf@fmt,c
   633  0011F0  0E06               	movlw	high STR_3
   634  0011F2  6E63               	movwf	sprintf@fmt+1,c
   635  0011F4  C07A  F064         	movff	_conta,?_sprintf+4
   636  0011F8  C07B  F065         	movff	_conta+1,?_sprintf+5
   637  0011FC  ECAF  F009         	call	_sprintf	;wreg free
   638                           
   639                           ;EX12.c: 81:         lcd_escreve_bf(2, 12, bufferLCD);
   640  001200  0E0C               	movlw	12
   641  001202  6E09               	movwf	lcd_escreve_bf@col,c
   642  001204  0EA0               	movlw	low _bufferLCD
   643  001206  6E0A               	movwf	lcd_escreve_bf@str,c
   644  001208  0E00               	movlw	high _bufferLCD
   645  00120A  6E0B               	movwf	lcd_escreve_bf@str+1,c
   646  00120C  0E02               	movlw	2
   647  00120E  EC0A  F009         	call	_lcd_escreve_bf
   648  001212  D7DB               	goto	l2027
   649  001214                     __end_of_main:
   650                           	opt callstack 0
   651                           
   652 ;; *************** function _sprintf *****************
   653 ;; Defined at:
   654 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_sprintf.c"
   655 ;; Parameters:    Size  Location     Type
   656 ;;  s               2   95[COMRAM] PTR unsigned char 
   657 ;;		 -> bufferLCD(16), 
   658 ;;  fmt             2   97[COMRAM] PTR const unsigned char 
   659 ;;		 -> STR_3(5), 
   660 ;; Auto vars:     Size  Location     Type
   661 ;;  f               6  105[COMRAM] struct _IO_FILE
   662 ;;  ap              2  103[COMRAM] PTR void [1]
   663 ;;		 -> ?_sprintf(2), 
   664 ;;  ret             2    0        int 
   665 ;; Return value:  Size  Location     Type
   666 ;;                  2   95[COMRAM] int 
   667 ;; Registers used:
   668 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   669 ;; Tracked objects:
   670 ;;		On entry : 0/0
   671 ;;		On exit  : 0/0
   672 ;;		Unchanged: 0/0
   673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   674 ;;      Params:         6       0       0       0       0       0       0
   675 ;;      Locals:        10       0       0       0       0       0       0
   676 ;;      Temps:          0       0       0       0       0       0       0
   677 ;;      Totals:        16       0       0       0       0       0       0
   678 ;;Total ram usage:       16 bytes
   679 ;; Hardware stack levels used:    1
   680 ;; Hardware stack levels required when called:    8
   681 ;; This function calls:
   682 ;;		_vfprintf
   683 ;; This function is called by:
   684 ;;		_main
   685 ;; This function uses a non-reentrant model
   686 ;;
   687                           
   688                           	psect	text1
   689  00135E                     __ptext1:
   690                           	opt callstack 0
   691  00135E                     _sprintf:
   692                           	opt callstack 22
   693                           
   694                           ;incstack = 0
   695  00135E  0E64               	movlw	low (?_sprintf+4)
   696  001360  6E68               	movwf	sprintf@ap,c
   697  001362  0E00               	movlw	high (?_sprintf+4)
   698  001364  6E69               	movwf	sprintf@ap+1,c
   699  001366  C060  F06A         	movff	sprintf@s,sprintf@f
   700  00136A  C061  F06B         	movff	sprintf@s+1,sprintf@f+1
   701  00136E  0E00               	movlw	0
   702  001370  6E6D               	movwf	sprintf@f+3,c
   703  001372  0E00               	movlw	0
   704  001374  6E6C               	movwf	sprintf@f+2,c
   705  001376  0E00               	movlw	0
   706  001378  6E6F               	movwf	sprintf@f+5,c
   707  00137A  0E00               	movlw	0
   708  00137C  6E6E               	movwf	sprintf@f+4,c
   709  00137E  0E6A               	movlw	low sprintf@f
   710  001380  6E58               	movwf	vfprintf@fp,c
   711  001382  0E00               	movlw	high sprintf@f
   712  001384  6E59               	movwf	vfprintf@fp+1,c
   713  001386  C062  F05A         	movff	sprintf@fmt,vfprintf@fmt
   714  00138A  C063  F05B         	movff	sprintf@fmt+1,vfprintf@fmt+1
   715  00138E  0E68               	movlw	low sprintf@ap
   716  001390  6E5C               	movwf	vfprintf@ap,c
   717  001392  0E00               	movlw	high sprintf@ap
   718  001394  6E5D               	movwf	vfprintf@ap+1,c
   719  001396  EC86  F009         	call	_vfprintf	;wreg free
   720  00139A  506C               	movf	sprintf@f+2,w,c
   721  00139C  2460               	addwf	sprintf@s,w,c
   722  00139E  6ED9               	movwf	fsr2l,c
   723  0013A0  506D               	movf	sprintf@f+3,w,c
   724  0013A2  2061               	addwfc	sprintf@s+1,w,c
   725  0013A4  6EDA               	movwf	fsr2h,c
   726  0013A6  0E00               	movlw	0
   727  0013A8  6EDF               	movwf	indf2,c
   728  0013AA  0012               	return		;funcret
   729  0013AC                     __end_of_sprintf:
   730                           	opt callstack 0
   731                           
   732 ;; *************** function _vfprintf *****************
   733 ;; Defined at:
   734 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
   735 ;; Parameters:    Size  Location     Type
   736 ;;  fp              2   87[COMRAM] PTR struct _IO_FILE
   737 ;;		 -> sprintf@f(6), 
   738 ;;  fmt             2   89[COMRAM] PTR const unsigned char 
   739 ;;		 -> STR_3(5), 
   740 ;;  ap              2   91[COMRAM] PTR PTR void 
   741 ;;		 -> sprintf@ap(2), 
   742 ;; Auto vars:     Size  Location     Type
   743 ;;  cfmt            2   93[COMRAM] PTR unsigned char 
   744 ;;		 -> STR_3(5), 
   745 ;; Return value:  Size  Location     Type
   746 ;;                  2   87[COMRAM] int 
   747 ;; Registers used:
   748 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   749 ;; Tracked objects:
   750 ;;		On entry : 0/0
   751 ;;		On exit  : 0/0
   752 ;;		Unchanged: 0/0
   753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   754 ;;      Params:         6       0       0       0       0       0       0
   755 ;;      Locals:         2       0       0       0       0       0       0
   756 ;;      Temps:          0       0       0       0       0       0       0
   757 ;;      Totals:         8       0       0       0       0       0       0
   758 ;;Total ram usage:        8 bytes
   759 ;; Hardware stack levels used:    1
   760 ;; Hardware stack levels required when called:    7
   761 ;; This function calls:
   762 ;;		_vfpfcnvrt
   763 ;; This function is called by:
   764 ;;		_sprintf
   765 ;; This function uses a non-reentrant model
   766 ;;
   767                           
   768                           	psect	text2
   769  00130C                     __ptext2:
   770                           	opt callstack 0
   771  00130C                     _vfprintf:
   772                           	opt callstack 22
   773                           
   774                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.05\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
   775                           
   776                           ;incstack = 0
   777  00130C  C05A  F05E         	movff	vfprintf@fmt,vfprintf@cfmt
   778  001310  C05B  F05F         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
   779                           
   780                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
   781  001314  0E00               	movlw	0
   782  001316  6E71               	movwf	_nout+1,c
   783  001318  0E00               	movlw	0
   784  00131A  6E70               	movwf	_nout,c
   785                           
   786                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
   787  00131C  D012               	goto	l1875
   788  00131E                     l1873:
   789                           
   790                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
   791  00131E  C058  F042         	movff	vfprintf@fp,vfpfcnvrt@fp
   792  001322  C059  F043         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
   793  001326  0E5E               	movlw	low vfprintf@cfmt
   794  001328  6E44               	movwf	vfpfcnvrt@fmt,c
   795  00132A  0E00               	movlw	high vfprintf@cfmt
   796  00132C  6E45               	movwf	vfpfcnvrt@fmt+1,c
   797  00132E  C05C  F046         	movff	vfprintf@ap,vfpfcnvrt@ap
   798  001332  C05D  F047         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
   799  001336  EC11  F003         	call	_vfpfcnvrt	;wreg free
   800  00133A  5042               	movf	?_vfpfcnvrt,w,c
   801  00133C  2670               	addwf	_nout,f,c
   802  00133E  5043               	movf	?_vfpfcnvrt+1,w,c
   803  001340  2271               	addwfc	_nout+1,f,c
   804  001342                     l1875:
   805                           
   806                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
   807  001342  C05E  FFF6         	movff	vfprintf@cfmt,tblptrl
   808  001346  C05F  FFF7         	movff	vfprintf@cfmt+1,tblptrh
   809  00134A                     	if	0	;tblptru may be non-zero
   810  00134A                     	endif
   811  00134A                     	if	0	;tblptru may be non-zero
   812  00134A                     	endif
   813  00134A  0008               	tblrd		*
   814  00134C  50F5               	movf	tablat,w,c
   815  00134E  0900               	iorlw	0
   816  001350  A4D8               	btfss	status,2,c
   817  001352  D7E5               	goto	l1873
   818                           
   819                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
   820  001354  C070  F058         	movff	_nout,?_vfprintf
   821  001358  C071  F059         	movff	_nout+1,?_vfprintf+1
   822  00135C  0012               	return		;funcret
   823  00135E                     __end_of_vfprintf:
   824                           	opt callstack 0
   825                           
   826 ;; *************** function _vfpfcnvrt *****************
   827 ;; Defined at:
   828 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
   829 ;; Parameters:    Size  Location     Type
   830 ;;  fp              2   65[COMRAM] PTR struct _IO_FILE
   831 ;;		 -> sprintf@f(6), 
   832 ;;  fmt             2   67[COMRAM] PTR PTR unsigned char 
   833 ;;		 -> vfprintf@cfmt(2), 
   834 ;;  ap              2   69[COMRAM] PTR PTR void 
   835 ;;		 -> sprintf@ap(2), 
   836 ;; Auto vars:     Size  Location     Type
   837 ;;  ll              8   75[COMRAM] long long 
   838 ;;  llu             8    0        unsigned long long 
   839 ;;  f               4    0        unsigned long long 
   840 ;;  vp              3    0        PTR void 
   841 ;;  ct              3    0        unsigned char [3]
   842 ;;  cp              3    0        PTR unsigned char 
   843 ;;  done            2   83[COMRAM] int 
   844 ;;  i               2    0        int 
   845 ;;  c               1    0        unsigned char 
   846 ;; Return value:  Size  Location     Type
   847 ;;                  2   65[COMRAM] int 
   848 ;; Registers used:
   849 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   850 ;; Tracked objects:
   851 ;;		On entry : 0/0
   852 ;;		On exit  : 0/0
   853 ;;		Unchanged: 0/0
   854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   855 ;;      Params:         6       0       0       0       0       0       0
   856 ;;      Locals:        12       0       0       0       0       0       0
   857 ;;      Temps:          4       0       0       0       0       0       0
   858 ;;      Totals:        22       0       0       0       0       0       0
   859 ;;Total ram usage:       22 bytes
   860 ;; Hardware stack levels used:    1
   861 ;; Hardware stack levels required when called:    6
   862 ;; This function calls:
   863 ;;		_atoi
   864 ;;		_dtoa
   865 ;;		_fputc
   866 ;;		_isdigit
   867 ;; This function is called by:
   868 ;;		_vfprintf
   869 ;; This function uses a non-reentrant model
   870 ;;
   871                           
   872                           	psect	text3
   873  000622                     __ptext3:
   874                           	opt callstack 0
   875  000622                     _vfpfcnvrt:
   876                           	opt callstack 22
   877                           
   878                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 674:     long long ll;
   879                           
   880                           ;incstack = 0
   881  000622  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   882  000626  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   883  00062A  CFDE FFF6          	movff	postinc2,tblptrl
   884  00062E  CFDD FFF7          	movff	postdec2,tblptrh
   885  000632                     	if	0	;tblptru may be non-zero
   886  000632                     	endif
   887  000632                     	if	0	;tblptru may be non-zero
   888  000632                     	endif
   889  000632  0008               	tblrd		*
   890  000634  50F5               	movf	tablat,w,c
   891  000636  0A25               	xorlw	37
   892  000638  A4D8               	btfss	status,2,c
   893  00063A  D143               	goto	l1849
   894                           
   895                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
   896  00063C  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   897  000640  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   898  000644  2ADE               	incf	postinc2,f,c
   899  000646  0E00               	movlw	0
   900  000648  22DD               	addwfc	postdec2,f,c
   901                           
   902                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
   903  00064A  0E00               	movlw	0
   904  00064C  6E73               	movwf	_width+1,c
   905  00064E  0E00               	movlw	0
   906  000650  6E72               	movwf	_width,c
   907  000652  C072  F076         	movff	_width,_flags
   908  000656  C073  F077         	movff	_width+1,_flags+1
   909                           
   910                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
   911  00065A  6874               	setf	_prec,c
   912  00065C  6875               	setf	_prec+1,c
   913                           
   914                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 688:       
      +                            done = 0;
   915  00065E  0E00               	movlw	0
   916  000660  6E55               	movwf	vfpfcnvrt@done+1,c
   917  000662  0E00               	movlw	0
   918  000664  D014               	goto	L1
   919  000666                     l1775:
   920                           
   921                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 692:       
      +                                        flags |= (1 << 0);
   922  000666  8076               	bsf	_flags,0,c
   923  000668                     l1777:
   924                           
   925                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 693:       
      +                                        ++*fmt;
   926  000668  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   927  00066C  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   928  000670  2ADE               	incf	postinc2,f,c
   929  000672  0E00               	movlw	0
   930  000674  22DD               	addwfc	postdec2,f,c
   931                           
   932                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 694:       
      +                                        break;
   933  000676  D02E               	goto	l1801
   934  000678                     l1779:
   935                           
   936                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 696:       
      +                                        flags |= (1 << 1);
   937  000678  8276               	bsf	_flags,1,c
   938  00067A  D7F6               	goto	l1777
   939  00067C                     l1783:
   940                           
   941                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 700:       
      +                                        flags |= (1 << 2);
   942  00067C  8476               	bsf	_flags,2,c
   943  00067E  D7F4               	goto	l1777
   944  000680                     l1787:
   945                           
   946                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 704:       
      +                                        flags |= (1 << 3);
   947  000680  8676               	bsf	_flags,3,c
   948  000682  D7F2               	goto	l1777
   949  000684                     l1791:
   950                           
   951                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 708:       
      +                                        flags |= (1 << 4);
   952  000684  8876               	bsf	_flags,4,c
   953  000686  D7F0               	goto	l1777
   954  000688                     l1795:
   955                           
   956                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 712:       
      +                                        done = 1;
   957  000688  0E00               	movlw	0
   958  00068A  6E55               	movwf	vfpfcnvrt@done+1,c
   959  00068C  0E01               	movlw	1
   960  00068E                     L1:
   961  00068E  6E54               	movwf	vfpfcnvrt@done,c
   962                           
   963                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 713:       
      +                                        break;
   964  000690  D021               	goto	l1801
   965  000692                     l1799:
   966  000692  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   967  000696  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   968  00069A  CFDE FFF6          	movff	postinc2,tblptrl
   969  00069E  CFDD FFF7          	movff	postdec2,tblptrh
   970  0006A2                     	if	0	;tblptru may be non-zero
   971  0006A2                     	endif
   972  0006A2                     	if	0	;tblptru may be non-zero
   973  0006A2                     	endif
   974  0006A2  0008               	tblrd		*
   975  0006A4  50F5               	movf	tablat,w,c
   976  0006A6  6E48               	movwf	??_vfpfcnvrt& (0+255),c
   977  0006A8  6A49               	clrf	(??_vfpfcnvrt+1)& (0+255),c
   978                           
   979                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   980                           ; Switch size 1, requested type "simple"
   981                           ; Number of cases is 1, Range of values is 0 to 0
   982                           ; switch strategies available:
   983                           ; Name         Instructions Cycles
   984                           ; simple_byte            4     3 (average)
   985                           ;	Chosen strategy is simple_byte
   986  0006AA  5049               	movf	??_vfpfcnvrt+1,w,c
   987  0006AC  0A00               	xorlw	0	; case 0
   988  0006AE  A4D8               	btfss	status,2,c
   989  0006B0  D7EB               	goto	l1795
   990                           
   991                           ; Switch size 1, requested type "simple"
   992                           ; Number of cases is 5, Range of values is 32 to 48
   993                           ; switch strategies available:
   994                           ; Name         Instructions Cycles
   995                           ; simple_byte           16     9 (average)
   996                           ;	Chosen strategy is simple_byte
   997  0006B2  5048               	movf	??_vfpfcnvrt,w,c
   998  0006B4  0A20               	xorlw	32	; case 32
   999  0006B6  B4D8               	btfsc	status,2,c
  1000  0006B8  D7E3               	goto	l1787
  1001  0006BA  0A03               	xorlw	3	; case 35
  1002  0006BC  B4D8               	btfsc	status,2,c
  1003  0006BE  D7E2               	goto	l1791
  1004  0006C0  0A08               	xorlw	8	; case 43
  1005  0006C2  B4D8               	btfsc	status,2,c
  1006  0006C4  D7DB               	goto	l1783
  1007  0006C6  0A06               	xorlw	6	; case 45
  1008  0006C8  B4D8               	btfsc	status,2,c
  1009  0006CA  D7CD               	goto	l1775
  1010  0006CC  0A1D               	xorlw	29	; case 48
  1011  0006CE  B4D8               	btfsc	status,2,c
  1012  0006D0  D7D3               	goto	l1779
  1013  0006D2  D7DA               	goto	l1795
  1014  0006D4                     l1801:
  1015                           
  1016                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 689:       
      +                            while (!done) {
  1017  0006D4  5054               	movf	vfpfcnvrt@done,w,c
  1018  0006D6  1055               	iorwf	vfpfcnvrt@done+1,w,c
  1019  0006D8  B4D8               	btfsc	status,2,c
  1020  0006DA  D7DB               	goto	l1799
  1021                           
  1022                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 716:       
      +                            if (flags & (1 << 0)) {
  1023  0006DC  B076               	btfsc	_flags,0,c
  1024                           
  1025                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 717:       
      +                                flags &= ~(1 << 1);
  1026  0006DE  9276               	bcf	_flags,1,c
  1027                           
  1028                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 723:       
      +                            if ((*fmt)[0] == '*') {
  1029  0006E0  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1030  0006E4  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1031  0006E8  CFDE FFF6          	movff	postinc2,tblptrl
  1032  0006EC  CFDD FFF7          	movff	postdec2,tblptrh
  1033  0006F0                     	if	0	;tblptru may be non-zero
  1034  0006F0                     	endif
  1035  0006F0                     	if	0	;tblptru may be non-zero
  1036  0006F0                     	endif
  1037  0006F0  0008               	tblrd		*
  1038  0006F2  50F5               	movf	tablat,w,c
  1039  0006F4  0A2A               	xorlw	42
  1040  0006F6  A4D8               	btfss	status,2,c
  1041  0006F8  D023               	goto	l1813
  1042                           
  1043                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 724:       
      +                                ++*fmt;
  1044  0006FA  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1045  0006FE  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1046  000702  2ADE               	incf	postinc2,f,c
  1047  000704  0E00               	movlw	0
  1048  000706  22DD               	addwfc	postdec2,f,c
  1049                           
  1050                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 725:       
      +                                width = (*(int *)__va_arg(*(int **)ap, (int)0));
  1051  000708  C046  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1052  00070C  C047  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1053  000710  CFDF F048          	movff	indf2,??_vfpfcnvrt
  1054  000714  0E02               	movlw	2
  1055  000716  26DE               	addwf	postinc2,f,c
  1056  000718  CFDF F049          	movff	indf2,??_vfpfcnvrt+1
  1057  00071C  0E00               	movlw	0
  1058  00071E  22DD               	addwfc	postdec2,f,c
  1059  000720  C048  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1060  000724  C049  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1061  000728  CFDE F072          	movff	postinc2,_width
  1062  00072C  CFDD F073          	movff	postdec2,_width+1
  1063                           
  1064                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 726:       
      +                                if (width < 0) {
  1065  000730  AE73               	btfss	_width+1,7,c
  1066  000732  D03F               	goto	u1310
  1067                           
  1068                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 727:       
      +                                    flags |= (1 << 0);
  1069  000734  8076               	bsf	_flags,0,c
  1070                           
  1071                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 728:       
      +                                    width = -width;
  1072  000736  6C72               	negf	_width,c
  1073  000738  1E73               	comf	_width+1,f,c
  1074  00073A  B0D8               	btfsc	status,0,c
  1075  00073C  2A73               	incf	_width+1,f,c
  1076  00073E  D039               	goto	u1310
  1077  000740                     l1813:
  1078                           
  1079                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 731:       
      +                                width = atoi(*fmt);
  1080  000740  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1081  000744  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1082  000748  CFDE F00A          	movff	postinc2,atoi@s
  1083  00074C  CFDD F00B          	movff	postdec2,atoi@s+1
  1084  000750  EC40  F006         	call	_atoi	;wreg free
  1085  000754  C00A  F072         	movff	?_atoi,_width
  1086  000758  C00B  F073         	movff	?_atoi+1,_width+1
  1087                           
  1088                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 732:       
      +                                while ((0 ? isdigit((*fmt)[0]) : ((unsigned)((*fmt)[0])-'0') < 10)) {
  1089  00075C  D007               	goto	l1817
  1090  00075E                     l1815:
  1091                           
  1092                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 733:       
      +                                    ++*fmt;
  1093  00075E  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1094  000762  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1095  000766  2ADE               	incf	postinc2,f,c
  1096  000768  0E00               	movlw	0
  1097  00076A  22DD               	addwfc	postdec2,f,c
  1098  00076C                     l1817:
  1099  00076C  0ED0               	movlw	208
  1100  00076E  6E48               	movwf	??_vfpfcnvrt& (0+255),c
  1101  000770  0EFF               	movlw	255
  1102  000772  6E49               	movwf	(??_vfpfcnvrt+1)& (0+255),c
  1103  000774  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1104  000778  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1105  00077C  CFDE FFF6          	movff	postinc2,tblptrl
  1106  000780  CFDD FFF7          	movff	postdec2,tblptrh
  1107  000784                     	if	0	;tblptru may be non-zero
  1108  000784                     	endif
  1109  000784                     	if	0	;tblptru may be non-zero
  1110  000784                     	endif
  1111  000784  0008               	tblrd		*
  1112  000786  50F5               	movf	tablat,w,c
  1113  000788  6E4A               	movwf	(??_vfpfcnvrt+2)& (0+255),c
  1114  00078A  6A4B               	clrf	(??_vfpfcnvrt+3)& (0+255),c
  1115  00078C  5048               	movf	??_vfpfcnvrt,w,c
  1116  00078E  264A               	addwf	??_vfpfcnvrt+2,f,c
  1117  000790  5049               	movf	??_vfpfcnvrt+1,w,c
  1118  000792  224B               	addwfc	??_vfpfcnvrt+3,f,c
  1119  000794  504B               	movf	??_vfpfcnvrt+3,w,c
  1120  000796  E106               	bnz	u1290
  1121  000798  0E0A               	movlw	10
  1122  00079A  5C4A               	subwf	??_vfpfcnvrt+2,w,c
  1123  00079C  B0D8               	btfsc	status,0,c
  1124  00079E  D002               	goto	u1290
  1125  0007A0  0E01               	movlw	1
  1126  0007A2  D001               	goto	u1300
  1127  0007A4                     u1290:
  1128  0007A4  0E00               	movlw	0
  1129  0007A6                     u1300:
  1130  0007A6  6E56               	movwf	_vfpfcnvrt$450,c
  1131  0007A8  6A57               	clrf	_vfpfcnvrt$450+1,c
  1132  0007AA  5056               	movf	_vfpfcnvrt$450,w,c
  1133  0007AC  1057               	iorwf	_vfpfcnvrt$450+1,w,c
  1134  0007AE  A4D8               	btfss	status,2,c
  1135  0007B0  D7D6               	goto	l1815
  1136  0007B2                     u1310:
  1137                           
  1138                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 825:       
      +                            if ((*fmt[0] == 'd') || (*fmt[0] == 'i')) {
  1139  0007B2  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1140  0007B6  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1141  0007BA  CFDE FFF6          	movff	postinc2,tblptrl
  1142  0007BE  CFDD FFF7          	movff	postdec2,tblptrh
  1143  0007C2                     	if	0	;tblptru may be non-zero
  1144  0007C2                     	endif
  1145  0007C2                     	if	0	;tblptru may be non-zero
  1146  0007C2                     	endif
  1147  0007C2  0008               	tblrd		*
  1148  0007C4  50F5               	movf	tablat,w,c
  1149  0007C6  0A64               	xorlw	100
  1150  0007C8  B4D8               	btfsc	status,2,c
  1151  0007CA  D00D               	goto	u1330
  1152  0007CC  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1153  0007D0  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1154  0007D4  CFDE FFF6          	movff	postinc2,tblptrl
  1155  0007D8  CFDD FFF7          	movff	postdec2,tblptrh
  1156  0007DC                     	if	0	;tblptru may be non-zero
  1157  0007DC                     	endif
  1158  0007DC                     	if	0	;tblptru may be non-zero
  1159  0007DC                     	endif
  1160  0007DC  0008               	tblrd		*
  1161  0007DE  50F5               	movf	tablat,w,c
  1162  0007E0  0A69               	xorlw	105
  1163  0007E2  A4D8               	btfss	status,2,c
  1164  0007E4  D03F               	goto	l1833
  1165  0007E6                     u1330:
  1166                           
  1167                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 827:       
      +                                ++*fmt;
  1168  0007E6  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1169  0007EA  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1170  0007EE  2ADE               	incf	postinc2,f,c
  1171  0007F0  0E00               	movlw	0
  1172  0007F2  22DD               	addwfc	postdec2,f,c
  1173                           
  1174                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 828:       
      +                                ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  1175  0007F4  C046  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1176  0007F8  C047  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1177  0007FC  CFDF F048          	movff	indf2,??_vfpfcnvrt
  1178  000800  0E02               	movlw	2
  1179  000802  26DE               	addwf	postinc2,f,c
  1180  000804  CFDF F049          	movff	indf2,??_vfpfcnvrt+1
  1181  000808  0E00               	movlw	0
  1182  00080A  22DD               	addwfc	postdec2,f,c
  1183  00080C  C048  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1184  000810  C049  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1185  000814  CFDE F04C          	movff	postinc2,vfpfcnvrt@ll
  1186  000818  CFDD F04D          	movff	postdec2,vfpfcnvrt@ll+1
  1187  00081C  0E00               	movlw	0
  1188  00081E  BE4D               	btfsc	vfpfcnvrt@ll+1,7,c
  1189  000820  0EFF               	movlw	-1
  1190  000822  6E4E               	movwf	vfpfcnvrt@ll+2,c
  1191  000824  6E4F               	movwf	vfpfcnvrt@ll+3,c
  1192  000826  6E50               	movwf	vfpfcnvrt@ll+4,c
  1193  000828  6E51               	movwf	vfpfcnvrt@ll+5,c
  1194  00082A  6E52               	movwf	vfpfcnvrt@ll+6,c
  1195  00082C  6E53               	movwf	vfpfcnvrt@ll+7,c
  1196                           
  1197                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 830:       
      +                                return dtoa(fp, ll);
  1198  00082E  C042  F01E         	movff	vfpfcnvrt@fp,dtoa@fp
  1199  000832  C043  F01F         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  1200  000836  C04C  F020         	movff	vfpfcnvrt@ll,dtoa@d
  1201  00083A  C04D  F021         	movff	vfpfcnvrt@ll+1,dtoa@d+1
  1202  00083E  C04E  F022         	movff	vfpfcnvrt@ll+2,dtoa@d+2
  1203  000842  C04F  F023         	movff	vfpfcnvrt@ll+3,dtoa@d+3
  1204  000846  C050  F024         	movff	vfpfcnvrt@ll+4,dtoa@d+4
  1205  00084A  C051  F025         	movff	vfpfcnvrt@ll+5,dtoa@d+5
  1206  00084E  C052  F026         	movff	vfpfcnvrt@ll+6,dtoa@d+6
  1207  000852  C053  F027         	movff	vfpfcnvrt@ll+7,dtoa@d+7
  1208  000856  EC7B  F004         	call	_dtoa	;wreg free
  1209  00085A  C01E  F042         	movff	?_dtoa,?_vfpfcnvrt
  1210  00085E  C01F  F043         	movff	?_dtoa+1,?_vfpfcnvrt+1
  1211  000862  0012               	return	
  1212  000864                     l1833:
  1213                           
  1214                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
  1215  000864  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1216  000868  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1217  00086C  CFDE FFF6          	movff	postinc2,tblptrl
  1218  000870  CFDD FFF7          	movff	postdec2,tblptrh
  1219  000874                     	if	0	;tblptru may be non-zero
  1220  000874                     	endif
  1221  000874                     	if	0	;tblptru may be non-zero
  1222  000874                     	endif
  1223  000874  0008               	tblrd		*
  1224  000876  50F5               	movf	tablat,w,c
  1225  000878  0A25               	xorlw	37
  1226  00087A  A4D8               	btfss	status,2,c
  1227  00087C  D016               	goto	l1843
  1228                           
  1229                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
  1230  00087E  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1231  000882  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1232  000886  2ADE               	incf	postinc2,f,c
  1233  000888  0E00               	movlw	0
  1234  00088A  22DD               	addwfc	postdec2,f,c
  1235                           
  1236                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
  1237  00088C  0E00               	movlw	0
  1238  00088E  6E04               	movwf	fputc@c+1,c
  1239  000890  0E25               	movlw	37
  1240  000892  6E03               	movwf	fputc@c,c
  1241  000894  C042  F005         	movff	vfpfcnvrt@fp,fputc@fp
  1242  000898  C043  F006         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1243  00089C  ECE4  F007         	call	_fputc	;wreg free
  1244  0008A0                     l1839:
  1245                           
  1246                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
  1247  0008A0  0E00               	movlw	0
  1248  0008A2  6E43               	movwf	?_vfpfcnvrt+1,c
  1249  0008A4  0E01               	movlw	1
  1250  0008A6  6E42               	movwf	?_vfpfcnvrt,c
  1251  0008A8  0012               	return	
  1252  0008AA                     l1843:
  1253                           
  1254                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
  1255  0008AA  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1256  0008AE  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1257  0008B2  2ADE               	incf	postinc2,f,c
  1258  0008B4  0E00               	movlw	0
  1259  0008B6  22DD               	addwfc	postdec2,f,c
  1260                           
  1261                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
  1262  0008B8  0E00               	movlw	0
  1263  0008BA  6E43               	movwf	?_vfpfcnvrt+1,c
  1264  0008BC  0E00               	movlw	0
  1265  0008BE  6E42               	movwf	?_vfpfcnvrt,c
  1266  0008C0  0012               	return	
  1267  0008C2                     l1849:
  1268                           
  1269                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
  1270  0008C2  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1271  0008C6  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1272  0008CA  CFDE FFF6          	movff	postinc2,tblptrl
  1273  0008CE  CFDD FFF7          	movff	postdec2,tblptrh
  1274  0008D2                     	if	0	;tblptru may be non-zero
  1275  0008D2                     	endif
  1276  0008D2                     	if	0	;tblptru may be non-zero
  1277  0008D2                     	endif
  1278  0008D2  0008               	tblrd		*
  1279  0008D4  50F5               	movf	tablat,w,c
  1280  0008D6  6E03               	movwf	fputc@c,c
  1281  0008D8  6A04               	clrf	fputc@c+1,c
  1282  0008DA  C042  F005         	movff	vfpfcnvrt@fp,fputc@fp
  1283  0008DE  C043  F006         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1284  0008E2  ECE4  F007         	call	_fputc	;wreg free
  1285                           
  1286                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
  1287  0008E6  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1288  0008EA  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1289  0008EE  2ADE               	incf	postinc2,f,c
  1290  0008F0  0E00               	movlw	0
  1291  0008F2  22DD               	addwfc	postdec2,f,c
  1292  0008F4  D7D5               	goto	l1839
  1293  0008F6                     __end_of_vfpfcnvrt:
  1294                           	opt callstack 0
  1295                           
  1296 ;; *************** function _dtoa *****************
  1297 ;; Defined at:
  1298 ;;		line 274 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1299 ;; Parameters:    Size  Location     Type
  1300 ;;  fp              2   29[COMRAM] PTR struct _IO_FILE
  1301 ;;		 -> sprintf@f(6), 
  1302 ;;  d               8   31[COMRAM] long long 
  1303 ;; Auto vars:     Size  Location     Type
  1304 ;;  n               8   55[COMRAM] long long 
  1305 ;;  i               2   63[COMRAM] int 
  1306 ;;  s               2   53[COMRAM] int 
  1307 ;;  w               2   51[COMRAM] int 
  1308 ;;  p               2   49[COMRAM] int 
  1309 ;; Return value:  Size  Location     Type
  1310 ;;                  2   29[COMRAM] int 
  1311 ;; Registers used:
  1312 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1313 ;; Tracked objects:
  1314 ;;		On entry : 0/0
  1315 ;;		On exit  : 0/0
  1316 ;;		Unchanged: 0/0
  1317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1318 ;;      Params:        10       0       0       0       0       0       0
  1319 ;;      Locals:        18       0       0       0       0       0       0
  1320 ;;      Temps:          8       0       0       0       0       0       0
  1321 ;;      Totals:        36       0       0       0       0       0       0
  1322 ;;Total ram usage:       36 bytes
  1323 ;; Hardware stack levels used:    1
  1324 ;; Hardware stack levels required when called:    5
  1325 ;; This function calls:
  1326 ;;		___aodiv
  1327 ;;		___aomod
  1328 ;;		_abs
  1329 ;;		_pad
  1330 ;; This function is called by:
  1331 ;;		_vfpfcnvrt
  1332 ;; This function uses a non-reentrant model
  1333 ;;
  1334                           
  1335                           	psect	text4
  1336  0008F6                     __ptext4:
  1337                           	opt callstack 0
  1338  0008F6                     _dtoa:
  1339                           	opt callstack 22
  1340                           
  1341                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 274: static
      +                           int dtoa(FILE *fp, long long d);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\
      +                          c99\common\doprnt.c: 275: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\c
      +                          ommon\doprnt.c: 276:     int i, p, s, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\
      +                          sources\c99\common\doprnt.c: 277:     long long n;;C:\Program Files (x86)\Microchip\xc8\
      +                          v2.05\pic\sources\c99\common\doprnt.c: 280:     n = d;
  1342                           
  1343                           ;incstack = 0
  1344  0008F6  C020  F038         	movff	dtoa@d,dtoa@n
  1345  0008FA  C021  F039         	movff	dtoa@d+1,dtoa@n+1
  1346  0008FE  C022  F03A         	movff	dtoa@d+2,dtoa@n+2
  1347  000902  C023  F03B         	movff	dtoa@d+3,dtoa@n+3
  1348  000906  C024  F03C         	movff	dtoa@d+4,dtoa@n+4
  1349  00090A  C025  F03D         	movff	dtoa@d+5,dtoa@n+5
  1350  00090E  C026  F03E         	movff	dtoa@d+6,dtoa@n+6
  1351  000912  C027  F03F         	movff	dtoa@d+7,dtoa@n+7
  1352                           
  1353                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 281:     s 
      +                          = n < 0 ? 1 : 0;
  1354  000916  AE3F               	btfss	dtoa@n+7,7,c
  1355  000918  D002               	goto	u1020
  1356  00091A  0E01               	movlw	1
  1357  00091C  D001               	goto	u1030
  1358  00091E                     u1020:
  1359  00091E  0E00               	movlw	0
  1360  000920                     u1030:
  1361  000920  6E36               	movwf	dtoa@s,c
  1362  000922  6A37               	clrf	dtoa@s+1,c
  1363                           
  1364                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 282:     if
      +                           (s) {
  1365  000924  5036               	movf	dtoa@s,w,c
  1366  000926  1037               	iorwf	dtoa@s+1,w,c
  1367  000928  B4D8               	btfsc	status,2,c
  1368  00092A  D010               	goto	l1647
  1369                           
  1370                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 283:       
      +                            n = -n;
  1371  00092C  1E3F               	comf	dtoa@n+7,f,c
  1372  00092E  1E3E               	comf	dtoa@n+6,f,c
  1373  000930  1E3D               	comf	dtoa@n+5,f,c
  1374  000932  1E3C               	comf	dtoa@n+4,f,c
  1375  000934  1E3B               	comf	dtoa@n+3,f,c
  1376  000936  1E3A               	comf	dtoa@n+2,f,c
  1377  000938  1E39               	comf	dtoa@n+1,f,c
  1378  00093A  6C38               	negf	dtoa@n,c
  1379  00093C  0E00               	movlw	0
  1380  00093E  2239               	addwfc	dtoa@n+1,f,c
  1381  000940  223A               	addwfc	dtoa@n+2,f,c
  1382  000942  223B               	addwfc	dtoa@n+3,f,c
  1383  000944  223C               	addwfc	dtoa@n+4,f,c
  1384  000946  223D               	addwfc	dtoa@n+5,f,c
  1385  000948  223E               	addwfc	dtoa@n+6,f,c
  1386  00094A  223F               	addwfc	dtoa@n+7,f,c
  1387  00094C                     l1647:
  1388                           
  1389                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 287:     if
      +                           (!(prec < 0)) {
  1390  00094C  AE75               	btfss	_prec+1,7,c
  1391                           
  1392                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 288:       
      +                            flags &= ~(1 << 1);
  1393  00094E  9276               	bcf	_flags,1,c
  1394                           
  1395                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 290:     p 
      +                          = (0 < prec) ? prec : 1;
  1396  000950  BE75               	btfsc	_prec+1,7,c
  1397  000952  D005               	goto	u1060
  1398  000954  5075               	movf	_prec+1,w,c
  1399  000956  E108               	bnz	l131
  1400  000958  0474               	decf	_prec,w,c
  1401  00095A  B0D8               	btfsc	status,0,c
  1402  00095C  D005               	goto	l131
  1403  00095E                     u1060:
  1404  00095E  0E00               	movlw	0
  1405  000960  6E33               	movwf	dtoa@p+1,c
  1406  000962  0E01               	movlw	1
  1407  000964  6E32               	movwf	dtoa@p,c
  1408  000966  D004               	goto	l133
  1409  000968                     l131:
  1410  000968  C074  F032         	movff	_prec,dtoa@p
  1411  00096C  C075  F033         	movff	_prec+1,dtoa@p+1
  1412  000970                     l133:
  1413                           
  1414                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 291:     w 
      +                          = width;
  1415  000970  C072  F034         	movff	_width,dtoa@w
  1416  000974  C073  F035         	movff	_width+1,dtoa@w+1
  1417                           
  1418                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 292:     if
      +                           (s || (flags & (1 << 2))) {
  1419  000978  5036               	movf	dtoa@s,w,c
  1420  00097A  1037               	iorwf	dtoa@s+1,w,c
  1421  00097C  A4D8               	btfss	status,2,c
  1422  00097E  D002               	goto	u1080
  1423  000980  A476               	btfss	_flags,2,c
  1424  000982  D003               	goto	l1661
  1425  000984                     u1080:
  1426                           
  1427                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 293:       
      +                            --w;
  1428  000984  0634               	decf	dtoa@w,f,c
  1429  000986  A0D8               	btfss	status,0,c
  1430  000988  0635               	decf	dtoa@w+1,f,c
  1431  00098A                     l1661:
  1432                           
  1433                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 297:     i 
      +                          = sizeof(dbuf) - 1;
  1434  00098A  0E00               	movlw	0
  1435  00098C  6E41               	movwf	dtoa@i+1,c
  1436  00098E  0E1F               	movlw	31
  1437  000990  6E40               	movwf	dtoa@i,c
  1438                           
  1439                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 298:     db
      +                          uf[i] = '\0';
  1440  000992  0E00               	movlw	0
  1441  000994  0100               	movlb	0	; () banked
  1442  000996  6F9F               	movwf	(_dbuf+31)& (0+255),b
  1443                           
  1444                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1445  000998  D07C               	goto	l1675
  1446  00099A                     l1665:
  1447                           
  1448                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 300:       
      +                            --i;
  1449  00099A  0640               	decf	dtoa@i,f,c
  1450  00099C  A0D8               	btfss	status,0,c
  1451  00099E  0641               	decf	dtoa@i+1,f,c
  1452                           
  1453                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 301:       
      +                            dbuf[i] = '0' + abs(n % 10);
  1454  0009A0  0E80               	movlw	low _dbuf
  1455  0009A2  2440               	addwf	dtoa@i,w,c
  1456  0009A4  6ED9               	movwf	fsr2l,c
  1457  0009A6  0E00               	movlw	high _dbuf
  1458  0009A8  2041               	addwfc	dtoa@i+1,w,c
  1459  0009AA  6EDA               	movwf	fsr2h,c
  1460  0009AC  C038  F003         	movff	dtoa@n,___aomod@dividend
  1461  0009B0  C039  F004         	movff	dtoa@n+1,___aomod@dividend+1
  1462  0009B4  C03A  F005         	movff	dtoa@n+2,___aomod@dividend+2
  1463  0009B8  C03B  F006         	movff	dtoa@n+3,___aomod@dividend+3
  1464  0009BC  C03C  F007         	movff	dtoa@n+4,___aomod@dividend+4
  1465  0009C0  C03D  F008         	movff	dtoa@n+5,___aomod@dividend+5
  1466  0009C4  C03E  F009         	movff	dtoa@n+6,___aomod@dividend+6
  1467  0009C8  C03F  F00A         	movff	dtoa@n+7,___aomod@dividend+7
  1468  0009CC  0E0A               	movlw	10
  1469  0009CE  6E0B               	movwf	___aomod@divisor,c
  1470  0009D0  0E00               	movlw	0
  1471  0009D2  6E0C               	movwf	___aomod@divisor+1,c
  1472  0009D4  0E00               	movlw	0
  1473  0009D6  6E0D               	movwf	___aomod@divisor+2,c
  1474  0009D8  0E00               	movlw	0
  1475  0009DA  6E0E               	movwf	___aomod@divisor+3,c
  1476  0009DC  0E00               	movlw	0
  1477  0009DE  6E0F               	movwf	___aomod@divisor+4,c
  1478  0009E0  0E00               	movlw	0
  1479  0009E2  6E10               	movwf	___aomod@divisor+5,c
  1480  0009E4  0E00               	movlw	0
  1481  0009E6  6E11               	movwf	___aomod@divisor+6,c
  1482  0009E8  0E00               	movlw	0
  1483  0009EA  6E12               	movwf	___aomod@divisor+7,c
  1484  0009EC  ECE0  F006         	call	___aomod	;wreg free
  1485  0009F0  C003  F028         	movff	?___aomod,??_dtoa
  1486  0009F4  C004  F029         	movff	?___aomod+1,??_dtoa+1
  1487  0009F8  C005  F02A         	movff	?___aomod+2,??_dtoa+2
  1488  0009FC  C006  F02B         	movff	?___aomod+3,??_dtoa+3
  1489  000A00  C007  F02C         	movff	?___aomod+4,??_dtoa+4
  1490  000A04  C008  F02D         	movff	?___aomod+5,??_dtoa+5
  1491  000A08  C009  F02E         	movff	?___aomod+6,??_dtoa+6
  1492  000A0C  C00A  F02F         	movff	?___aomod+7,??_dtoa+7
  1493  000A10  C028  F015         	movff	??_dtoa,abs@a
  1494  000A14  C02A  F016         	movff	??_dtoa+2,abs@a+1
  1495  000A18  EC11  F00A         	call	_abs	;wreg free
  1496  000A1C  5015               	movf	?_abs,w,c
  1497  000A1E  0F30               	addlw	48
  1498  000A20  6EDF               	movwf	indf2,c
  1499                           
  1500                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 302:       
      +                            --p;
  1501  000A22  0632               	decf	dtoa@p,f,c
  1502  000A24  A0D8               	btfss	status,0,c
  1503  000A26  0633               	decf	dtoa@p+1,f,c
  1504                           
  1505                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 303:       
      +                            --w;
  1506  000A28  0634               	decf	dtoa@w,f,c
  1507  000A2A  A0D8               	btfss	status,0,c
  1508  000A2C  0635               	decf	dtoa@w+1,f,c
  1509                           
  1510                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 304:       
      +                            n = n / 10;
  1511  000A2E  C038  F003         	movff	dtoa@n,___aodiv@dividend
  1512  000A32  C039  F004         	movff	dtoa@n+1,___aodiv@dividend+1
  1513  000A36  C03A  F005         	movff	dtoa@n+2,___aodiv@dividend+2
  1514  000A3A  C03B  F006         	movff	dtoa@n+3,___aodiv@dividend+3
  1515  000A3E  C03C  F007         	movff	dtoa@n+4,___aodiv@dividend+4
  1516  000A42  C03D  F008         	movff	dtoa@n+5,___aodiv@dividend+5
  1517  000A46  C03E  F009         	movff	dtoa@n+6,___aodiv@dividend+6
  1518  000A4A  C03F  F00A         	movff	dtoa@n+7,___aodiv@dividend+7
  1519  000A4E  0E0A               	movlw	10
  1520  000A50  6E0B               	movwf	___aodiv@divisor,c
  1521  000A52  0E00               	movlw	0
  1522  000A54  6E0C               	movwf	___aodiv@divisor+1,c
  1523  000A56  0E00               	movlw	0
  1524  000A58  6E0D               	movwf	___aodiv@divisor+2,c
  1525  000A5A  0E00               	movlw	0
  1526  000A5C  6E0E               	movwf	___aodiv@divisor+3,c
  1527  000A5E  0E00               	movlw	0
  1528  000A60  6E0F               	movwf	___aodiv@divisor+4,c
  1529  000A62  0E00               	movlw	0
  1530  000A64  6E10               	movwf	___aodiv@divisor+5,c
  1531  000A66  0E00               	movlw	0
  1532  000A68  6E11               	movwf	___aodiv@divisor+6,c
  1533  000A6A  0E00               	movlw	0
  1534  000A6C  6E12               	movwf	___aodiv@divisor+7,c
  1535  000A6E  EC9C  F005         	call	___aodiv	;wreg free
  1536  000A72  C003  F038         	movff	?___aodiv,dtoa@n
  1537  000A76  C004  F039         	movff	?___aodiv+1,dtoa@n+1
  1538  000A7A  C005  F03A         	movff	?___aodiv+2,dtoa@n+2
  1539  000A7E  C006  F03B         	movff	?___aodiv+3,dtoa@n+3
  1540  000A82  C007  F03C         	movff	?___aodiv+4,dtoa@n+4
  1541  000A86  C008  F03D         	movff	?___aodiv+5,dtoa@n+5
  1542  000A8A  C009  F03E         	movff	?___aodiv+6,dtoa@n+6
  1543  000A8E  C00A  F03F         	movff	?___aodiv+7,dtoa@n+7
  1544  000A92                     l1675:
  1545                           
  1546                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1547  000A92  BE41               	btfsc	dtoa@i+1,7,c
  1548  000A94  D01F               	goto	u1130
  1549  000A96  5041               	movf	dtoa@i+1,w,c
  1550  000A98  E103               	bnz	u1090
  1551  000A9A  0440               	decf	dtoa@i,w,c
  1552  000A9C  A0D8               	btfss	status,0,c
  1553  000A9E  D01A               	goto	u1130
  1554  000AA0                     u1090:
  1555  000AA0  5038               	movf	dtoa@n,w,c
  1556  000AA2  1039               	iorwf	dtoa@n+1,w,c
  1557  000AA4  103A               	iorwf	dtoa@n+2,w,c
  1558  000AA6  103B               	iorwf	dtoa@n+3,w,c
  1559  000AA8  103C               	iorwf	dtoa@n+4,w,c
  1560  000AAA  103D               	iorwf	dtoa@n+5,w,c
  1561  000AAC  103E               	iorwf	dtoa@n+6,w,c
  1562  000AAE  103F               	iorwf	dtoa@n+7,w,c
  1563  000AB0  A4D8               	btfss	status,2,c
  1564  000AB2  D773               	goto	l1665
  1565  000AB4  BE33               	btfsc	dtoa@p+1,7,c
  1566  000AB6  D005               	goto	u1110
  1567  000AB8  5033               	movf	dtoa@p+1,w,c
  1568  000ABA  E102               	bnz	u1111
  1569  000ABC  0432               	decf	dtoa@p,w,c
  1570  000ABE  B0D8               	btfsc	status,0,c
  1571  000AC0                     u1111:
  1572  000AC0  D76C               	goto	l1665
  1573  000AC2                     u1110:
  1574  000AC2  BE35               	btfsc	dtoa@w+1,7,c
  1575  000AC4  D007               	goto	u1130
  1576  000AC6  5035               	movf	dtoa@w+1,w,c
  1577  000AC8  E103               	bnz	u1120
  1578  000ACA  0434               	decf	dtoa@w,w,c
  1579  000ACC  A0D8               	btfss	status,0,c
  1580  000ACE  D002               	goto	u1130
  1581  000AD0                     u1120:
  1582  000AD0  B276               	btfsc	_flags,1,c
  1583  000AD2  D763               	goto	l1665
  1584  000AD4                     u1130:
  1585                           
  1586                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 308:     if
      +                           (s || (flags & (1 << 2))) {
  1587  000AD4  5036               	movf	dtoa@s,w,c
  1588  000AD6  1037               	iorwf	dtoa@s+1,w,c
  1589  000AD8  A4D8               	btfss	status,2,c
  1590  000ADA  D002               	goto	u1150
  1591  000ADC  A476               	btfss	_flags,2,c
  1592  000ADE  D017               	goto	l1699
  1593  000AE0                     u1150:
  1594                           
  1595                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 309:       
      +                            --i;
  1596  000AE0  0640               	decf	dtoa@i,f,c
  1597  000AE2  A0D8               	btfss	status,0,c
  1598  000AE4  0641               	decf	dtoa@i+1,f,c
  1599                           
  1600                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 310:       
      +                            dbuf[i] = s ? '-' : '+';
  1601  000AE6  5036               	movf	dtoa@s,w,c
  1602  000AE8  1037               	iorwf	dtoa@s+1,w,c
  1603  000AEA  A4D8               	btfss	status,2,c
  1604  000AEC  D004               	goto	l1695
  1605  000AEE  0E00               	movlw	0
  1606  000AF0  6E31               	movwf	_dtoa$435+1,c
  1607  000AF2  0E2B               	movlw	43
  1608  000AF4  D003               	goto	L2
  1609  000AF6                     l1695:
  1610  000AF6  0E00               	movlw	0
  1611  000AF8  6E31               	movwf	_dtoa$435+1,c
  1612  000AFA  0E2D               	movlw	45
  1613  000AFC                     L2:
  1614  000AFC  6E30               	movwf	_dtoa$435,c
  1615  000AFE  0E80               	movlw	low _dbuf
  1616  000B00  2440               	addwf	dtoa@i,w,c
  1617  000B02  6ED9               	movwf	fsr2l,c
  1618  000B04  0E00               	movlw	high _dbuf
  1619  000B06  2041               	addwfc	dtoa@i+1,w,c
  1620  000B08  6EDA               	movwf	fsr2h,c
  1621  000B0A  C030  FFDF         	movff	_dtoa$435,indf2
  1622  000B0E                     l1699:
  1623                           
  1624                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 314:     re
      +                          turn pad(fp, &dbuf[i], w);
  1625  000B0E  C01E  F013         	movff	dtoa@fp,pad@fp
  1626  000B12  C01F  F014         	movff	dtoa@fp+1,pad@fp+1
  1627  000B16  0E80               	movlw	low _dbuf
  1628  000B18  2440               	addwf	dtoa@i,w,c
  1629  000B1A  6E15               	movwf	pad@buf,c
  1630  000B1C  0E00               	movlw	high _dbuf
  1631  000B1E  2041               	addwfc	dtoa@i+1,w,c
  1632  000B20  6E16               	movwf	pad@buf+1,c
  1633  000B22  C034  F017         	movff	dtoa@w,pad@p
  1634  000B26  C035  F018         	movff	dtoa@w+1,pad@p+1
  1635  000B2A  EC34  F008         	call	_pad	;wreg free
  1636  000B2E  C013  F01E         	movff	?_pad,?_dtoa
  1637  000B32  C014  F01F         	movff	?_pad+1,?_dtoa+1
  1638  000B36  0012               	return		;funcret
  1639  000B38                     __end_of_dtoa:
  1640                           	opt callstack 0
  1641                           
  1642 ;; *************** function _pad *****************
  1643 ;; Defined at:
  1644 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1645 ;; Parameters:    Size  Location     Type
  1646 ;;  fp              2   18[COMRAM] PTR struct _IO_FILE
  1647 ;;		 -> sprintf@f(6), 
  1648 ;;  buf             2   20[COMRAM] PTR unsigned char 
  1649 ;;		 -> dbuf(32), 
  1650 ;;  p               2   22[COMRAM] int 
  1651 ;; Auto vars:     Size  Location     Type
  1652 ;;  w               2   27[COMRAM] int 
  1653 ;;  i               2   25[COMRAM] int 
  1654 ;; Return value:  Size  Location     Type
  1655 ;;                  2   18[COMRAM] int 
  1656 ;; Registers used:
  1657 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1658 ;; Tracked objects:
  1659 ;;		On entry : 0/0
  1660 ;;		On exit  : 0/0
  1661 ;;		Unchanged: 0/0
  1662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1663 ;;      Params:         6       0       0       0       0       0       0
  1664 ;;      Locals:         4       0       0       0       0       0       0
  1665 ;;      Temps:          1       0       0       0       0       0       0
  1666 ;;      Totals:        11       0       0       0       0       0       0
  1667 ;;Total ram usage:       11 bytes
  1668 ;; Hardware stack levels used:    1
  1669 ;; Hardware stack levels required when called:    4
  1670 ;; This function calls:
  1671 ;;		_fputc
  1672 ;;		_fputs
  1673 ;;		_strlen
  1674 ;; This function is called by:
  1675 ;;		_dtoa
  1676 ;; This function uses a non-reentrant model
  1677 ;;
  1678                           
  1679                           	psect	text5
  1680  001068                     __ptext5:
  1681                           	opt callstack 0
  1682  001068                     _pad:
  1683                           	opt callstack 22
  1684                           
  1685                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
  1686                           
  1687                           ;incstack = 0
  1688  001068  A076               	btfss	_flags,0,c
  1689  00106A  D00A               	goto	l1505
  1690                           
  1691                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
  1692  00106C  C015  F00C         	movff	pad@buf,fputs@s
  1693  001070  C016  F00D         	movff	pad@buf+1,fputs@s+1
  1694  001074  C013  F00E         	movff	pad@fp,fputs@fp
  1695  001078  C014  F00F         	movff	pad@fp+1,fputs@fp+1
  1696  00107C  ECF5  F009         	call	_fputs	;wreg free
  1697  001080                     l1505:
  1698                           
  1699                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
  1700  001080  BE18               	btfsc	pad@p+1,7,c
  1701  001082  D005               	goto	l1509
  1702  001084  C017  F01C         	movff	pad@p,pad@w
  1703  001088  C018  F01D         	movff	pad@p+1,pad@w+1
  1704  00108C  D004               	goto	l120
  1705  00108E                     l1509:
  1706  00108E  0E00               	movlw	0
  1707  001090  6E1D               	movwf	pad@w+1,c
  1708  001092  0E00               	movlw	0
  1709  001094  6E1C               	movwf	pad@w,c
  1710  001096                     l120:
  1711                           
  1712                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
  1713  001096  0E00               	movlw	0
  1714  001098  6E1B               	movwf	pad@i+1,c
  1715  00109A  0E00               	movlw	0
  1716  00109C  6E1A               	movwf	pad@i,c
  1717                           
  1718                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  1719  00109E  D00C               	goto	l1515
  1720  0010A0                     l1511:
  1721                           
  1722                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
  1723  0010A0  0E00               	movlw	0
  1724  0010A2  6E04               	movwf	fputc@c+1,c
  1725  0010A4  0E20               	movlw	32
  1726  0010A6  6E03               	movwf	fputc@c,c
  1727  0010A8  C013  F005         	movff	pad@fp,fputc@fp
  1728  0010AC  C014  F006         	movff	pad@fp+1,fputc@fp+1
  1729  0010B0  ECE4  F007         	call	_fputc	;wreg free
  1730                           
  1731                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
  1732  0010B4  4A1A               	infsnz	pad@i,f,c
  1733  0010B6  2A1B               	incf	pad@i+1,f,c
  1734  0010B8                     l1515:
  1735                           
  1736                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  1737  0010B8  501C               	movf	pad@w,w,c
  1738  0010BA  5C1A               	subwf	pad@i,w,c
  1739  0010BC  501B               	movf	pad@i+1,w,c
  1740  0010BE  0A80               	xorlw	128
  1741  0010C0  6E19               	movwf	??_pad& (0+255),c
  1742  0010C2  501D               	movf	pad@w+1,w,c
  1743  0010C4  0A80               	xorlw	128
  1744  0010C6  5819               	subwfb	??_pad& (0+255),w,c
  1745  0010C8  A0D8               	btfss	status,0,c
  1746  0010CA  D7EA               	goto	l1511
  1747                           
  1748                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
  1749  0010CC  B076               	btfsc	_flags,0,c
  1750  0010CE  D00A               	goto	l1519
  1751                           
  1752                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
  1753  0010D0  C015  F00C         	movff	pad@buf,fputs@s
  1754  0010D4  C016  F00D         	movff	pad@buf+1,fputs@s+1
  1755  0010D8  C013  F00E         	movff	pad@fp,fputs@fp
  1756  0010DC  C014  F00F         	movff	pad@fp+1,fputs@fp+1
  1757  0010E0  ECF5  F009         	call	_fputs	;wreg free
  1758  0010E4                     l1519:
  1759                           
  1760                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
  1761  0010E4  C015  F003         	movff	pad@buf,strlen@s
  1762  0010E8  C016  F004         	movff	pad@buf+1,strlen@s+1
  1763  0010EC  EC42  F00A         	call	_strlen	;wreg free
  1764  0010F0  501C               	movf	pad@w,w,c
  1765  0010F2  2403               	addwf	?_strlen,w,c
  1766  0010F4  6E13               	movwf	?_pad,c
  1767  0010F6  501D               	movf	pad@w+1,w,c
  1768  0010F8  2004               	addwfc	?_strlen+1,w,c
  1769  0010FA  6E14               	movwf	?_pad+1,c
  1770  0010FC  0012               	return		;funcret
  1771  0010FE                     __end_of_pad:
  1772                           	opt callstack 0
  1773                           
  1774 ;; *************** function _strlen *****************
  1775 ;; Defined at:
  1776 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
  1777 ;; Parameters:    Size  Location     Type
  1778 ;;  s               2    2[COMRAM] PTR const unsigned char 
  1779 ;;		 -> dbuf(32), 
  1780 ;; Auto vars:     Size  Location     Type
  1781 ;;  a               2    4[COMRAM] PTR const unsigned char 
  1782 ;;		 -> dbuf(32), 
  1783 ;; Return value:  Size  Location     Type
  1784 ;;                  2    2[COMRAM] unsigned int 
  1785 ;; Registers used:
  1786 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1787 ;; Tracked objects:
  1788 ;;		On entry : 0/0
  1789 ;;		On exit  : 0/0
  1790 ;;		Unchanged: 0/0
  1791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1792 ;;      Params:         2       0       0       0       0       0       0
  1793 ;;      Locals:         2       0       0       0       0       0       0
  1794 ;;      Temps:          0       0       0       0       0       0       0
  1795 ;;      Totals:         4       0       0       0       0       0       0
  1796 ;;Total ram usage:        4 bytes
  1797 ;; Hardware stack levels used:    1
  1798 ;; Hardware stack levels required when called:    1
  1799 ;; This function calls:
  1800 ;;		Nothing
  1801 ;; This function is called by:
  1802 ;;		_pad
  1803 ;; This function uses a non-reentrant model
  1804 ;;
  1805                           
  1806                           	psect	text6
  1807  001484                     __ptext6:
  1808                           	opt callstack 0
  1809  001484                     _strlen:
  1810                           	opt callstack 24
  1811                           
  1812                           ;incstack = 0
  1813  001484  C003  F005         	movff	strlen@s,strlen@a
  1814  001488  C004  F006         	movff	strlen@s+1,strlen@a+1
  1815  00148C  D002               	goto	l1495
  1816  00148E                     l1493:
  1817  00148E  4A03               	infsnz	strlen@s,f,c
  1818  001490  2A04               	incf	strlen@s+1,f,c
  1819  001492                     l1495:
  1820  001492  C003  FFD9         	movff	strlen@s,fsr2l
  1821  001496  C004  FFDA         	movff	strlen@s+1,fsr2h
  1822  00149A  50DF               	movf	indf2,w,c
  1823  00149C  A4D8               	btfss	status,2,c
  1824  00149E  D7F7               	goto	l1493
  1825  0014A0  5005               	movf	strlen@a,w,c
  1826  0014A2  5C03               	subwf	strlen@s,w,c
  1827  0014A4  6E03               	movwf	?_strlen,c
  1828  0014A6  5006               	movf	strlen@a+1,w,c
  1829  0014A8  5804               	subwfb	strlen@s+1,w,c
  1830  0014AA  6E04               	movwf	?_strlen+1,c
  1831  0014AC  0012               	return		;funcret
  1832  0014AE                     __end_of_strlen:
  1833                           	opt callstack 0
  1834                           
  1835 ;; *************** function _fputs *****************
  1836 ;; Defined at:
  1837 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputs.c"
  1838 ;; Parameters:    Size  Location     Type
  1839 ;;  s               2   11[COMRAM] PTR const unsigned char 
  1840 ;;		 -> dbuf(32), 
  1841 ;;  fp              2   13[COMRAM] PTR struct _IO_FILE
  1842 ;;		 -> sprintf@f(6), 
  1843 ;; Auto vars:     Size  Location     Type
  1844 ;;  i               2   16[COMRAM] int 
  1845 ;;  c               1   15[COMRAM] unsigned char 
  1846 ;; Return value:  Size  Location     Type
  1847 ;;                  2   11[COMRAM] int 
  1848 ;; Registers used:
  1849 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1850 ;; Tracked objects:
  1851 ;;		On entry : 0/0
  1852 ;;		On exit  : 0/0
  1853 ;;		Unchanged: 0/0
  1854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1855 ;;      Params:         4       0       0       0       0       0       0
  1856 ;;      Locals:         3       0       0       0       0       0       0
  1857 ;;      Temps:          0       0       0       0       0       0       0
  1858 ;;      Totals:         7       0       0       0       0       0       0
  1859 ;;Total ram usage:        7 bytes
  1860 ;; Hardware stack levels used:    1
  1861 ;; Hardware stack levels required when called:    3
  1862 ;; This function calls:
  1863 ;;		_fputc
  1864 ;; This function is called by:
  1865 ;;		_pad
  1866 ;; This function uses a non-reentrant model
  1867 ;;
  1868                           
  1869                           	psect	text7
  1870  0013EA                     __ptext7:
  1871                           	opt callstack 0
  1872  0013EA                     _fputs:
  1873                           	opt callstack 22
  1874                           
  1875                           ;incstack = 0
  1876  0013EA  0E00               	movlw	0
  1877  0013EC  6E12               	movwf	fputs@i+1,c
  1878  0013EE  0E00               	movlw	0
  1879  0013F0  6E11               	movwf	fputs@i,c
  1880  0013F2  D00B               	goto	l1489
  1881  0013F4                     l1485:
  1882  0013F4  C010  F003         	movff	fputs@c,fputc@c
  1883  0013F8  6A04               	clrf	fputc@c+1,c
  1884  0013FA  C00E  F005         	movff	fputs@fp,fputc@fp
  1885  0013FE  C00F  F006         	movff	fputs@fp+1,fputc@fp+1
  1886  001402  ECE4  F007         	call	_fputc	;wreg free
  1887  001406  4A11               	infsnz	fputs@i,f,c
  1888  001408  2A12               	incf	fputs@i+1,f,c
  1889  00140A                     l1489:
  1890  00140A  5011               	movf	fputs@i,w,c
  1891  00140C  240C               	addwf	fputs@s,w,c
  1892  00140E  6ED9               	movwf	fsr2l,c
  1893  001410  5012               	movf	fputs@i+1,w,c
  1894  001412  200D               	addwfc	fputs@s+1,w,c
  1895  001414  6EDA               	movwf	fsr2h,c
  1896  001416  50DF               	movf	indf2,w,c
  1897  001418  6E10               	movwf	fputs@c,c
  1898  00141A  5010               	movf	fputs@c,w,c
  1899  00141C  B4D8               	btfsc	status,2,c
  1900  00141E  0012               	return	
  1901  001420  D7E9               	goto	l1485
  1902  001422                     __end_of_fputs:
  1903                           	opt callstack 0
  1904                           
  1905 ;; *************** function _fputc *****************
  1906 ;; Defined at:
  1907 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputc.c"
  1908 ;; Parameters:    Size  Location     Type
  1909 ;;  c               2    2[COMRAM] int 
  1910 ;;  fp              2    4[COMRAM] PTR struct _IO_FILE
  1911 ;;		 -> sprintf@f(6), 
  1912 ;; Auto vars:     Size  Location     Type
  1913 ;;		None
  1914 ;; Return value:  Size  Location     Type
  1915 ;;                  2    2[COMRAM] int 
  1916 ;; Registers used:
  1917 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1918 ;; Tracked objects:
  1919 ;;		On entry : 0/0
  1920 ;;		On exit  : 0/0
  1921 ;;		Unchanged: 0/0
  1922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1923 ;;      Params:         4       0       0       0       0       0       0
  1924 ;;      Locals:         0       0       0       0       0       0       0
  1925 ;;      Temps:          5       0       0       0       0       0       0
  1926 ;;      Totals:         9       0       0       0       0       0       0
  1927 ;;Total ram usage:        9 bytes
  1928 ;; Hardware stack levels used:    1
  1929 ;; Hardware stack levels required when called:    2
  1930 ;; This function calls:
  1931 ;;		_putch
  1932 ;; This function is called by:
  1933 ;;		_pad
  1934 ;;		_vfpfcnvrt
  1935 ;;		_fputs
  1936 ;; This function uses a non-reentrant model
  1937 ;;
  1938                           
  1939                           	psect	text8
  1940  000FC8                     __ptext8:
  1941                           	opt callstack 0
  1942  000FC8                     _fputc:
  1943                           	opt callstack 25
  1944                           
  1945                           ;incstack = 0
  1946  000FC8  5005               	movf	fputc@fp,w,c
  1947  000FCA  1006               	iorwf	fputc@fp+1,w,c
  1948  000FCC  B4D8               	btfsc	status,2,c
  1949  000FCE  D004               	goto	u740
  1950  000FD0  5005               	movf	fputc@fp,w,c
  1951  000FD2  1006               	iorwf	fputc@fp+1,w,c
  1952  000FD4  A4D8               	btfss	status,2,c
  1953  000FD6  D004               	goto	l1475
  1954  000FD8                     u740:
  1955  000FD8  5003               	movf	fputc@c,w,c
  1956  000FDA  EC96  F00A         	call	_putch
  1957  000FDE  0012               	return	
  1958  000FE0                     l1475:
  1959  000FE0  EE20 F004          	lfsr	2,4
  1960  000FE4  5005               	movf	fputc@fp,w,c
  1961  000FE6  26D9               	addwf	fsr2l,f,c
  1962  000FE8  5006               	movf	fputc@fp+1,w,c
  1963  000FEA  22DA               	addwfc	fsr2h,f,c
  1964  000FEC  50DE               	movf	postinc2,w,c
  1965  000FEE  10DE               	iorwf	postinc2,w,c
  1966  000FF0  B4D8               	btfsc	status,2,c
  1967  000FF2  D016               	goto	u760
  1968  000FF4  EE20 F004          	lfsr	2,4
  1969  000FF8  5005               	movf	fputc@fp,w,c
  1970  000FFA  26D9               	addwf	fsr2l,f,c
  1971  000FFC  5006               	movf	fputc@fp+1,w,c
  1972  000FFE  22DA               	addwfc	fsr2h,f,c
  1973  001000  EE10 F002          	lfsr	1,2
  1974  001004  5005               	movf	fputc@fp,w,c
  1975  001006  26E1               	addwf	fsr1l,f,c
  1976  001008  5006               	movf	fputc@fp+1,w,c
  1977  00100A  22E2               	addwfc	fsr1h,f,c
  1978  00100C  50DE               	movf	postinc2,w,c
  1979  00100E  5CE6               	subwf	postinc1,w,c
  1980  001010  50E6               	movf	postinc1,w,c
  1981  001012  0A80               	xorlw	128
  1982  001014  6E0B               	movwf	(??_fputc+4)& (0+255),c
  1983  001016  50DE               	movf	postinc2,w,c
  1984  001018  0A80               	xorlw	128
  1985  00101A  580B               	subwfb	(??_fputc+4)& (0+255),w,c
  1986  00101C  B0D8               	btfsc	status,0,c
  1987  00101E  0012               	return	
  1988  001020                     u760:
  1989  001020  EE20 F002          	lfsr	2,2
  1990  001024  5005               	movf	fputc@fp,w,c
  1991  001026  26D9               	addwf	fsr2l,f,c
  1992  001028  5006               	movf	fputc@fp+1,w,c
  1993  00102A  22DA               	addwfc	fsr2h,f,c
  1994  00102C  CFDE F007          	movff	postinc2,??_fputc
  1995  001030  CFDD F008          	movff	postdec2,??_fputc+1
  1996  001034  C005  FFD9         	movff	fputc@fp,fsr2l
  1997  001038  C006  FFDA         	movff	fputc@fp+1,fsr2h
  1998  00103C  CFDE F009          	movff	postinc2,??_fputc+2
  1999  001040  CFDD F00A          	movff	postdec2,??_fputc+3
  2000  001044  5007               	movf	??_fputc,w,c
  2001  001046  2409               	addwf	??_fputc+2,w,c
  2002  001048  6ED9               	movwf	fsr2l,c
  2003  00104A  5008               	movf	??_fputc+1,w,c
  2004  00104C  200A               	addwfc	??_fputc+3,w,c
  2005  00104E  6EDA               	movwf	fsr2h,c
  2006  001050  C003  FFDF         	movff	fputc@c,indf2
  2007  001054  EE20 F002          	lfsr	2,2
  2008  001058  5005               	movf	fputc@fp,w,c
  2009  00105A  26D9               	addwf	fsr2l,f,c
  2010  00105C  5006               	movf	fputc@fp+1,w,c
  2011  00105E  22DA               	addwfc	fsr2h,f,c
  2012  001060  2ADE               	incf	postinc2,f,c
  2013  001062  0E00               	movlw	0
  2014  001064  22DD               	addwfc	postdec2,f,c
  2015  001066  0012               	return		;funcret
  2016  001068                     __end_of_fputc:
  2017                           	opt callstack 0
  2018                           
  2019 ;; *************** function _putch *****************
  2020 ;; Defined at:
  2021 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\putch.c"
  2022 ;; Parameters:    Size  Location     Type
  2023 ;;  c               1    wreg     unsigned char 
  2024 ;; Auto vars:     Size  Location     Type
  2025 ;;  c               1    0[COMRAM] unsigned char 
  2026 ;; Return value:  Size  Location     Type
  2027 ;;                  1    wreg      void 
  2028 ;; Registers used:
  2029 ;;		wreg
  2030 ;; Tracked objects:
  2031 ;;		On entry : 0/0
  2032 ;;		On exit  : 0/0
  2033 ;;		Unchanged: 0/0
  2034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2035 ;;      Params:         0       0       0       0       0       0       0
  2036 ;;      Locals:         0       0       0       0       0       0       0
  2037 ;;      Temps:          0       0       0       0       0       0       0
  2038 ;;      Totals:         0       0       0       0       0       0       0
  2039 ;;Total ram usage:        0 bytes
  2040 ;; Hardware stack levels used:    1
  2041 ;; Hardware stack levels required when called:    1
  2042 ;; This function calls:
  2043 ;;		Nothing
  2044 ;; This function is called by:
  2045 ;;		_fputc
  2046 ;; This function uses a non-reentrant model
  2047 ;;
  2048                           
  2049                           	psect	text9
  2050  00152C                     __ptext9:
  2051                           	opt callstack 0
  2052  00152C                     _putch:
  2053                           	opt callstack 25
  2054                           
  2055                           ;incstack = 0
  2056  00152C  0012               	return		;funcret
  2057  00152E                     __end_of_putch:
  2058                           	opt callstack 0
  2059                           
  2060 ;; *************** function _abs *****************
  2061 ;; Defined at:
  2062 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\abs.c"
  2063 ;; Parameters:    Size  Location     Type
  2064 ;;  a               2   20[COMRAM] int 
  2065 ;; Auto vars:     Size  Location     Type
  2066 ;;		None
  2067 ;; Return value:  Size  Location     Type
  2068 ;;                  2   20[COMRAM] int 
  2069 ;; Registers used:
  2070 ;;		wreg, status,2, status,0
  2071 ;; Tracked objects:
  2072 ;;		On entry : 0/0
  2073 ;;		On exit  : 0/0
  2074 ;;		Unchanged: 0/0
  2075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2076 ;;      Params:         2       0       0       0       0       0       0
  2077 ;;      Locals:         0       0       0       0       0       0       0
  2078 ;;      Temps:          2       0       0       0       0       0       0
  2079 ;;      Totals:         4       0       0       0       0       0       0
  2080 ;;Total ram usage:        4 bytes
  2081 ;; Hardware stack levels used:    1
  2082 ;; Hardware stack levels required when called:    1
  2083 ;; This function calls:
  2084 ;;		Nothing
  2085 ;; This function is called by:
  2086 ;;		_dtoa
  2087 ;; This function uses a non-reentrant model
  2088 ;;
  2089                           
  2090                           	psect	text10
  2091  001422                     __ptext10:
  2092                           	opt callstack 0
  2093  001422                     _abs:
  2094                           	opt callstack 25
  2095                           
  2096                           ;incstack = 0
  2097  001422  BE16               	btfsc	abs@a+1,7,c
  2098  001424  D005               	goto	u830
  2099  001426  5016               	movf	abs@a+1,w,c
  2100  001428  E110               	bnz	l865
  2101  00142A  0415               	decf	abs@a,w,c
  2102  00142C  B0D8               	btfsc	status,0,c
  2103  00142E  D00D               	goto	l865
  2104  001430                     u830:
  2105  001430  C015  F017         	movff	abs@a,??_abs
  2106  001434  C016  F018         	movff	abs@a+1,??_abs+1
  2107  001438  1E17               	comf	??_abs,f,c
  2108  00143A  1E18               	comf	??_abs+1,f,c
  2109  00143C  4A17               	infsnz	??_abs,f,c
  2110  00143E  2A18               	incf	??_abs+1,f,c
  2111  001440  C017  F015         	movff	??_abs,?_abs
  2112  001444  C018  F016         	movff	??_abs+1,?_abs+1
  2113  001448  0012               	return	
  2114  00144A                     l865:
  2115  00144A  C015  F015         	movff	abs@a,?_abs
  2116  00144E  C016  F016         	movff	abs@a+1,?_abs+1
  2117  001452  0012               	return		;funcret
  2118  001454                     __end_of_abs:
  2119                           	opt callstack 0
  2120                           
  2121 ;; *************** function ___aomod *****************
  2122 ;; Defined at:
  2123 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aomod.c"
  2124 ;; Parameters:    Size  Location     Type
  2125 ;;  dividend        8    2[COMRAM] long long 
  2126 ;;  divisor         8   10[COMRAM] long long 
  2127 ;; Auto vars:     Size  Location     Type
  2128 ;;  sign            1   19[COMRAM] unsigned char 
  2129 ;;  counter         1   18[COMRAM] unsigned char 
  2130 ;; Return value:  Size  Location     Type
  2131 ;;                  8    2[COMRAM] long long 
  2132 ;; Registers used:
  2133 ;;		wreg, status,2, status,0
  2134 ;; Tracked objects:
  2135 ;;		On entry : 0/0
  2136 ;;		On exit  : 0/0
  2137 ;;		Unchanged: 0/0
  2138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2139 ;;      Params:        16       0       0       0       0       0       0
  2140 ;;      Locals:         2       0       0       0       0       0       0
  2141 ;;      Temps:          0       0       0       0       0       0       0
  2142 ;;      Totals:        18       0       0       0       0       0       0
  2143 ;;Total ram usage:       18 bytes
  2144 ;; Hardware stack levels used:    1
  2145 ;; Hardware stack levels required when called:    1
  2146 ;; This function calls:
  2147 ;;		Nothing
  2148 ;; This function is called by:
  2149 ;;		_dtoa
  2150 ;; This function uses a non-reentrant model
  2151 ;;
  2152                           
  2153                           	psect	text11
  2154  000DC0                     __ptext11:
  2155                           	opt callstack 0
  2156  000DC0                     ___aomod:
  2157                           	opt callstack 25
  2158                           
  2159                           ;incstack = 0
  2160  000DC0  0E00               	movlw	0
  2161  000DC2  6E14               	movwf	___aomod@sign,c
  2162  000DC4  AE0A               	btfss	___aomod@dividend+7,7,c
  2163  000DC6  D012               	goto	l1589
  2164  000DC8  1E0A               	comf	___aomod@dividend+7,f,c
  2165  000DCA  1E09               	comf	___aomod@dividend+6,f,c
  2166  000DCC  1E08               	comf	___aomod@dividend+5,f,c
  2167  000DCE  1E07               	comf	___aomod@dividend+4,f,c
  2168  000DD0  1E06               	comf	___aomod@dividend+3,f,c
  2169  000DD2  1E05               	comf	___aomod@dividend+2,f,c
  2170  000DD4  1E04               	comf	___aomod@dividend+1,f,c
  2171  000DD6  6C03               	negf	___aomod@dividend,c
  2172  000DD8  0E00               	movlw	0
  2173  000DDA  2204               	addwfc	___aomod@dividend+1,f,c
  2174  000DDC  2205               	addwfc	___aomod@dividend+2,f,c
  2175  000DDE  2206               	addwfc	___aomod@dividend+3,f,c
  2176  000DE0  2207               	addwfc	___aomod@dividend+4,f,c
  2177  000DE2  2208               	addwfc	___aomod@dividend+5,f,c
  2178  000DE4  2209               	addwfc	___aomod@dividend+6,f,c
  2179  000DE6  220A               	addwfc	___aomod@dividend+7,f,c
  2180  000DE8  0E01               	movlw	1
  2181  000DEA  6E14               	movwf	___aomod@sign,c
  2182  000DEC                     l1589:
  2183  000DEC  AE12               	btfss	___aomod@divisor+7,7,c
  2184  000DEE  D010               	goto	l1593
  2185  000DF0  1E12               	comf	___aomod@divisor+7,f,c
  2186  000DF2  1E11               	comf	___aomod@divisor+6,f,c
  2187  000DF4  1E10               	comf	___aomod@divisor+5,f,c
  2188  000DF6  1E0F               	comf	___aomod@divisor+4,f,c
  2189  000DF8  1E0E               	comf	___aomod@divisor+3,f,c
  2190  000DFA  1E0D               	comf	___aomod@divisor+2,f,c
  2191  000DFC  1E0C               	comf	___aomod@divisor+1,f,c
  2192  000DFE  6C0B               	negf	___aomod@divisor,c
  2193  000E00  0E00               	movlw	0
  2194  000E02  220C               	addwfc	___aomod@divisor+1,f,c
  2195  000E04  220D               	addwfc	___aomod@divisor+2,f,c
  2196  000E06  220E               	addwfc	___aomod@divisor+3,f,c
  2197  000E08  220F               	addwfc	___aomod@divisor+4,f,c
  2198  000E0A  2210               	addwfc	___aomod@divisor+5,f,c
  2199  000E0C  2211               	addwfc	___aomod@divisor+6,f,c
  2200  000E0E  2212               	addwfc	___aomod@divisor+7,f,c
  2201  000E10                     l1593:
  2202  000E10  500B               	movf	___aomod@divisor,w,c
  2203  000E12  100C               	iorwf	___aomod@divisor+1,w,c
  2204  000E14  100D               	iorwf	___aomod@divisor+2,w,c
  2205  000E16  100E               	iorwf	___aomod@divisor+3,w,c
  2206  000E18  100F               	iorwf	___aomod@divisor+4,w,c
  2207  000E1A  1010               	iorwf	___aomod@divisor+5,w,c
  2208  000E1C  1011               	iorwf	___aomod@divisor+6,w,c
  2209  000E1E  1012               	iorwf	___aomod@divisor+7,w,c
  2210  000E20  B4D8               	btfsc	status,2,c
  2211  000E22  D03C               	goto	l1609
  2212  000E24  0E01               	movlw	1
  2213  000E26  6E13               	movwf	___aomod@counter,c
  2214  000E28  D00A               	goto	l1599
  2215  000E2A                     l1597:
  2216  000E2A  90D8               	bcf	status,0,c
  2217  000E2C  360B               	rlcf	___aomod@divisor,f,c
  2218  000E2E  360C               	rlcf	___aomod@divisor+1,f,c
  2219  000E30  360D               	rlcf	___aomod@divisor+2,f,c
  2220  000E32  360E               	rlcf	___aomod@divisor+3,f,c
  2221  000E34  360F               	rlcf	___aomod@divisor+4,f,c
  2222  000E36  3610               	rlcf	___aomod@divisor+5,f,c
  2223  000E38  3611               	rlcf	___aomod@divisor+6,f,c
  2224  000E3A  3612               	rlcf	___aomod@divisor+7,f,c
  2225  000E3C  2A13               	incf	___aomod@counter,f,c
  2226  000E3E                     l1599:
  2227  000E3E  AE12               	btfss	___aomod@divisor+7,7,c
  2228  000E40  D7F4               	goto	l1597
  2229  000E42                     u960:
  2230  000E42  500B               	movf	___aomod@divisor,w,c
  2231  000E44  5C03               	subwf	___aomod@dividend,w,c
  2232  000E46  500C               	movf	___aomod@divisor+1,w,c
  2233  000E48  5804               	subwfb	___aomod@dividend+1,w,c
  2234  000E4A  500D               	movf	___aomod@divisor+2,w,c
  2235  000E4C  5805               	subwfb	___aomod@dividend+2,w,c
  2236  000E4E  500E               	movf	___aomod@divisor+3,w,c
  2237  000E50  5806               	subwfb	___aomod@dividend+3,w,c
  2238  000E52  500F               	movf	___aomod@divisor+4,w,c
  2239  000E54  5807               	subwfb	___aomod@dividend+4,w,c
  2240  000E56  5010               	movf	___aomod@divisor+5,w,c
  2241  000E58  5808               	subwfb	___aomod@dividend+5,w,c
  2242  000E5A  5011               	movf	___aomod@divisor+6,w,c
  2243  000E5C  5809               	subwfb	___aomod@dividend+6,w,c
  2244  000E5E  5012               	movf	___aomod@divisor+7,w,c
  2245  000E60  580A               	subwfb	___aomod@dividend+7,w,c
  2246  000E62  A0D8               	btfss	status,0,c
  2247  000E64  D010               	goto	l1605
  2248  000E66  500B               	movf	___aomod@divisor,w,c
  2249  000E68  5E03               	subwf	___aomod@dividend,f,c
  2250  000E6A  500C               	movf	___aomod@divisor+1,w,c
  2251  000E6C  5A04               	subwfb	___aomod@dividend+1,f,c
  2252  000E6E  500D               	movf	___aomod@divisor+2,w,c
  2253  000E70  5A05               	subwfb	___aomod@dividend+2,f,c
  2254  000E72  500E               	movf	___aomod@divisor+3,w,c
  2255  000E74  5A06               	subwfb	___aomod@dividend+3,f,c
  2256  000E76  500F               	movf	___aomod@divisor+4,w,c
  2257  000E78  5A07               	subwfb	___aomod@dividend+4,f,c
  2258  000E7A  5010               	movf	___aomod@divisor+5,w,c
  2259  000E7C  5A08               	subwfb	___aomod@dividend+5,f,c
  2260  000E7E  5011               	movf	___aomod@divisor+6,w,c
  2261  000E80  5A09               	subwfb	___aomod@dividend+6,f,c
  2262  000E82  5012               	movf	___aomod@divisor+7,w,c
  2263  000E84  5A0A               	subwfb	___aomod@dividend+7,f,c
  2264  000E86                     l1605:
  2265  000E86  90D8               	bcf	status,0,c
  2266  000E88  3212               	rrcf	___aomod@divisor+7,f,c
  2267  000E8A  3211               	rrcf	___aomod@divisor+6,f,c
  2268  000E8C  3210               	rrcf	___aomod@divisor+5,f,c
  2269  000E8E  320F               	rrcf	___aomod@divisor+4,f,c
  2270  000E90  320E               	rrcf	___aomod@divisor+3,f,c
  2271  000E92  320D               	rrcf	___aomod@divisor+2,f,c
  2272  000E94  320C               	rrcf	___aomod@divisor+1,f,c
  2273  000E96  320B               	rrcf	___aomod@divisor,f,c
  2274  000E98  2E13               	decfsz	___aomod@counter,f,c
  2275  000E9A  D7D3               	goto	u960
  2276  000E9C                     l1609:
  2277  000E9C  5014               	movf	___aomod@sign,w,c
  2278  000E9E  B4D8               	btfsc	status,2,c
  2279  000EA0  D010               	goto	l1613
  2280  000EA2  1E0A               	comf	___aomod@dividend+7,f,c
  2281  000EA4  1E09               	comf	___aomod@dividend+6,f,c
  2282  000EA6  1E08               	comf	___aomod@dividend+5,f,c
  2283  000EA8  1E07               	comf	___aomod@dividend+4,f,c
  2284  000EAA  1E06               	comf	___aomod@dividend+3,f,c
  2285  000EAC  1E05               	comf	___aomod@dividend+2,f,c
  2286  000EAE  1E04               	comf	___aomod@dividend+1,f,c
  2287  000EB0  6C03               	negf	___aomod@dividend,c
  2288  000EB2  0E00               	movlw	0
  2289  000EB4  2204               	addwfc	___aomod@dividend+1,f,c
  2290  000EB6  2205               	addwfc	___aomod@dividend+2,f,c
  2291  000EB8  2206               	addwfc	___aomod@dividend+3,f,c
  2292  000EBA  2207               	addwfc	___aomod@dividend+4,f,c
  2293  000EBC  2208               	addwfc	___aomod@dividend+5,f,c
  2294  000EBE  2209               	addwfc	___aomod@dividend+6,f,c
  2295  000EC0  220A               	addwfc	___aomod@dividend+7,f,c
  2296  000EC2                     l1613:
  2297  000EC2  C003  F003         	movff	___aomod@dividend,?___aomod
  2298  000EC6  C004  F004         	movff	___aomod@dividend+1,?___aomod+1
  2299  000ECA  C005  F005         	movff	___aomod@dividend+2,?___aomod+2
  2300  000ECE  C006  F006         	movff	___aomod@dividend+3,?___aomod+3
  2301  000ED2  C007  F007         	movff	___aomod@dividend+4,?___aomod+4
  2302  000ED6  C008  F008         	movff	___aomod@dividend+5,?___aomod+5
  2303  000EDA  C009  F009         	movff	___aomod@dividend+6,?___aomod+6
  2304  000EDE  C00A  F00A         	movff	___aomod@dividend+7,?___aomod+7
  2305  000EE2  0012               	return		;funcret
  2306  000EE4                     __end_of___aomod:
  2307                           	opt callstack 0
  2308                           
  2309 ;; *************** function ___aodiv *****************
  2310 ;; Defined at:
  2311 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aodiv.c"
  2312 ;; Parameters:    Size  Location     Type
  2313 ;;  dividend        8    2[COMRAM] long long 
  2314 ;;  divisor         8   10[COMRAM] long long 
  2315 ;; Auto vars:     Size  Location     Type
  2316 ;;  quotient        8   20[COMRAM] long long 
  2317 ;;  sign            1   19[COMRAM] unsigned char 
  2318 ;;  counter         1   18[COMRAM] unsigned char 
  2319 ;; Return value:  Size  Location     Type
  2320 ;;                  8    2[COMRAM] long long 
  2321 ;; Registers used:
  2322 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2323 ;; Tracked objects:
  2324 ;;		On entry : 0/0
  2325 ;;		On exit  : 0/0
  2326 ;;		Unchanged: 0/0
  2327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2328 ;;      Params:        16       0       0       0       0       0       0
  2329 ;;      Locals:        10       0       0       0       0       0       0
  2330 ;;      Temps:          0       0       0       0       0       0       0
  2331 ;;      Totals:        26       0       0       0       0       0       0
  2332 ;;Total ram usage:       26 bytes
  2333 ;; Hardware stack levels used:    1
  2334 ;; Hardware stack levels required when called:    1
  2335 ;; This function calls:
  2336 ;;		Nothing
  2337 ;; This function is called by:
  2338 ;;		_dtoa
  2339 ;; This function uses a non-reentrant model
  2340 ;;
  2341                           
  2342                           	psect	text12
  2343  000B38                     __ptext12:
  2344                           	opt callstack 0
  2345  000B38                     ___aodiv:
  2346                           	opt callstack 25
  2347                           
  2348                           ;incstack = 0
  2349  000B38  0E00               	movlw	0
  2350  000B3A  6E14               	movwf	___aodiv@sign,c
  2351  000B3C  AE12               	btfss	___aodiv@divisor+7,7,c
  2352  000B3E  D012               	goto	l1545
  2353  000B40  1E12               	comf	___aodiv@divisor+7,f,c
  2354  000B42  1E11               	comf	___aodiv@divisor+6,f,c
  2355  000B44  1E10               	comf	___aodiv@divisor+5,f,c
  2356  000B46  1E0F               	comf	___aodiv@divisor+4,f,c
  2357  000B48  1E0E               	comf	___aodiv@divisor+3,f,c
  2358  000B4A  1E0D               	comf	___aodiv@divisor+2,f,c
  2359  000B4C  1E0C               	comf	___aodiv@divisor+1,f,c
  2360  000B4E  6C0B               	negf	___aodiv@divisor,c
  2361  000B50  0E00               	movlw	0
  2362  000B52  220C               	addwfc	___aodiv@divisor+1,f,c
  2363  000B54  220D               	addwfc	___aodiv@divisor+2,f,c
  2364  000B56  220E               	addwfc	___aodiv@divisor+3,f,c
  2365  000B58  220F               	addwfc	___aodiv@divisor+4,f,c
  2366  000B5A  2210               	addwfc	___aodiv@divisor+5,f,c
  2367  000B5C  2211               	addwfc	___aodiv@divisor+6,f,c
  2368  000B5E  2212               	addwfc	___aodiv@divisor+7,f,c
  2369  000B60  0E01               	movlw	1
  2370  000B62  6E14               	movwf	___aodiv@sign,c
  2371  000B64                     l1545:
  2372  000B64  AE0A               	btfss	___aodiv@dividend+7,7,c
  2373  000B66  D012               	goto	l1551
  2374  000B68  1E0A               	comf	___aodiv@dividend+7,f,c
  2375  000B6A  1E09               	comf	___aodiv@dividend+6,f,c
  2376  000B6C  1E08               	comf	___aodiv@dividend+5,f,c
  2377  000B6E  1E07               	comf	___aodiv@dividend+4,f,c
  2378  000B70  1E06               	comf	___aodiv@dividend+3,f,c
  2379  000B72  1E05               	comf	___aodiv@dividend+2,f,c
  2380  000B74  1E04               	comf	___aodiv@dividend+1,f,c
  2381  000B76  6C03               	negf	___aodiv@dividend,c
  2382  000B78  0E00               	movlw	0
  2383  000B7A  2204               	addwfc	___aodiv@dividend+1,f,c
  2384  000B7C  2205               	addwfc	___aodiv@dividend+2,f,c
  2385  000B7E  2206               	addwfc	___aodiv@dividend+3,f,c
  2386  000B80  2207               	addwfc	___aodiv@dividend+4,f,c
  2387  000B82  2208               	addwfc	___aodiv@dividend+5,f,c
  2388  000B84  2209               	addwfc	___aodiv@dividend+6,f,c
  2389  000B86  220A               	addwfc	___aodiv@dividend+7,f,c
  2390  000B88  0E01               	movlw	1
  2391  000B8A  1A14               	xorwf	___aodiv@sign,f,c
  2392  000B8C                     l1551:
  2393  000B8C  EE20  F015         	lfsr	2,___aodiv@quotient
  2394  000B90  0E07               	movlw	7
  2395  000B92                     u881:
  2396  000B92  6ADE               	clrf	postinc2,c
  2397  000B94  06E8               	decf	wreg,f,c
  2398  000B96  E2FD               	bc	u881
  2399  000B98  500B               	movf	___aodiv@divisor,w,c
  2400  000B9A  100C               	iorwf	___aodiv@divisor+1,w,c
  2401  000B9C  100D               	iorwf	___aodiv@divisor+2,w,c
  2402  000B9E  100E               	iorwf	___aodiv@divisor+3,w,c
  2403  000BA0  100F               	iorwf	___aodiv@divisor+4,w,c
  2404  000BA2  1010               	iorwf	___aodiv@divisor+5,w,c
  2405  000BA4  1011               	iorwf	___aodiv@divisor+6,w,c
  2406  000BA6  1012               	iorwf	___aodiv@divisor+7,w,c
  2407  000BA8  B4D8               	btfsc	status,2,c
  2408  000BAA  D046               	goto	l1573
  2409  000BAC  0E01               	movlw	1
  2410  000BAE  6E13               	movwf	___aodiv@counter,c
  2411  000BB0  D00A               	goto	l1559
  2412  000BB2                     l1557:
  2413  000BB2  90D8               	bcf	status,0,c
  2414  000BB4  360B               	rlcf	___aodiv@divisor,f,c
  2415  000BB6  360C               	rlcf	___aodiv@divisor+1,f,c
  2416  000BB8  360D               	rlcf	___aodiv@divisor+2,f,c
  2417  000BBA  360E               	rlcf	___aodiv@divisor+3,f,c
  2418  000BBC  360F               	rlcf	___aodiv@divisor+4,f,c
  2419  000BBE  3610               	rlcf	___aodiv@divisor+5,f,c
  2420  000BC0  3611               	rlcf	___aodiv@divisor+6,f,c
  2421  000BC2  3612               	rlcf	___aodiv@divisor+7,f,c
  2422  000BC4  2A13               	incf	___aodiv@counter,f,c
  2423  000BC6                     l1559:
  2424  000BC6  AE12               	btfss	___aodiv@divisor+7,7,c
  2425  000BC8  D7F4               	goto	l1557
  2426  000BCA                     u900:
  2427  000BCA  90D8               	bcf	status,0,c
  2428  000BCC  3615               	rlcf	___aodiv@quotient,f,c
  2429  000BCE  3616               	rlcf	___aodiv@quotient+1,f,c
  2430  000BD0  3617               	rlcf	___aodiv@quotient+2,f,c
  2431  000BD2  3618               	rlcf	___aodiv@quotient+3,f,c
  2432  000BD4  3619               	rlcf	___aodiv@quotient+4,f,c
  2433  000BD6  361A               	rlcf	___aodiv@quotient+5,f,c
  2434  000BD8  361B               	rlcf	___aodiv@quotient+6,f,c
  2435  000BDA  361C               	rlcf	___aodiv@quotient+7,f,c
  2436  000BDC  500B               	movf	___aodiv@divisor,w,c
  2437  000BDE  5C03               	subwf	___aodiv@dividend,w,c
  2438  000BE0  500C               	movf	___aodiv@divisor+1,w,c
  2439  000BE2  5804               	subwfb	___aodiv@dividend+1,w,c
  2440  000BE4  500D               	movf	___aodiv@divisor+2,w,c
  2441  000BE6  5805               	subwfb	___aodiv@dividend+2,w,c
  2442  000BE8  500E               	movf	___aodiv@divisor+3,w,c
  2443  000BEA  5806               	subwfb	___aodiv@dividend+3,w,c
  2444  000BEC  500F               	movf	___aodiv@divisor+4,w,c
  2445  000BEE  5807               	subwfb	___aodiv@dividend+4,w,c
  2446  000BF0  5010               	movf	___aodiv@divisor+5,w,c
  2447  000BF2  5808               	subwfb	___aodiv@dividend+5,w,c
  2448  000BF4  5011               	movf	___aodiv@divisor+6,w,c
  2449  000BF6  5809               	subwfb	___aodiv@dividend+6,w,c
  2450  000BF8  5012               	movf	___aodiv@divisor+7,w,c
  2451  000BFA  580A               	subwfb	___aodiv@dividend+7,w,c
  2452  000BFC  A0D8               	btfss	status,0,c
  2453  000BFE  D011               	goto	l1569
  2454  000C00  500B               	movf	___aodiv@divisor,w,c
  2455  000C02  5E03               	subwf	___aodiv@dividend,f,c
  2456  000C04  500C               	movf	___aodiv@divisor+1,w,c
  2457  000C06  5A04               	subwfb	___aodiv@dividend+1,f,c
  2458  000C08  500D               	movf	___aodiv@divisor+2,w,c
  2459  000C0A  5A05               	subwfb	___aodiv@dividend+2,f,c
  2460  000C0C  500E               	movf	___aodiv@divisor+3,w,c
  2461  000C0E  5A06               	subwfb	___aodiv@dividend+3,f,c
  2462  000C10  500F               	movf	___aodiv@divisor+4,w,c
  2463  000C12  5A07               	subwfb	___aodiv@dividend+4,f,c
  2464  000C14  5010               	movf	___aodiv@divisor+5,w,c
  2465  000C16  5A08               	subwfb	___aodiv@dividend+5,f,c
  2466  000C18  5011               	movf	___aodiv@divisor+6,w,c
  2467  000C1A  5A09               	subwfb	___aodiv@dividend+6,f,c
  2468  000C1C  5012               	movf	___aodiv@divisor+7,w,c
  2469  000C1E  5A0A               	subwfb	___aodiv@dividend+7,f,c
  2470  000C20  8015               	bsf	___aodiv@quotient,0,c
  2471  000C22                     l1569:
  2472  000C22  90D8               	bcf	status,0,c
  2473  000C24  3212               	rrcf	___aodiv@divisor+7,f,c
  2474  000C26  3211               	rrcf	___aodiv@divisor+6,f,c
  2475  000C28  3210               	rrcf	___aodiv@divisor+5,f,c
  2476  000C2A  320F               	rrcf	___aodiv@divisor+4,f,c
  2477  000C2C  320E               	rrcf	___aodiv@divisor+3,f,c
  2478  000C2E  320D               	rrcf	___aodiv@divisor+2,f,c
  2479  000C30  320C               	rrcf	___aodiv@divisor+1,f,c
  2480  000C32  320B               	rrcf	___aodiv@divisor,f,c
  2481  000C34  2E13               	decfsz	___aodiv@counter,f,c
  2482  000C36  D7C9               	goto	u900
  2483  000C38                     l1573:
  2484  000C38  5014               	movf	___aodiv@sign,w,c
  2485  000C3A  B4D8               	btfsc	status,2,c
  2486  000C3C  D010               	goto	l1577
  2487  000C3E  1E1C               	comf	___aodiv@quotient+7,f,c
  2488  000C40  1E1B               	comf	___aodiv@quotient+6,f,c
  2489  000C42  1E1A               	comf	___aodiv@quotient+5,f,c
  2490  000C44  1E19               	comf	___aodiv@quotient+4,f,c
  2491  000C46  1E18               	comf	___aodiv@quotient+3,f,c
  2492  000C48  1E17               	comf	___aodiv@quotient+2,f,c
  2493  000C4A  1E16               	comf	___aodiv@quotient+1,f,c
  2494  000C4C  6C15               	negf	___aodiv@quotient,c
  2495  000C4E  0E00               	movlw	0
  2496  000C50  2216               	addwfc	___aodiv@quotient+1,f,c
  2497  000C52  2217               	addwfc	___aodiv@quotient+2,f,c
  2498  000C54  2218               	addwfc	___aodiv@quotient+3,f,c
  2499  000C56  2219               	addwfc	___aodiv@quotient+4,f,c
  2500  000C58  221A               	addwfc	___aodiv@quotient+5,f,c
  2501  000C5A  221B               	addwfc	___aodiv@quotient+6,f,c
  2502  000C5C  221C               	addwfc	___aodiv@quotient+7,f,c
  2503  000C5E                     l1577:
  2504  000C5E  C015  F003         	movff	___aodiv@quotient,?___aodiv
  2505  000C62  C016  F004         	movff	___aodiv@quotient+1,?___aodiv+1
  2506  000C66  C017  F005         	movff	___aodiv@quotient+2,?___aodiv+2
  2507  000C6A  C018  F006         	movff	___aodiv@quotient+3,?___aodiv+3
  2508  000C6E  C019  F007         	movff	___aodiv@quotient+4,?___aodiv+4
  2509  000C72  C01A  F008         	movff	___aodiv@quotient+5,?___aodiv+5
  2510  000C76  C01B  F009         	movff	___aodiv@quotient+6,?___aodiv+6
  2511  000C7A  C01C  F00A         	movff	___aodiv@quotient+7,?___aodiv+7
  2512  000C7E  0012               	return		;funcret
  2513  000C80                     __end_of___aodiv:
  2514                           	opt callstack 0
  2515                           
  2516 ;; *************** function _atoi *****************
  2517 ;; Defined at:
  2518 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\atoi.c"
  2519 ;; Parameters:    Size  Location     Type
  2520 ;;  s               2    9[COMRAM] PTR const unsigned char 
  2521 ;;		 -> STR_3(5), 
  2522 ;; Auto vars:     Size  Location     Type
  2523 ;;  n               2   22[COMRAM] int 
  2524 ;;  neg             2   15[COMRAM] int 
  2525 ;; Return value:  Size  Location     Type
  2526 ;;                  2    9[COMRAM] int 
  2527 ;; Registers used:
  2528 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2529 ;; Tracked objects:
  2530 ;;		On entry : 0/0
  2531 ;;		On exit  : 0/0
  2532 ;;		Unchanged: 0/0
  2533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2534 ;;      Params:         2       0       0       0       0       0       0
  2535 ;;      Locals:         9       0       0       0       0       0       0
  2536 ;;      Temps:          4       0       0       0       0       0       0
  2537 ;;      Totals:        15       0       0       0       0       0       0
  2538 ;;Total ram usage:       15 bytes
  2539 ;; Hardware stack levels used:    1
  2540 ;; Hardware stack levels required when called:    2
  2541 ;; This function calls:
  2542 ;;		___wmul
  2543 ;;		_isdigit
  2544 ;;		_isspace
  2545 ;; This function is called by:
  2546 ;;		_vfpfcnvrt
  2547 ;; This function uses a non-reentrant model
  2548 ;;
  2549                           
  2550                           	psect	text13
  2551  000C80                     __ptext13:
  2552                           	opt callstack 0
  2553  000C80                     _atoi:
  2554                           	opt callstack 25
  2555                           
  2556                           ;incstack = 0
  2557  000C80  0E00               	movlw	0
  2558  000C82  6E18               	movwf	atoi@n+1,c
  2559  000C84  0E00               	movlw	0
  2560  000C86  6E17               	movwf	atoi@n,c
  2561  000C88  0E00               	movlw	0
  2562  000C8A  6E11               	movwf	atoi@neg+1,c
  2563  000C8C  0E00               	movlw	0
  2564  000C8E  6E10               	movwf	atoi@neg,c
  2565  000C90  D002               	goto	l1707
  2566  000C92                     l1705:
  2567  000C92  4A0A               	infsnz	atoi@s,f,c
  2568  000C94  2A0B               	incf	atoi@s+1,f,c
  2569  000C96                     l1707:
  2570  000C96  0E01               	movlw	1
  2571  000C98  6E16               	movwf	_atoi$908,c
  2572  000C9A  C00A  FFF6         	movff	atoi@s,tblptrl
  2573  000C9E  C00B  FFF7         	movff	atoi@s+1,tblptrh
  2574  000CA2                     	if	0	;tblptru may be non-zero
  2575  000CA2                     	endif
  2576  000CA2                     	if	0	;tblptru may be non-zero
  2577  000CA2                     	endif
  2578  000CA2  0008               	tblrd		*
  2579  000CA4  50F5               	movf	tablat,w,c
  2580  000CA6  0A20               	xorlw	32
  2581  000CA8  B4D8               	btfsc	status,2,c
  2582  000CAA  D018               	goto	l1715
  2583  000CAC  0EF7               	movlw	247
  2584  000CAE  6E0C               	movwf	??_atoi& (0+255),c
  2585  000CB0  0EFF               	movlw	255
  2586  000CB2  6E0D               	movwf	(??_atoi+1)& (0+255),c
  2587  000CB4  C00A  FFF6         	movff	atoi@s,tblptrl
  2588  000CB8  C00B  FFF7         	movff	atoi@s+1,tblptrh
  2589  000CBC                     	if	0	;tblptru may be non-zero
  2590  000CBC                     	endif
  2591  000CBC                     	if	0	;tblptru may be non-zero
  2592  000CBC                     	endif
  2593  000CBC  0008               	tblrd		*
  2594  000CBE  50F5               	movf	tablat,w,c
  2595  000CC0  6E0E               	movwf	(??_atoi+2)& (0+255),c
  2596  000CC2  6A0F               	clrf	(??_atoi+3)& (0+255),c
  2597  000CC4  500C               	movf	??_atoi,w,c
  2598  000CC6  260E               	addwf	??_atoi+2,f,c
  2599  000CC8  500D               	movf	??_atoi+1,w,c
  2600  000CCA  220F               	addwfc	??_atoi+3,f,c
  2601  000CCC  500F               	movf	??_atoi+3,w,c
  2602  000CCE  E104               	bnz	u1180
  2603  000CD0  0E05               	movlw	5
  2604  000CD2  5C0E               	subwf	??_atoi+2,w,c
  2605  000CD4  A0D8               	btfss	status,0,c
  2606  000CD6  D002               	goto	l1715
  2607  000CD8                     u1180:
  2608  000CD8  0E00               	movlw	0
  2609  000CDA  6E16               	movwf	_atoi$908,c
  2610  000CDC                     l1715:
  2611  000CDC  C016  F012         	movff	_atoi$908,_atoi$907
  2612  000CE0  6A13               	clrf	_atoi$907+1,c
  2613  000CE2  5012               	movf	_atoi$907,w,c
  2614  000CE4  1013               	iorwf	_atoi$907+1,w,c
  2615  000CE6  B4D8               	btfsc	status,2,c
  2616  000CE8  D008               	goto	l1725
  2617  000CEA  D7D3               	goto	l1705
  2618  000CEC                     l1721:
  2619  000CEC  0E00               	movlw	0
  2620  000CEE  6E11               	movwf	atoi@neg+1,c
  2621  000CF0  0E01               	movlw	1
  2622  000CF2  6E10               	movwf	atoi@neg,c
  2623  000CF4                     l1723:
  2624  000CF4  4A0A               	infsnz	atoi@s,f,c
  2625  000CF6  2A0B               	incf	atoi@s+1,f,c
  2626  000CF8  D02E               	goto	l1731
  2627  000CFA                     l1725:
  2628  000CFA  C00A  FFF6         	movff	atoi@s,tblptrl
  2629  000CFE  C00B  FFF7         	movff	atoi@s+1,tblptrh
  2630  000D02                     	if	0	;tblptru may be non-zero
  2631  000D02                     	endif
  2632  000D02                     	if	0	;tblptru may be non-zero
  2633  000D02                     	endif
  2634  000D02  0008               	tblrd		*
  2635  000D04  50F5               	movf	tablat,w,c
  2636  000D06  6E0C               	movwf	??_atoi& (0+255),c
  2637  000D08  6A0D               	clrf	(??_atoi+1)& (0+255),c
  2638                           
  2639                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2640                           ; Switch size 1, requested type "simple"
  2641                           ; Number of cases is 1, Range of values is 0 to 0
  2642                           ; switch strategies available:
  2643                           ; Name         Instructions Cycles
  2644                           ; simple_byte            4     3 (average)
  2645                           ;	Chosen strategy is simple_byte
  2646  000D0A  500D               	movf	??_atoi+1,w,c
  2647  000D0C  0A00               	xorlw	0	; case 0
  2648  000D0E  A4D8               	btfss	status,2,c
  2649  000D10  D022               	goto	l1731
  2650                           
  2651                           ; Switch size 1, requested type "simple"
  2652                           ; Number of cases is 2, Range of values is 43 to 45
  2653                           ; switch strategies available:
  2654                           ; Name         Instructions Cycles
  2655                           ; simple_byte            7     4 (average)
  2656                           ;	Chosen strategy is simple_byte
  2657  000D12  500C               	movf	??_atoi,w,c
  2658  000D14  0A2B               	xorlw	43	; case 43
  2659  000D16  B4D8               	btfsc	status,2,c
  2660  000D18  D7ED               	goto	l1723
  2661  000D1A  0A06               	xorlw	6	; case 45
  2662  000D1C  B4D8               	btfsc	status,2,c
  2663  000D1E  D7E6               	goto	l1721
  2664  000D20  D01A               	goto	l1731
  2665  000D22                     l1727:
  2666  000D22  C017  F003         	movff	atoi@n,___wmul@multiplier
  2667  000D26  C018  F004         	movff	atoi@n+1,___wmul@multiplier+1
  2668  000D2A  0E00               	movlw	0
  2669  000D2C  6E06               	movwf	___wmul@multiplicand+1,c
  2670  000D2E  0E0A               	movlw	10
  2671  000D30  6E05               	movwf	___wmul@multiplicand,c
  2672  000D32  EC6A  F00A         	call	___wmul	;wreg free
  2673  000D36  C00A  FFF6         	movff	atoi@s,tblptrl
  2674  000D3A  C00B  FFF7         	movff	atoi@s+1,tblptrh
  2675  000D3E                     	if	0	;tblptru may be non-zero
  2676  000D3E                     	endif
  2677  000D3E                     	if	0	;tblptru may be non-zero
  2678  000D3E                     	endif
  2679  000D3E  0008               	tblrd		*
  2680  000D40  50F5               	movf	tablat,w,c
  2681  000D42  5E03               	subwf	?___wmul,f,c
  2682  000D44  0E00               	movlw	0
  2683  000D46  5A04               	subwfb	?___wmul+1,f,c
  2684  000D48  0E30               	movlw	48
  2685  000D4A  2403               	addwf	?___wmul,w,c
  2686  000D4C  6E17               	movwf	atoi@n,c
  2687  000D4E  0E00               	movlw	0
  2688  000D50  2004               	addwfc	?___wmul+1,w,c
  2689  000D52  6E18               	movwf	atoi@n+1,c
  2690  000D54  D7CF               	goto	l1723
  2691  000D56                     l1731:
  2692  000D56  0ED0               	movlw	208
  2693  000D58  6E0C               	movwf	??_atoi& (0+255),c
  2694  000D5A  0EFF               	movlw	255
  2695  000D5C  6E0D               	movwf	(??_atoi+1)& (0+255),c
  2696  000D5E  C00A  FFF6         	movff	atoi@s,tblptrl
  2697  000D62  C00B  FFF7         	movff	atoi@s+1,tblptrh
  2698  000D66                     	if	0	;tblptru may be non-zero
  2699  000D66                     	endif
  2700  000D66                     	if	0	;tblptru may be non-zero
  2701  000D66                     	endif
  2702  000D66  0008               	tblrd		*
  2703  000D68  50F5               	movf	tablat,w,c
  2704  000D6A  6E0E               	movwf	(??_atoi+2)& (0+255),c
  2705  000D6C  6A0F               	clrf	(??_atoi+3)& (0+255),c
  2706  000D6E  500C               	movf	??_atoi,w,c
  2707  000D70  260E               	addwf	??_atoi+2,f,c
  2708  000D72  500D               	movf	??_atoi+1,w,c
  2709  000D74  220F               	addwfc	??_atoi+3,f,c
  2710  000D76  500F               	movf	??_atoi+3,w,c
  2711  000D78  E106               	bnz	u1200
  2712  000D7A  0E0A               	movlw	10
  2713  000D7C  5C0E               	subwf	??_atoi+2,w,c
  2714  000D7E  B0D8               	btfsc	status,0,c
  2715  000D80  D002               	goto	u1200
  2716  000D82  0E01               	movlw	1
  2717  000D84  D001               	goto	u1210
  2718  000D86                     u1200:
  2719  000D86  0E00               	movlw	0
  2720  000D88                     u1210:
  2721  000D88  6E14               	movwf	_atoi$909,c
  2722  000D8A  6A15               	clrf	_atoi$909+1,c
  2723  000D8C  5014               	movf	_atoi$909,w,c
  2724  000D8E  1015               	iorwf	_atoi$909+1,w,c
  2725  000D90  A4D8               	btfss	status,2,c
  2726  000D92  D7C7               	goto	l1727
  2727  000D94  5010               	movf	atoi@neg,w,c
  2728  000D96  1011               	iorwf	atoi@neg+1,w,c
  2729  000D98  A4D8               	btfss	status,2,c
  2730  000D9A  D00D               	goto	l896
  2731  000D9C  C017  F00C         	movff	atoi@n,??_atoi
  2732  000DA0  C018  F00D         	movff	atoi@n+1,??_atoi+1
  2733  000DA4  1E0C               	comf	??_atoi,f,c
  2734  000DA6  1E0D               	comf	??_atoi+1,f,c
  2735  000DA8  4A0C               	infsnz	??_atoi,f,c
  2736  000DAA  2A0D               	incf	??_atoi+1,f,c
  2737  000DAC  C00C  F00A         	movff	??_atoi,?_atoi
  2738  000DB0  C00D  F00B         	movff	??_atoi+1,?_atoi+1
  2739  000DB4  0012               	return	
  2740  000DB6                     l896:
  2741  000DB6  C017  F00A         	movff	atoi@n,?_atoi
  2742  000DBA  C018  F00B         	movff	atoi@n+1,?_atoi+1
  2743  000DBE  0012               	return		;funcret
  2744  000DC0                     __end_of_atoi:
  2745                           	opt callstack 0
  2746                           
  2747 ;; *************** function _isspace *****************
  2748 ;; Defined at:
  2749 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\isspace.c"
  2750 ;; Parameters:    Size  Location     Type
  2751 ;;  c               2    2[COMRAM] int 
  2752 ;; Auto vars:     Size  Location     Type
  2753 ;;		None
  2754 ;; Return value:  Size  Location     Type
  2755 ;;                  2    2[COMRAM] int 
  2756 ;; Registers used:
  2757 ;;		wreg, status,2, status,0
  2758 ;; Tracked objects:
  2759 ;;		On entry : 0/0
  2760 ;;		On exit  : 0/0
  2761 ;;		Unchanged: 0/0
  2762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2763 ;;      Params:         2       0       0       0       0       0       0
  2764 ;;      Locals:         1       0       0       0       0       0       0
  2765 ;;      Temps:          4       0       0       0       0       0       0
  2766 ;;      Totals:         7       0       0       0       0       0       0
  2767 ;;Total ram usage:        7 bytes
  2768 ;; Hardware stack levels used:    1
  2769 ;; Hardware stack levels required when called:    1
  2770 ;; This function calls:
  2771 ;;		Nothing
  2772 ;; This function is called by:
  2773 ;;		_atoi
  2774 ;; This function uses a non-reentrant model
  2775 ;;
  2776                           
  2777                           	psect	text14
  2778  0013AC                     __ptext14:
  2779                           	opt callstack 0
  2780  0013AC                     _isspace:
  2781                           	opt callstack 25
  2782                           
  2783                           ;incstack = 0
  2784  0013AC  0E01               	movlw	1
  2785  0013AE  6E09               	movwf	_isspace$925,c
  2786  0013B0  0E20               	movlw	32
  2787  0013B2  1803               	xorwf	isspace@c,w,c
  2788  0013B4  1004               	iorwf	isspace@c+1,w,c
  2789  0013B6  B4D8               	btfsc	status,2,c
  2790  0013B8  D014               	goto	l1625
  2791  0013BA  0EF7               	movlw	247
  2792  0013BC  6E05               	movwf	??_isspace& (0+255),c
  2793  0013BE  0EFF               	movlw	255
  2794  0013C0  6E06               	movwf	(??_isspace+1)& (0+255),c
  2795  0013C2  C003  F007         	movff	isspace@c,??_isspace+2
  2796  0013C6  C004  F008         	movff	isspace@c+1,??_isspace+3
  2797  0013CA  5005               	movf	??_isspace,w,c
  2798  0013CC  2607               	addwf	??_isspace+2,f,c
  2799  0013CE  5006               	movf	??_isspace+1,w,c
  2800  0013D0  2208               	addwfc	??_isspace+3,f,c
  2801  0013D2  5008               	movf	??_isspace+3,w,c
  2802  0013D4  E104               	bnz	u1000
  2803  0013D6  0E05               	movlw	5
  2804  0013D8  5C07               	subwf	??_isspace+2,w,c
  2805  0013DA  A0D8               	btfss	status,0,c
  2806  0013DC  D002               	goto	l1625
  2807  0013DE                     u1000:
  2808  0013DE  0E00               	movlw	0
  2809  0013E0  6E09               	movwf	_isspace$925,c
  2810  0013E2                     l1625:
  2811  0013E2  C009  F003         	movff	_isspace$925,?_isspace
  2812  0013E6  6A04               	clrf	?_isspace+1,c
  2813  0013E8  0012               	return		;funcret
  2814  0013EA                     __end_of_isspace:
  2815                           	opt callstack 0
  2816                           
  2817 ;; *************** function _isdigit *****************
  2818 ;; Defined at:
  2819 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\isdigit.c"
  2820 ;; Parameters:    Size  Location     Type
  2821 ;;  c               2    2[COMRAM] int 
  2822 ;; Auto vars:     Size  Location     Type
  2823 ;;		None
  2824 ;; Return value:  Size  Location     Type
  2825 ;;                  2    2[COMRAM] int 
  2826 ;; Registers used:
  2827 ;;		wreg, status,2, status,0
  2828 ;; Tracked objects:
  2829 ;;		On entry : 0/0
  2830 ;;		On exit  : 0/0
  2831 ;;		Unchanged: 0/0
  2832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2833 ;;      Params:         2       0       0       0       0       0       0
  2834 ;;      Locals:         0       0       0       0       0       0       0
  2835 ;;      Temps:          4       0       0       0       0       0       0
  2836 ;;      Totals:         6       0       0       0       0       0       0
  2837 ;;Total ram usage:        6 bytes
  2838 ;; Hardware stack levels used:    1
  2839 ;; Hardware stack levels required when called:    1
  2840 ;; This function calls:
  2841 ;;		Nothing
  2842 ;; This function is called by:
  2843 ;;		_vfpfcnvrt
  2844 ;;		_atoi
  2845 ;; This function uses a non-reentrant model
  2846 ;;
  2847                           
  2848                           	psect	text15
  2849  001454                     __ptext15:
  2850                           	opt callstack 0
  2851  001454                     _isdigit:
  2852                           	opt callstack 26
  2853                           
  2854                           ;incstack = 0
  2855  001454  0ED0               	movlw	208
  2856  001456  6E05               	movwf	??_isdigit& (0+255),c
  2857  001458  0EFF               	movlw	255
  2858  00145A  6E06               	movwf	(??_isdigit+1)& (0+255),c
  2859  00145C  C003  F007         	movff	isdigit@c,??_isdigit+2
  2860  001460  C004  F008         	movff	isdigit@c+1,??_isdigit+3
  2861  001464  5005               	movf	??_isdigit,w,c
  2862  001466  2607               	addwf	??_isdigit+2,f,c
  2863  001468  5006               	movf	??_isdigit+1,w,c
  2864  00146A  2208               	addwfc	??_isdigit+3,f,c
  2865  00146C  5008               	movf	??_isdigit+3,w,c
  2866  00146E  E106               	bnz	u840
  2867  001470  0E0A               	movlw	10
  2868  001472  5C07               	subwf	??_isdigit+2,w,c
  2869  001474  B0D8               	btfsc	status,0,c
  2870  001476  D002               	goto	u840
  2871  001478  0E01               	movlw	1
  2872  00147A  D001               	goto	u850
  2873  00147C                     u840:
  2874  00147C  0E00               	movlw	0
  2875  00147E                     u850:
  2876  00147E  6E03               	movwf	?_isdigit,c
  2877  001480  6A04               	clrf	?_isdigit+1,c
  2878  001482  0012               	return		;funcret
  2879  001484                     __end_of_isdigit:
  2880                           	opt callstack 0
  2881                           
  2882 ;; *************** function ___wmul *****************
  2883 ;; Defined at:
  2884 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
  2885 ;; Parameters:    Size  Location     Type
  2886 ;;  multiplier      2    2[COMRAM] unsigned int 
  2887 ;;  multiplicand    2    4[COMRAM] unsigned int 
  2888 ;; Auto vars:     Size  Location     Type
  2889 ;;  product         2    6[COMRAM] unsigned int 
  2890 ;; Return value:  Size  Location     Type
  2891 ;;                  2    2[COMRAM] unsigned int 
  2892 ;; Registers used:
  2893 ;;		wreg, status,2, status,0, prodl, prodh
  2894 ;; Tracked objects:
  2895 ;;		On entry : 0/0
  2896 ;;		On exit  : 0/0
  2897 ;;		Unchanged: 0/0
  2898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2899 ;;      Params:         4       0       0       0       0       0       0
  2900 ;;      Locals:         2       0       0       0       0       0       0
  2901 ;;      Temps:          0       0       0       0       0       0       0
  2902 ;;      Totals:         6       0       0       0       0       0       0
  2903 ;;Total ram usage:        6 bytes
  2904 ;; Hardware stack levels used:    1
  2905 ;; Hardware stack levels required when called:    1
  2906 ;; This function calls:
  2907 ;;		Nothing
  2908 ;; This function is called by:
  2909 ;;		_atoi
  2910 ;; This function uses a non-reentrant model
  2911 ;;
  2912                           
  2913                           	psect	text16
  2914  0014D4                     __ptext16:
  2915                           	opt callstack 0
  2916  0014D4                     ___wmul:
  2917                           	opt callstack 25
  2918                           
  2919                           ;incstack = 0
  2920  0014D4  5003               	movf	___wmul@multiplier,w,c
  2921  0014D6  0205               	mulwf	___wmul@multiplicand,c
  2922  0014D8  CFF3 F007          	movff	prodl,___wmul@product
  2923  0014DC  CFF4 F008          	movff	prodh,___wmul@product+1
  2924  0014E0  5003               	movf	___wmul@multiplier,w,c
  2925  0014E2  0206               	mulwf	___wmul@multiplicand+1,c
  2926  0014E4  50F3               	movf	prodl,w,c
  2927  0014E6  2608               	addwf	___wmul@product+1,f,c
  2928  0014E8  5004               	movf	___wmul@multiplier+1,w,c
  2929  0014EA  0205               	mulwf	___wmul@multiplicand,c
  2930  0014EC  50F3               	movf	prodl,w,c
  2931  0014EE  2608               	addwf	___wmul@product+1,f,c
  2932  0014F0  C007  F003         	movff	___wmul@product,?___wmul
  2933  0014F4  C008  F004         	movff	___wmul@product+1,?___wmul+1
  2934  0014F8  0012               	return		;funcret
  2935  0014FA                     __end_of___wmul:
  2936                           	opt callstack 0
  2937                           
  2938 ;; *************** function _lcd_ini *****************
  2939 ;; Defined at:
  2940 ;;		line 3 in file "../Bibliotecas/LCD4b.c"
  2941 ;; Parameters:    Size  Location     Type
  2942 ;;		None
  2943 ;; Auto vars:     Size  Location     Type
  2944 ;;  i               1    7[COMRAM] unsigned char 
  2945 ;; Return value:  Size  Location     Type
  2946 ;;                  1    wreg      void 
  2947 ;; Registers used:
  2948 ;;		wreg, status,2, status,0, cstack
  2949 ;; Tracked objects:
  2950 ;;		On entry : 0/0
  2951 ;;		On exit  : 0/0
  2952 ;;		Unchanged: 0/0
  2953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2954 ;;      Params:         0       0       0       0       0       0       0
  2955 ;;      Locals:         1       0       0       0       0       0       0
  2956 ;;      Temps:          1       0       0       0       0       0       0
  2957 ;;      Totals:         2       0       0       0       0       0       0
  2958 ;;Total ram usage:        2 bytes
  2959 ;; Hardware stack levels used:    1
  2960 ;; Hardware stack levels required when called:    3
  2961 ;; This function calls:
  2962 ;;		_lcd_cmd
  2963 ;; This function is called by:
  2964 ;;		_main
  2965 ;; This function uses a non-reentrant model
  2966 ;;
  2967                           
  2968                           	psect	text17
  2969  0010FE                     __ptext17:
  2970                           	opt callstack 0
  2971  0010FE                     _lcd_ini:
  2972                           	opt callstack 27
  2973                           
  2974                           ;../Bibliotecas/LCD4b.c: 5: char i;;../Bibliotecas/LCD4b.c: 7: TRISD = 0b00000000;
  2975                           
  2976                           ;incstack = 0
  2977  0010FE  0E00               	movlw	0
  2978  001100  6E95               	movwf	3989,c	;volatile
  2979                           
  2980                           ;../Bibliotecas/LCD4b.c: 8: TRISEbits.TRISE1 = 0;
  2981  001102  9296               	bcf	3990,1,c	;volatile
  2982                           
  2983                           ;../Bibliotecas/LCD4b.c: 9: TRISEbits.TRISE0 = 0;
  2984  001104  9096               	bcf	3990,0,c	;volatile
  2985                           
  2986                           ;../Bibliotecas/LCD4b.c: 11: PORTD = 0b00000000;
  2987  001106  0E00               	movlw	0
  2988  001108  6E83               	movwf	3971,c	;volatile
  2989                           
  2990                           ;../Bibliotecas/LCD4b.c: 12: PORTEbits.RE0 = 0;
  2991  00110A  9084               	bcf	3972,0,c	;volatile
  2992                           
  2993                           ;../Bibliotecas/LCD4b.c: 13: PORTEbits.RE1 = 0;
  2994  00110C  9284               	bcf	3972,1,c	;volatile
  2995                           
  2996                           ;../Bibliotecas/LCD4b.c: 15: _delay((unsigned long)((15)*(8000000/4000.0)));
  2997  00110E  0E27               	movlw	39
  2998  001110  6E07               	movwf	??_lcd_ini& (0+255),c
  2999  001112  0EF5               	movlw	245
  3000  001114                     u1447:
  3001  001114  2EE8               	decfsz	wreg,f,c
  3002  001116  D7FE               	bra	u1447
  3003  001118  2E07               	decfsz	??_lcd_ini& (0+255),f,c
  3004  00111A  D7FC               	bra	u1447
  3005  00111C  F000               	nop	
  3006                           
  3007                           ;../Bibliotecas/LCD4b.c: 18: for(i=0;i<=2;i++)
  3008  00111E  0E00               	movlw	0
  3009  001120  6E08               	movwf	lcd_ini@i,c
  3010  001122                     l1895:
  3011                           
  3012                           ;../Bibliotecas/LCD4b.c: 19:    {;../Bibliotecas/LCD4b.c: 20:    lcd_cmd(0x30);
  3013  001122  0E30               	movlw	48
  3014  001124  EC72  F007         	call	_lcd_cmd
  3015                           
  3016                           ;../Bibliotecas/LCD4b.c: 21:    _delay((unsigned long)((5)*(8000000/4000.0)));
  3017  001128  0E0D               	movlw	13
  3018  00112A  6E07               	movwf	??_lcd_ini& (0+255),c
  3019  00112C  0EFC               	movlw	252
  3020  00112E                     u1457:
  3021  00112E  2EE8               	decfsz	wreg,f,c
  3022  001130  D7FE               	bra	u1457
  3023  001132  2E07               	decfsz	??_lcd_ini& (0+255),f,c
  3024  001134  D7FC               	bra	u1457
  3025                           
  3026                           ;../Bibliotecas/LCD4b.c: 22:    }
  3027  001136  2A08               	incf	lcd_ini@i,f,c
  3028  001138  0E02               	movlw	2
  3029  00113A  6408               	cpfsgt	lcd_ini@i,c
  3030  00113C  D7F2               	goto	l1895
  3031                           
  3032                           ;../Bibliotecas/LCD4b.c: 24:    lcd_cmd(0x02);
  3033  00113E  0E02               	movlw	2
  3034  001140  EC72  F007         	call	_lcd_cmd
  3035                           
  3036                           ;../Bibliotecas/LCD4b.c: 25:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3037  001144  0E1A               	movlw	26
  3038  001146                     u1467:
  3039  001146  2EE8               	decfsz	wreg,f,c
  3040  001148  D7FE               	bra	u1467
  3041  00114A  D000               	nop2	
  3042                           
  3043                           ;../Bibliotecas/LCD4b.c: 26:    lcd_cmd(0x28);
  3044  00114C  0E28               	movlw	40
  3045  00114E  EC72  F007         	call	_lcd_cmd
  3046                           
  3047                           ;../Bibliotecas/LCD4b.c: 27:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3048  001152  0E1A               	movlw	26
  3049  001154                     u1477:
  3050  001154  2EE8               	decfsz	wreg,f,c
  3051  001156  D7FE               	bra	u1477
  3052  001158  D000               	nop2	
  3053                           
  3054                           ;../Bibliotecas/LCD4b.c: 28:    lcd_cmd(0x01);
  3055  00115A  0E01               	movlw	1
  3056  00115C  EC72  F007         	call	_lcd_cmd
  3057                           
  3058                           ;../Bibliotecas/LCD4b.c: 29:    _delay((unsigned long)((2)*(8000000/4000.0)));
  3059  001160  0E06               	movlw	6
  3060  001162  6E07               	movwf	??_lcd_ini& (0+255),c
  3061  001164  0E30               	movlw	48
  3062  001166                     u1487:
  3063  001166  2EE8               	decfsz	wreg,f,c
  3064  001168  D7FE               	bra	u1487
  3065  00116A  2E07               	decfsz	??_lcd_ini& (0+255),f,c
  3066  00116C  D7FC               	bra	u1487
  3067  00116E  D000               	nop2	
  3068                           
  3069                           ;../Bibliotecas/LCD4b.c: 30:    lcd_cmd(0x0C);
  3070  001170  0E0C               	movlw	12
  3071  001172  EC72  F007         	call	_lcd_cmd
  3072                           
  3073                           ;../Bibliotecas/LCD4b.c: 31:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3074  001176  0E1A               	movlw	26
  3075  001178                     u1497:
  3076  001178  2EE8               	decfsz	wreg,f,c
  3077  00117A  D7FE               	bra	u1497
  3078  00117C  D000               	nop2	
  3079                           
  3080                           ;../Bibliotecas/LCD4b.c: 32:    lcd_cmd(0x06);
  3081  00117E  0E06               	movlw	6
  3082  001180  EC72  F007         	call	_lcd_cmd
  3083                           
  3084                           ;../Bibliotecas/LCD4b.c: 33:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3085  001184  0E1A               	movlw	26
  3086  001186                     u1507:
  3087  001186  2EE8               	decfsz	wreg,f,c
  3088  001188  D7FE               	bra	u1507
  3089  00118A  D000               	nop2	
  3090  00118C  0012               	return		;funcret
  3091  00118E                     __end_of_lcd_ini:
  3092                           	opt callstack 0
  3093                           
  3094 ;; *************** function _lcd_escreve_bf *****************
  3095 ;; Defined at:
  3096 ;;		line 82 in file "../Bibliotecas/LCD4b.c"
  3097 ;; Parameters:    Size  Location     Type
  3098 ;;  lin             1    wreg     unsigned char 
  3099 ;;  col             1    8[COMRAM] unsigned char 
  3100 ;;  str             2    9[COMRAM] PTR unsigned char 
  3101 ;;		 -> bufferLCD(16), STR_2(13), STR_1(13), 
  3102 ;; Auto vars:     Size  Location     Type
  3103 ;;  lin             1   12[COMRAM] unsigned char 
  3104 ;;  end             1   11[COMRAM] unsigned char 
  3105 ;; Return value:  Size  Location     Type
  3106 ;;                  1    wreg      void 
  3107 ;; Registers used:
  3108 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3109 ;; Tracked objects:
  3110 ;;		On entry : 0/0
  3111 ;;		On exit  : 0/0
  3112 ;;		Unchanged: 0/0
  3113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3114 ;;      Params:         3       0       0       0       0       0       0
  3115 ;;      Locals:         2       0       0       0       0       0       0
  3116 ;;      Temps:          0       0       0       0       0       0       0
  3117 ;;      Totals:         5       0       0       0       0       0       0
  3118 ;;Total ram usage:        5 bytes
  3119 ;; Hardware stack levels used:    1
  3120 ;; Hardware stack levels required when called:    4
  3121 ;; This function calls:
  3122 ;;		_lcd_envia_byte
  3123 ;; This function is called by:
  3124 ;;		_main
  3125 ;; This function uses a non-reentrant model
  3126 ;;
  3127                           
  3128                           	psect	text18
  3129  001214                     __ptext18:
  3130                           	opt callstack 0
  3131  001214                     _lcd_escreve_bf:
  3132                           	opt callstack 26
  3133                           
  3134                           ;incstack = 0
  3135                           ;lcd_escreve_bf@lin stored from wreg
  3136  001214  6E0D               	movwf	lcd_escreve_bf@lin,c
  3137                           
  3138                           ;../Bibliotecas/LCD4b.c: 82: void lcd_escreve_bf(char lin, char col, char *str);../Bibli
      +                          otecas/LCD4b.c: 83: {;../Bibliotecas/LCD4b.c: 84:     char end;;../Bibliotecas/LCD4b.c: 
      +                          87:     if (lin == 1) {
  3139  001216  040D               	decf	lcd_escreve_bf@lin,w,c
  3140  001218  A4D8               	btfss	status,2,c
  3141  00121A  D003               	goto	l1921
  3142                           
  3143                           ;../Bibliotecas/LCD4b.c: 88:         end = col + 0x80 - 1;
  3144  00121C  5009               	movf	lcd_escreve_bf@col,w,c
  3145  00121E  0F7F               	addlw	127
  3146  001220  D006               	goto	L3
  3147  001222                     l1921:
  3148  001222  0E02               	movlw	2
  3149  001224  180D               	xorwf	lcd_escreve_bf@lin,w,c
  3150  001226  A4D8               	btfss	status,2,c
  3151  001228  D003               	goto	l1925
  3152                           
  3153                           ;../Bibliotecas/LCD4b.c: 91:         end = col + 0xC0 - 1;
  3154  00122A  5009               	movf	lcd_escreve_bf@col,w,c
  3155  00122C  0FBF               	addlw	191
  3156  00122E                     L3:
  3157  00122E  6E0C               	movwf	lcd_escreve_bf@end,c
  3158  001230                     l1925:
  3159                           
  3160                           ;../Bibliotecas/LCD4b.c: 94:     lcd_envia_byte(0,end);
  3161  001230  C00C  F007         	movff	lcd_escreve_bf@end,lcd_envia_byte@dado
  3162  001234  0E00               	movlw	0
  3163  001236  EC7D  F00A         	call	_lcd_envia_byte
  3164                           
  3165                           ;../Bibliotecas/LCD4b.c: 98:     while (*str){
  3166  00123A  D016               	goto	l1931
  3167  00123C                     l1927:
  3168                           
  3169                           ;../Bibliotecas/LCD4b.c: 99:         lcd_envia_byte(1,*str);
  3170  00123C  C00A  FFF6         	movff	lcd_escreve_bf@str,tblptrl
  3171  001240  C00B  FFF7         	movff	lcd_escreve_bf@str+1,tblptrh
  3172  001244  6AF8               	clrf	tblptru,c
  3173  001246  0E05               	movlw	(high __ramtop+-1)
  3174  001248  64F7               	cpfsgt	tblptrh,c
  3175  00124A  D003               	bra	u1407
  3176  00124C  0008               	tblrd		*
  3177  00124E  50F5               	movf	tablat,w,c
  3178  001250  D005               	bra	u1400
  3179  001252                     u1407:
  3180  001252  CFF6 FFE1          	movff	tblptrl,fsr1l
  3181  001256  CFF7 FFE2          	movff	tblptrh,fsr1h
  3182  00125A  50E7               	movf	indf1,w,c
  3183  00125C                     u1400:
  3184  00125C  6E07               	movwf	lcd_envia_byte@dado,c
  3185  00125E  0E01               	movlw	1
  3186  001260  EC7D  F00A         	call	_lcd_envia_byte
  3187                           
  3188                           ;../Bibliotecas/LCD4b.c: 100:         str++;
  3189  001264  4A0A               	infsnz	lcd_escreve_bf@str,f,c
  3190  001266  2A0B               	incf	lcd_escreve_bf@str+1,f,c
  3191  001268                     l1931:
  3192                           
  3193                           ;../Bibliotecas/LCD4b.c: 98:     while (*str){
  3194  001268  C00A  FFF6         	movff	lcd_escreve_bf@str,tblptrl
  3195  00126C  C00B  FFF7         	movff	lcd_escreve_bf@str+1,tblptrh
  3196  001270  6AF8               	clrf	tblptru,c
  3197  001272  0E05               	movlw	(high __ramtop+-1)
  3198  001274  64F7               	cpfsgt	tblptrh,c
  3199  001276  D003               	bra	u1417
  3200  001278  0008               	tblrd		*
  3201  00127A  50F5               	movf	tablat,w,c
  3202  00127C  D005               	bra	u1410
  3203  00127E                     u1417:
  3204  00127E  CFF6 FFE1          	movff	tblptrl,fsr1l
  3205  001282  CFF7 FFE2          	movff	tblptrh,fsr1h
  3206  001286  50E7               	movf	indf1,w,c
  3207  001288                     u1410:
  3208  001288  0900               	iorlw	0
  3209  00128A  B4D8               	btfsc	status,2,c
  3210  00128C  0012               	return	
  3211  00128E  D7D6               	goto	l1927
  3212  001290                     __end_of_lcd_escreve_bf:
  3213                           	opt callstack 0
  3214                           
  3215 ;; *************** function _lcd_envia_byte *****************
  3216 ;; Defined at:
  3217 ;;		line 74 in file "../Bibliotecas/LCD4b.c"
  3218 ;; Parameters:    Size  Location     Type
  3219 ;;  nivel           1    wreg     unsigned char 
  3220 ;;  dado            1    6[COMRAM] unsigned char 
  3221 ;; Auto vars:     Size  Location     Type
  3222 ;;  nivel           1    7[COMRAM] unsigned char 
  3223 ;; Return value:  Size  Location     Type
  3224 ;;                  1    wreg      void 
  3225 ;; Registers used:
  3226 ;;		wreg, status,2, status,0, cstack
  3227 ;; Tracked objects:
  3228 ;;		On entry : 0/0
  3229 ;;		On exit  : 0/0
  3230 ;;		Unchanged: 0/0
  3231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3232 ;;      Params:         1       0       0       0       0       0       0
  3233 ;;      Locals:         1       0       0       0       0       0       0
  3234 ;;      Temps:          0       0       0       0       0       0       0
  3235 ;;      Totals:         2       0       0       0       0       0       0
  3236 ;;Total ram usage:        2 bytes
  3237 ;; Hardware stack levels used:    1
  3238 ;; Hardware stack levels required when called:    3
  3239 ;; This function calls:
  3240 ;;		_lcd_cmd
  3241 ;; This function is called by:
  3242 ;;		_lcd_escreve_bf
  3243 ;; This function uses a non-reentrant model
  3244 ;;
  3245                           
  3246                           	psect	text19
  3247  0014FA                     __ptext19:
  3248                           	opt callstack 0
  3249  0014FA                     _lcd_envia_byte:
  3250                           	opt callstack 26
  3251                           
  3252                           ;incstack = 0
  3253                           ;lcd_envia_byte@nivel stored from wreg
  3254  0014FA  6E08               	movwf	lcd_envia_byte@nivel,c
  3255                           
  3256                           ;../Bibliotecas/LCD4b.c: 74: void lcd_envia_byte(char nivel, char dado);../Bibliotecas/L
      +                          CD4b.c: 75: {;../Bibliotecas/LCD4b.c: 76:     PORTEbits.RE0 = nivel;
  3257  0014FC  B008               	btfsc	lcd_envia_byte@nivel,0,c
  3258  0014FE  D002               	bra	u1355
  3259  001500  9084               	bcf	3972,0,c	;volatile
  3260  001502  D001               	bra	u1356
  3261  001504                     u1355:
  3262  001504  8084               	bsf	3972,0,c	;volatile
  3263  001506                     u1356:
  3264                           
  3265                           ;../Bibliotecas/LCD4b.c: 77:     _delay((unsigned long)((100)*(8000000/4000000.0)));
  3266  001506  0E42               	movlw	66
  3267  001508                     u1517:
  3268  001508  2EE8               	decfsz	wreg,f,c
  3269  00150A  D7FE               	bra	u1517
  3270  00150C  D000               	nop2	
  3271                           
  3272                           ;../Bibliotecas/LCD4b.c: 78:     PORTEbits.RE1 = 0;
  3273  00150E  9284               	bcf	3972,1,c	;volatile
  3274                           
  3275                           ;../Bibliotecas/LCD4b.c: 79:     lcd_cmd(dado);
  3276  001510  5007               	movf	lcd_envia_byte@dado,w,c
  3277  001512  EC72  F007         	call	_lcd_cmd
  3278  001516  0012               	return		;funcret
  3279  001518                     __end_of_lcd_envia_byte:
  3280                           	opt callstack 0
  3281                           
  3282 ;; *************** function _lcd_cmd *****************
  3283 ;; Defined at:
  3284 ;;		line 48 in file "../Bibliotecas/LCD4b.c"
  3285 ;; Parameters:    Size  Location     Type
  3286 ;;  cmd             1    wreg     unsigned char 
  3287 ;; Auto vars:     Size  Location     Type
  3288 ;;  cmd             1    5[COMRAM] unsigned char 
  3289 ;; Return value:  Size  Location     Type
  3290 ;;                  1    wreg      void 
  3291 ;; Registers used:
  3292 ;;		wreg, status,2, status,0, cstack
  3293 ;; Tracked objects:
  3294 ;;		On entry : 0/0
  3295 ;;		On exit  : 0/0
  3296 ;;		Unchanged: 0/0
  3297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3298 ;;      Params:         0       0       0       0       0       0       0
  3299 ;;      Locals:         1       0       0       0       0       0       0
  3300 ;;      Temps:          1       0       0       0       0       0       0
  3301 ;;      Totals:         2       0       0       0       0       0       0
  3302 ;;Total ram usage:        2 bytes
  3303 ;; Hardware stack levels used:    1
  3304 ;; Hardware stack levels required when called:    2
  3305 ;; This function calls:
  3306 ;;		_set_bit
  3307 ;; This function is called by:
  3308 ;;		_lcd_ini
  3309 ;;		_lcd_envia_byte
  3310 ;; This function uses a non-reentrant model
  3311 ;;
  3312                           
  3313                           	psect	text20
  3314  000EE4                     __ptext20:
  3315                           	opt callstack 0
  3316  000EE4                     _lcd_cmd:
  3317                           	opt callstack 27
  3318                           
  3319                           ;incstack = 0
  3320                           ;lcd_cmd@cmd stored from wreg
  3321  000EE4  6E06               	movwf	lcd_cmd@cmd,c
  3322                           
  3323                           ;../Bibliotecas/LCD4b.c: 48: void lcd_cmd(char cmd);../Bibliotecas/LCD4b.c: 49: {;../Bib
      +                          liotecas/LCD4b.c: 52:     PORTDbits.RD4 = set_bit(cmd,0b00010000);
  3324  000EE6  0E10               	movlw	16
  3325  000EE8  6E03               	movwf	set_bit@comp,c
  3326  000EEA  5006               	movf	lcd_cmd@cmd,w,c
  3327  000EEC  EC8C  F00A         	call	_set_bit
  3328  000EF0  6E05               	movwf	??_lcd_cmd& (0+255),c
  3329  000EF2  3A05               	swapf	??_lcd_cmd,f,c
  3330  000EF4  5083               	movf	3971,w,c	;volatile
  3331  000EF6  1805               	xorwf	??_lcd_cmd,w,c
  3332  000EF8  0BEF               	andlw	-17
  3333  000EFA  1805               	xorwf	??_lcd_cmd,w,c
  3334  000EFC  6E83               	movwf	3971,c	;volatile
  3335                           
  3336                           ;../Bibliotecas/LCD4b.c: 53:     PORTDbits.RD5 = set_bit(cmd,0b00100000);
  3337  000EFE  0E20               	movlw	32
  3338  000F00  6E03               	movwf	set_bit@comp,c
  3339  000F02  5006               	movf	lcd_cmd@cmd,w,c
  3340  000F04  EC8C  F00A         	call	_set_bit
  3341  000F08  6E05               	movwf	??_lcd_cmd& (0+255),c
  3342  000F0A  3A05               	swapf	??_lcd_cmd,f,c
  3343  000F0C  4605               	rlncf	??_lcd_cmd,f,c
  3344  000F0E  5083               	movf	3971,w,c	;volatile
  3345  000F10  1805               	xorwf	??_lcd_cmd,w,c
  3346  000F12  0BDF               	andlw	-33
  3347  000F14  1805               	xorwf	??_lcd_cmd,w,c
  3348  000F16  6E83               	movwf	3971,c	;volatile
  3349                           
  3350                           ;../Bibliotecas/LCD4b.c: 54:     PORTDbits.RD6 = set_bit(cmd,0b01000000);
  3351  000F18  0E40               	movlw	64
  3352  000F1A  6E03               	movwf	set_bit@comp,c
  3353  000F1C  5006               	movf	lcd_cmd@cmd,w,c
  3354  000F1E  EC8C  F00A         	call	_set_bit
  3355  000F22  6E05               	movwf	??_lcd_cmd& (0+255),c
  3356  000F24  3A05               	swapf	??_lcd_cmd,f,c
  3357  000F26  4605               	rlncf	??_lcd_cmd,f,c
  3358  000F28  4605               	rlncf	??_lcd_cmd,f,c
  3359  000F2A  5083               	movf	3971,w,c	;volatile
  3360  000F2C  1805               	xorwf	??_lcd_cmd,w,c
  3361  000F2E  0BBF               	andlw	-65
  3362  000F30  1805               	xorwf	??_lcd_cmd,w,c
  3363  000F32  6E83               	movwf	3971,c	;volatile
  3364                           
  3365                           ;../Bibliotecas/LCD4b.c: 55:     PORTDbits.RD7 = set_bit(cmd,0b10000000);
  3366  000F34  0E80               	movlw	128
  3367  000F36  6E03               	movwf	set_bit@comp,c
  3368  000F38  5006               	movf	lcd_cmd@cmd,w,c
  3369  000F3A  EC8C  F00A         	call	_set_bit
  3370  000F3E  6E05               	movwf	??_lcd_cmd& (0+255),c
  3371  000F40  3205               	rrcf	??_lcd_cmd,f,c
  3372  000F42  3205               	rrcf	??_lcd_cmd,f,c
  3373  000F44  5083               	movf	3971,w,c	;volatile
  3374  000F46  1805               	xorwf	??_lcd_cmd,w,c
  3375  000F48  0B7F               	andlw	-129
  3376  000F4A  1805               	xorwf	??_lcd_cmd,w,c
  3377  000F4C  6E83               	movwf	3971,c	;volatile
  3378                           
  3379                           ;../Bibliotecas/LCD4b.c: 57:     PORTEbits.RE1 = 1;
  3380  000F4E  8284               	bsf	3972,1,c	;volatile
  3381                           
  3382                           ;../Bibliotecas/LCD4b.c: 58:     PORTEbits.RE1 = 0;
  3383  000F50  9284               	bcf	3972,1,c	;volatile
  3384                           
  3385                           ;../Bibliotecas/LCD4b.c: 60:     _delay((unsigned long)((100)*(8000000/4000000.0)));
  3386  000F52  0E42               	movlw	66
  3387  000F54                     u1527:
  3388  000F54  2EE8               	decfsz	wreg,f,c
  3389  000F56  D7FE               	bra	u1527
  3390  000F58  D000               	nop2	
  3391                           
  3392                           ;../Bibliotecas/LCD4b.c: 64:     PORTDbits.RD4 = set_bit(cmd,0b00000001);
  3393  000F5A  0E01               	movlw	1
  3394  000F5C  6E03               	movwf	set_bit@comp,c
  3395  000F5E  5006               	movf	lcd_cmd@cmd,w,c
  3396  000F60  EC8C  F00A         	call	_set_bit
  3397  000F64  6E05               	movwf	??_lcd_cmd& (0+255),c
  3398  000F66  3A05               	swapf	??_lcd_cmd,f,c
  3399  000F68  5083               	movf	3971,w,c	;volatile
  3400  000F6A  1805               	xorwf	??_lcd_cmd,w,c
  3401  000F6C  0BEF               	andlw	-17
  3402  000F6E  1805               	xorwf	??_lcd_cmd,w,c
  3403  000F70  6E83               	movwf	3971,c	;volatile
  3404                           
  3405                           ;../Bibliotecas/LCD4b.c: 65:     PORTDbits.RD5 = set_bit(cmd,0b00000010);
  3406  000F72  0E02               	movlw	2
  3407  000F74  6E03               	movwf	set_bit@comp,c
  3408  000F76  5006               	movf	lcd_cmd@cmd,w,c
  3409  000F78  EC8C  F00A         	call	_set_bit
  3410  000F7C  6E05               	movwf	??_lcd_cmd& (0+255),c
  3411  000F7E  3A05               	swapf	??_lcd_cmd,f,c
  3412  000F80  4605               	rlncf	??_lcd_cmd,f,c
  3413  000F82  5083               	movf	3971,w,c	;volatile
  3414  000F84  1805               	xorwf	??_lcd_cmd,w,c
  3415  000F86  0BDF               	andlw	-33
  3416  000F88  1805               	xorwf	??_lcd_cmd,w,c
  3417  000F8A  6E83               	movwf	3971,c	;volatile
  3418                           
  3419                           ;../Bibliotecas/LCD4b.c: 66:     PORTDbits.RD6 = set_bit(cmd,0b00000100);
  3420  000F8C  0E04               	movlw	4
  3421  000F8E  6E03               	movwf	set_bit@comp,c
  3422  000F90  5006               	movf	lcd_cmd@cmd,w,c
  3423  000F92  EC8C  F00A         	call	_set_bit
  3424  000F96  6E05               	movwf	??_lcd_cmd& (0+255),c
  3425  000F98  3A05               	swapf	??_lcd_cmd,f,c
  3426  000F9A  4605               	rlncf	??_lcd_cmd,f,c
  3427  000F9C  4605               	rlncf	??_lcd_cmd,f,c
  3428  000F9E  5083               	movf	3971,w,c	;volatile
  3429  000FA0  1805               	xorwf	??_lcd_cmd,w,c
  3430  000FA2  0BBF               	andlw	-65
  3431  000FA4  1805               	xorwf	??_lcd_cmd,w,c
  3432  000FA6  6E83               	movwf	3971,c	;volatile
  3433                           
  3434                           ;../Bibliotecas/LCD4b.c: 67:     PORTDbits.RD7 = set_bit(cmd,0b00001000);
  3435  000FA8  0E08               	movlw	8
  3436  000FAA  6E03               	movwf	set_bit@comp,c
  3437  000FAC  5006               	movf	lcd_cmd@cmd,w,c
  3438  000FAE  EC8C  F00A         	call	_set_bit
  3439  000FB2  6E05               	movwf	??_lcd_cmd& (0+255),c
  3440  000FB4  3205               	rrcf	??_lcd_cmd,f,c
  3441  000FB6  3205               	rrcf	??_lcd_cmd,f,c
  3442  000FB8  5083               	movf	3971,w,c	;volatile
  3443  000FBA  1805               	xorwf	??_lcd_cmd,w,c
  3444  000FBC  0B7F               	andlw	-129
  3445  000FBE  1805               	xorwf	??_lcd_cmd,w,c
  3446  000FC0  6E83               	movwf	3971,c	;volatile
  3447                           
  3448                           ;../Bibliotecas/LCD4b.c: 69:     PORTEbits.RE1 = 1;
  3449  000FC2  8284               	bsf	3972,1,c	;volatile
  3450                           
  3451                           ;../Bibliotecas/LCD4b.c: 70:     PORTEbits.RE1 = 0;
  3452  000FC4  9284               	bcf	3972,1,c	;volatile
  3453  000FC6  0012               	return		;funcret
  3454  000FC8                     __end_of_lcd_cmd:
  3455                           	opt callstack 0
  3456                           
  3457 ;; *************** function _set_bit *****************
  3458 ;; Defined at:
  3459 ;;		line 38 in file "../Bibliotecas/LCD4b.c"
  3460 ;; Parameters:    Size  Location     Type
  3461 ;;  cmd             1    wreg     unsigned char 
  3462 ;;  comp            1    2[COMRAM] unsigned char 
  3463 ;; Auto vars:     Size  Location     Type
  3464 ;;  cmd             1    3[COMRAM] unsigned char 
  3465 ;; Return value:  Size  Location     Type
  3466 ;;                  1    wreg      unsigned char 
  3467 ;; Registers used:
  3468 ;;		wreg, status,2, status,0
  3469 ;; Tracked objects:
  3470 ;;		On entry : 0/0
  3471 ;;		On exit  : 0/0
  3472 ;;		Unchanged: 0/0
  3473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3474 ;;      Params:         1       0       0       0       0       0       0
  3475 ;;      Locals:         1       0       0       0       0       0       0
  3476 ;;      Temps:          0       0       0       0       0       0       0
  3477 ;;      Totals:         2       0       0       0       0       0       0
  3478 ;;Total ram usage:        2 bytes
  3479 ;; Hardware stack levels used:    1
  3480 ;; Hardware stack levels required when called:    1
  3481 ;; This function calls:
  3482 ;;		Nothing
  3483 ;; This function is called by:
  3484 ;;		_lcd_cmd
  3485 ;; This function uses a non-reentrant model
  3486 ;;
  3487                           
  3488                           	psect	text21
  3489  001518                     __ptext21:
  3490                           	opt callstack 0
  3491  001518                     _set_bit:
  3492                           	opt callstack 27
  3493                           
  3494                           ;incstack = 0
  3495                           ;set_bit@cmd stored from wreg
  3496  001518  6E04               	movwf	set_bit@cmd,c
  3497                           
  3498                           ;../Bibliotecas/LCD4b.c: 38: char set_bit(char cmd, char comp);../Bibliotecas/LCD4b.c: 3
      +                          9: {;../Bibliotecas/LCD4b.c: 41:     if ((cmd & comp) >= 1)
  3499  00151A  5004               	movf	set_bit@cmd,w,c
  3500  00151C  1403               	andwf	set_bit@comp,w,c
  3501  00151E  0900               	iorlw	0
  3502  001520  B4D8               	btfsc	status,2,c
  3503  001522  D002               	goto	l1637
  3504                           
  3505                           ;../Bibliotecas/LCD4b.c: 42:         return 1;
  3506  001524  0E01               	movlw	1
  3507  001526  0012               	return	
  3508  001528                     l1637:
  3509                           
  3510                           ;../Bibliotecas/LCD4b.c: 44:         return 0;
  3511  001528  0E00               	movlw	0
  3512  00152A  0012               	return		;funcret
  3513  00152C                     __end_of_set_bit:
  3514                           	opt callstack 0
  3515                           
  3516 ;; *************** function _int_EXT *****************
  3517 ;; Defined at:
  3518 ;;		line 15 in file "EX12.c"
  3519 ;; Parameters:    Size  Location     Type
  3520 ;;		None
  3521 ;; Auto vars:     Size  Location     Type
  3522 ;;		None
  3523 ;; Return value:  Size  Location     Type
  3524 ;;                  1    wreg      void 
  3525 ;; Registers used:
  3526 ;;		wreg, status,2, status,0
  3527 ;; Tracked objects:
  3528 ;;		On entry : 0/0
  3529 ;;		On exit  : 0/0
  3530 ;;		Unchanged: 0/0
  3531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3532 ;;      Params:         0       0       0       0       0       0       0
  3533 ;;      Locals:         0       0       0       0       0       0       0
  3534 ;;      Temps:          2       0       0       0       0       0       0
  3535 ;;      Totals:         2       0       0       0       0       0       0
  3536 ;;Total ram usage:        2 bytes
  3537 ;; Hardware stack levels used:    1
  3538 ;; This function calls:
  3539 ;;		Nothing
  3540 ;; This function is called by:
  3541 ;;		Interrupt level 2
  3542 ;; This function uses a non-reentrant model
  3543 ;;
  3544                           
  3545                           	psect	intcode
  3546  000008                     __pintcode:
  3547                           	opt callstack 0
  3548  000008                     _int_EXT:
  3549                           	opt callstack 22
  3550                           
  3551                           ;incstack = 0
  3552  000008  827C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3553  00000A  ED48  F009         	call	int_func,f	;refresh shadow registers
  3554                           
  3555                           	psect	intcode_body
  3556  001290                     __pintcode_body:
  3557                           	opt callstack 22
  3558  001290                     int_func:
  3559                           	opt callstack 22
  3560  001290  0006               	pop		; remove dummy address from shadow register refresh
  3561                           
  3562                           ;EX12.c: 17:     if (INT0IF)
  3563  001292  A2F2               	btfss	4082,1,c	;volatile
  3564  001294  D039               	goto	i2l42
  3565                           
  3566                           ;EX12.c: 18:     {;EX12.c: 19:         conta++;
  3567  001296  4A7A               	infsnz	_conta,f,c
  3568  001298  2A7B               	incf	_conta+1,f,c
  3569                           
  3570                           ;EX12.c: 20:         if (conta>=10)
  3571  00129A  BE7B               	btfsc	_conta+1,7,c
  3572  00129C  D034               	goto	i2l34
  3573  00129E  507B               	movf	_conta+1,w,c
  3574  0012A0  E104               	bnz	i2u72_40
  3575  0012A2  0E0A               	movlw	10
  3576  0012A4  5C7A               	subwf	_conta,w,c
  3577  0012A6  A0D8               	btfss	status,0,c
  3578  0012A8  D02E               	goto	i2l34
  3579  0012AA                     i2u72_40:
  3580                           
  3581                           ;EX12.c: 21:         {;EX12.c: 22:             conta = 0;
  3582  0012AA  0E00               	movlw	0
  3583  0012AC  6E7B               	movwf	_conta+1,c
  3584  0012AE  0E00               	movlw	0
  3585  0012B0  6E7A               	movwf	_conta,c
  3586                           
  3587                           ;EX12.c: 23:             switch (++controle)
  3588  0012B2  D00F               	goto	i2l1437
  3589  0012B4                     i2l36:
  3590  0012B4  8881               	bsf	3969,4,c	;volatile
  3591                           
  3592                           ;EX12.c: 27:                 break;
  3593  0012B6  D027               	goto	i2l34
  3594  0012B8                     i2l38:
  3595  0012B8  8A81               	bsf	3969,5,c	;volatile
  3596                           
  3597                           ;EX12.c: 29:                 break;
  3598  0012BA  D025               	goto	i2l34
  3599  0012BC                     i2l39:
  3600  0012BC  8C81               	bsf	3969,6,c	;volatile
  3601                           
  3602                           ;EX12.c: 31:                 break;
  3603  0012BE  D023               	goto	i2l34
  3604  0012C0                     i2l40:
  3605  0012C0  8E81               	bsf	3969,7,c	;volatile
  3606                           
  3607                           ;EX12.c: 33:                 break;
  3608  0012C2  D021               	goto	i2l34
  3609  0012C4                     i2l1435:
  3610  0012C4  0E00               	movlw	0
  3611  0012C6  6E81               	movwf	3969,c	;volatile
  3612                           
  3613                           ;EX12.c: 35:                         controle = 0;
  3614  0012C8  0E00               	movlw	0
  3615  0012CA  6E79               	movwf	_controle+1,c
  3616  0012CC  0E00               	movlw	0
  3617  0012CE  6E78               	movwf	_controle,c
  3618                           
  3619                           ;EX12.c: 36:             }
  3620  0012D0  D01A               	goto	i2l34
  3621  0012D2                     i2l1437:
  3622  0012D2  4A78               	infsnz	_controle,f,c
  3623  0012D4  2A79               	incf	_controle+1,f,c
  3624  0012D6  C078  F001         	movff	_controle,??_int_EXT
  3625  0012DA  C079  F002         	movff	_controle+1,??_int_EXT+1
  3626                           
  3627                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3628                           ; Switch size 1, requested type "simple"
  3629                           ; Number of cases is 1, Range of values is 0 to 0
  3630                           ; switch strategies available:
  3631                           ; Name         Instructions Cycles
  3632                           ; simple_byte            4     3 (average)
  3633                           ;	Chosen strategy is simple_byte
  3634  0012DE  5002               	movf	??_int_EXT+1,w,c
  3635  0012E0  0A00               	xorlw	0	; case 0
  3636  0012E2  A4D8               	btfss	status,2,c
  3637  0012E4  D010               	goto	i2l34
  3638                           
  3639                           ; Switch size 1, requested type "simple"
  3640                           ; Number of cases is 5, Range of values is 1 to 5
  3641                           ; switch strategies available:
  3642                           ; Name         Instructions Cycles
  3643                           ; simple_byte           16     9 (average)
  3644                           ;	Chosen strategy is simple_byte
  3645  0012E6  5001               	movf	??_int_EXT,w,c
  3646  0012E8  0A01               	xorlw	1	; case 1
  3647  0012EA  B4D8               	btfsc	status,2,c
  3648  0012EC  D7E3               	goto	i2l36
  3649  0012EE  0A03               	xorlw	3	; case 2
  3650  0012F0  B4D8               	btfsc	status,2,c
  3651  0012F2  D7E2               	goto	i2l38
  3652  0012F4  0A01               	xorlw	1	; case 3
  3653  0012F6  B4D8               	btfsc	status,2,c
  3654  0012F8  D7E1               	goto	i2l39
  3655  0012FA  0A07               	xorlw	7	; case 4
  3656  0012FC  B4D8               	btfsc	status,2,c
  3657  0012FE  D7E0               	goto	i2l40
  3658  001300  0A01               	xorlw	1	; case 5
  3659  001302  B4D8               	btfsc	status,2,c
  3660  001304  D7DF               	goto	i2l1435
  3661  001306                     i2l34:
  3662                           
  3663                           ;EX12.c: 38:          INT0IF = 0;
  3664  001306  92F2               	bcf	4082,1,c	;volatile
  3665  001308                     i2l42:
  3666  001308  927C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3667  00130A  0011               	retfie		f
  3668  00130C                     __end_of_int_EXT:
  3669                           	opt callstack 0
  3670                           
  3671                           	psect	rparam
  3672  0000                     
  3673                           	psect	temp
  3674  00007C                     btemp:
  3675                           	opt callstack 0
  3676  00007C                     	ds	1
  3677  0000                     int$flags	set	btemp
  3678  0000                     wtemp8	set	btemp+1
  3679  0000                     ttemp5	set	btemp+1
  3680  0000                     ttemp6	set	btemp+4
  3681  0000                     ttemp7	set	btemp+8
  3682                           tosu	equ	0xFFF
  3683                           tosh	equ	0xFFE
  3684                           tosl	equ	0xFFD
  3685                           stkptr	equ	0xFFC
  3686                           pclatu	equ	0xFFB
  3687                           pclath	equ	0xFFA
  3688                           pcl	equ	0xFF9
  3689                           tblptru	equ	0xFF8
  3690                           tblptrh	equ	0xFF7
  3691                           tblptrl	equ	0xFF6
  3692                           tablat	equ	0xFF5
  3693                           prodh	equ	0xFF4
  3694                           prodl	equ	0xFF3
  3695                           indf0	equ	0xFEF
  3696                           postinc0	equ	0xFEE
  3697                           postdec0	equ	0xFED
  3698                           preinc0	equ	0xFEC
  3699                           plusw0	equ	0xFEB
  3700                           fsr0h	equ	0xFEA
  3701                           fsr0l	equ	0xFE9
  3702                           wreg	equ	0xFE8
  3703                           indf1	equ	0xFE7
  3704                           postinc1	equ	0xFE6
  3705                           postdec1	equ	0xFE5
  3706                           preinc1	equ	0xFE4
  3707                           plusw1	equ	0xFE3
  3708                           fsr1h	equ	0xFE2
  3709                           fsr1l	equ	0xFE1
  3710                           bsr	equ	0xFE0
  3711                           indf2	equ	0xFDF
  3712                           postinc2	equ	0xFDE
  3713                           postdec2	equ	0xFDD
  3714                           preinc2	equ	0xFDC
  3715                           plusw2	equ	0xFDB
  3716                           fsr2h	equ	0xFDA
  3717                           fsr2l	equ	0xFD9
  3718                           status	equ	0xFD8


Data Sizes:
    Strings     31
    Constant    0
    Data        0
    BSS         60
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    111     123
    BANK0           128      2      50
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_3(CODE[5]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    S929_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_3(CODE[5]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_3(CODE[5]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 5
		 -> STR_3(CODE[5]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    lcd_escreve_bf@str	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), STR_2(CODE[13]), STR_1(CODE[13]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _atoi->_isspace
    _lcd_ini->_lcd_cmd
    _lcd_escreve_bf->_lcd_envia_byte
    _lcd_envia_byte->_lcd_cmd
    _lcd_cmd->_set_bit

Critical Paths under _int_EXT in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _int_EXT in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _int_EXT in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _int_EXT in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _int_EXT in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _int_EXT in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _int_EXT in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   10803
                                              0 BANK0      2     2      0
                     _lcd_escreve_bf
                            _lcd_ini
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             16    10      6    8292
                                             95 COMRAM    16    10      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    7939
                                             87 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           46    40      6    7566
                                             65 COMRAM    22    16      6
                               _atoi
                               _dtoa
                              _fputc
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                36    26     10    4358
                                             29 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    2709
                                             18 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     166
                                              2 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1235
                                             11 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     834
                                              2 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                             20 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     448
                                              2 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     452
                                              2 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (4) _atoi                                                15    13      2    1244
                                              9 COMRAM    15    13      2
                             ___wmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (5) _isspace                                              7     5      2     207
                                              2 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              6     4      2     237
                                              2 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     403
                                              2 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _lcd_ini                                              2     2      0     874
                                              6 COMRAM     2     2      0
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (1) _lcd_escreve_bf                                       5     2      3    1637
                                              8 COMRAM     5     2      3
                     _lcd_envia_byte
 ---------------------------------------------------------------------------------
 (2) _lcd_envia_byte                                       2     1      1    1024
                                              6 COMRAM     2     1      1
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (2) _lcd_cmd                                              2     2      0     828
                                              4 COMRAM     2     2      0
                            _set_bit
 ---------------------------------------------------------------------------------
 (3) _set_bit                                              2     1      1     652
                                              2 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _int_EXT                                              2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _lcd_escreve_bf
     _lcd_envia_byte
       _lcd_cmd
         _set_bit
   _lcd_ini
     _lcd_cmd
       _set_bit
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _atoi
           ___wmul
           _isdigit
           _isspace
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
                 _putch
             _strlen
         _fputc
           _putch
         _isdigit

 _int_EXT (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      2      32       5       39.1%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     6F      7B       1       97.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      AD      15        0.0%
DATA                 0      0      AD       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Thu Apr 04 14:25:24 2019

    ___wmul@multiplicand 0005              __CFG_BORV$3 000000             __CFG_CP0$OFF 000000  
           __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000  
            __CFG_OSC$HS 000000                      l120 1096                      l131 0968  
                    l133 0970                      l865 144A                      l896 0DB6  
           __CFG_CPB$OFF 000000             __CFG_CPD$OFF 000000                      u900 0BCA  
                    u740 0FD8                      u830 1430                      u840 147C  
                    u760 1020                      u850 147E                      u960 0E42  
                    u881 0B92                      _abs 1422                      _pad 1068  
                    wreg 000FE8             __CFG_LVP$OFF 000000             __CFG_WDT$OFF 000000  
                   ?_abs 0015                     l2027 11CA                     l1511 10A0  
                   l1505 1080                     l1515 10B8                     l1613 0EC2  
                   l1605 0E86                     l1509 108E                     l1551 0B8C  
                   l1519 10E4                     l1625 13E2                     l1721 0CEC  
                   l1705 0C92                     l1545 0B64                     l1609 0E9C  
                   l1801 06D4                     l1731 0D56                     l1723 0CF4  
                   l1715 0CDC                     l1707 0C96                     l1475 0FE0  
                   l1637 1528                     l1725 0CFA                     l1557 0BB2  
                   l1573 0C38                     l1485 13F4                     l1493 148E  
                   l1661 098A                     l1813 0740                     l1727 0D22  
                   l1559 0BC6                     l1495 1492                     l1647 094C  
                   l1815 075E                     l1921 1222                     l1577 0C5E  
                   l1569 0C22                     l1593 0E10                     l1489 140A  
                   l1665 099A                     l1833 0864                     l1817 076C  
                   l1931 1268                     l1675 0A92                     l1843 08AA  
                   l1925 1230                     l1597 0E2A                     l1589 0DEC  
                   l1927 123C                     l1599 0E3E                     l1695 0AF6  
                   l1839 08A0                     l1791 0684                     l1783 067C  
                   l1775 0666                     l1777 0668                     l1849 08C2  
                   l1873 131E                     l1699 0B0E                     l1795 0688  
                   l1787 0680                     l1779 0678                     l1875 1342  
                   ?_pad 0013                     l1895 1122                     l1799 0692  
                   STR_1 060E                     STR_2 0601                     STR_3 061B  
                   u1000 13DE                     u1020 091E                     u1110 0AC2  
                   u1030 0920                     u1111 0AC0                     u1200 0D86  
                   u1120 0AD0                     u1210 0D88                     u1130 0AD4  
                   u1060 095E                     u1300 07A6                     u1150 0AE0  
                   u1310 07B2                     u1400 125C                     u1080 0984  
                   u1410 1288                     u1090 0AA0                     u1330 07E6  
                   u1180 0CD8                     u1407 1252                     u1417 127E  
                   u1290 07A4                     u1355 1504                     u1507 1186  
                   u1356 1506                     u1517 1508                     u1437 11D6  
                   u1527 0F54                     u1447 1114                     u1457 112E  
                   u1467 1146                     u1477 1154                     u1487 1166  
                   u1497 1178                     i2l40 12C0                     i2l34 1306  
                   i2l42 1308                     i2l36 12B4                     i2l38 12B8  
                   i2l39 12BC             __CFG_PWRT$ON 000000                     abs@a 0015  
                   _dbuf 0080                     _atoi 0C80                     _main 118E  
                   _dtoa 08F6                     _prec 0074                     _nout 0070  
                   pad@i 001A                     pad@p 0017                     fsr1h 000FE2  
                   fsr2h 000FDA                     indf1 000FE7                     indf2 000FDF  
                   fsr1l 000FE1                     pad@w 001C                     fsr2l 000FD9  
                   btemp 007C                     prodh 000FF4                     prodl 000FF3  
                   start 000E            __CFG_IESO$OFF 000000            __CFG_MCLRE$ON 000000  
           ___param_bank 000000                    ??_abs 0017                    ??_pad 0019  
        __end_of___aodiv 0C80                    ?_atoi 000A                    ?_main 0001  
                  ?_dtoa 001E          __end_of___aomod 0EE4             vfpfcnvrt@fmt 0044  
                  _PORTB 000F81                    _PORTD 000F83                    _TRISB 000F93  
                  _TRISD 000F95            __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000  
          __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000  
         __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000  
         __CFG_EBTR3$OFF 000000          __end_of_lcd_cmd 0FC8          __end_of_lcd_ini 118E  
          __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000  
         __CFG_EBTRB$OFF 000000          __end_of_int_EXT 130C                    _flags 0076  
                  _conta 007A                    _fputc 0FC8                    _fputs 13EA  
        __end_of_isdigit 1484                    atoi@n 0017                    pad@fp 0013  
                  atoi@s 000A                    _width 0072                    _putch 152C  
                  dtoa@d 0020                    dtoa@i 0040                    dtoa@n 0038  
                  dtoa@p 0032                    dtoa@s 0036                    dtoa@w 0034  
        __end_of_isspace 13EA           __CFG_BOREN$OFF 000000          __end_of_set_bit 152C  
                  tablat 000FF5                    ttemp5 007D                    ttemp6 0080  
                  ttemp7 0084                    status 000FD8                    wtemp8 007D  
        __end_of_sprintf 13AC          __initialization 14AE             __end_of_atoi 0DC0  
           __end_of_main 1214             __end_of_dtoa 0B38                   ??_atoi 000C  
                 ??_main 00B0                   ??_dtoa 0028            __activetblptr 000002  
                 _ADCON1 000FC1                   ?_fputc 0003                   ?_fputs 000C  
                 ?_putch 0001                   _INT0IF 007F91                   i2l1435 12C4  
                 i2l1437 12D2                   _INTCON 000FF2            vfpfcnvrt@done 0054  
         __CFG_XINST$OFF 000000             vfprintf@cfmt 005E                ??___aodiv 0013  
              ??___aomod 0013                   ___wmul 14D4           __CFG_STVREN$ON 000000  
       ??_lcd_escreve_bf 000C                   clear_0 14B4                   clear_1 14C0  
       ??_lcd_envia_byte 0008                   pad@buf 0015                ??_lcd_cmd 0005  
                 dtoa@fp 001E                ??_lcd_ini 0007                   _strlen 1484  
              ??_int_EXT 0001                   fputc@c 0003                   fputs@c 0010  
                 fputs@i 0011                   fputs@s 000C                ??_isdigit 0005  
           __mediumconst 0000                ??_isspace 0005                ??_set_bit 0004  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
                 putch@c 0001         __end_of_vfprintf 135E                ??_sprintf 0066  
             __accesstop 0080  __end_of__initialization 14C6          __CFG_PBADEN$OFF 000000  
          ___rparam_used 000001           __pcstackCOMRAM 0001            __end_of_fputc 1068  
          __end_of_fputs 1422            __end_of_putch 152E                  ??_fputc 0007  
                ??_fputs 0010                  ??_putch 0003               __pbssBANK0 0080  
                ?___wmul 0003                  ?_strlen 0003                  _INTCON2 000FF1  
     __size_of_vfpfcnvrt 02D4                  i2u72_40 12AA                  __Hparam 0000  
                __Lparam 0000                  ___aodiv 0B38                  ___aomod 0DC0  
        __size_of___wmul 0026                ?_vfprintf 0058              set_bit@comp 0003  
           __psmallconst 0600                  __pcinit 14AE                  __ramtop 0600  
                __ptext0 118E                  __ptext1 135E                  __ptext2 130C  
                __ptext3 0622                  __ptext4 08F6                  __ptext5 1068  
                __ptext6 1484                  __ptext7 13EA                  __ptext8 0FC8  
                __ptext9 152C                  _lcd_cmd 0EE4                  _lcd_ini 10FE  
        __size_of_strlen 002A                  _int_EXT 0008             __size_of_abs 0032  
           __size_of_pad 0096                  _isdigit 1454                  _isspace 13AC  
                _set_bit 1518                  atoi@neg 0010                  _sprintf 135E  
         __pintcode_body 1290     end_of_initialization 14C6       lcd_envia_byte@dado 0007  
                fputc@fp 0005            __Lmediumconst 0000                  int_func 1290  
                fputs@fp 000E        __end_of_vfpfcnvrt 08F6                  postdec2 000FDD  
                postinc0 000FEE                  postinc1 000FE6                  postinc2 000FDE  
             ??_vfprintf 005E                  strlen@a 0005                  strlen@s 0003  
              _PORTBbits 000F81                _PORTDbits 000F83                _PORTEbits 000F84  
              _TRISEbits 000F96               lcd_cmd@cmd 0006              vfpfcnvrt@ap 0046  
            vfpfcnvrt@fp 0042              vfpfcnvrt@ll 004C           __end_of___wmul 14FA  
         __end_of_strlen 14AE      start_initialization 14AE              __end_of_abs 1454  
            __end_of_pad 10FE              vfprintf@fmt 005A                 ??___wmul 0007  
       __CFG_LPT1OSC$OFF 000000                 ??_strlen 0005              __pbssCOMRAM 0070  
          __pcstackBANK0 00B0         ___aodiv@dividend 0003  __size_of_lcd_escreve_bf 007C  
__size_of_lcd_envia_byte 001E        __CFG_CCP2MX$PORTC 000000                __pintcode 0008  
               ?___aodiv 0003                 ?___aomod 0003        lcd_escreve_bf@end 000C  
      lcd_escreve_bf@col 0009        lcd_escreve_bf@lin 000D         ___aodiv@quotient 0015  
      lcd_escreve_bf@str 000A                _bufferLCD 00A0                 ?_lcd_cmd 0001  
      __size_of_vfprintf 0052                 ?_lcd_ini 0001                 ?_int_EXT 0001  
            __smallconst 0600                 ?_isdigit 0003                 ?_isspace 0003  
               ?_set_bit 0003               set_bit@cmd 0004                 ?_sprintf 0060  
         __size_of_fputc 00A0           __size_of_fputs 0038           __size_of_putch 0002  
         ___wmul@product 0007         __CFG_WDTPS$32768 000000                _vfpfcnvrt 0622  
      ___wmul@multiplier 0003                 __Hrparam 0000               vfprintf@ap 005C  
               __Lrparam 0000               vfprintf@fp 0058         __size_of___aodiv 0148  
       __size_of___aomod 0124               ?_vfpfcnvrt 0042          ___aodiv@divisor 000B  
        ___aodiv@counter 0013         __size_of_lcd_cmd 00E4         __size_of_lcd_ini 0090  
             sprintf@fmt 0062         __size_of_int_EXT 1304                 _atoi$907 0012  
               _atoi$908 0016                 _atoi$909 0014         __size_of_isdigit 0030  
               _dtoa$435 0030           _lcd_escreve_bf 1214         __size_of_isspace 003E  
               __ptext10 1422                 __ptext11 0DC0                 __ptext20 0EE4  
               __ptext12 0B38                 __ptext21 1518                 __ptext13 0C80  
               __ptext14 13AC                 __ptext15 1454                 __ptext16 14D4  
               __ptext17 10FE                 __ptext18 1214                 __ptext19 14FA  
       __size_of_set_bit 0014           _lcd_envia_byte 14FA         __size_of_sprintf 004E  
               _controle 0078            __size_of_atoi 0140            __size_of_main 0086  
          __size_of_dtoa 0242                 int$flags 007C                 lcd_ini@i 0008  
               _vfprintf 130C              _isspace$925 0009         ___aomod@dividend 0003  
 __end_of_lcd_escreve_bf 1290   __end_of_lcd_envia_byte 1518      lcd_envia_byte@nivel 0008  
               isdigit@c 0003                 intlevel2 0000                sprintf@ap 0068  
               isspace@c 0003          ___aomod@divisor 000B              ??_vfpfcnvrt 0048  
          _vfpfcnvrt$450 0056          ___aomod@counter 0013                 sprintf@f 006A  
               sprintf@s 0060          ?_lcd_escreve_bf 0009          ?_lcd_envia_byte 0007  
           ___aodiv@sign 0014             ___aomod@sign 0014  
