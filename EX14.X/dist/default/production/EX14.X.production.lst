

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Thu Apr 04 14:57:28 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    34                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    35                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    36                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    37  0000                     
    38                           ; Version 2.05
    39                           ; Generated 20/12/2018 GMT
    40                           ; 
    41                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    42                           ; All rights reserved.
    43                           ; 
    44                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    45                           ; 
    46                           ; Redistribution and use in source and binary forms, with or without modification, are
    47                           ; permitted provided that the following conditions are met:
    48                           ; 
    49                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    50                           ;        conditions and the following disclaimer.
    51                           ; 
    52                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    53                           ;        of conditions and the following disclaimer in the documentation and/or other
    54                           ;        materials provided with the distribution.
    55                           ; 
    56                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    57                           ;        software without specific prior written permission.
    58                           ; 
    59                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    60                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    61                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    62                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    63                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    64                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    65                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    66                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    67                           ; 
    68                           ; 
    69                           ; Code-generator required, PIC18F4520 Definitions
    70                           ; 
    71                           ; SFR Addresses
    72  0000                     _TMR0	set	4054
    73  0000                     _PORTDbits	set	3971
    74  0000                     _PORTEbits	set	3972
    75  0000                     _PORTD	set	3971
    76  0000                     _TRISEbits	set	3990
    77  0000                     _TRISD	set	3989
    78  0000                     _T0CON	set	4053
    79  0000                     _INTCON	set	4082
    80  0000                     _ADCON1	set	4033
    81  0000                     _PORTBbits	set	3969
    82  0000                     _TRISBbits	set	3987
    83  0000                     _TMR0IF	set	32658
    84                           
    85                           	psect	smallconst
    86  000600                     __psmallconst:
    87                           	opt callstack 0
    88  000600  00                 	db	0
    89  000601                     STR_2:
    90  000601  43                 	db	67	;'C'
    91  000602  4F                 	db	79	;'O'
    92  000603  4E                 	db	78	;'N'
    93  000604  54                 	db	84	;'T'
    94  000605  41                 	db	65	;'A'
    95  000606  47                 	db	71	;'G'
    96  000607  45                 	db	69	;'E'
    97  000608  4D                 	db	77	;'M'
    98  000609  3A                 	db	58	;':'
    99  00060A  20                 	db	32
   100  00060B  30                 	db	48	;'0'
   101  00060C  30                 	db	48	;'0'
   102  00060D  00                 	db	0
   103  00060E                     STR_1:
   104  00060E  54                 	db	84	;'T'
   105  00060F  49                 	db	73	;'I'
   106  000610  4D                 	db	77	;'M'
   107  000611  45                 	db	69	;'E'
   108  000612  52                 	db	82	;'R'
   109  000613  30                 	db	48	;'0'
   110  000614  00                 	db	0
   111  000615                     STR_3:
   112  000615  25                 	db	37
   113  000616  30                 	db	48	;'0'
   114  000617  32                 	db	50	;'2'
   115  000618  64                 	db	100	;'d'
   116  000619  00                 	db	0
   117                           
   118                           ; #config settings
   119  00061A  00                 	db	0	; dummy byte at the end
   120  0000                     
   121                           	psect	cinit
   122  00144A                     __pcinit:
   123                           	opt callstack 0
   124  00144A                     start_initialization:
   125                           	opt callstack 0
   126  00144A                     __initialization:
   127                           	opt callstack 0
   128                           
   129                           ; Clear objects allocated to BANK0 (48 bytes)
   130  00144A  EE00  F080         	lfsr	0,__pbssBANK0
   131  00144E  0E30               	movlw	48
   132  001450                     clear_0:
   133  001450  6AEE               	clrf	postinc0,c
   134  001452  06E8               	decf	wreg,f,c
   135  001454  E1FD               	bnz	clear_0
   136                           
   137                           ; Clear objects allocated to COMRAM (10 bytes)
   138  001456  EE00  F071         	lfsr	0,__pbssCOMRAM
   139  00145A  0E0A               	movlw	10
   140  00145C                     clear_1:
   141  00145C  6AEE               	clrf	postinc0,c
   142  00145E  06E8               	decf	wreg,f,c
   143  001460  E1FD               	bnz	clear_1
   144  001462                     end_of_initialization:
   145                           	opt callstack 0
   146  001462                     __end_of__initialization:
   147                           	opt callstack 0
   148  001462  907B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   149  001464  927B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   150  001466  0E00               	movlw	low (__Lmediumconst shr (0+16))
   151  001468  6EF8               	movwf	tblptru,c
   152  00146A  0100               	movlb	0
   153  00146C  EFE1  F007         	goto	_main	;jump to C main() function
   154                           
   155                           	psect	bssCOMRAM
   156  000071                     __pbssCOMRAM:
   157                           	opt callstack 0
   158  000071                     _nout:
   159                           	opt callstack 0
   160  000071                     	ds	2
   161  000073                     _width:
   162                           	opt callstack 0
   163  000073                     	ds	2
   164  000075                     _prec:
   165                           	opt callstack 0
   166  000075                     	ds	2
   167  000077                     _flags:
   168                           	opt callstack 0
   169  000077                     	ds	2
   170  000079                     _conta:
   171                           	opt callstack 0
   172  000079                     	ds	2
   173                           
   174                           	psect	bssBANK0
   175  000080                     __pbssBANK0:
   176                           	opt callstack 0
   177  000080                     _dbuf:
   178                           	opt callstack 0
   179  000080                     	ds	32
   180  0000A0                     _bufferLCD:
   181                           	opt callstack 0
   182  0000A0                     	ds	16
   183                           
   184                           	psect	cstackBANK0
   185  0000B0                     __pcstackBANK0:
   186                           	opt callstack 0
   187  0000B0                     ??_main:
   188                           
   189                           ; 1 bytes @ 0x0
   190  0000B0                     	ds	2
   191                           
   192                           	psect	cstackCOMRAM
   193  000001                     __pcstackCOMRAM:
   194                           	opt callstack 0
   195  000001                     ??_int_TMR0:
   196  000001                     
   197                           ; 1 bytes @ 0x0
   198  000001                     	ds	3
   199  000004                     ?_strlen:
   200                           	opt callstack 0
   201  000004                     ?_isdigit:
   202                           	opt callstack 0
   203  000004                     ?_isspace:
   204                           	opt callstack 0
   205  000004                     ?___wmul:
   206                           	opt callstack 0
   207  000004                     ?___aodiv:
   208                           	opt callstack 0
   209  000004                     ?___aomod:
   210                           	opt callstack 0
   211  000004                     set_bit@comp:
   212                           	opt callstack 0
   213  000004                     ___wmul@multiplier:
   214                           	opt callstack 0
   215  000004                     isdigit@c:
   216                           	opt callstack 0
   217  000004                     isspace@c:
   218                           	opt callstack 0
   219  000004                     fputc@c:
   220                           	opt callstack 0
   221  000004                     strlen@s:
   222                           	opt callstack 0
   223  000004                     ___aodiv@dividend:
   224                           	opt callstack 0
   225  000004                     ___aomod@dividend:
   226                           	opt callstack 0
   227                           
   228                           ; 8 bytes @ 0x3
   229  000004                     	ds	1
   230  000005                     set_bit@cmd:
   231                           	opt callstack 0
   232                           
   233                           ; 1 bytes @ 0x4
   234  000005                     	ds	1
   235  000006                     ??_lcd_cmd:
   236  000006                     ??_isdigit:
   237  000006                     ??_isspace:
   238  000006                     ___wmul@multiplicand:
   239                           	opt callstack 0
   240  000006                     fputc@fp:
   241                           	opt callstack 0
   242  000006                     strlen@a:
   243                           	opt callstack 0
   244                           
   245                           ; 2 bytes @ 0x5
   246  000006                     	ds	1
   247  000007                     lcd_cmd@cmd:
   248                           	opt callstack 0
   249                           
   250                           ; 1 bytes @ 0x6
   251  000007                     	ds	1
   252  000008                     ??_lcd_ini:
   253  000008                     ??_fputc:
   254  000008                     lcd_envia_byte@dado:
   255                           	opt callstack 0
   256  000008                     ___wmul@product:
   257                           	opt callstack 0
   258                           
   259                           ; 2 bytes @ 0x7
   260  000008                     	ds	1
   261  000009                     lcd_ini@i:
   262                           	opt callstack 0
   263  000009                     lcd_envia_byte@nivel:
   264                           	opt callstack 0
   265                           
   266                           ; 1 bytes @ 0x8
   267  000009                     	ds	1
   268  00000A                     lcd_escreve_bf@col:
   269                           	opt callstack 0
   270  00000A                     _isspace$971:
   271                           	opt callstack 0
   272                           
   273                           ; 1 bytes @ 0x9
   274  00000A                     	ds	1
   275  00000B                     ?_atoi:
   276                           	opt callstack 0
   277  00000B                     lcd_escreve_bf@str:
   278                           	opt callstack 0
   279  00000B                     atoi@s:
   280                           	opt callstack 0
   281                           
   282                           ; 2 bytes @ 0xA
   283  00000B                     	ds	1
   284  00000C                     ___aodiv@divisor:
   285                           	opt callstack 0
   286  00000C                     ___aomod@divisor:
   287                           	opt callstack 0
   288                           
   289                           ; 8 bytes @ 0xB
   290  00000C                     	ds	1
   291  00000D                     ??_atoi:
   292  00000D                     lcd_escreve_bf@end:
   293                           	opt callstack 0
   294  00000D                     fputs@s:
   295                           	opt callstack 0
   296                           
   297                           ; 2 bytes @ 0xC
   298  00000D                     	ds	1
   299  00000E                     lcd_escreve_bf@lin:
   300                           	opt callstack 0
   301                           
   302                           ; 1 bytes @ 0xD
   303  00000E                     	ds	1
   304  00000F                     fputs@fp:
   305                           	opt callstack 0
   306                           
   307                           ; 2 bytes @ 0xE
   308  00000F                     	ds	2
   309  000011                     fputs@c:
   310                           	opt callstack 0
   311  000011                     atoi@neg:
   312                           	opt callstack 0
   313                           
   314                           ; 2 bytes @ 0x10
   315  000011                     	ds	1
   316  000012                     fputs@i:
   317                           	opt callstack 0
   318                           
   319                           ; 2 bytes @ 0x11
   320  000012                     	ds	1
   321  000013                     _atoi$953:
   322                           	opt callstack 0
   323                           
   324                           ; 2 bytes @ 0x12
   325  000013                     	ds	1
   326  000014                     ?_pad:
   327                           	opt callstack 0
   328  000014                     ___aodiv@counter:
   329                           	opt callstack 0
   330  000014                     ___aomod@counter:
   331                           	opt callstack 0
   332  000014                     pad@fp:
   333                           	opt callstack 0
   334                           
   335                           ; 2 bytes @ 0x13
   336  000014                     	ds	1
   337  000015                     ___aodiv@sign:
   338                           	opt callstack 0
   339  000015                     ___aomod@sign:
   340                           	opt callstack 0
   341  000015                     _atoi$955:
   342                           	opt callstack 0
   343                           
   344                           ; 2 bytes @ 0x14
   345  000015                     	ds	1
   346  000016                     ?_abs:
   347                           	opt callstack 0
   348  000016                     pad@buf:
   349                           	opt callstack 0
   350  000016                     abs@a:
   351                           	opt callstack 0
   352  000016                     ___aodiv@quotient:
   353                           	opt callstack 0
   354                           
   355                           ; 8 bytes @ 0x15
   356  000016                     	ds	1
   357  000017                     _atoi$954:
   358                           	opt callstack 0
   359                           
   360                           ; 1 bytes @ 0x16
   361  000017                     	ds	1
   362  000018                     ??_abs:
   363  000018                     pad@p:
   364                           	opt callstack 0
   365  000018                     atoi@n:
   366                           	opt callstack 0
   367                           
   368                           ; 2 bytes @ 0x17
   369  000018                     	ds	2
   370  00001A                     ??_pad:
   371                           
   372                           ; 1 bytes @ 0x19
   373  00001A                     	ds	1
   374  00001B                     pad@i:
   375                           	opt callstack 0
   376                           
   377                           ; 2 bytes @ 0x1A
   378  00001B                     	ds	2
   379  00001D                     pad@w:
   380                           	opt callstack 0
   381                           
   382                           ; 2 bytes @ 0x1C
   383  00001D                     	ds	2
   384  00001F                     ?_dtoa:
   385                           	opt callstack 0
   386  00001F                     dtoa@fp:
   387                           	opt callstack 0
   388                           
   389                           ; 2 bytes @ 0x1E
   390  00001F                     	ds	2
   391  000021                     dtoa@d:
   392                           	opt callstack 0
   393                           
   394                           ; 8 bytes @ 0x20
   395  000021                     	ds	8
   396  000029                     ??_dtoa:
   397                           
   398                           ; 1 bytes @ 0x28
   399  000029                     	ds	8
   400  000031                     _dtoa$481:
   401                           	opt callstack 0
   402                           
   403                           ; 2 bytes @ 0x30
   404  000031                     	ds	2
   405  000033                     dtoa@p:
   406                           	opt callstack 0
   407                           
   408                           ; 2 bytes @ 0x32
   409  000033                     	ds	2
   410  000035                     dtoa@w:
   411                           	opt callstack 0
   412                           
   413                           ; 2 bytes @ 0x34
   414  000035                     	ds	2
   415  000037                     dtoa@s:
   416                           	opt callstack 0
   417                           
   418                           ; 2 bytes @ 0x36
   419  000037                     	ds	2
   420  000039                     dtoa@n:
   421                           	opt callstack 0
   422                           
   423                           ; 8 bytes @ 0x38
   424  000039                     	ds	8
   425  000041                     dtoa@i:
   426                           	opt callstack 0
   427                           
   428                           ; 2 bytes @ 0x40
   429  000041                     	ds	2
   430  000043                     ?_vfpfcnvrt:
   431                           	opt callstack 0
   432  000043                     vfpfcnvrt@fp:
   433                           	opt callstack 0
   434                           
   435                           ; 2 bytes @ 0x42
   436  000043                     	ds	2
   437  000045                     vfpfcnvrt@fmt:
   438                           	opt callstack 0
   439                           
   440                           ; 2 bytes @ 0x44
   441  000045                     	ds	2
   442  000047                     vfpfcnvrt@ap:
   443                           	opt callstack 0
   444                           
   445                           ; 2 bytes @ 0x46
   446  000047                     	ds	2
   447  000049                     ??_vfpfcnvrt:
   448                           
   449                           ; 1 bytes @ 0x48
   450  000049                     	ds	4
   451  00004D                     vfpfcnvrt@ll:
   452                           	opt callstack 0
   453                           
   454                           ; 8 bytes @ 0x4C
   455  00004D                     	ds	8
   456  000055                     vfpfcnvrt@done:
   457                           	opt callstack 0
   458                           
   459                           ; 2 bytes @ 0x54
   460  000055                     	ds	2
   461  000057                     _vfpfcnvrt$496:
   462                           	opt callstack 0
   463                           
   464                           ; 2 bytes @ 0x56
   465  000057                     	ds	2
   466  000059                     ?_vfprintf:
   467                           	opt callstack 0
   468  000059                     vfprintf@fp:
   469                           	opt callstack 0
   470                           
   471                           ; 2 bytes @ 0x58
   472  000059                     	ds	2
   473  00005B                     vfprintf@fmt:
   474                           	opt callstack 0
   475                           
   476                           ; 2 bytes @ 0x5A
   477  00005B                     	ds	2
   478  00005D                     vfprintf@ap:
   479                           	opt callstack 0
   480                           
   481                           ; 2 bytes @ 0x5C
   482  00005D                     	ds	2
   483  00005F                     vfprintf@cfmt:
   484                           	opt callstack 0
   485                           
   486                           ; 2 bytes @ 0x5E
   487  00005F                     	ds	2
   488  000061                     ?_sprintf:
   489                           	opt callstack 0
   490  000061                     sprintf@s:
   491                           	opt callstack 0
   492                           
   493                           ; 2 bytes @ 0x60
   494  000061                     	ds	2
   495  000063                     sprintf@fmt:
   496                           	opt callstack 0
   497                           
   498                           ; 2 bytes @ 0x62
   499  000063                     	ds	4
   500  000067                     
   501                           ; 1 bytes @ 0x66
   502  000067                     	ds	2
   503  000069                     sprintf@ap:
   504                           	opt callstack 0
   505                           
   506                           ; 2 bytes @ 0x68
   507  000069                     	ds	2
   508  00006B                     sprintf@f:
   509                           	opt callstack 0
   510                           
   511                           ; 6 bytes @ 0x6A
   512  00006B                     	ds	6
   513                           
   514 ;;
   515 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   516 ;;
   517 ;; *************** function _main *****************
   518 ;; Defined at:
   519 ;;		line 22 in file "EX14.c"
   520 ;; Parameters:    Size  Location     Type
   521 ;;		None
   522 ;; Auto vars:     Size  Location     Type
   523 ;;		None
   524 ;; Return value:  Size  Location     Type
   525 ;;                  1    wreg      void 
   526 ;; Registers used:
   527 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   528 ;; Tracked objects:
   529 ;;		On entry : 0/0
   530 ;;		On exit  : 0/0
   531 ;;		Unchanged: 0/0
   532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   533 ;;      Params:         0       0       0       0       0       0       0
   534 ;;      Locals:         0       0       0       0       0       0       0
   535 ;;      Temps:          0       2       0       0       0       0       0
   536 ;;      Totals:         0       2       0       0       0       0       0
   537 ;;Total ram usage:        2 bytes
   538 ;; Hardware stack levels required when called:    9
   539 ;; This function calls:
   540 ;;		_lcd_escreve_bf
   541 ;;		_lcd_ini
   542 ;;		_sprintf
   543 ;; This function is called by:
   544 ;;		Startup code after reset
   545 ;; This function uses a non-reentrant model
   546 ;;
   547                           
   548                           	psect	text0
   549  000FC2                     __ptext0:
   550                           	opt callstack 0
   551  000FC2                     _main:
   552                           	opt callstack 22
   553                           
   554                           ;EX14.c: 24:     TRISBbits.TRISB0 = 0;
   555                           
   556                           ;incstack = 0
   557  000FC2  9093               	bcf	3987,0,c	;volatile
   558                           
   559                           ;EX14.c: 25:     PORTBbits.RB0 = 0;
   560  000FC4  9081               	bcf	3969,0,c	;volatile
   561                           
   562                           ;EX14.c: 26:     ADCON1 = 0x0F;
   563  000FC6  0E0F               	movlw	15
   564  000FC8  6EC1               	movwf	4033,c	;volatile
   565                           
   566                           ;EX14.c: 28:     INTCON = 0b10100000;
   567  000FCA  0EA0               	movlw	160
   568  000FCC  6EF2               	movwf	4082,c	;volatile
   569                           
   570                           ;EX14.c: 37:     T0CON = 0b11100000;
   571  000FCE  0EE0               	movlw	224
   572  000FD0  6ED5               	movwf	4053,c	;volatile
   573                           
   574                           ;EX14.c: 44:     TMR0 = 251;
   575  000FD2  0E00               	movlw	0
   576  000FD4  6ED7               	movwf	4055,c	;volatile
   577  000FD6  0EFB               	movlw	251
   578  000FD8  6ED6               	movwf	4054,c	;volatile
   579                           
   580                           ;EX14.c: 46:     lcd_ini();
   581  000FDA  ECCE  F008         	call	_lcd_ini	;wreg free
   582                           
   583                           ;EX14.c: 49:     lcd_escreve_bf(1, 6, "TIMER0");
   584  000FDE  0E06               	movlw	6
   585  000FE0  6E0A               	movwf	lcd_escreve_bf@col,c
   586  000FE2  0E0E               	movlw	low STR_1
   587  000FE4  6E0B               	movwf	lcd_escreve_bf@str,c
   588  000FE6  0E06               	movlw	high STR_1
   589  000FE8  6E0C               	movwf	lcd_escreve_bf@str+1,c
   590  000FEA  0E01               	movlw	1
   591  000FEC  EC16  F009         	call	_lcd_escreve_bf
   592                           
   593                           ;EX14.c: 52:     lcd_escreve_bf(2, 3, "CONTAGEM: 00");
   594  000FF0  0E03               	movlw	3
   595  000FF2  6E0A               	movwf	lcd_escreve_bf@col,c
   596  000FF4  0E01               	movlw	low STR_2
   597  000FF6  6E0B               	movwf	lcd_escreve_bf@str,c
   598  000FF8  0E06               	movlw	high STR_2
   599  000FFA  6E0C               	movwf	lcd_escreve_bf@str+1,c
   600  000FFC  0E02               	movlw	2
   601  000FFE  EC16  F009         	call	_lcd_escreve_bf
   602  001002                     l1998:
   603                           
   604                           ;EX14.c: 55:     {;EX14.c: 56:         _delay((unsigned long)((500)*(8000000/4000.0)));
   605  001002  0E06               	movlw	6
   606  001004  0100               	movlb	0	; () banked
   607  001006  6FB1               	movwf	(??_main+1)& (0+255),b
   608  001008  0E13               	movlw	19
   609  00100A  6FB0               	movwf	??_main& (0+255),b
   610  00100C  0EAD               	movlw	173
   611  00100E                     u1467:
   612  00100E  2EE8               	decfsz	wreg,f,c
   613  001010  D7FE               	bra	u1467
   614  001012  2FB0               	decfsz	??_main& (0+255),f,b
   615  001014  D7FC               	bra	u1467
   616  001016  2FB1               	decfsz	(??_main+1)& (0+255),f,b
   617  001018  D7FA               	bra	u1467
   618  00101A  D000               	nop2	
   619                           
   620                           ;EX14.c: 58:         PORTBbits.RB0 = ~PORTBbits.RB0;
   621  00101C  A081               	btfss	3969,0,c	;volatile
   622  00101E  D002               	goto	u1450
   623  001020  0E01               	movlw	1
   624  001022  D001               	goto	u1456
   625  001024                     u1450:
   626  001024  0E00               	movlw	0
   627  001026                     u1456:
   628  001026  0AFF               	xorlw	255
   629  001028  0100               	movlb	0	; () banked
   630  00102A  6FB0               	movwf	??_main& (0+255),b
   631  00102C  5081               	movf	3969,w,c	;volatile
   632  00102E  19B0               	xorwf	??_main& (0+255),w,b
   633  001030  0BFE               	andlw	-2
   634  001032  19B0               	xorwf	??_main& (0+255),w,b
   635  001034  6E81               	movwf	3969,c	;volatile
   636                           
   637                           ; BSR set to: 0
   638                           ;EX14.c: 61:         sprintf(bufferLCD, "%02d", conta);
   639  001036  0EA0               	movlw	low _bufferLCD
   640  001038  6E61               	movwf	sprintf@s,c
   641  00103A  0E00               	movlw	high _bufferLCD
   642  00103C  6E62               	movwf	sprintf@s+1,c
   643  00103E  0E15               	movlw	low STR_3
   644  001040  6E63               	movwf	sprintf@fmt,c
   645  001042  0E06               	movlw	high STR_3
   646  001044  6E64               	movwf	sprintf@fmt+1,c
   647  001046  C079  F065         	movff	_conta,?_sprintf+4
   648  00104A  C07A  F066         	movff	_conta+1,?_sprintf+5
   649  00104E  EC7D  F009         	call	_sprintf	;wreg free
   650                           
   651                           ;EX14.c: 64:         lcd_escreve_bf(2, 13, bufferLCD);
   652  001052  0E0D               	movlw	13
   653  001054  6E0A               	movwf	lcd_escreve_bf@col,c
   654  001056  0EA0               	movlw	low _bufferLCD
   655  001058  6E0B               	movwf	lcd_escreve_bf@str,c
   656  00105A  0E00               	movlw	high _bufferLCD
   657  00105C  6E0C               	movwf	lcd_escreve_bf@str+1,c
   658  00105E  0E02               	movlw	2
   659  001060  EC16  F009         	call	_lcd_escreve_bf
   660  001064  D7CE               	goto	l1998
   661  001066                     __end_of_main:
   662                           	opt callstack 0
   663                           
   664 ;; *************** function _sprintf *****************
   665 ;; Defined at:
   666 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_sprintf.c"
   667 ;; Parameters:    Size  Location     Type
   668 ;;  s               2   96[COMRAM] PTR unsigned char 
   669 ;;		 -> bufferLCD(16), 
   670 ;;  fmt             2   98[COMRAM] PTR const unsigned char 
   671 ;;		 -> STR_3(5), 
   672 ;; Auto vars:     Size  Location     Type
   673 ;;  f               6  106[COMRAM] struct _IO_FILE
   674 ;;  ap              2  104[COMRAM] PTR void [1]
   675 ;;		 -> ?_sprintf(2), 
   676 ;;  ret             2    0        int 
   677 ;; Return value:  Size  Location     Type
   678 ;;                  2   96[COMRAM] int 
   679 ;; Registers used:
   680 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   681 ;; Tracked objects:
   682 ;;		On entry : 0/0
   683 ;;		On exit  : 0/0
   684 ;;		Unchanged: 0/0
   685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   686 ;;      Params:         6       0       0       0       0       0       0
   687 ;;      Locals:        10       0       0       0       0       0       0
   688 ;;      Temps:          0       0       0       0       0       0       0
   689 ;;      Totals:        16       0       0       0       0       0       0
   690 ;;Total ram usage:       16 bytes
   691 ;; Hardware stack levels used:    1
   692 ;; Hardware stack levels required when called:    8
   693 ;; This function calls:
   694 ;;		_vfprintf
   695 ;; This function is called by:
   696 ;;		_main
   697 ;; This function uses a non-reentrant model
   698 ;;
   699                           
   700                           	psect	text1
   701  0012FA                     __ptext1:
   702                           	opt callstack 0
   703  0012FA                     _sprintf:
   704                           	opt callstack 22
   705                           
   706                           ;incstack = 0
   707  0012FA  0E65               	movlw	low (?_sprintf+4)
   708  0012FC  6E69               	movwf	sprintf@ap,c
   709  0012FE  0E00               	movlw	high (?_sprintf+4)
   710  001300  6E6A               	movwf	sprintf@ap+1,c
   711  001302  C061  F06B         	movff	sprintf@s,sprintf@f
   712  001306  C062  F06C         	movff	sprintf@s+1,sprintf@f+1
   713  00130A  0E00               	movlw	0
   714  00130C  6E6E               	movwf	sprintf@f+3,c
   715  00130E  0E00               	movlw	0
   716  001310  6E6D               	movwf	sprintf@f+2,c
   717  001312  0E00               	movlw	0
   718  001314  6E70               	movwf	sprintf@f+5,c
   719  001316  0E00               	movlw	0
   720  001318  6E6F               	movwf	sprintf@f+4,c
   721  00131A  0E6B               	movlw	low sprintf@f
   722  00131C  6E59               	movwf	vfprintf@fp,c
   723  00131E  0E00               	movlw	high sprintf@f
   724  001320  6E5A               	movwf	vfprintf@fp+1,c
   725  001322  C063  F05B         	movff	sprintf@fmt,vfprintf@fmt
   726  001326  C064  F05C         	movff	sprintf@fmt+1,vfprintf@fmt+1
   727  00132A  0E69               	movlw	low sprintf@ap
   728  00132C  6E5D               	movwf	vfprintf@ap,c
   729  00132E  0E00               	movlw	high sprintf@ap
   730  001330  6E5E               	movwf	vfprintf@ap+1,c
   731  001332  EC54  F009         	call	_vfprintf	;wreg free
   732  001336  506D               	movf	sprintf@f+2,w,c
   733  001338  2461               	addwf	sprintf@s,w,c
   734  00133A  6ED9               	movwf	fsr2l,c
   735  00133C  506E               	movf	sprintf@f+3,w,c
   736  00133E  2062               	addwfc	sprintf@s+1,w,c
   737  001340  6EDA               	movwf	fsr2h,c
   738  001342  0E00               	movlw	0
   739  001344  6EDF               	movwf	indf2,c
   740  001346  0012               	return		;funcret
   741  001348                     __end_of_sprintf:
   742                           	opt callstack 0
   743                           
   744 ;; *************** function _vfprintf *****************
   745 ;; Defined at:
   746 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
   747 ;; Parameters:    Size  Location     Type
   748 ;;  fp              2   88[COMRAM] PTR struct _IO_FILE
   749 ;;		 -> sprintf@f(6), 
   750 ;;  fmt             2   90[COMRAM] PTR const unsigned char 
   751 ;;		 -> STR_3(5), 
   752 ;;  ap              2   92[COMRAM] PTR PTR void 
   753 ;;		 -> sprintf@ap(2), 
   754 ;; Auto vars:     Size  Location     Type
   755 ;;  cfmt            2   94[COMRAM] PTR unsigned char 
   756 ;;		 -> STR_3(5), 
   757 ;; Return value:  Size  Location     Type
   758 ;;                  2   88[COMRAM] int 
   759 ;; Registers used:
   760 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   761 ;; Tracked objects:
   762 ;;		On entry : 0/0
   763 ;;		On exit  : 0/0
   764 ;;		Unchanged: 0/0
   765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   766 ;;      Params:         6       0       0       0       0       0       0
   767 ;;      Locals:         2       0       0       0       0       0       0
   768 ;;      Temps:          0       0       0       0       0       0       0
   769 ;;      Totals:         8       0       0       0       0       0       0
   770 ;;Total ram usage:        8 bytes
   771 ;; Hardware stack levels used:    1
   772 ;; Hardware stack levels required when called:    7
   773 ;; This function calls:
   774 ;;		_vfpfcnvrt
   775 ;; This function is called by:
   776 ;;		_sprintf
   777 ;; This function uses a non-reentrant model
   778 ;;
   779                           
   780                           	psect	text2
   781  0012A8                     __ptext2:
   782                           	opt callstack 0
   783  0012A8                     _vfprintf:
   784                           	opt callstack 22
   785                           
   786                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.05\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
   787                           
   788                           ;incstack = 0
   789  0012A8  C05B  F05F         	movff	vfprintf@fmt,vfprintf@cfmt
   790  0012AC  C05C  F060         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
   791                           
   792                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
   793  0012B0  0E00               	movlw	0
   794  0012B2  6E72               	movwf	_nout+1,c
   795  0012B4  0E00               	movlw	0
   796  0012B6  6E71               	movwf	_nout,c
   797                           
   798                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
   799  0012B8  D012               	goto	l1860
   800  0012BA                     l1858:
   801                           
   802                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
   803  0012BA  C059  F043         	movff	vfprintf@fp,vfpfcnvrt@fp
   804  0012BE  C05A  F044         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
   805  0012C2  0E5F               	movlw	low vfprintf@cfmt
   806  0012C4  6E45               	movwf	vfpfcnvrt@fmt,c
   807  0012C6  0E00               	movlw	high vfprintf@cfmt
   808  0012C8  6E46               	movwf	vfpfcnvrt@fmt+1,c
   809  0012CA  C05D  F047         	movff	vfprintf@ap,vfpfcnvrt@ap
   810  0012CE  C05E  F048         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
   811  0012D2  EC0E  F003         	call	_vfpfcnvrt	;wreg free
   812  0012D6  5043               	movf	?_vfpfcnvrt,w,c
   813  0012D8  2671               	addwf	_nout,f,c
   814  0012DA  5044               	movf	?_vfpfcnvrt+1,w,c
   815  0012DC  2272               	addwfc	_nout+1,f,c
   816  0012DE                     l1860:
   817                           
   818                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
   819  0012DE  C05F  FFF6         	movff	vfprintf@cfmt,tblptrl
   820  0012E2  C060  FFF7         	movff	vfprintf@cfmt+1,tblptrh
   821  0012E6                     	if	0	;tblptru may be non-zero
   822  0012E6                     	endif
   823  0012E6                     	if	0	;tblptru may be non-zero
   824  0012E6                     	endif
   825  0012E6  0008               	tblrd		*
   826  0012E8  50F5               	movf	tablat,w,c
   827  0012EA  0900               	iorlw	0
   828  0012EC  A4D8               	btfss	status,2,c
   829  0012EE  D7E5               	goto	l1858
   830                           
   831                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
   832  0012F0  C071  F059         	movff	_nout,?_vfprintf
   833  0012F4  C072  F05A         	movff	_nout+1,?_vfprintf+1
   834  0012F8  0012               	return		;funcret
   835  0012FA                     __end_of_vfprintf:
   836                           	opt callstack 0
   837                           
   838 ;; *************** function _vfpfcnvrt *****************
   839 ;; Defined at:
   840 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
   841 ;; Parameters:    Size  Location     Type
   842 ;;  fp              2   66[COMRAM] PTR struct _IO_FILE
   843 ;;		 -> sprintf@f(6), 
   844 ;;  fmt             2   68[COMRAM] PTR PTR unsigned char 
   845 ;;		 -> vfprintf@cfmt(2), 
   846 ;;  ap              2   70[COMRAM] PTR PTR void 
   847 ;;		 -> sprintf@ap(2), 
   848 ;; Auto vars:     Size  Location     Type
   849 ;;  ll              8   76[COMRAM] long long 
   850 ;;  llu             8    0        unsigned long long 
   851 ;;  f               4    0        unsigned long long 
   852 ;;  vp              3    0        PTR void 
   853 ;;  ct              3    0        unsigned char [3]
   854 ;;  cp              3    0        PTR unsigned char 
   855 ;;  done            2   84[COMRAM] int 
   856 ;;  i               2    0        int 
   857 ;;  c               1    0        unsigned char 
   858 ;; Return value:  Size  Location     Type
   859 ;;                  2   66[COMRAM] int 
   860 ;; Registers used:
   861 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   862 ;; Tracked objects:
   863 ;;		On entry : 0/0
   864 ;;		On exit  : 0/0
   865 ;;		Unchanged: 0/0
   866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   867 ;;      Params:         6       0       0       0       0       0       0
   868 ;;      Locals:        12       0       0       0       0       0       0
   869 ;;      Temps:          4       0       0       0       0       0       0
   870 ;;      Totals:        22       0       0       0       0       0       0
   871 ;;Total ram usage:       22 bytes
   872 ;; Hardware stack levels used:    1
   873 ;; Hardware stack levels required when called:    6
   874 ;; This function calls:
   875 ;;		_atoi
   876 ;;		_dtoa
   877 ;;		_fputc
   878 ;;		_isdigit
   879 ;; This function is called by:
   880 ;;		_vfprintf
   881 ;; This function uses a non-reentrant model
   882 ;;
   883                           
   884                           	psect	text3
   885  00061C                     __ptext3:
   886                           	opt callstack 0
   887  00061C                     _vfpfcnvrt:
   888                           	opt callstack 22
   889                           
   890                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 674:     long long ll;
   891                           
   892                           ;incstack = 0
   893  00061C  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   894  000620  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   895  000624  CFDE FFF6          	movff	postinc2,tblptrl
   896  000628  CFDD FFF7          	movff	postdec2,tblptrh
   897  00062C                     	if	0	;tblptru may be non-zero
   898  00062C                     	endif
   899  00062C                     	if	0	;tblptru may be non-zero
   900  00062C                     	endif
   901  00062C  0008               	tblrd		*
   902  00062E  50F5               	movf	tablat,w,c
   903  000630  0A25               	xorlw	37
   904  000632  A4D8               	btfss	status,2,c
   905  000634  D143               	goto	l1834
   906                           
   907                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
   908  000636  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   909  00063A  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   910  00063E  2ADE               	incf	postinc2,f,c
   911  000640  0E00               	movlw	0
   912  000642  22DD               	addwfc	postdec2,f,c
   913                           
   914                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
   915  000644  0E00               	movlw	0
   916  000646  6E74               	movwf	_width+1,c
   917  000648  0E00               	movlw	0
   918  00064A  6E73               	movwf	_width,c
   919  00064C  C073  F077         	movff	_width,_flags
   920  000650  C074  F078         	movff	_width+1,_flags+1
   921                           
   922                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
   923  000654  6875               	setf	_prec,c
   924  000656  6876               	setf	_prec+1,c
   925                           
   926                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 688:       
      +                            done = 0;
   927  000658  0E00               	movlw	0
   928  00065A  6E56               	movwf	vfpfcnvrt@done+1,c
   929  00065C  0E00               	movlw	0
   930  00065E  D014               	goto	L1
   931  000660                     l1760:
   932                           
   933                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 692:       
      +                                        flags |= (1 << 0);
   934  000660  8077               	bsf	_flags,0,c
   935  000662                     l1762:
   936                           
   937                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 693:       
      +                                        ++*fmt;
   938  000662  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   939  000666  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   940  00066A  2ADE               	incf	postinc2,f,c
   941  00066C  0E00               	movlw	0
   942  00066E  22DD               	addwfc	postdec2,f,c
   943                           
   944                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 694:       
      +                                        break;
   945  000670  D02E               	goto	l1786
   946  000672                     l1764:
   947                           
   948                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 696:       
      +                                        flags |= (1 << 1);
   949  000672  8277               	bsf	_flags,1,c
   950  000674  D7F6               	goto	l1762
   951  000676                     l1768:
   952                           
   953                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 700:       
      +                                        flags |= (1 << 2);
   954  000676  8477               	bsf	_flags,2,c
   955  000678  D7F4               	goto	l1762
   956  00067A                     l1772:
   957                           
   958                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 704:       
      +                                        flags |= (1 << 3);
   959  00067A  8677               	bsf	_flags,3,c
   960  00067C  D7F2               	goto	l1762
   961  00067E                     l1776:
   962                           
   963                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 708:       
      +                                        flags |= (1 << 4);
   964  00067E  8877               	bsf	_flags,4,c
   965  000680  D7F0               	goto	l1762
   966  000682                     l1780:
   967                           
   968                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 712:       
      +                                        done = 1;
   969  000682  0E00               	movlw	0
   970  000684  6E56               	movwf	vfpfcnvrt@done+1,c
   971  000686  0E01               	movlw	1
   972  000688                     L1:
   973  000688  6E55               	movwf	vfpfcnvrt@done,c
   974                           
   975                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 713:       
      +                                        break;
   976  00068A  D021               	goto	l1786
   977  00068C                     l1784:
   978  00068C  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   979  000690  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   980  000694  CFDE FFF6          	movff	postinc2,tblptrl
   981  000698  CFDD FFF7          	movff	postdec2,tblptrh
   982  00069C                     	if	0	;tblptru may be non-zero
   983  00069C                     	endif
   984  00069C                     	if	0	;tblptru may be non-zero
   985  00069C                     	endif
   986  00069C  0008               	tblrd		*
   987  00069E  50F5               	movf	tablat,w,c
   988  0006A0  6E49               	movwf	??_vfpfcnvrt& (0+255),c
   989  0006A2  6A4A               	clrf	(??_vfpfcnvrt+1)& (0+255),c
   990                           
   991                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   992                           ; Switch size 1, requested type "simple"
   993                           ; Number of cases is 1, Range of values is 0 to 0
   994                           ; switch strategies available:
   995                           ; Name         Instructions Cycles
   996                           ; simple_byte            4     3 (average)
   997                           ;	Chosen strategy is simple_byte
   998  0006A4  504A               	movf	??_vfpfcnvrt+1,w,c
   999  0006A6  0A00               	xorlw	0	; case 0
  1000  0006A8  A4D8               	btfss	status,2,c
  1001  0006AA  D7EB               	goto	l1780
  1002                           
  1003                           ; Switch size 1, requested type "simple"
  1004                           ; Number of cases is 5, Range of values is 32 to 48
  1005                           ; switch strategies available:
  1006                           ; Name         Instructions Cycles
  1007                           ; simple_byte           16     9 (average)
  1008                           ;	Chosen strategy is simple_byte
  1009  0006AC  5049               	movf	??_vfpfcnvrt,w,c
  1010  0006AE  0A20               	xorlw	32	; case 32
  1011  0006B0  B4D8               	btfsc	status,2,c
  1012  0006B2  D7E3               	goto	l1772
  1013  0006B4  0A03               	xorlw	3	; case 35
  1014  0006B6  B4D8               	btfsc	status,2,c
  1015  0006B8  D7E2               	goto	l1776
  1016  0006BA  0A08               	xorlw	8	; case 43
  1017  0006BC  B4D8               	btfsc	status,2,c
  1018  0006BE  D7DB               	goto	l1768
  1019  0006C0  0A06               	xorlw	6	; case 45
  1020  0006C2  B4D8               	btfsc	status,2,c
  1021  0006C4  D7CD               	goto	l1760
  1022  0006C6  0A1D               	xorlw	29	; case 48
  1023  0006C8  B4D8               	btfsc	status,2,c
  1024  0006CA  D7D3               	goto	l1764
  1025  0006CC  D7DA               	goto	l1780
  1026  0006CE                     l1786:
  1027                           
  1028                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 689:       
      +                            while (!done) {
  1029  0006CE  5055               	movf	vfpfcnvrt@done,w,c
  1030  0006D0  1056               	iorwf	vfpfcnvrt@done+1,w,c
  1031  0006D2  B4D8               	btfsc	status,2,c
  1032  0006D4  D7DB               	goto	l1784
  1033                           
  1034                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 716:       
      +                            if (flags & (1 << 0)) {
  1035  0006D6  B077               	btfsc	_flags,0,c
  1036                           
  1037                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 717:       
      +                                flags &= ~(1 << 1);
  1038  0006D8  9277               	bcf	_flags,1,c
  1039                           
  1040                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 723:       
      +                            if ((*fmt)[0] == '*') {
  1041  0006DA  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1042  0006DE  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1043  0006E2  CFDE FFF6          	movff	postinc2,tblptrl
  1044  0006E6  CFDD FFF7          	movff	postdec2,tblptrh
  1045  0006EA                     	if	0	;tblptru may be non-zero
  1046  0006EA                     	endif
  1047  0006EA                     	if	0	;tblptru may be non-zero
  1048  0006EA                     	endif
  1049  0006EA  0008               	tblrd		*
  1050  0006EC  50F5               	movf	tablat,w,c
  1051  0006EE  0A2A               	xorlw	42
  1052  0006F0  A4D8               	btfss	status,2,c
  1053  0006F2  D023               	goto	l1798
  1054                           
  1055                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 724:       
      +                                ++*fmt;
  1056  0006F4  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1057  0006F8  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1058  0006FC  2ADE               	incf	postinc2,f,c
  1059  0006FE  0E00               	movlw	0
  1060  000700  22DD               	addwfc	postdec2,f,c
  1061                           
  1062                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 725:       
      +                                width = (*(int *)__va_arg(*(int **)ap, (int)0));
  1063  000702  C047  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1064  000706  C048  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1065  00070A  CFDF F049          	movff	indf2,??_vfpfcnvrt
  1066  00070E  0E02               	movlw	2
  1067  000710  26DE               	addwf	postinc2,f,c
  1068  000712  CFDF F04A          	movff	indf2,??_vfpfcnvrt+1
  1069  000716  0E00               	movlw	0
  1070  000718  22DD               	addwfc	postdec2,f,c
  1071  00071A  C049  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1072  00071E  C04A  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1073  000722  CFDE F073          	movff	postinc2,_width
  1074  000726  CFDD F074          	movff	postdec2,_width+1
  1075                           
  1076                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 726:       
      +                                if (width < 0) {
  1077  00072A  AE74               	btfss	_width+1,7,c
  1078  00072C  D03F               	goto	u1320
  1079                           
  1080                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 727:       
      +                                    flags |= (1 << 0);
  1081  00072E  8077               	bsf	_flags,0,c
  1082                           
  1083                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 728:       
      +                                    width = -width;
  1084  000730  6C73               	negf	_width,c
  1085  000732  1E74               	comf	_width+1,f,c
  1086  000734  B0D8               	btfsc	status,0,c
  1087  000736  2A74               	incf	_width+1,f,c
  1088  000738  D039               	goto	u1320
  1089  00073A                     l1798:
  1090                           
  1091                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 731:       
      +                                width = atoi(*fmt);
  1092  00073A  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1093  00073E  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1094  000742  CFDE F00B          	movff	postinc2,atoi@s
  1095  000746  CFDD F00C          	movff	postdec2,atoi@s+1
  1096  00074A  EC3D  F006         	call	_atoi	;wreg free
  1097  00074E  C00B  F073         	movff	?_atoi,_width
  1098  000752  C00C  F074         	movff	?_atoi+1,_width+1
  1099                           
  1100                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 732:       
      +                                while ((0 ? isdigit((*fmt)[0]) : ((unsigned)((*fmt)[0])-'0') < 10)) {
  1101  000756  D007               	goto	l1802
  1102  000758                     l1800:
  1103                           
  1104                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 733:       
      +                                    ++*fmt;
  1105  000758  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1106  00075C  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1107  000760  2ADE               	incf	postinc2,f,c
  1108  000762  0E00               	movlw	0
  1109  000764  22DD               	addwfc	postdec2,f,c
  1110  000766                     l1802:
  1111  000766  0ED0               	movlw	208
  1112  000768  6E49               	movwf	??_vfpfcnvrt& (0+255),c
  1113  00076A  0EFF               	movlw	255
  1114  00076C  6E4A               	movwf	(??_vfpfcnvrt+1)& (0+255),c
  1115  00076E  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1116  000772  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1117  000776  CFDE FFF6          	movff	postinc2,tblptrl
  1118  00077A  CFDD FFF7          	movff	postdec2,tblptrh
  1119  00077E                     	if	0	;tblptru may be non-zero
  1120  00077E                     	endif
  1121  00077E                     	if	0	;tblptru may be non-zero
  1122  00077E                     	endif
  1123  00077E  0008               	tblrd		*
  1124  000780  50F5               	movf	tablat,w,c
  1125  000782  6E4B               	movwf	(??_vfpfcnvrt+2)& (0+255),c
  1126  000784  6A4C               	clrf	(??_vfpfcnvrt+3)& (0+255),c
  1127  000786  5049               	movf	??_vfpfcnvrt,w,c
  1128  000788  264B               	addwf	??_vfpfcnvrt+2,f,c
  1129  00078A  504A               	movf	??_vfpfcnvrt+1,w,c
  1130  00078C  224C               	addwfc	??_vfpfcnvrt+3,f,c
  1131  00078E  504C               	movf	??_vfpfcnvrt+3,w,c
  1132  000790  E106               	bnz	u1300
  1133  000792  0E0A               	movlw	10
  1134  000794  5C4B               	subwf	??_vfpfcnvrt+2,w,c
  1135  000796  B0D8               	btfsc	status,0,c
  1136  000798  D002               	goto	u1300
  1137  00079A  0E01               	movlw	1
  1138  00079C  D001               	goto	u1310
  1139  00079E                     u1300:
  1140  00079E  0E00               	movlw	0
  1141  0007A0                     u1310:
  1142  0007A0  6E57               	movwf	_vfpfcnvrt$496,c
  1143  0007A2  6A58               	clrf	_vfpfcnvrt$496+1,c
  1144  0007A4  5057               	movf	_vfpfcnvrt$496,w,c
  1145  0007A6  1058               	iorwf	_vfpfcnvrt$496+1,w,c
  1146  0007A8  A4D8               	btfss	status,2,c
  1147  0007AA  D7D6               	goto	l1800
  1148  0007AC                     u1320:
  1149                           
  1150                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 825:       
      +                            if ((*fmt[0] == 'd') || (*fmt[0] == 'i')) {
  1151  0007AC  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1152  0007B0  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1153  0007B4  CFDE FFF6          	movff	postinc2,tblptrl
  1154  0007B8  CFDD FFF7          	movff	postdec2,tblptrh
  1155  0007BC                     	if	0	;tblptru may be non-zero
  1156  0007BC                     	endif
  1157  0007BC                     	if	0	;tblptru may be non-zero
  1158  0007BC                     	endif
  1159  0007BC  0008               	tblrd		*
  1160  0007BE  50F5               	movf	tablat,w,c
  1161  0007C0  0A64               	xorlw	100
  1162  0007C2  B4D8               	btfsc	status,2,c
  1163  0007C4  D00D               	goto	u1340
  1164  0007C6  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1165  0007CA  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1166  0007CE  CFDE FFF6          	movff	postinc2,tblptrl
  1167  0007D2  CFDD FFF7          	movff	postdec2,tblptrh
  1168  0007D6                     	if	0	;tblptru may be non-zero
  1169  0007D6                     	endif
  1170  0007D6                     	if	0	;tblptru may be non-zero
  1171  0007D6                     	endif
  1172  0007D6  0008               	tblrd		*
  1173  0007D8  50F5               	movf	tablat,w,c
  1174  0007DA  0A69               	xorlw	105
  1175  0007DC  A4D8               	btfss	status,2,c
  1176  0007DE  D03F               	goto	l1818
  1177  0007E0                     u1340:
  1178                           
  1179                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 827:       
      +                                ++*fmt;
  1180  0007E0  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1181  0007E4  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1182  0007E8  2ADE               	incf	postinc2,f,c
  1183  0007EA  0E00               	movlw	0
  1184  0007EC  22DD               	addwfc	postdec2,f,c
  1185                           
  1186                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 828:       
      +                                ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  1187  0007EE  C047  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1188  0007F2  C048  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1189  0007F6  CFDF F049          	movff	indf2,??_vfpfcnvrt
  1190  0007FA  0E02               	movlw	2
  1191  0007FC  26DE               	addwf	postinc2,f,c
  1192  0007FE  CFDF F04A          	movff	indf2,??_vfpfcnvrt+1
  1193  000802  0E00               	movlw	0
  1194  000804  22DD               	addwfc	postdec2,f,c
  1195  000806  C049  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1196  00080A  C04A  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1197  00080E  CFDE F04D          	movff	postinc2,vfpfcnvrt@ll
  1198  000812  CFDD F04E          	movff	postdec2,vfpfcnvrt@ll+1
  1199  000816  0E00               	movlw	0
  1200  000818  BE4E               	btfsc	vfpfcnvrt@ll+1,7,c
  1201  00081A  0EFF               	movlw	-1
  1202  00081C  6E4F               	movwf	vfpfcnvrt@ll+2,c
  1203  00081E  6E50               	movwf	vfpfcnvrt@ll+3,c
  1204  000820  6E51               	movwf	vfpfcnvrt@ll+4,c
  1205  000822  6E52               	movwf	vfpfcnvrt@ll+5,c
  1206  000824  6E53               	movwf	vfpfcnvrt@ll+6,c
  1207  000826  6E54               	movwf	vfpfcnvrt@ll+7,c
  1208                           
  1209                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 830:       
      +                                return dtoa(fp, ll);
  1210  000828  C043  F01F         	movff	vfpfcnvrt@fp,dtoa@fp
  1211  00082C  C044  F020         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  1212  000830  C04D  F021         	movff	vfpfcnvrt@ll,dtoa@d
  1213  000834  C04E  F022         	movff	vfpfcnvrt@ll+1,dtoa@d+1
  1214  000838  C04F  F023         	movff	vfpfcnvrt@ll+2,dtoa@d+2
  1215  00083C  C050  F024         	movff	vfpfcnvrt@ll+3,dtoa@d+3
  1216  000840  C051  F025         	movff	vfpfcnvrt@ll+4,dtoa@d+4
  1217  000844  C052  F026         	movff	vfpfcnvrt@ll+5,dtoa@d+5
  1218  000848  C053  F027         	movff	vfpfcnvrt@ll+6,dtoa@d+6
  1219  00084C  C054  F028         	movff	vfpfcnvrt@ll+7,dtoa@d+7
  1220  000850  EC78  F004         	call	_dtoa	;wreg free
  1221  000854  C01F  F043         	movff	?_dtoa,?_vfpfcnvrt
  1222  000858  C020  F044         	movff	?_dtoa+1,?_vfpfcnvrt+1
  1223  00085C  0012               	return	
  1224  00085E                     l1818:
  1225                           
  1226                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
  1227  00085E  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1228  000862  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1229  000866  CFDE FFF6          	movff	postinc2,tblptrl
  1230  00086A  CFDD FFF7          	movff	postdec2,tblptrh
  1231  00086E                     	if	0	;tblptru may be non-zero
  1232  00086E                     	endif
  1233  00086E                     	if	0	;tblptru may be non-zero
  1234  00086E                     	endif
  1235  00086E  0008               	tblrd		*
  1236  000870  50F5               	movf	tablat,w,c
  1237  000872  0A25               	xorlw	37
  1238  000874  A4D8               	btfss	status,2,c
  1239  000876  D016               	goto	l1828
  1240                           
  1241                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
  1242  000878  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1243  00087C  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1244  000880  2ADE               	incf	postinc2,f,c
  1245  000882  0E00               	movlw	0
  1246  000884  22DD               	addwfc	postdec2,f,c
  1247                           
  1248                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
  1249  000886  0E00               	movlw	0
  1250  000888  6E05               	movwf	fputc@c+1,c
  1251  00088A  0E25               	movlw	37
  1252  00088C  6E04               	movwf	fputc@c,c
  1253  00088E  C043  F006         	movff	vfpfcnvrt@fp,fputc@fp
  1254  000892  C044  F007         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1255  000896  EC33  F008         	call	_fputc	;wreg free
  1256  00089A                     l1824:
  1257                           
  1258                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
  1259  00089A  0E00               	movlw	0
  1260  00089C  6E44               	movwf	?_vfpfcnvrt+1,c
  1261  00089E  0E01               	movlw	1
  1262  0008A0  6E43               	movwf	?_vfpfcnvrt,c
  1263  0008A2  0012               	return	
  1264  0008A4                     l1828:
  1265                           
  1266                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
  1267  0008A4  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1268  0008A8  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1269  0008AC  2ADE               	incf	postinc2,f,c
  1270  0008AE  0E00               	movlw	0
  1271  0008B0  22DD               	addwfc	postdec2,f,c
  1272                           
  1273                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
  1274  0008B2  0E00               	movlw	0
  1275  0008B4  6E44               	movwf	?_vfpfcnvrt+1,c
  1276  0008B6  0E00               	movlw	0
  1277  0008B8  6E43               	movwf	?_vfpfcnvrt,c
  1278  0008BA  0012               	return	
  1279  0008BC                     l1834:
  1280                           
  1281                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
  1282  0008BC  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1283  0008C0  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1284  0008C4  CFDE FFF6          	movff	postinc2,tblptrl
  1285  0008C8  CFDD FFF7          	movff	postdec2,tblptrh
  1286  0008CC                     	if	0	;tblptru may be non-zero
  1287  0008CC                     	endif
  1288  0008CC                     	if	0	;tblptru may be non-zero
  1289  0008CC                     	endif
  1290  0008CC  0008               	tblrd		*
  1291  0008CE  50F5               	movf	tablat,w,c
  1292  0008D0  6E04               	movwf	fputc@c,c
  1293  0008D2  6A05               	clrf	fputc@c+1,c
  1294  0008D4  C043  F006         	movff	vfpfcnvrt@fp,fputc@fp
  1295  0008D8  C044  F007         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1296  0008DC  EC33  F008         	call	_fputc	;wreg free
  1297                           
  1298                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
  1299  0008E0  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1300  0008E4  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1301  0008E8  2ADE               	incf	postinc2,f,c
  1302  0008EA  0E00               	movlw	0
  1303  0008EC  22DD               	addwfc	postdec2,f,c
  1304  0008EE  D7D5               	goto	l1824
  1305  0008F0                     __end_of_vfpfcnvrt:
  1306                           	opt callstack 0
  1307                           
  1308 ;; *************** function _dtoa *****************
  1309 ;; Defined at:
  1310 ;;		line 274 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1311 ;; Parameters:    Size  Location     Type
  1312 ;;  fp              2   30[COMRAM] PTR struct _IO_FILE
  1313 ;;		 -> sprintf@f(6), 
  1314 ;;  d               8   32[COMRAM] long long 
  1315 ;; Auto vars:     Size  Location     Type
  1316 ;;  n               8   56[COMRAM] long long 
  1317 ;;  i               2   64[COMRAM] int 
  1318 ;;  s               2   54[COMRAM] int 
  1319 ;;  w               2   52[COMRAM] int 
  1320 ;;  p               2   50[COMRAM] int 
  1321 ;; Return value:  Size  Location     Type
  1322 ;;                  2   30[COMRAM] int 
  1323 ;; Registers used:
  1324 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1325 ;; Tracked objects:
  1326 ;;		On entry : 0/0
  1327 ;;		On exit  : 0/0
  1328 ;;		Unchanged: 0/0
  1329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1330 ;;      Params:        10       0       0       0       0       0       0
  1331 ;;      Locals:        18       0       0       0       0       0       0
  1332 ;;      Temps:          8       0       0       0       0       0       0
  1333 ;;      Totals:        36       0       0       0       0       0       0
  1334 ;;Total ram usage:       36 bytes
  1335 ;; Hardware stack levels used:    1
  1336 ;; Hardware stack levels required when called:    5
  1337 ;; This function calls:
  1338 ;;		___aodiv
  1339 ;;		___aomod
  1340 ;;		_abs
  1341 ;;		_pad
  1342 ;; This function is called by:
  1343 ;;		_vfpfcnvrt
  1344 ;; This function uses a non-reentrant model
  1345 ;;
  1346                           
  1347                           	psect	text4
  1348  0008F0                     __ptext4:
  1349                           	opt callstack 0
  1350  0008F0                     _dtoa:
  1351                           	opt callstack 22
  1352                           
  1353                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 274: static
      +                           int dtoa(FILE *fp, long long d);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\
      +                          c99\common\doprnt.c: 275: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\c
      +                          ommon\doprnt.c: 276:     int i, p, s, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\
      +                          sources\c99\common\doprnt.c: 277:     long long n;;C:\Program Files (x86)\Microchip\xc8\
      +                          v2.05\pic\sources\c99\common\doprnt.c: 280:     n = d;
  1354                           
  1355                           ;incstack = 0
  1356  0008F0  C021  F039         	movff	dtoa@d,dtoa@n
  1357  0008F4  C022  F03A         	movff	dtoa@d+1,dtoa@n+1
  1358  0008F8  C023  F03B         	movff	dtoa@d+2,dtoa@n+2
  1359  0008FC  C024  F03C         	movff	dtoa@d+3,dtoa@n+3
  1360  000900  C025  F03D         	movff	dtoa@d+4,dtoa@n+4
  1361  000904  C026  F03E         	movff	dtoa@d+5,dtoa@n+5
  1362  000908  C027  F03F         	movff	dtoa@d+6,dtoa@n+6
  1363  00090C  C028  F040         	movff	dtoa@d+7,dtoa@n+7
  1364                           
  1365                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 281:     s 
      +                          = n < 0 ? 1 : 0;
  1366  000910  AE40               	btfss	dtoa@n+7,7,c
  1367  000912  D002               	goto	u1030
  1368  000914  0E01               	movlw	1
  1369  000916  D001               	goto	u1040
  1370  000918                     u1030:
  1371  000918  0E00               	movlw	0
  1372  00091A                     u1040:
  1373  00091A  6E37               	movwf	dtoa@s,c
  1374  00091C  6A38               	clrf	dtoa@s+1,c
  1375                           
  1376                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 282:     if
      +                           (s) {
  1377  00091E  5037               	movf	dtoa@s,w,c
  1378  000920  1038               	iorwf	dtoa@s+1,w,c
  1379  000922  B4D8               	btfsc	status,2,c
  1380  000924  D010               	goto	l1632
  1381                           
  1382                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 283:       
      +                            n = -n;
  1383  000926  1E40               	comf	dtoa@n+7,f,c
  1384  000928  1E3F               	comf	dtoa@n+6,f,c
  1385  00092A  1E3E               	comf	dtoa@n+5,f,c
  1386  00092C  1E3D               	comf	dtoa@n+4,f,c
  1387  00092E  1E3C               	comf	dtoa@n+3,f,c
  1388  000930  1E3B               	comf	dtoa@n+2,f,c
  1389  000932  1E3A               	comf	dtoa@n+1,f,c
  1390  000934  6C39               	negf	dtoa@n,c
  1391  000936  0E00               	movlw	0
  1392  000938  223A               	addwfc	dtoa@n+1,f,c
  1393  00093A  223B               	addwfc	dtoa@n+2,f,c
  1394  00093C  223C               	addwfc	dtoa@n+3,f,c
  1395  00093E  223D               	addwfc	dtoa@n+4,f,c
  1396  000940  223E               	addwfc	dtoa@n+5,f,c
  1397  000942  223F               	addwfc	dtoa@n+6,f,c
  1398  000944  2240               	addwfc	dtoa@n+7,f,c
  1399  000946                     l1632:
  1400                           
  1401                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 287:     if
      +                           (!(prec < 0)) {
  1402  000946  AE76               	btfss	_prec+1,7,c
  1403                           
  1404                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 288:       
      +                            flags &= ~(1 << 1);
  1405  000948  9277               	bcf	_flags,1,c
  1406                           
  1407                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 290:     p 
      +                          = (0 < prec) ? prec : 1;
  1408  00094A  BE76               	btfsc	_prec+1,7,c
  1409  00094C  D005               	goto	u1070
  1410  00094E  5076               	movf	_prec+1,w,c
  1411  000950  E108               	bnz	l122
  1412  000952  0475               	decf	_prec,w,c
  1413  000954  B0D8               	btfsc	status,0,c
  1414  000956  D005               	goto	l122
  1415  000958                     u1070:
  1416  000958  0E00               	movlw	0
  1417  00095A  6E34               	movwf	dtoa@p+1,c
  1418  00095C  0E01               	movlw	1
  1419  00095E  6E33               	movwf	dtoa@p,c
  1420  000960  D004               	goto	l124
  1421  000962                     l122:
  1422  000962  C075  F033         	movff	_prec,dtoa@p
  1423  000966  C076  F034         	movff	_prec+1,dtoa@p+1
  1424  00096A                     l124:
  1425                           
  1426                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 291:     w 
      +                          = width;
  1427  00096A  C073  F035         	movff	_width,dtoa@w
  1428  00096E  C074  F036         	movff	_width+1,dtoa@w+1
  1429                           
  1430                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 292:     if
      +                           (s || (flags & (1 << 2))) {
  1431  000972  5037               	movf	dtoa@s,w,c
  1432  000974  1038               	iorwf	dtoa@s+1,w,c
  1433  000976  A4D8               	btfss	status,2,c
  1434  000978  D002               	goto	u1090
  1435  00097A  A477               	btfss	_flags,2,c
  1436  00097C  D003               	goto	l1646
  1437  00097E                     u1090:
  1438                           
  1439                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 293:       
      +                            --w;
  1440  00097E  0635               	decf	dtoa@w,f,c
  1441  000980  A0D8               	btfss	status,0,c
  1442  000982  0636               	decf	dtoa@w+1,f,c
  1443  000984                     l1646:
  1444                           
  1445                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 297:     i 
      +                          = sizeof(dbuf) - 1;
  1446  000984  0E00               	movlw	0
  1447  000986  6E42               	movwf	dtoa@i+1,c
  1448  000988  0E1F               	movlw	31
  1449  00098A  6E41               	movwf	dtoa@i,c
  1450                           
  1451                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 298:     db
      +                          uf[i] = '\0';
  1452  00098C  0E00               	movlw	0
  1453  00098E  0100               	movlb	0	; () banked
  1454  000990  6F9F               	movwf	(_dbuf+31)& (0+255),b
  1455                           
  1456                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1457  000992  D07C               	goto	l1660
  1458  000994                     l1650:
  1459                           
  1460                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 300:       
      +                            --i;
  1461  000994  0641               	decf	dtoa@i,f,c
  1462  000996  A0D8               	btfss	status,0,c
  1463  000998  0642               	decf	dtoa@i+1,f,c
  1464                           
  1465                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 301:       
      +                            dbuf[i] = '0' + abs(n % 10);
  1466  00099A  0E80               	movlw	low _dbuf
  1467  00099C  2441               	addwf	dtoa@i,w,c
  1468  00099E  6ED9               	movwf	fsr2l,c
  1469  0009A0  0E00               	movlw	high _dbuf
  1470  0009A2  2042               	addwfc	dtoa@i+1,w,c
  1471  0009A4  6EDA               	movwf	fsr2h,c
  1472  0009A6  C039  F004         	movff	dtoa@n,___aomod@dividend
  1473  0009AA  C03A  F005         	movff	dtoa@n+1,___aomod@dividend+1
  1474  0009AE  C03B  F006         	movff	dtoa@n+2,___aomod@dividend+2
  1475  0009B2  C03C  F007         	movff	dtoa@n+3,___aomod@dividend+3
  1476  0009B6  C03D  F008         	movff	dtoa@n+4,___aomod@dividend+4
  1477  0009BA  C03E  F009         	movff	dtoa@n+5,___aomod@dividend+5
  1478  0009BE  C03F  F00A         	movff	dtoa@n+6,___aomod@dividend+6
  1479  0009C2  C040  F00B         	movff	dtoa@n+7,___aomod@dividend+7
  1480  0009C6  0E0A               	movlw	10
  1481  0009C8  6E0C               	movwf	___aomod@divisor,c
  1482  0009CA  0E00               	movlw	0
  1483  0009CC  6E0D               	movwf	___aomod@divisor+1,c
  1484  0009CE  0E00               	movlw	0
  1485  0009D0  6E0E               	movwf	___aomod@divisor+2,c
  1486  0009D2  0E00               	movlw	0
  1487  0009D4  6E0F               	movwf	___aomod@divisor+3,c
  1488  0009D6  0E00               	movlw	0
  1489  0009D8  6E10               	movwf	___aomod@divisor+4,c
  1490  0009DA  0E00               	movlw	0
  1491  0009DC  6E11               	movwf	___aomod@divisor+5,c
  1492  0009DE  0E00               	movlw	0
  1493  0009E0  6E12               	movwf	___aomod@divisor+6,c
  1494  0009E2  0E00               	movlw	0
  1495  0009E4  6E13               	movwf	___aomod@divisor+7,c
  1496  0009E6  ECDD  F006         	call	___aomod	;wreg free
  1497  0009EA  C004  F029         	movff	?___aomod,??_dtoa
  1498  0009EE  C005  F02A         	movff	?___aomod+1,??_dtoa+1
  1499  0009F2  C006  F02B         	movff	?___aomod+2,??_dtoa+2
  1500  0009F6  C007  F02C         	movff	?___aomod+3,??_dtoa+3
  1501  0009FA  C008  F02D         	movff	?___aomod+4,??_dtoa+4
  1502  0009FE  C009  F02E         	movff	?___aomod+5,??_dtoa+5
  1503  000A02  C00A  F02F         	movff	?___aomod+6,??_dtoa+6
  1504  000A06  C00B  F030         	movff	?___aomod+7,??_dtoa+7
  1505  000A0A  C029  F016         	movff	??_dtoa,abs@a
  1506  000A0E  C02B  F017         	movff	??_dtoa+2,abs@a+1
  1507  000A12  ECDF  F009         	call	_abs	;wreg free
  1508  000A16  5016               	movf	?_abs,w,c
  1509  000A18  0F30               	addlw	48
  1510  000A1A  6EDF               	movwf	indf2,c
  1511                           
  1512                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 302:       
      +                            --p;
  1513  000A1C  0633               	decf	dtoa@p,f,c
  1514  000A1E  A0D8               	btfss	status,0,c
  1515  000A20  0634               	decf	dtoa@p+1,f,c
  1516                           
  1517                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 303:       
      +                            --w;
  1518  000A22  0635               	decf	dtoa@w,f,c
  1519  000A24  A0D8               	btfss	status,0,c
  1520  000A26  0636               	decf	dtoa@w+1,f,c
  1521                           
  1522                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 304:       
      +                            n = n / 10;
  1523  000A28  C039  F004         	movff	dtoa@n,___aodiv@dividend
  1524  000A2C  C03A  F005         	movff	dtoa@n+1,___aodiv@dividend+1
  1525  000A30  C03B  F006         	movff	dtoa@n+2,___aodiv@dividend+2
  1526  000A34  C03C  F007         	movff	dtoa@n+3,___aodiv@dividend+3
  1527  000A38  C03D  F008         	movff	dtoa@n+4,___aodiv@dividend+4
  1528  000A3C  C03E  F009         	movff	dtoa@n+5,___aodiv@dividend+5
  1529  000A40  C03F  F00A         	movff	dtoa@n+6,___aodiv@dividend+6
  1530  000A44  C040  F00B         	movff	dtoa@n+7,___aodiv@dividend+7
  1531  000A48  0E0A               	movlw	10
  1532  000A4A  6E0C               	movwf	___aodiv@divisor,c
  1533  000A4C  0E00               	movlw	0
  1534  000A4E  6E0D               	movwf	___aodiv@divisor+1,c
  1535  000A50  0E00               	movlw	0
  1536  000A52  6E0E               	movwf	___aodiv@divisor+2,c
  1537  000A54  0E00               	movlw	0
  1538  000A56  6E0F               	movwf	___aodiv@divisor+3,c
  1539  000A58  0E00               	movlw	0
  1540  000A5A  6E10               	movwf	___aodiv@divisor+4,c
  1541  000A5C  0E00               	movlw	0
  1542  000A5E  6E11               	movwf	___aodiv@divisor+5,c
  1543  000A60  0E00               	movlw	0
  1544  000A62  6E12               	movwf	___aodiv@divisor+6,c
  1545  000A64  0E00               	movlw	0
  1546  000A66  6E13               	movwf	___aodiv@divisor+7,c
  1547  000A68  EC99  F005         	call	___aodiv	;wreg free
  1548  000A6C  C004  F039         	movff	?___aodiv,dtoa@n
  1549  000A70  C005  F03A         	movff	?___aodiv+1,dtoa@n+1
  1550  000A74  C006  F03B         	movff	?___aodiv+2,dtoa@n+2
  1551  000A78  C007  F03C         	movff	?___aodiv+3,dtoa@n+3
  1552  000A7C  C008  F03D         	movff	?___aodiv+4,dtoa@n+4
  1553  000A80  C009  F03E         	movff	?___aodiv+5,dtoa@n+5
  1554  000A84  C00A  F03F         	movff	?___aodiv+6,dtoa@n+6
  1555  000A88  C00B  F040         	movff	?___aodiv+7,dtoa@n+7
  1556  000A8C                     l1660:
  1557                           
  1558                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1559  000A8C  BE42               	btfsc	dtoa@i+1,7,c
  1560  000A8E  D01F               	goto	u1140
  1561  000A90  5042               	movf	dtoa@i+1,w,c
  1562  000A92  E103               	bnz	u1100
  1563  000A94  0441               	decf	dtoa@i,w,c
  1564  000A96  A0D8               	btfss	status,0,c
  1565  000A98  D01A               	goto	u1140
  1566  000A9A                     u1100:
  1567  000A9A  5039               	movf	dtoa@n,w,c
  1568  000A9C  103A               	iorwf	dtoa@n+1,w,c
  1569  000A9E  103B               	iorwf	dtoa@n+2,w,c
  1570  000AA0  103C               	iorwf	dtoa@n+3,w,c
  1571  000AA2  103D               	iorwf	dtoa@n+4,w,c
  1572  000AA4  103E               	iorwf	dtoa@n+5,w,c
  1573  000AA6  103F               	iorwf	dtoa@n+6,w,c
  1574  000AA8  1040               	iorwf	dtoa@n+7,w,c
  1575  000AAA  A4D8               	btfss	status,2,c
  1576  000AAC  D773               	goto	l1650
  1577  000AAE  BE34               	btfsc	dtoa@p+1,7,c
  1578  000AB0  D005               	goto	u1120
  1579  000AB2  5034               	movf	dtoa@p+1,w,c
  1580  000AB4  E102               	bnz	u1121
  1581  000AB6  0433               	decf	dtoa@p,w,c
  1582  000AB8  B0D8               	btfsc	status,0,c
  1583  000ABA                     u1121:
  1584  000ABA  D76C               	goto	l1650
  1585  000ABC                     u1120:
  1586  000ABC  BE36               	btfsc	dtoa@w+1,7,c
  1587  000ABE  D007               	goto	u1140
  1588  000AC0  5036               	movf	dtoa@w+1,w,c
  1589  000AC2  E103               	bnz	u1130
  1590  000AC4  0435               	decf	dtoa@w,w,c
  1591  000AC6  A0D8               	btfss	status,0,c
  1592  000AC8  D002               	goto	u1140
  1593  000ACA                     u1130:
  1594  000ACA  B277               	btfsc	_flags,1,c
  1595  000ACC  D763               	goto	l1650
  1596  000ACE                     u1140:
  1597                           
  1598                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 308:     if
      +                           (s || (flags & (1 << 2))) {
  1599  000ACE  5037               	movf	dtoa@s,w,c
  1600  000AD0  1038               	iorwf	dtoa@s+1,w,c
  1601  000AD2  A4D8               	btfss	status,2,c
  1602  000AD4  D002               	goto	u1160
  1603  000AD6  A477               	btfss	_flags,2,c
  1604  000AD8  D017               	goto	l1684
  1605  000ADA                     u1160:
  1606                           
  1607                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 309:       
      +                            --i;
  1608  000ADA  0641               	decf	dtoa@i,f,c
  1609  000ADC  A0D8               	btfss	status,0,c
  1610  000ADE  0642               	decf	dtoa@i+1,f,c
  1611                           
  1612                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 310:       
      +                            dbuf[i] = s ? '-' : '+';
  1613  000AE0  5037               	movf	dtoa@s,w,c
  1614  000AE2  1038               	iorwf	dtoa@s+1,w,c
  1615  000AE4  A4D8               	btfss	status,2,c
  1616  000AE6  D004               	goto	l1680
  1617  000AE8  0E00               	movlw	0
  1618  000AEA  6E32               	movwf	_dtoa$481+1,c
  1619  000AEC  0E2B               	movlw	43
  1620  000AEE  D003               	goto	L2
  1621  000AF0                     l1680:
  1622  000AF0  0E00               	movlw	0
  1623  000AF2  6E32               	movwf	_dtoa$481+1,c
  1624  000AF4  0E2D               	movlw	45
  1625  000AF6                     L2:
  1626  000AF6  6E31               	movwf	_dtoa$481,c
  1627  000AF8  0E80               	movlw	low _dbuf
  1628  000AFA  2441               	addwf	dtoa@i,w,c
  1629  000AFC  6ED9               	movwf	fsr2l,c
  1630  000AFE  0E00               	movlw	high _dbuf
  1631  000B00  2042               	addwfc	dtoa@i+1,w,c
  1632  000B02  6EDA               	movwf	fsr2h,c
  1633  000B04  C031  FFDF         	movff	_dtoa$481,indf2
  1634  000B08                     l1684:
  1635                           
  1636                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 314:     re
      +                          turn pad(fp, &dbuf[i], w);
  1637  000B08  C01F  F014         	movff	dtoa@fp,pad@fp
  1638  000B0C  C020  F015         	movff	dtoa@fp+1,pad@fp+1
  1639  000B10  0E80               	movlw	low _dbuf
  1640  000B12  2441               	addwf	dtoa@i,w,c
  1641  000B14  6E16               	movwf	pad@buf,c
  1642  000B16  0E00               	movlw	high _dbuf
  1643  000B18  2042               	addwfc	dtoa@i+1,w,c
  1644  000B1A  6E17               	movwf	pad@buf+1,c
  1645  000B1C  C035  F018         	movff	dtoa@w,pad@p
  1646  000B20  C036  F019         	movff	dtoa@w+1,pad@p+1
  1647  000B24  EC83  F008         	call	_pad	;wreg free
  1648  000B28  C014  F01F         	movff	?_pad,?_dtoa
  1649  000B2C  C015  F020         	movff	?_pad+1,?_dtoa+1
  1650  000B30  0012               	return		;funcret
  1651  000B32                     __end_of_dtoa:
  1652                           	opt callstack 0
  1653                           
  1654 ;; *************** function _pad *****************
  1655 ;; Defined at:
  1656 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1657 ;; Parameters:    Size  Location     Type
  1658 ;;  fp              2   19[COMRAM] PTR struct _IO_FILE
  1659 ;;		 -> sprintf@f(6), 
  1660 ;;  buf             2   21[COMRAM] PTR unsigned char 
  1661 ;;		 -> dbuf(32), 
  1662 ;;  p               2   23[COMRAM] int 
  1663 ;; Auto vars:     Size  Location     Type
  1664 ;;  w               2   28[COMRAM] int 
  1665 ;;  i               2   26[COMRAM] int 
  1666 ;; Return value:  Size  Location     Type
  1667 ;;                  2   19[COMRAM] int 
  1668 ;; Registers used:
  1669 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1670 ;; Tracked objects:
  1671 ;;		On entry : 0/0
  1672 ;;		On exit  : 0/0
  1673 ;;		Unchanged: 0/0
  1674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1675 ;;      Params:         6       0       0       0       0       0       0
  1676 ;;      Locals:         4       0       0       0       0       0       0
  1677 ;;      Temps:          1       0       0       0       0       0       0
  1678 ;;      Totals:        11       0       0       0       0       0       0
  1679 ;;Total ram usage:       11 bytes
  1680 ;; Hardware stack levels used:    1
  1681 ;; Hardware stack levels required when called:    4
  1682 ;; This function calls:
  1683 ;;		_fputc
  1684 ;;		_fputs
  1685 ;;		_strlen
  1686 ;; This function is called by:
  1687 ;;		_dtoa
  1688 ;; This function uses a non-reentrant model
  1689 ;;
  1690                           
  1691                           	psect	text5
  1692  001106                     __ptext5:
  1693                           	opt callstack 0
  1694  001106                     _pad:
  1695                           	opt callstack 22
  1696                           
  1697                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
  1698                           
  1699                           ;incstack = 0
  1700  001106  A077               	btfss	_flags,0,c
  1701  001108  D00A               	goto	l1490
  1702                           
  1703                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
  1704  00110A  C016  F00D         	movff	pad@buf,fputs@s
  1705  00110E  C017  F00E         	movff	pad@buf+1,fputs@s+1
  1706  001112  C014  F00F         	movff	pad@fp,fputs@fp
  1707  001116  C015  F010         	movff	pad@fp+1,fputs@fp+1
  1708  00111A  ECC3  F009         	call	_fputs	;wreg free
  1709  00111E                     l1490:
  1710                           
  1711                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
  1712  00111E  BE19               	btfsc	pad@p+1,7,c
  1713  001120  D005               	goto	l1494
  1714  001122  C018  F01D         	movff	pad@p,pad@w
  1715  001126  C019  F01E         	movff	pad@p+1,pad@w+1
  1716  00112A  D004               	goto	l111
  1717  00112C                     l1494:
  1718  00112C  0E00               	movlw	0
  1719  00112E  6E1E               	movwf	pad@w+1,c
  1720  001130  0E00               	movlw	0
  1721  001132  6E1D               	movwf	pad@w,c
  1722  001134                     l111:
  1723                           
  1724                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
  1725  001134  0E00               	movlw	0
  1726  001136  6E1C               	movwf	pad@i+1,c
  1727  001138  0E00               	movlw	0
  1728  00113A  6E1B               	movwf	pad@i,c
  1729                           
  1730                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  1731  00113C  D00C               	goto	l1500
  1732  00113E                     l1496:
  1733                           
  1734                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
  1735  00113E  0E00               	movlw	0
  1736  001140  6E05               	movwf	fputc@c+1,c
  1737  001142  0E20               	movlw	32
  1738  001144  6E04               	movwf	fputc@c,c
  1739  001146  C014  F006         	movff	pad@fp,fputc@fp
  1740  00114A  C015  F007         	movff	pad@fp+1,fputc@fp+1
  1741  00114E  EC33  F008         	call	_fputc	;wreg free
  1742                           
  1743                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
  1744  001152  4A1B               	infsnz	pad@i,f,c
  1745  001154  2A1C               	incf	pad@i+1,f,c
  1746  001156                     l1500:
  1747                           
  1748                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  1749  001156  501D               	movf	pad@w,w,c
  1750  001158  5C1B               	subwf	pad@i,w,c
  1751  00115A  501C               	movf	pad@i+1,w,c
  1752  00115C  0A80               	xorlw	128
  1753  00115E  6E1A               	movwf	??_pad& (0+255),c
  1754  001160  501E               	movf	pad@w+1,w,c
  1755  001162  0A80               	xorlw	128
  1756  001164  581A               	subwfb	??_pad& (0+255),w,c
  1757  001166  A0D8               	btfss	status,0,c
  1758  001168  D7EA               	goto	l1496
  1759                           
  1760                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
  1761  00116A  B077               	btfsc	_flags,0,c
  1762  00116C  D00A               	goto	l1504
  1763                           
  1764                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
  1765  00116E  C016  F00D         	movff	pad@buf,fputs@s
  1766  001172  C017  F00E         	movff	pad@buf+1,fputs@s+1
  1767  001176  C014  F00F         	movff	pad@fp,fputs@fp
  1768  00117A  C015  F010         	movff	pad@fp+1,fputs@fp+1
  1769  00117E  ECC3  F009         	call	_fputs	;wreg free
  1770  001182                     l1504:
  1771                           
  1772                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
  1773  001182  C016  F004         	movff	pad@buf,strlen@s
  1774  001186  C017  F005         	movff	pad@buf+1,strlen@s+1
  1775  00118A  EC10  F00A         	call	_strlen	;wreg free
  1776  00118E  501D               	movf	pad@w,w,c
  1777  001190  2404               	addwf	?_strlen,w,c
  1778  001192  6E14               	movwf	?_pad,c
  1779  001194  501E               	movf	pad@w+1,w,c
  1780  001196  2005               	addwfc	?_strlen+1,w,c
  1781  001198  6E15               	movwf	?_pad+1,c
  1782  00119A  0012               	return		;funcret
  1783  00119C                     __end_of_pad:
  1784                           	opt callstack 0
  1785                           
  1786 ;; *************** function _strlen *****************
  1787 ;; Defined at:
  1788 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
  1789 ;; Parameters:    Size  Location     Type
  1790 ;;  s               2    3[COMRAM] PTR const unsigned char 
  1791 ;;		 -> dbuf(32), 
  1792 ;; Auto vars:     Size  Location     Type
  1793 ;;  a               2    5[COMRAM] PTR const unsigned char 
  1794 ;;		 -> dbuf(32), 
  1795 ;; Return value:  Size  Location     Type
  1796 ;;                  2    3[COMRAM] unsigned int 
  1797 ;; Registers used:
  1798 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1799 ;; Tracked objects:
  1800 ;;		On entry : 0/0
  1801 ;;		On exit  : 0/0
  1802 ;;		Unchanged: 0/0
  1803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1804 ;;      Params:         2       0       0       0       0       0       0
  1805 ;;      Locals:         2       0       0       0       0       0       0
  1806 ;;      Temps:          0       0       0       0       0       0       0
  1807 ;;      Totals:         4       0       0       0       0       0       0
  1808 ;;Total ram usage:        4 bytes
  1809 ;; Hardware stack levels used:    1
  1810 ;; Hardware stack levels required when called:    1
  1811 ;; This function calls:
  1812 ;;		Nothing
  1813 ;; This function is called by:
  1814 ;;		_pad
  1815 ;; This function uses a non-reentrant model
  1816 ;;
  1817                           
  1818                           	psect	text6
  1819  001420                     __ptext6:
  1820                           	opt callstack 0
  1821  001420                     _strlen:
  1822                           	opt callstack 24
  1823                           
  1824                           ;incstack = 0
  1825  001420  C004  F006         	movff	strlen@s,strlen@a
  1826  001424  C005  F007         	movff	strlen@s+1,strlen@a+1
  1827  001428  D002               	goto	l1480
  1828  00142A                     l1478:
  1829  00142A  4A04               	infsnz	strlen@s,f,c
  1830  00142C  2A05               	incf	strlen@s+1,f,c
  1831  00142E                     l1480:
  1832  00142E  C004  FFD9         	movff	strlen@s,fsr2l
  1833  001432  C005  FFDA         	movff	strlen@s+1,fsr2h
  1834  001436  50DF               	movf	indf2,w,c
  1835  001438  A4D8               	btfss	status,2,c
  1836  00143A  D7F7               	goto	l1478
  1837  00143C  5006               	movf	strlen@a,w,c
  1838  00143E  5C04               	subwf	strlen@s,w,c
  1839  001440  6E04               	movwf	?_strlen,c
  1840  001442  5007               	movf	strlen@a+1,w,c
  1841  001444  5805               	subwfb	strlen@s+1,w,c
  1842  001446  6E05               	movwf	?_strlen+1,c
  1843  001448  0012               	return		;funcret
  1844  00144A                     __end_of_strlen:
  1845                           	opt callstack 0
  1846                           
  1847 ;; *************** function _fputs *****************
  1848 ;; Defined at:
  1849 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputs.c"
  1850 ;; Parameters:    Size  Location     Type
  1851 ;;  s               2   12[COMRAM] PTR const unsigned char 
  1852 ;;		 -> dbuf(32), 
  1853 ;;  fp              2   14[COMRAM] PTR struct _IO_FILE
  1854 ;;		 -> sprintf@f(6), 
  1855 ;; Auto vars:     Size  Location     Type
  1856 ;;  i               2   17[COMRAM] int 
  1857 ;;  c               1   16[COMRAM] unsigned char 
  1858 ;; Return value:  Size  Location     Type
  1859 ;;                  2   12[COMRAM] int 
  1860 ;; Registers used:
  1861 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1862 ;; Tracked objects:
  1863 ;;		On entry : 0/0
  1864 ;;		On exit  : 0/0
  1865 ;;		Unchanged: 0/0
  1866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1867 ;;      Params:         4       0       0       0       0       0       0
  1868 ;;      Locals:         3       0       0       0       0       0       0
  1869 ;;      Temps:          0       0       0       0       0       0       0
  1870 ;;      Totals:         7       0       0       0       0       0       0
  1871 ;;Total ram usage:        7 bytes
  1872 ;; Hardware stack levels used:    1
  1873 ;; Hardware stack levels required when called:    3
  1874 ;; This function calls:
  1875 ;;		_fputc
  1876 ;; This function is called by:
  1877 ;;		_pad
  1878 ;; This function uses a non-reentrant model
  1879 ;;
  1880                           
  1881                           	psect	text7
  1882  001386                     __ptext7:
  1883                           	opt callstack 0
  1884  001386                     _fputs:
  1885                           	opt callstack 22
  1886                           
  1887                           ;incstack = 0
  1888  001386  0E00               	movlw	0
  1889  001388  6E13               	movwf	fputs@i+1,c
  1890  00138A  0E00               	movlw	0
  1891  00138C  6E12               	movwf	fputs@i,c
  1892  00138E  D00B               	goto	l1474
  1893  001390                     l1470:
  1894  001390  C011  F004         	movff	fputs@c,fputc@c
  1895  001394  6A05               	clrf	fputc@c+1,c
  1896  001396  C00F  F006         	movff	fputs@fp,fputc@fp
  1897  00139A  C010  F007         	movff	fputs@fp+1,fputc@fp+1
  1898  00139E  EC33  F008         	call	_fputc	;wreg free
  1899  0013A2  4A12               	infsnz	fputs@i,f,c
  1900  0013A4  2A13               	incf	fputs@i+1,f,c
  1901  0013A6                     l1474:
  1902  0013A6  5012               	movf	fputs@i,w,c
  1903  0013A8  240D               	addwf	fputs@s,w,c
  1904  0013AA  6ED9               	movwf	fsr2l,c
  1905  0013AC  5013               	movf	fputs@i+1,w,c
  1906  0013AE  200E               	addwfc	fputs@s+1,w,c
  1907  0013B0  6EDA               	movwf	fsr2h,c
  1908  0013B2  50DF               	movf	indf2,w,c
  1909  0013B4  6E11               	movwf	fputs@c,c
  1910  0013B6  5011               	movf	fputs@c,w,c
  1911  0013B8  B4D8               	btfsc	status,2,c
  1912  0013BA  0012               	return	
  1913  0013BC  D7E9               	goto	l1470
  1914  0013BE                     __end_of_fputs:
  1915                           	opt callstack 0
  1916                           
  1917 ;; *************** function _fputc *****************
  1918 ;; Defined at:
  1919 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputc.c"
  1920 ;; Parameters:    Size  Location     Type
  1921 ;;  c               2    3[COMRAM] int 
  1922 ;;  fp              2    5[COMRAM] PTR struct _IO_FILE
  1923 ;;		 -> sprintf@f(6), 
  1924 ;; Auto vars:     Size  Location     Type
  1925 ;;		None
  1926 ;; Return value:  Size  Location     Type
  1927 ;;                  2    3[COMRAM] int 
  1928 ;; Registers used:
  1929 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1930 ;; Tracked objects:
  1931 ;;		On entry : 0/0
  1932 ;;		On exit  : 0/0
  1933 ;;		Unchanged: 0/0
  1934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1935 ;;      Params:         4       0       0       0       0       0       0
  1936 ;;      Locals:         0       0       0       0       0       0       0
  1937 ;;      Temps:          5       0       0       0       0       0       0
  1938 ;;      Totals:         9       0       0       0       0       0       0
  1939 ;;Total ram usage:        9 bytes
  1940 ;; Hardware stack levels used:    1
  1941 ;; Hardware stack levels required when called:    2
  1942 ;; This function calls:
  1943 ;;		_putch
  1944 ;; This function is called by:
  1945 ;;		_pad
  1946 ;;		_vfpfcnvrt
  1947 ;;		_fputs
  1948 ;; This function uses a non-reentrant model
  1949 ;;
  1950                           
  1951                           	psect	text8
  1952  001066                     __ptext8:
  1953                           	opt callstack 0
  1954  001066                     _fputc:
  1955                           	opt callstack 25
  1956                           
  1957                           ;incstack = 0
  1958  001066  5006               	movf	fputc@fp,w,c
  1959  001068  1007               	iorwf	fputc@fp+1,w,c
  1960  00106A  B4D8               	btfsc	status,2,c
  1961  00106C  D004               	goto	u750
  1962  00106E  5006               	movf	fputc@fp,w,c
  1963  001070  1007               	iorwf	fputc@fp+1,w,c
  1964  001072  A4D8               	btfss	status,2,c
  1965  001074  D004               	goto	l1460
  1966  001076                     u750:
  1967  001076  5004               	movf	fputc@c,w,c
  1968  001078  EC64  F00A         	call	_putch
  1969  00107C  0012               	return	
  1970  00107E                     l1460:
  1971  00107E  EE20 F004          	lfsr	2,4
  1972  001082  5006               	movf	fputc@fp,w,c
  1973  001084  26D9               	addwf	fsr2l,f,c
  1974  001086  5007               	movf	fputc@fp+1,w,c
  1975  001088  22DA               	addwfc	fsr2h,f,c
  1976  00108A  50DE               	movf	postinc2,w,c
  1977  00108C  10DE               	iorwf	postinc2,w,c
  1978  00108E  B4D8               	btfsc	status,2,c
  1979  001090  D016               	goto	u770
  1980  001092  EE20 F004          	lfsr	2,4
  1981  001096  5006               	movf	fputc@fp,w,c
  1982  001098  26D9               	addwf	fsr2l,f,c
  1983  00109A  5007               	movf	fputc@fp+1,w,c
  1984  00109C  22DA               	addwfc	fsr2h,f,c
  1985  00109E  EE10 F002          	lfsr	1,2
  1986  0010A2  5006               	movf	fputc@fp,w,c
  1987  0010A4  26E1               	addwf	fsr1l,f,c
  1988  0010A6  5007               	movf	fputc@fp+1,w,c
  1989  0010A8  22E2               	addwfc	fsr1h,f,c
  1990  0010AA  50DE               	movf	postinc2,w,c
  1991  0010AC  5CE6               	subwf	postinc1,w,c
  1992  0010AE  50E6               	movf	postinc1,w,c
  1993  0010B0  0A80               	xorlw	128
  1994  0010B2  6E0C               	movwf	(??_fputc+4)& (0+255),c
  1995  0010B4  50DE               	movf	postinc2,w,c
  1996  0010B6  0A80               	xorlw	128
  1997  0010B8  580C               	subwfb	(??_fputc+4)& (0+255),w,c
  1998  0010BA  B0D8               	btfsc	status,0,c
  1999  0010BC  0012               	return	
  2000  0010BE                     u770:
  2001  0010BE  EE20 F002          	lfsr	2,2
  2002  0010C2  5006               	movf	fputc@fp,w,c
  2003  0010C4  26D9               	addwf	fsr2l,f,c
  2004  0010C6  5007               	movf	fputc@fp+1,w,c
  2005  0010C8  22DA               	addwfc	fsr2h,f,c
  2006  0010CA  CFDE F008          	movff	postinc2,??_fputc
  2007  0010CE  CFDD F009          	movff	postdec2,??_fputc+1
  2008  0010D2  C006  FFD9         	movff	fputc@fp,fsr2l
  2009  0010D6  C007  FFDA         	movff	fputc@fp+1,fsr2h
  2010  0010DA  CFDE F00A          	movff	postinc2,??_fputc+2
  2011  0010DE  CFDD F00B          	movff	postdec2,??_fputc+3
  2012  0010E2  5008               	movf	??_fputc,w,c
  2013  0010E4  240A               	addwf	??_fputc+2,w,c
  2014  0010E6  6ED9               	movwf	fsr2l,c
  2015  0010E8  5009               	movf	??_fputc+1,w,c
  2016  0010EA  200B               	addwfc	??_fputc+3,w,c
  2017  0010EC  6EDA               	movwf	fsr2h,c
  2018  0010EE  C004  FFDF         	movff	fputc@c,indf2
  2019  0010F2  EE20 F002          	lfsr	2,2
  2020  0010F6  5006               	movf	fputc@fp,w,c
  2021  0010F8  26D9               	addwf	fsr2l,f,c
  2022  0010FA  5007               	movf	fputc@fp+1,w,c
  2023  0010FC  22DA               	addwfc	fsr2h,f,c
  2024  0010FE  2ADE               	incf	postinc2,f,c
  2025  001100  0E00               	movlw	0
  2026  001102  22DD               	addwfc	postdec2,f,c
  2027  001104  0012               	return		;funcret
  2028  001106                     __end_of_fputc:
  2029                           	opt callstack 0
  2030                           
  2031 ;; *************** function _putch *****************
  2032 ;; Defined at:
  2033 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\putch.c"
  2034 ;; Parameters:    Size  Location     Type
  2035 ;;  c               1    wreg     unsigned char 
  2036 ;; Auto vars:     Size  Location     Type
  2037 ;;  c               1    0[COMRAM] unsigned char 
  2038 ;; Return value:  Size  Location     Type
  2039 ;;                  1    wreg      void 
  2040 ;; Registers used:
  2041 ;;		wreg
  2042 ;; Tracked objects:
  2043 ;;		On entry : 0/0
  2044 ;;		On exit  : 0/0
  2045 ;;		Unchanged: 0/0
  2046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2047 ;;      Params:         0       0       0       0       0       0       0
  2048 ;;      Locals:         0       0       0       0       0       0       0
  2049 ;;      Temps:          0       0       0       0       0       0       0
  2050 ;;      Totals:         0       0       0       0       0       0       0
  2051 ;;Total ram usage:        0 bytes
  2052 ;; Hardware stack levels used:    1
  2053 ;; Hardware stack levels required when called:    1
  2054 ;; This function calls:
  2055 ;;		Nothing
  2056 ;; This function is called by:
  2057 ;;		_fputc
  2058 ;; This function uses a non-reentrant model
  2059 ;;
  2060                           
  2061                           	psect	text9
  2062  0014C8                     __ptext9:
  2063                           	opt callstack 0
  2064  0014C8                     _putch:
  2065                           	opt callstack 25
  2066                           
  2067                           ;incstack = 0
  2068  0014C8  0012               	return		;funcret
  2069  0014CA                     __end_of_putch:
  2070                           	opt callstack 0
  2071                           
  2072 ;; *************** function _abs *****************
  2073 ;; Defined at:
  2074 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\abs.c"
  2075 ;; Parameters:    Size  Location     Type
  2076 ;;  a               2   21[COMRAM] int 
  2077 ;; Auto vars:     Size  Location     Type
  2078 ;;		None
  2079 ;; Return value:  Size  Location     Type
  2080 ;;                  2   21[COMRAM] int 
  2081 ;; Registers used:
  2082 ;;		wreg, status,2, status,0
  2083 ;; Tracked objects:
  2084 ;;		On entry : 0/0
  2085 ;;		On exit  : 0/0
  2086 ;;		Unchanged: 0/0
  2087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2088 ;;      Params:         2       0       0       0       0       0       0
  2089 ;;      Locals:         0       0       0       0       0       0       0
  2090 ;;      Temps:          2       0       0       0       0       0       0
  2091 ;;      Totals:         4       0       0       0       0       0       0
  2092 ;;Total ram usage:        4 bytes
  2093 ;; Hardware stack levels used:    1
  2094 ;; Hardware stack levels required when called:    1
  2095 ;; This function calls:
  2096 ;;		Nothing
  2097 ;; This function is called by:
  2098 ;;		_dtoa
  2099 ;; This function uses a non-reentrant model
  2100 ;;
  2101                           
  2102                           	psect	text10
  2103  0013BE                     __ptext10:
  2104                           	opt callstack 0
  2105  0013BE                     _abs:
  2106                           	opt callstack 25
  2107                           
  2108                           ;incstack = 0
  2109  0013BE  BE17               	btfsc	abs@a+1,7,c
  2110  0013C0  D005               	goto	u840
  2111  0013C2  5017               	movf	abs@a+1,w,c
  2112  0013C4  E110               	bnz	l856
  2113  0013C6  0416               	decf	abs@a,w,c
  2114  0013C8  B0D8               	btfsc	status,0,c
  2115  0013CA  D00D               	goto	l856
  2116  0013CC                     u840:
  2117  0013CC  C016  F018         	movff	abs@a,??_abs
  2118  0013D0  C017  F019         	movff	abs@a+1,??_abs+1
  2119  0013D4  1E18               	comf	??_abs,f,c
  2120  0013D6  1E19               	comf	??_abs+1,f,c
  2121  0013D8  4A18               	infsnz	??_abs,f,c
  2122  0013DA  2A19               	incf	??_abs+1,f,c
  2123  0013DC  C018  F016         	movff	??_abs,?_abs
  2124  0013E0  C019  F017         	movff	??_abs+1,?_abs+1
  2125  0013E4  0012               	return	
  2126  0013E6                     l856:
  2127  0013E6  C016  F016         	movff	abs@a,?_abs
  2128  0013EA  C017  F017         	movff	abs@a+1,?_abs+1
  2129  0013EE  0012               	return		;funcret
  2130  0013F0                     __end_of_abs:
  2131                           	opt callstack 0
  2132                           
  2133 ;; *************** function ___aomod *****************
  2134 ;; Defined at:
  2135 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aomod.c"
  2136 ;; Parameters:    Size  Location     Type
  2137 ;;  dividend        8    3[COMRAM] long long 
  2138 ;;  divisor         8   11[COMRAM] long long 
  2139 ;; Auto vars:     Size  Location     Type
  2140 ;;  sign            1   20[COMRAM] unsigned char 
  2141 ;;  counter         1   19[COMRAM] unsigned char 
  2142 ;; Return value:  Size  Location     Type
  2143 ;;                  8    3[COMRAM] long long 
  2144 ;; Registers used:
  2145 ;;		wreg, status,2, status,0
  2146 ;; Tracked objects:
  2147 ;;		On entry : 0/0
  2148 ;;		On exit  : 0/0
  2149 ;;		Unchanged: 0/0
  2150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2151 ;;      Params:        16       0       0       0       0       0       0
  2152 ;;      Locals:         2       0       0       0       0       0       0
  2153 ;;      Temps:          0       0       0       0       0       0       0
  2154 ;;      Totals:        18       0       0       0       0       0       0
  2155 ;;Total ram usage:       18 bytes
  2156 ;; Hardware stack levels used:    1
  2157 ;; Hardware stack levels required when called:    1
  2158 ;; This function calls:
  2159 ;;		Nothing
  2160 ;; This function is called by:
  2161 ;;		_dtoa
  2162 ;; This function uses a non-reentrant model
  2163 ;;
  2164                           
  2165                           	psect	text11
  2166  000DBA                     __ptext11:
  2167                           	opt callstack 0
  2168  000DBA                     ___aomod:
  2169                           	opt callstack 25
  2170                           
  2171                           ;incstack = 0
  2172  000DBA  0E00               	movlw	0
  2173  000DBC  6E15               	movwf	___aomod@sign,c
  2174  000DBE  AE0B               	btfss	___aomod@dividend+7,7,c
  2175  000DC0  D012               	goto	l1574
  2176  000DC2  1E0B               	comf	___aomod@dividend+7,f,c
  2177  000DC4  1E0A               	comf	___aomod@dividend+6,f,c
  2178  000DC6  1E09               	comf	___aomod@dividend+5,f,c
  2179  000DC8  1E08               	comf	___aomod@dividend+4,f,c
  2180  000DCA  1E07               	comf	___aomod@dividend+3,f,c
  2181  000DCC  1E06               	comf	___aomod@dividend+2,f,c
  2182  000DCE  1E05               	comf	___aomod@dividend+1,f,c
  2183  000DD0  6C04               	negf	___aomod@dividend,c
  2184  000DD2  0E00               	movlw	0
  2185  000DD4  2205               	addwfc	___aomod@dividend+1,f,c
  2186  000DD6  2206               	addwfc	___aomod@dividend+2,f,c
  2187  000DD8  2207               	addwfc	___aomod@dividend+3,f,c
  2188  000DDA  2208               	addwfc	___aomod@dividend+4,f,c
  2189  000DDC  2209               	addwfc	___aomod@dividend+5,f,c
  2190  000DDE  220A               	addwfc	___aomod@dividend+6,f,c
  2191  000DE0  220B               	addwfc	___aomod@dividend+7,f,c
  2192  000DE2  0E01               	movlw	1
  2193  000DE4  6E15               	movwf	___aomod@sign,c
  2194  000DE6                     l1574:
  2195  000DE6  AE13               	btfss	___aomod@divisor+7,7,c
  2196  000DE8  D010               	goto	l1578
  2197  000DEA  1E13               	comf	___aomod@divisor+7,f,c
  2198  000DEC  1E12               	comf	___aomod@divisor+6,f,c
  2199  000DEE  1E11               	comf	___aomod@divisor+5,f,c
  2200  000DF0  1E10               	comf	___aomod@divisor+4,f,c
  2201  000DF2  1E0F               	comf	___aomod@divisor+3,f,c
  2202  000DF4  1E0E               	comf	___aomod@divisor+2,f,c
  2203  000DF6  1E0D               	comf	___aomod@divisor+1,f,c
  2204  000DF8  6C0C               	negf	___aomod@divisor,c
  2205  000DFA  0E00               	movlw	0
  2206  000DFC  220D               	addwfc	___aomod@divisor+1,f,c
  2207  000DFE  220E               	addwfc	___aomod@divisor+2,f,c
  2208  000E00  220F               	addwfc	___aomod@divisor+3,f,c
  2209  000E02  2210               	addwfc	___aomod@divisor+4,f,c
  2210  000E04  2211               	addwfc	___aomod@divisor+5,f,c
  2211  000E06  2212               	addwfc	___aomod@divisor+6,f,c
  2212  000E08  2213               	addwfc	___aomod@divisor+7,f,c
  2213  000E0A                     l1578:
  2214  000E0A  500C               	movf	___aomod@divisor,w,c
  2215  000E0C  100D               	iorwf	___aomod@divisor+1,w,c
  2216  000E0E  100E               	iorwf	___aomod@divisor+2,w,c
  2217  000E10  100F               	iorwf	___aomod@divisor+3,w,c
  2218  000E12  1010               	iorwf	___aomod@divisor+4,w,c
  2219  000E14  1011               	iorwf	___aomod@divisor+5,w,c
  2220  000E16  1012               	iorwf	___aomod@divisor+6,w,c
  2221  000E18  1013               	iorwf	___aomod@divisor+7,w,c
  2222  000E1A  B4D8               	btfsc	status,2,c
  2223  000E1C  D03C               	goto	l1594
  2224  000E1E  0E01               	movlw	1
  2225  000E20  6E14               	movwf	___aomod@counter,c
  2226  000E22  D00A               	goto	l1584
  2227  000E24                     l1582:
  2228  000E24  90D8               	bcf	status,0,c
  2229  000E26  360C               	rlcf	___aomod@divisor,f,c
  2230  000E28  360D               	rlcf	___aomod@divisor+1,f,c
  2231  000E2A  360E               	rlcf	___aomod@divisor+2,f,c
  2232  000E2C  360F               	rlcf	___aomod@divisor+3,f,c
  2233  000E2E  3610               	rlcf	___aomod@divisor+4,f,c
  2234  000E30  3611               	rlcf	___aomod@divisor+5,f,c
  2235  000E32  3612               	rlcf	___aomod@divisor+6,f,c
  2236  000E34  3613               	rlcf	___aomod@divisor+7,f,c
  2237  000E36  2A14               	incf	___aomod@counter,f,c
  2238  000E38                     l1584:
  2239  000E38  AE13               	btfss	___aomod@divisor+7,7,c
  2240  000E3A  D7F4               	goto	l1582
  2241  000E3C                     u970:
  2242  000E3C  500C               	movf	___aomod@divisor,w,c
  2243  000E3E  5C04               	subwf	___aomod@dividend,w,c
  2244  000E40  500D               	movf	___aomod@divisor+1,w,c
  2245  000E42  5805               	subwfb	___aomod@dividend+1,w,c
  2246  000E44  500E               	movf	___aomod@divisor+2,w,c
  2247  000E46  5806               	subwfb	___aomod@dividend+2,w,c
  2248  000E48  500F               	movf	___aomod@divisor+3,w,c
  2249  000E4A  5807               	subwfb	___aomod@dividend+3,w,c
  2250  000E4C  5010               	movf	___aomod@divisor+4,w,c
  2251  000E4E  5808               	subwfb	___aomod@dividend+4,w,c
  2252  000E50  5011               	movf	___aomod@divisor+5,w,c
  2253  000E52  5809               	subwfb	___aomod@dividend+5,w,c
  2254  000E54  5012               	movf	___aomod@divisor+6,w,c
  2255  000E56  580A               	subwfb	___aomod@dividend+6,w,c
  2256  000E58  5013               	movf	___aomod@divisor+7,w,c
  2257  000E5A  580B               	subwfb	___aomod@dividend+7,w,c
  2258  000E5C  A0D8               	btfss	status,0,c
  2259  000E5E  D010               	goto	l1590
  2260  000E60  500C               	movf	___aomod@divisor,w,c
  2261  000E62  5E04               	subwf	___aomod@dividend,f,c
  2262  000E64  500D               	movf	___aomod@divisor+1,w,c
  2263  000E66  5A05               	subwfb	___aomod@dividend+1,f,c
  2264  000E68  500E               	movf	___aomod@divisor+2,w,c
  2265  000E6A  5A06               	subwfb	___aomod@dividend+2,f,c
  2266  000E6C  500F               	movf	___aomod@divisor+3,w,c
  2267  000E6E  5A07               	subwfb	___aomod@dividend+3,f,c
  2268  000E70  5010               	movf	___aomod@divisor+4,w,c
  2269  000E72  5A08               	subwfb	___aomod@dividend+4,f,c
  2270  000E74  5011               	movf	___aomod@divisor+5,w,c
  2271  000E76  5A09               	subwfb	___aomod@dividend+5,f,c
  2272  000E78  5012               	movf	___aomod@divisor+6,w,c
  2273  000E7A  5A0A               	subwfb	___aomod@dividend+6,f,c
  2274  000E7C  5013               	movf	___aomod@divisor+7,w,c
  2275  000E7E  5A0B               	subwfb	___aomod@dividend+7,f,c
  2276  000E80                     l1590:
  2277  000E80  90D8               	bcf	status,0,c
  2278  000E82  3213               	rrcf	___aomod@divisor+7,f,c
  2279  000E84  3212               	rrcf	___aomod@divisor+6,f,c
  2280  000E86  3211               	rrcf	___aomod@divisor+5,f,c
  2281  000E88  3210               	rrcf	___aomod@divisor+4,f,c
  2282  000E8A  320F               	rrcf	___aomod@divisor+3,f,c
  2283  000E8C  320E               	rrcf	___aomod@divisor+2,f,c
  2284  000E8E  320D               	rrcf	___aomod@divisor+1,f,c
  2285  000E90  320C               	rrcf	___aomod@divisor,f,c
  2286  000E92  2E14               	decfsz	___aomod@counter,f,c
  2287  000E94  D7D3               	goto	u970
  2288  000E96                     l1594:
  2289  000E96  5015               	movf	___aomod@sign,w,c
  2290  000E98  B4D8               	btfsc	status,2,c
  2291  000E9A  D010               	goto	l1598
  2292  000E9C  1E0B               	comf	___aomod@dividend+7,f,c
  2293  000E9E  1E0A               	comf	___aomod@dividend+6,f,c
  2294  000EA0  1E09               	comf	___aomod@dividend+5,f,c
  2295  000EA2  1E08               	comf	___aomod@dividend+4,f,c
  2296  000EA4  1E07               	comf	___aomod@dividend+3,f,c
  2297  000EA6  1E06               	comf	___aomod@dividend+2,f,c
  2298  000EA8  1E05               	comf	___aomod@dividend+1,f,c
  2299  000EAA  6C04               	negf	___aomod@dividend,c
  2300  000EAC  0E00               	movlw	0
  2301  000EAE  2205               	addwfc	___aomod@dividend+1,f,c
  2302  000EB0  2206               	addwfc	___aomod@dividend+2,f,c
  2303  000EB2  2207               	addwfc	___aomod@dividend+3,f,c
  2304  000EB4  2208               	addwfc	___aomod@dividend+4,f,c
  2305  000EB6  2209               	addwfc	___aomod@dividend+5,f,c
  2306  000EB8  220A               	addwfc	___aomod@dividend+6,f,c
  2307  000EBA  220B               	addwfc	___aomod@dividend+7,f,c
  2308  000EBC                     l1598:
  2309  000EBC  C004  F004         	movff	___aomod@dividend,?___aomod
  2310  000EC0  C005  F005         	movff	___aomod@dividend+1,?___aomod+1
  2311  000EC4  C006  F006         	movff	___aomod@dividend+2,?___aomod+2
  2312  000EC8  C007  F007         	movff	___aomod@dividend+3,?___aomod+3
  2313  000ECC  C008  F008         	movff	___aomod@dividend+4,?___aomod+4
  2314  000ED0  C009  F009         	movff	___aomod@dividend+5,?___aomod+5
  2315  000ED4  C00A  F00A         	movff	___aomod@dividend+6,?___aomod+6
  2316  000ED8  C00B  F00B         	movff	___aomod@dividend+7,?___aomod+7
  2317  000EDC  0012               	return		;funcret
  2318  000EDE                     __end_of___aomod:
  2319                           	opt callstack 0
  2320                           
  2321 ;; *************** function ___aodiv *****************
  2322 ;; Defined at:
  2323 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aodiv.c"
  2324 ;; Parameters:    Size  Location     Type
  2325 ;;  dividend        8    3[COMRAM] long long 
  2326 ;;  divisor         8   11[COMRAM] long long 
  2327 ;; Auto vars:     Size  Location     Type
  2328 ;;  quotient        8   21[COMRAM] long long 
  2329 ;;  sign            1   20[COMRAM] unsigned char 
  2330 ;;  counter         1   19[COMRAM] unsigned char 
  2331 ;; Return value:  Size  Location     Type
  2332 ;;                  8    3[COMRAM] long long 
  2333 ;; Registers used:
  2334 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2335 ;; Tracked objects:
  2336 ;;		On entry : 0/0
  2337 ;;		On exit  : 0/0
  2338 ;;		Unchanged: 0/0
  2339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2340 ;;      Params:        16       0       0       0       0       0       0
  2341 ;;      Locals:        10       0       0       0       0       0       0
  2342 ;;      Temps:          0       0       0       0       0       0       0
  2343 ;;      Totals:        26       0       0       0       0       0       0
  2344 ;;Total ram usage:       26 bytes
  2345 ;; Hardware stack levels used:    1
  2346 ;; Hardware stack levels required when called:    1
  2347 ;; This function calls:
  2348 ;;		Nothing
  2349 ;; This function is called by:
  2350 ;;		_dtoa
  2351 ;; This function uses a non-reentrant model
  2352 ;;
  2353                           
  2354                           	psect	text12
  2355  000B32                     __ptext12:
  2356                           	opt callstack 0
  2357  000B32                     ___aodiv:
  2358                           	opt callstack 25
  2359                           
  2360                           ;incstack = 0
  2361  000B32  0E00               	movlw	0
  2362  000B34  6E15               	movwf	___aodiv@sign,c
  2363  000B36  AE13               	btfss	___aodiv@divisor+7,7,c
  2364  000B38  D012               	goto	l1530
  2365  000B3A  1E13               	comf	___aodiv@divisor+7,f,c
  2366  000B3C  1E12               	comf	___aodiv@divisor+6,f,c
  2367  000B3E  1E11               	comf	___aodiv@divisor+5,f,c
  2368  000B40  1E10               	comf	___aodiv@divisor+4,f,c
  2369  000B42  1E0F               	comf	___aodiv@divisor+3,f,c
  2370  000B44  1E0E               	comf	___aodiv@divisor+2,f,c
  2371  000B46  1E0D               	comf	___aodiv@divisor+1,f,c
  2372  000B48  6C0C               	negf	___aodiv@divisor,c
  2373  000B4A  0E00               	movlw	0
  2374  000B4C  220D               	addwfc	___aodiv@divisor+1,f,c
  2375  000B4E  220E               	addwfc	___aodiv@divisor+2,f,c
  2376  000B50  220F               	addwfc	___aodiv@divisor+3,f,c
  2377  000B52  2210               	addwfc	___aodiv@divisor+4,f,c
  2378  000B54  2211               	addwfc	___aodiv@divisor+5,f,c
  2379  000B56  2212               	addwfc	___aodiv@divisor+6,f,c
  2380  000B58  2213               	addwfc	___aodiv@divisor+7,f,c
  2381  000B5A  0E01               	movlw	1
  2382  000B5C  6E15               	movwf	___aodiv@sign,c
  2383  000B5E                     l1530:
  2384  000B5E  AE0B               	btfss	___aodiv@dividend+7,7,c
  2385  000B60  D012               	goto	l1536
  2386  000B62  1E0B               	comf	___aodiv@dividend+7,f,c
  2387  000B64  1E0A               	comf	___aodiv@dividend+6,f,c
  2388  000B66  1E09               	comf	___aodiv@dividend+5,f,c
  2389  000B68  1E08               	comf	___aodiv@dividend+4,f,c
  2390  000B6A  1E07               	comf	___aodiv@dividend+3,f,c
  2391  000B6C  1E06               	comf	___aodiv@dividend+2,f,c
  2392  000B6E  1E05               	comf	___aodiv@dividend+1,f,c
  2393  000B70  6C04               	negf	___aodiv@dividend,c
  2394  000B72  0E00               	movlw	0
  2395  000B74  2205               	addwfc	___aodiv@dividend+1,f,c
  2396  000B76  2206               	addwfc	___aodiv@dividend+2,f,c
  2397  000B78  2207               	addwfc	___aodiv@dividend+3,f,c
  2398  000B7A  2208               	addwfc	___aodiv@dividend+4,f,c
  2399  000B7C  2209               	addwfc	___aodiv@dividend+5,f,c
  2400  000B7E  220A               	addwfc	___aodiv@dividend+6,f,c
  2401  000B80  220B               	addwfc	___aodiv@dividend+7,f,c
  2402  000B82  0E01               	movlw	1
  2403  000B84  1A15               	xorwf	___aodiv@sign,f,c
  2404  000B86                     l1536:
  2405  000B86  EE20  F016         	lfsr	2,___aodiv@quotient
  2406  000B8A  0E07               	movlw	7
  2407  000B8C                     u891:
  2408  000B8C  6ADE               	clrf	postinc2,c
  2409  000B8E  06E8               	decf	wreg,f,c
  2410  000B90  E2FD               	bc	u891
  2411  000B92  500C               	movf	___aodiv@divisor,w,c
  2412  000B94  100D               	iorwf	___aodiv@divisor+1,w,c
  2413  000B96  100E               	iorwf	___aodiv@divisor+2,w,c
  2414  000B98  100F               	iorwf	___aodiv@divisor+3,w,c
  2415  000B9A  1010               	iorwf	___aodiv@divisor+4,w,c
  2416  000B9C  1011               	iorwf	___aodiv@divisor+5,w,c
  2417  000B9E  1012               	iorwf	___aodiv@divisor+6,w,c
  2418  000BA0  1013               	iorwf	___aodiv@divisor+7,w,c
  2419  000BA2  B4D8               	btfsc	status,2,c
  2420  000BA4  D046               	goto	l1558
  2421  000BA6  0E01               	movlw	1
  2422  000BA8  6E14               	movwf	___aodiv@counter,c
  2423  000BAA  D00A               	goto	l1544
  2424  000BAC                     l1542:
  2425  000BAC  90D8               	bcf	status,0,c
  2426  000BAE  360C               	rlcf	___aodiv@divisor,f,c
  2427  000BB0  360D               	rlcf	___aodiv@divisor+1,f,c
  2428  000BB2  360E               	rlcf	___aodiv@divisor+2,f,c
  2429  000BB4  360F               	rlcf	___aodiv@divisor+3,f,c
  2430  000BB6  3610               	rlcf	___aodiv@divisor+4,f,c
  2431  000BB8  3611               	rlcf	___aodiv@divisor+5,f,c
  2432  000BBA  3612               	rlcf	___aodiv@divisor+6,f,c
  2433  000BBC  3613               	rlcf	___aodiv@divisor+7,f,c
  2434  000BBE  2A14               	incf	___aodiv@counter,f,c
  2435  000BC0                     l1544:
  2436  000BC0  AE13               	btfss	___aodiv@divisor+7,7,c
  2437  000BC2  D7F4               	goto	l1542
  2438  000BC4                     u910:
  2439  000BC4  90D8               	bcf	status,0,c
  2440  000BC6  3616               	rlcf	___aodiv@quotient,f,c
  2441  000BC8  3617               	rlcf	___aodiv@quotient+1,f,c
  2442  000BCA  3618               	rlcf	___aodiv@quotient+2,f,c
  2443  000BCC  3619               	rlcf	___aodiv@quotient+3,f,c
  2444  000BCE  361A               	rlcf	___aodiv@quotient+4,f,c
  2445  000BD0  361B               	rlcf	___aodiv@quotient+5,f,c
  2446  000BD2  361C               	rlcf	___aodiv@quotient+6,f,c
  2447  000BD4  361D               	rlcf	___aodiv@quotient+7,f,c
  2448  000BD6  500C               	movf	___aodiv@divisor,w,c
  2449  000BD8  5C04               	subwf	___aodiv@dividend,w,c
  2450  000BDA  500D               	movf	___aodiv@divisor+1,w,c
  2451  000BDC  5805               	subwfb	___aodiv@dividend+1,w,c
  2452  000BDE  500E               	movf	___aodiv@divisor+2,w,c
  2453  000BE0  5806               	subwfb	___aodiv@dividend+2,w,c
  2454  000BE2  500F               	movf	___aodiv@divisor+3,w,c
  2455  000BE4  5807               	subwfb	___aodiv@dividend+3,w,c
  2456  000BE6  5010               	movf	___aodiv@divisor+4,w,c
  2457  000BE8  5808               	subwfb	___aodiv@dividend+4,w,c
  2458  000BEA  5011               	movf	___aodiv@divisor+5,w,c
  2459  000BEC  5809               	subwfb	___aodiv@dividend+5,w,c
  2460  000BEE  5012               	movf	___aodiv@divisor+6,w,c
  2461  000BF0  580A               	subwfb	___aodiv@dividend+6,w,c
  2462  000BF2  5013               	movf	___aodiv@divisor+7,w,c
  2463  000BF4  580B               	subwfb	___aodiv@dividend+7,w,c
  2464  000BF6  A0D8               	btfss	status,0,c
  2465  000BF8  D011               	goto	l1554
  2466  000BFA  500C               	movf	___aodiv@divisor,w,c
  2467  000BFC  5E04               	subwf	___aodiv@dividend,f,c
  2468  000BFE  500D               	movf	___aodiv@divisor+1,w,c
  2469  000C00  5A05               	subwfb	___aodiv@dividend+1,f,c
  2470  000C02  500E               	movf	___aodiv@divisor+2,w,c
  2471  000C04  5A06               	subwfb	___aodiv@dividend+2,f,c
  2472  000C06  500F               	movf	___aodiv@divisor+3,w,c
  2473  000C08  5A07               	subwfb	___aodiv@dividend+3,f,c
  2474  000C0A  5010               	movf	___aodiv@divisor+4,w,c
  2475  000C0C  5A08               	subwfb	___aodiv@dividend+4,f,c
  2476  000C0E  5011               	movf	___aodiv@divisor+5,w,c
  2477  000C10  5A09               	subwfb	___aodiv@dividend+5,f,c
  2478  000C12  5012               	movf	___aodiv@divisor+6,w,c
  2479  000C14  5A0A               	subwfb	___aodiv@dividend+6,f,c
  2480  000C16  5013               	movf	___aodiv@divisor+7,w,c
  2481  000C18  5A0B               	subwfb	___aodiv@dividend+7,f,c
  2482  000C1A  8016               	bsf	___aodiv@quotient,0,c
  2483  000C1C                     l1554:
  2484  000C1C  90D8               	bcf	status,0,c
  2485  000C1E  3213               	rrcf	___aodiv@divisor+7,f,c
  2486  000C20  3212               	rrcf	___aodiv@divisor+6,f,c
  2487  000C22  3211               	rrcf	___aodiv@divisor+5,f,c
  2488  000C24  3210               	rrcf	___aodiv@divisor+4,f,c
  2489  000C26  320F               	rrcf	___aodiv@divisor+3,f,c
  2490  000C28  320E               	rrcf	___aodiv@divisor+2,f,c
  2491  000C2A  320D               	rrcf	___aodiv@divisor+1,f,c
  2492  000C2C  320C               	rrcf	___aodiv@divisor,f,c
  2493  000C2E  2E14               	decfsz	___aodiv@counter,f,c
  2494  000C30  D7C9               	goto	u910
  2495  000C32                     l1558:
  2496  000C32  5015               	movf	___aodiv@sign,w,c
  2497  000C34  B4D8               	btfsc	status,2,c
  2498  000C36  D010               	goto	l1562
  2499  000C38  1E1D               	comf	___aodiv@quotient+7,f,c
  2500  000C3A  1E1C               	comf	___aodiv@quotient+6,f,c
  2501  000C3C  1E1B               	comf	___aodiv@quotient+5,f,c
  2502  000C3E  1E1A               	comf	___aodiv@quotient+4,f,c
  2503  000C40  1E19               	comf	___aodiv@quotient+3,f,c
  2504  000C42  1E18               	comf	___aodiv@quotient+2,f,c
  2505  000C44  1E17               	comf	___aodiv@quotient+1,f,c
  2506  000C46  6C16               	negf	___aodiv@quotient,c
  2507  000C48  0E00               	movlw	0
  2508  000C4A  2217               	addwfc	___aodiv@quotient+1,f,c
  2509  000C4C  2218               	addwfc	___aodiv@quotient+2,f,c
  2510  000C4E  2219               	addwfc	___aodiv@quotient+3,f,c
  2511  000C50  221A               	addwfc	___aodiv@quotient+4,f,c
  2512  000C52  221B               	addwfc	___aodiv@quotient+5,f,c
  2513  000C54  221C               	addwfc	___aodiv@quotient+6,f,c
  2514  000C56  221D               	addwfc	___aodiv@quotient+7,f,c
  2515  000C58                     l1562:
  2516  000C58  C016  F004         	movff	___aodiv@quotient,?___aodiv
  2517  000C5C  C017  F005         	movff	___aodiv@quotient+1,?___aodiv+1
  2518  000C60  C018  F006         	movff	___aodiv@quotient+2,?___aodiv+2
  2519  000C64  C019  F007         	movff	___aodiv@quotient+3,?___aodiv+3
  2520  000C68  C01A  F008         	movff	___aodiv@quotient+4,?___aodiv+4
  2521  000C6C  C01B  F009         	movff	___aodiv@quotient+5,?___aodiv+5
  2522  000C70  C01C  F00A         	movff	___aodiv@quotient+6,?___aodiv+6
  2523  000C74  C01D  F00B         	movff	___aodiv@quotient+7,?___aodiv+7
  2524  000C78  0012               	return		;funcret
  2525  000C7A                     __end_of___aodiv:
  2526                           	opt callstack 0
  2527                           
  2528 ;; *************** function _atoi *****************
  2529 ;; Defined at:
  2530 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\atoi.c"
  2531 ;; Parameters:    Size  Location     Type
  2532 ;;  s               2   10[COMRAM] PTR const unsigned char 
  2533 ;;		 -> STR_3(5), 
  2534 ;; Auto vars:     Size  Location     Type
  2535 ;;  n               2   23[COMRAM] int 
  2536 ;;  neg             2   16[COMRAM] int 
  2537 ;; Return value:  Size  Location     Type
  2538 ;;                  2   10[COMRAM] int 
  2539 ;; Registers used:
  2540 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2541 ;; Tracked objects:
  2542 ;;		On entry : 0/0
  2543 ;;		On exit  : 0/0
  2544 ;;		Unchanged: 0/0
  2545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2546 ;;      Params:         2       0       0       0       0       0       0
  2547 ;;      Locals:         9       0       0       0       0       0       0
  2548 ;;      Temps:          4       0       0       0       0       0       0
  2549 ;;      Totals:        15       0       0       0       0       0       0
  2550 ;;Total ram usage:       15 bytes
  2551 ;; Hardware stack levels used:    1
  2552 ;; Hardware stack levels required when called:    2
  2553 ;; This function calls:
  2554 ;;		___wmul
  2555 ;;		_isdigit
  2556 ;;		_isspace
  2557 ;; This function is called by:
  2558 ;;		_vfpfcnvrt
  2559 ;; This function uses a non-reentrant model
  2560 ;;
  2561                           
  2562                           	psect	text13
  2563  000C7A                     __ptext13:
  2564                           	opt callstack 0
  2565  000C7A                     _atoi:
  2566                           	opt callstack 25
  2567                           
  2568                           ;incstack = 0
  2569  000C7A  0E00               	movlw	0
  2570  000C7C  6E19               	movwf	atoi@n+1,c
  2571  000C7E  0E00               	movlw	0
  2572  000C80  6E18               	movwf	atoi@n,c
  2573  000C82  0E00               	movlw	0
  2574  000C84  6E12               	movwf	atoi@neg+1,c
  2575  000C86  0E00               	movlw	0
  2576  000C88  6E11               	movwf	atoi@neg,c
  2577  000C8A  D002               	goto	l1692
  2578  000C8C                     l1690:
  2579  000C8C  4A0B               	infsnz	atoi@s,f,c
  2580  000C8E  2A0C               	incf	atoi@s+1,f,c
  2581  000C90                     l1692:
  2582  000C90  0E01               	movlw	1
  2583  000C92  6E17               	movwf	_atoi$954,c
  2584  000C94  C00B  FFF6         	movff	atoi@s,tblptrl
  2585  000C98  C00C  FFF7         	movff	atoi@s+1,tblptrh
  2586  000C9C                     	if	0	;tblptru may be non-zero
  2587  000C9C                     	endif
  2588  000C9C                     	if	0	;tblptru may be non-zero
  2589  000C9C                     	endif
  2590  000C9C  0008               	tblrd		*
  2591  000C9E  50F5               	movf	tablat,w,c
  2592  000CA0  0A20               	xorlw	32
  2593  000CA2  B4D8               	btfsc	status,2,c
  2594  000CA4  D018               	goto	l1700
  2595  000CA6  0EF7               	movlw	247
  2596  000CA8  6E0D               	movwf	??_atoi& (0+255),c
  2597  000CAA  0EFF               	movlw	255
  2598  000CAC  6E0E               	movwf	(??_atoi+1)& (0+255),c
  2599  000CAE  C00B  FFF6         	movff	atoi@s,tblptrl
  2600  000CB2  C00C  FFF7         	movff	atoi@s+1,tblptrh
  2601  000CB6                     	if	0	;tblptru may be non-zero
  2602  000CB6                     	endif
  2603  000CB6                     	if	0	;tblptru may be non-zero
  2604  000CB6                     	endif
  2605  000CB6  0008               	tblrd		*
  2606  000CB8  50F5               	movf	tablat,w,c
  2607  000CBA  6E0F               	movwf	(??_atoi+2)& (0+255),c
  2608  000CBC  6A10               	clrf	(??_atoi+3)& (0+255),c
  2609  000CBE  500D               	movf	??_atoi,w,c
  2610  000CC0  260F               	addwf	??_atoi+2,f,c
  2611  000CC2  500E               	movf	??_atoi+1,w,c
  2612  000CC4  2210               	addwfc	??_atoi+3,f,c
  2613  000CC6  5010               	movf	??_atoi+3,w,c
  2614  000CC8  E104               	bnz	u1190
  2615  000CCA  0E05               	movlw	5
  2616  000CCC  5C0F               	subwf	??_atoi+2,w,c
  2617  000CCE  A0D8               	btfss	status,0,c
  2618  000CD0  D002               	goto	l1700
  2619  000CD2                     u1190:
  2620  000CD2  0E00               	movlw	0
  2621  000CD4  6E17               	movwf	_atoi$954,c
  2622  000CD6                     l1700:
  2623  000CD6  C017  F013         	movff	_atoi$954,_atoi$953
  2624  000CDA  6A14               	clrf	_atoi$953+1,c
  2625  000CDC  5013               	movf	_atoi$953,w,c
  2626  000CDE  1014               	iorwf	_atoi$953+1,w,c
  2627  000CE0  B4D8               	btfsc	status,2,c
  2628  000CE2  D008               	goto	l1710
  2629  000CE4  D7D3               	goto	l1690
  2630  000CE6                     l1706:
  2631  000CE6  0E00               	movlw	0
  2632  000CE8  6E12               	movwf	atoi@neg+1,c
  2633  000CEA  0E01               	movlw	1
  2634  000CEC  6E11               	movwf	atoi@neg,c
  2635  000CEE                     l1708:
  2636  000CEE  4A0B               	infsnz	atoi@s,f,c
  2637  000CF0  2A0C               	incf	atoi@s+1,f,c
  2638  000CF2  D02E               	goto	l1716
  2639  000CF4                     l1710:
  2640  000CF4  C00B  FFF6         	movff	atoi@s,tblptrl
  2641  000CF8  C00C  FFF7         	movff	atoi@s+1,tblptrh
  2642  000CFC                     	if	0	;tblptru may be non-zero
  2643  000CFC                     	endif
  2644  000CFC                     	if	0	;tblptru may be non-zero
  2645  000CFC                     	endif
  2646  000CFC  0008               	tblrd		*
  2647  000CFE  50F5               	movf	tablat,w,c
  2648  000D00  6E0D               	movwf	??_atoi& (0+255),c
  2649  000D02  6A0E               	clrf	(??_atoi+1)& (0+255),c
  2650                           
  2651                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2652                           ; Switch size 1, requested type "simple"
  2653                           ; Number of cases is 1, Range of values is 0 to 0
  2654                           ; switch strategies available:
  2655                           ; Name         Instructions Cycles
  2656                           ; simple_byte            4     3 (average)
  2657                           ;	Chosen strategy is simple_byte
  2658  000D04  500E               	movf	??_atoi+1,w,c
  2659  000D06  0A00               	xorlw	0	; case 0
  2660  000D08  A4D8               	btfss	status,2,c
  2661  000D0A  D022               	goto	l1716
  2662                           
  2663                           ; Switch size 1, requested type "simple"
  2664                           ; Number of cases is 2, Range of values is 43 to 45
  2665                           ; switch strategies available:
  2666                           ; Name         Instructions Cycles
  2667                           ; simple_byte            7     4 (average)
  2668                           ;	Chosen strategy is simple_byte
  2669  000D0C  500D               	movf	??_atoi,w,c
  2670  000D0E  0A2B               	xorlw	43	; case 43
  2671  000D10  B4D8               	btfsc	status,2,c
  2672  000D12  D7ED               	goto	l1708
  2673  000D14  0A06               	xorlw	6	; case 45
  2674  000D16  B4D8               	btfsc	status,2,c
  2675  000D18  D7E6               	goto	l1706
  2676  000D1A  D01A               	goto	l1716
  2677  000D1C                     l1712:
  2678  000D1C  C018  F004         	movff	atoi@n,___wmul@multiplier
  2679  000D20  C019  F005         	movff	atoi@n+1,___wmul@multiplier+1
  2680  000D24  0E00               	movlw	0
  2681  000D26  6E07               	movwf	___wmul@multiplicand+1,c
  2682  000D28  0E0A               	movlw	10
  2683  000D2A  6E06               	movwf	___wmul@multiplicand,c
  2684  000D2C  EC38  F00A         	call	___wmul	;wreg free
  2685  000D30  C00B  FFF6         	movff	atoi@s,tblptrl
  2686  000D34  C00C  FFF7         	movff	atoi@s+1,tblptrh
  2687  000D38                     	if	0	;tblptru may be non-zero
  2688  000D38                     	endif
  2689  000D38                     	if	0	;tblptru may be non-zero
  2690  000D38                     	endif
  2691  000D38  0008               	tblrd		*
  2692  000D3A  50F5               	movf	tablat,w,c
  2693  000D3C  5E04               	subwf	?___wmul,f,c
  2694  000D3E  0E00               	movlw	0
  2695  000D40  5A05               	subwfb	?___wmul+1,f,c
  2696  000D42  0E30               	movlw	48
  2697  000D44  2404               	addwf	?___wmul,w,c
  2698  000D46  6E18               	movwf	atoi@n,c
  2699  000D48  0E00               	movlw	0
  2700  000D4A  2005               	addwfc	?___wmul+1,w,c
  2701  000D4C  6E19               	movwf	atoi@n+1,c
  2702  000D4E  D7CF               	goto	l1708
  2703  000D50                     l1716:
  2704  000D50  0ED0               	movlw	208
  2705  000D52  6E0D               	movwf	??_atoi& (0+255),c
  2706  000D54  0EFF               	movlw	255
  2707  000D56  6E0E               	movwf	(??_atoi+1)& (0+255),c
  2708  000D58  C00B  FFF6         	movff	atoi@s,tblptrl
  2709  000D5C  C00C  FFF7         	movff	atoi@s+1,tblptrh
  2710  000D60                     	if	0	;tblptru may be non-zero
  2711  000D60                     	endif
  2712  000D60                     	if	0	;tblptru may be non-zero
  2713  000D60                     	endif
  2714  000D60  0008               	tblrd		*
  2715  000D62  50F5               	movf	tablat,w,c
  2716  000D64  6E0F               	movwf	(??_atoi+2)& (0+255),c
  2717  000D66  6A10               	clrf	(??_atoi+3)& (0+255),c
  2718  000D68  500D               	movf	??_atoi,w,c
  2719  000D6A  260F               	addwf	??_atoi+2,f,c
  2720  000D6C  500E               	movf	??_atoi+1,w,c
  2721  000D6E  2210               	addwfc	??_atoi+3,f,c
  2722  000D70  5010               	movf	??_atoi+3,w,c
  2723  000D72  E106               	bnz	u1210
  2724  000D74  0E0A               	movlw	10
  2725  000D76  5C0F               	subwf	??_atoi+2,w,c
  2726  000D78  B0D8               	btfsc	status,0,c
  2727  000D7A  D002               	goto	u1210
  2728  000D7C  0E01               	movlw	1
  2729  000D7E  D001               	goto	u1220
  2730  000D80                     u1210:
  2731  000D80  0E00               	movlw	0
  2732  000D82                     u1220:
  2733  000D82  6E15               	movwf	_atoi$955,c
  2734  000D84  6A16               	clrf	_atoi$955+1,c
  2735  000D86  5015               	movf	_atoi$955,w,c
  2736  000D88  1016               	iorwf	_atoi$955+1,w,c
  2737  000D8A  A4D8               	btfss	status,2,c
  2738  000D8C  D7C7               	goto	l1712
  2739  000D8E  5011               	movf	atoi@neg,w,c
  2740  000D90  1012               	iorwf	atoi@neg+1,w,c
  2741  000D92  A4D8               	btfss	status,2,c
  2742  000D94  D00D               	goto	l887
  2743  000D96  C018  F00D         	movff	atoi@n,??_atoi
  2744  000D9A  C019  F00E         	movff	atoi@n+1,??_atoi+1
  2745  000D9E  1E0D               	comf	??_atoi,f,c
  2746  000DA0  1E0E               	comf	??_atoi+1,f,c
  2747  000DA2  4A0D               	infsnz	??_atoi,f,c
  2748  000DA4  2A0E               	incf	??_atoi+1,f,c
  2749  000DA6  C00D  F00B         	movff	??_atoi,?_atoi
  2750  000DAA  C00E  F00C         	movff	??_atoi+1,?_atoi+1
  2751  000DAE  0012               	return	
  2752  000DB0                     l887:
  2753  000DB0  C018  F00B         	movff	atoi@n,?_atoi
  2754  000DB4  C019  F00C         	movff	atoi@n+1,?_atoi+1
  2755  000DB8  0012               	return		;funcret
  2756  000DBA                     __end_of_atoi:
  2757                           	opt callstack 0
  2758                           
  2759 ;; *************** function _isspace *****************
  2760 ;; Defined at:
  2761 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\isspace.c"
  2762 ;; Parameters:    Size  Location     Type
  2763 ;;  c               2    3[COMRAM] int 
  2764 ;; Auto vars:     Size  Location     Type
  2765 ;;		None
  2766 ;; Return value:  Size  Location     Type
  2767 ;;                  2    3[COMRAM] int 
  2768 ;; Registers used:
  2769 ;;		wreg, status,2, status,0
  2770 ;; Tracked objects:
  2771 ;;		On entry : 0/0
  2772 ;;		On exit  : 0/0
  2773 ;;		Unchanged: 0/0
  2774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2775 ;;      Params:         2       0       0       0       0       0       0
  2776 ;;      Locals:         1       0       0       0       0       0       0
  2777 ;;      Temps:          4       0       0       0       0       0       0
  2778 ;;      Totals:         7       0       0       0       0       0       0
  2779 ;;Total ram usage:        7 bytes
  2780 ;; Hardware stack levels used:    1
  2781 ;; Hardware stack levels required when called:    1
  2782 ;; This function calls:
  2783 ;;		Nothing
  2784 ;; This function is called by:
  2785 ;;		_atoi
  2786 ;; This function uses a non-reentrant model
  2787 ;;
  2788                           
  2789                           	psect	text14
  2790  001348                     __ptext14:
  2791                           	opt callstack 0
  2792  001348                     _isspace:
  2793                           	opt callstack 25
  2794                           
  2795                           ;incstack = 0
  2796  001348  0E01               	movlw	1
  2797  00134A  6E0A               	movwf	_isspace$971,c
  2798  00134C  0E20               	movlw	32
  2799  00134E  1804               	xorwf	isspace@c,w,c
  2800  001350  1005               	iorwf	isspace@c+1,w,c
  2801  001352  B4D8               	btfsc	status,2,c
  2802  001354  D014               	goto	l1610
  2803  001356  0EF7               	movlw	247
  2804  001358  6E06               	movwf	??_isspace& (0+255),c
  2805  00135A  0EFF               	movlw	255
  2806  00135C  6E07               	movwf	(??_isspace+1)& (0+255),c
  2807  00135E  C004  F008         	movff	isspace@c,??_isspace+2
  2808  001362  C005  F009         	movff	isspace@c+1,??_isspace+3
  2809  001366  5006               	movf	??_isspace,w,c
  2810  001368  2608               	addwf	??_isspace+2,f,c
  2811  00136A  5007               	movf	??_isspace+1,w,c
  2812  00136C  2209               	addwfc	??_isspace+3,f,c
  2813  00136E  5009               	movf	??_isspace+3,w,c
  2814  001370  E104               	bnz	u1010
  2815  001372  0E05               	movlw	5
  2816  001374  5C08               	subwf	??_isspace+2,w,c
  2817  001376  A0D8               	btfss	status,0,c
  2818  001378  D002               	goto	l1610
  2819  00137A                     u1010:
  2820  00137A  0E00               	movlw	0
  2821  00137C  6E0A               	movwf	_isspace$971,c
  2822  00137E                     l1610:
  2823  00137E  C00A  F004         	movff	_isspace$971,?_isspace
  2824  001382  6A05               	clrf	?_isspace+1,c
  2825  001384  0012               	return		;funcret
  2826  001386                     __end_of_isspace:
  2827                           	opt callstack 0
  2828                           
  2829 ;; *************** function _isdigit *****************
  2830 ;; Defined at:
  2831 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\isdigit.c"
  2832 ;; Parameters:    Size  Location     Type
  2833 ;;  c               2    3[COMRAM] int 
  2834 ;; Auto vars:     Size  Location     Type
  2835 ;;		None
  2836 ;; Return value:  Size  Location     Type
  2837 ;;                  2    3[COMRAM] int 
  2838 ;; Registers used:
  2839 ;;		wreg, status,2, status,0
  2840 ;; Tracked objects:
  2841 ;;		On entry : 0/0
  2842 ;;		On exit  : 0/0
  2843 ;;		Unchanged: 0/0
  2844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2845 ;;      Params:         2       0       0       0       0       0       0
  2846 ;;      Locals:         0       0       0       0       0       0       0
  2847 ;;      Temps:          4       0       0       0       0       0       0
  2848 ;;      Totals:         6       0       0       0       0       0       0
  2849 ;;Total ram usage:        6 bytes
  2850 ;; Hardware stack levels used:    1
  2851 ;; Hardware stack levels required when called:    1
  2852 ;; This function calls:
  2853 ;;		Nothing
  2854 ;; This function is called by:
  2855 ;;		_vfpfcnvrt
  2856 ;;		_atoi
  2857 ;; This function uses a non-reentrant model
  2858 ;;
  2859                           
  2860                           	psect	text15
  2861  0013F0                     __ptext15:
  2862                           	opt callstack 0
  2863  0013F0                     _isdigit:
  2864                           	opt callstack 26
  2865                           
  2866                           ;incstack = 0
  2867  0013F0  0ED0               	movlw	208
  2868  0013F2  6E06               	movwf	??_isdigit& (0+255),c
  2869  0013F4  0EFF               	movlw	255
  2870  0013F6  6E07               	movwf	(??_isdigit+1)& (0+255),c
  2871  0013F8  C004  F008         	movff	isdigit@c,??_isdigit+2
  2872  0013FC  C005  F009         	movff	isdigit@c+1,??_isdigit+3
  2873  001400  5006               	movf	??_isdigit,w,c
  2874  001402  2608               	addwf	??_isdigit+2,f,c
  2875  001404  5007               	movf	??_isdigit+1,w,c
  2876  001406  2209               	addwfc	??_isdigit+3,f,c
  2877  001408  5009               	movf	??_isdigit+3,w,c
  2878  00140A  E106               	bnz	u850
  2879  00140C  0E0A               	movlw	10
  2880  00140E  5C08               	subwf	??_isdigit+2,w,c
  2881  001410  B0D8               	btfsc	status,0,c
  2882  001412  D002               	goto	u850
  2883  001414  0E01               	movlw	1
  2884  001416  D001               	goto	u860
  2885  001418                     u850:
  2886  001418  0E00               	movlw	0
  2887  00141A                     u860:
  2888  00141A  6E04               	movwf	?_isdigit,c
  2889  00141C  6A05               	clrf	?_isdigit+1,c
  2890  00141E  0012               	return		;funcret
  2891  001420                     __end_of_isdigit:
  2892                           	opt callstack 0
  2893                           
  2894 ;; *************** function ___wmul *****************
  2895 ;; Defined at:
  2896 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
  2897 ;; Parameters:    Size  Location     Type
  2898 ;;  multiplier      2    3[COMRAM] unsigned int 
  2899 ;;  multiplicand    2    5[COMRAM] unsigned int 
  2900 ;; Auto vars:     Size  Location     Type
  2901 ;;  product         2    7[COMRAM] unsigned int 
  2902 ;; Return value:  Size  Location     Type
  2903 ;;                  2    3[COMRAM] unsigned int 
  2904 ;; Registers used:
  2905 ;;		wreg, status,2, status,0, prodl, prodh
  2906 ;; Tracked objects:
  2907 ;;		On entry : 0/0
  2908 ;;		On exit  : 0/0
  2909 ;;		Unchanged: 0/0
  2910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2911 ;;      Params:         4       0       0       0       0       0       0
  2912 ;;      Locals:         2       0       0       0       0       0       0
  2913 ;;      Temps:          0       0       0       0       0       0       0
  2914 ;;      Totals:         6       0       0       0       0       0       0
  2915 ;;Total ram usage:        6 bytes
  2916 ;; Hardware stack levels used:    1
  2917 ;; Hardware stack levels required when called:    1
  2918 ;; This function calls:
  2919 ;;		Nothing
  2920 ;; This function is called by:
  2921 ;;		_atoi
  2922 ;; This function uses a non-reentrant model
  2923 ;;
  2924                           
  2925                           	psect	text16
  2926  001470                     __ptext16:
  2927                           	opt callstack 0
  2928  001470                     ___wmul:
  2929                           	opt callstack 25
  2930                           
  2931                           ;incstack = 0
  2932  001470  5004               	movf	___wmul@multiplier,w,c
  2933  001472  0206               	mulwf	___wmul@multiplicand,c
  2934  001474  CFF3 F008          	movff	prodl,___wmul@product
  2935  001478  CFF4 F009          	movff	prodh,___wmul@product+1
  2936  00147C  5004               	movf	___wmul@multiplier,w,c
  2937  00147E  0207               	mulwf	___wmul@multiplicand+1,c
  2938  001480  50F3               	movf	prodl,w,c
  2939  001482  2609               	addwf	___wmul@product+1,f,c
  2940  001484  5005               	movf	___wmul@multiplier+1,w,c
  2941  001486  0206               	mulwf	___wmul@multiplicand,c
  2942  001488  50F3               	movf	prodl,w,c
  2943  00148A  2609               	addwf	___wmul@product+1,f,c
  2944  00148C  C008  F004         	movff	___wmul@product,?___wmul
  2945  001490  C009  F005         	movff	___wmul@product+1,?___wmul+1
  2946  001494  0012               	return		;funcret
  2947  001496                     __end_of___wmul:
  2948                           	opt callstack 0
  2949                           
  2950 ;; *************** function _lcd_ini *****************
  2951 ;; Defined at:
  2952 ;;		line 3 in file "../Bibliotecas/LCD4b.c"
  2953 ;; Parameters:    Size  Location     Type
  2954 ;;		None
  2955 ;; Auto vars:     Size  Location     Type
  2956 ;;  i               1    8[COMRAM] unsigned char 
  2957 ;; Return value:  Size  Location     Type
  2958 ;;                  1    wreg      void 
  2959 ;; Registers used:
  2960 ;;		wreg, status,2, status,0, cstack
  2961 ;; Tracked objects:
  2962 ;;		On entry : 0/0
  2963 ;;		On exit  : 0/0
  2964 ;;		Unchanged: 0/0
  2965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2966 ;;      Params:         0       0       0       0       0       0       0
  2967 ;;      Locals:         1       0       0       0       0       0       0
  2968 ;;      Temps:          1       0       0       0       0       0       0
  2969 ;;      Totals:         2       0       0       0       0       0       0
  2970 ;;Total ram usage:        2 bytes
  2971 ;; Hardware stack levels used:    1
  2972 ;; Hardware stack levels required when called:    3
  2973 ;; This function calls:
  2974 ;;		_lcd_cmd
  2975 ;; This function is called by:
  2976 ;;		_main
  2977 ;; This function uses a non-reentrant model
  2978 ;;
  2979                           
  2980                           	psect	text17
  2981  00119C                     __ptext17:
  2982                           	opt callstack 0
  2983  00119C                     _lcd_ini:
  2984                           	opt callstack 27
  2985                           
  2986                           ;../Bibliotecas/LCD4b.c: 5: char i;;../Bibliotecas/LCD4b.c: 7: TRISD = 0b00000000;
  2987                           
  2988                           ;incstack = 0
  2989  00119C  0E00               	movlw	0
  2990  00119E  6E95               	movwf	3989,c	;volatile
  2991                           
  2992                           ;../Bibliotecas/LCD4b.c: 8: TRISEbits.TRISE1 = 0;
  2993  0011A0  9296               	bcf	3990,1,c	;volatile
  2994                           
  2995                           ;../Bibliotecas/LCD4b.c: 9: TRISEbits.TRISE0 = 0;
  2996  0011A2  9096               	bcf	3990,0,c	;volatile
  2997                           
  2998                           ;../Bibliotecas/LCD4b.c: 11: PORTD = 0b00000000;
  2999  0011A4  0E00               	movlw	0
  3000  0011A6  6E83               	movwf	3971,c	;volatile
  3001                           
  3002                           ;../Bibliotecas/LCD4b.c: 12: PORTEbits.RE0 = 0;
  3003  0011A8  9084               	bcf	3972,0,c	;volatile
  3004                           
  3005                           ;../Bibliotecas/LCD4b.c: 13: PORTEbits.RE1 = 0;
  3006  0011AA  9284               	bcf	3972,1,c	;volatile
  3007                           
  3008                           ;../Bibliotecas/LCD4b.c: 15: _delay((unsigned long)((15)*(8000000/4000.0)));
  3009  0011AC  0E27               	movlw	39
  3010  0011AE  6E08               	movwf	??_lcd_ini& (0+255),c
  3011  0011B0  0EF5               	movlw	245
  3012  0011B2                     u1477:
  3013  0011B2  2EE8               	decfsz	wreg,f,c
  3014  0011B4  D7FE               	bra	u1477
  3015  0011B6  2E08               	decfsz	??_lcd_ini& (0+255),f,c
  3016  0011B8  D7FC               	bra	u1477
  3017  0011BA  F000               	nop	
  3018                           
  3019                           ;../Bibliotecas/LCD4b.c: 18: for(i=0;i<=2;i++)
  3020  0011BC  0E00               	movlw	0
  3021  0011BE  6E09               	movwf	lcd_ini@i,c
  3022  0011C0                     l1880:
  3023                           
  3024                           ;../Bibliotecas/LCD4b.c: 19:    {;../Bibliotecas/LCD4b.c: 20:    lcd_cmd(0x30);
  3025  0011C0  0E30               	movlw	48
  3026  0011C2  EC6F  F007         	call	_lcd_cmd
  3027                           
  3028                           ;../Bibliotecas/LCD4b.c: 21:    _delay((unsigned long)((5)*(8000000/4000.0)));
  3029  0011C6  0E0D               	movlw	13
  3030  0011C8  6E08               	movwf	??_lcd_ini& (0+255),c
  3031  0011CA  0EFC               	movlw	252
  3032  0011CC                     u1487:
  3033  0011CC  2EE8               	decfsz	wreg,f,c
  3034  0011CE  D7FE               	bra	u1487
  3035  0011D0  2E08               	decfsz	??_lcd_ini& (0+255),f,c
  3036  0011D2  D7FC               	bra	u1487
  3037                           
  3038                           ;../Bibliotecas/LCD4b.c: 22:    }
  3039  0011D4  2A09               	incf	lcd_ini@i,f,c
  3040  0011D6  0E02               	movlw	2
  3041  0011D8  6409               	cpfsgt	lcd_ini@i,c
  3042  0011DA  D7F2               	goto	l1880
  3043                           
  3044                           ;../Bibliotecas/LCD4b.c: 24:    lcd_cmd(0x02);
  3045  0011DC  0E02               	movlw	2
  3046  0011DE  EC6F  F007         	call	_lcd_cmd
  3047                           
  3048                           ;../Bibliotecas/LCD4b.c: 25:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3049  0011E2  0E1A               	movlw	26
  3050  0011E4                     u1497:
  3051  0011E4  2EE8               	decfsz	wreg,f,c
  3052  0011E6  D7FE               	bra	u1497
  3053  0011E8  D000               	nop2	
  3054                           
  3055                           ;../Bibliotecas/LCD4b.c: 26:    lcd_cmd(0x28);
  3056  0011EA  0E28               	movlw	40
  3057  0011EC  EC6F  F007         	call	_lcd_cmd
  3058                           
  3059                           ;../Bibliotecas/LCD4b.c: 27:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3060  0011F0  0E1A               	movlw	26
  3061  0011F2                     u1507:
  3062  0011F2  2EE8               	decfsz	wreg,f,c
  3063  0011F4  D7FE               	bra	u1507
  3064  0011F6  D000               	nop2	
  3065                           
  3066                           ;../Bibliotecas/LCD4b.c: 28:    lcd_cmd(0x01);
  3067  0011F8  0E01               	movlw	1
  3068  0011FA  EC6F  F007         	call	_lcd_cmd
  3069                           
  3070                           ;../Bibliotecas/LCD4b.c: 29:    _delay((unsigned long)((2)*(8000000/4000.0)));
  3071  0011FE  0E06               	movlw	6
  3072  001200  6E08               	movwf	??_lcd_ini& (0+255),c
  3073  001202  0E30               	movlw	48
  3074  001204                     u1517:
  3075  001204  2EE8               	decfsz	wreg,f,c
  3076  001206  D7FE               	bra	u1517
  3077  001208  2E08               	decfsz	??_lcd_ini& (0+255),f,c
  3078  00120A  D7FC               	bra	u1517
  3079  00120C  D000               	nop2	
  3080                           
  3081                           ;../Bibliotecas/LCD4b.c: 30:    lcd_cmd(0x0C);
  3082  00120E  0E0C               	movlw	12
  3083  001210  EC6F  F007         	call	_lcd_cmd
  3084                           
  3085                           ;../Bibliotecas/LCD4b.c: 31:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3086  001214  0E1A               	movlw	26
  3087  001216                     u1527:
  3088  001216  2EE8               	decfsz	wreg,f,c
  3089  001218  D7FE               	bra	u1527
  3090  00121A  D000               	nop2	
  3091                           
  3092                           ;../Bibliotecas/LCD4b.c: 32:    lcd_cmd(0x06);
  3093  00121C  0E06               	movlw	6
  3094  00121E  EC6F  F007         	call	_lcd_cmd
  3095                           
  3096                           ;../Bibliotecas/LCD4b.c: 33:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3097  001222  0E1A               	movlw	26
  3098  001224                     u1537:
  3099  001224  2EE8               	decfsz	wreg,f,c
  3100  001226  D7FE               	bra	u1537
  3101  001228  D000               	nop2	
  3102  00122A  0012               	return		;funcret
  3103  00122C                     __end_of_lcd_ini:
  3104                           	opt callstack 0
  3105                           
  3106 ;; *************** function _lcd_escreve_bf *****************
  3107 ;; Defined at:
  3108 ;;		line 82 in file "../Bibliotecas/LCD4b.c"
  3109 ;; Parameters:    Size  Location     Type
  3110 ;;  lin             1    wreg     unsigned char 
  3111 ;;  col             1    9[COMRAM] unsigned char 
  3112 ;;  str             2   10[COMRAM] PTR unsigned char 
  3113 ;;		 -> bufferLCD(16), STR_2(13), STR_1(7), 
  3114 ;; Auto vars:     Size  Location     Type
  3115 ;;  lin             1   13[COMRAM] unsigned char 
  3116 ;;  end             1   12[COMRAM] unsigned char 
  3117 ;; Return value:  Size  Location     Type
  3118 ;;                  1    wreg      void 
  3119 ;; Registers used:
  3120 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3121 ;; Tracked objects:
  3122 ;;		On entry : 0/0
  3123 ;;		On exit  : 0/0
  3124 ;;		Unchanged: 0/0
  3125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3126 ;;      Params:         3       0       0       0       0       0       0
  3127 ;;      Locals:         2       0       0       0       0       0       0
  3128 ;;      Temps:          0       0       0       0       0       0       0
  3129 ;;      Totals:         5       0       0       0       0       0       0
  3130 ;;Total ram usage:        5 bytes
  3131 ;; Hardware stack levels used:    1
  3132 ;; Hardware stack levels required when called:    4
  3133 ;; This function calls:
  3134 ;;		_lcd_envia_byte
  3135 ;; This function is called by:
  3136 ;;		_main
  3137 ;; This function uses a non-reentrant model
  3138 ;;
  3139                           
  3140                           	psect	text18
  3141  00122C                     __ptext18:
  3142                           	opt callstack 0
  3143  00122C                     _lcd_escreve_bf:
  3144                           	opt callstack 26
  3145                           
  3146                           ;incstack = 0
  3147                           ;lcd_escreve_bf@lin stored from wreg
  3148  00122C  6E0E               	movwf	lcd_escreve_bf@lin,c
  3149                           
  3150                           ;../Bibliotecas/LCD4b.c: 82: void lcd_escreve_bf(char lin, char col, char *str);../Bibli
      +                          otecas/LCD4b.c: 83: {;../Bibliotecas/LCD4b.c: 84:     char end;;../Bibliotecas/LCD4b.c: 
      +                          87:     if (lin == 1) {
  3151  00122E  040E               	decf	lcd_escreve_bf@lin,w,c
  3152  001230  A4D8               	btfss	status,2,c
  3153  001232  D003               	goto	l1906
  3154                           
  3155                           ;../Bibliotecas/LCD4b.c: 88:         end = col + 0x80 - 1;
  3156  001234  500A               	movf	lcd_escreve_bf@col,w,c
  3157  001236  0F7F               	addlw	127
  3158  001238  D006               	goto	L3
  3159  00123A                     l1906:
  3160  00123A  0E02               	movlw	2
  3161  00123C  180E               	xorwf	lcd_escreve_bf@lin,w,c
  3162  00123E  A4D8               	btfss	status,2,c
  3163  001240  D003               	goto	l1910
  3164                           
  3165                           ;../Bibliotecas/LCD4b.c: 91:         end = col + 0xC0 - 1;
  3166  001242  500A               	movf	lcd_escreve_bf@col,w,c
  3167  001244  0FBF               	addlw	191
  3168  001246                     L3:
  3169  001246  6E0D               	movwf	lcd_escreve_bf@end,c
  3170  001248                     l1910:
  3171                           
  3172                           ;../Bibliotecas/LCD4b.c: 94:     lcd_envia_byte(0,end);
  3173  001248  C00D  F008         	movff	lcd_escreve_bf@end,lcd_envia_byte@dado
  3174  00124C  0E00               	movlw	0
  3175  00124E  EC4B  F00A         	call	_lcd_envia_byte
  3176                           
  3177                           ;../Bibliotecas/LCD4b.c: 98:     while (*str){
  3178  001252  D016               	goto	l1916
  3179  001254                     l1912:
  3180                           
  3181                           ;../Bibliotecas/LCD4b.c: 99:         lcd_envia_byte(1,*str);
  3182  001254  C00B  FFF6         	movff	lcd_escreve_bf@str,tblptrl
  3183  001258  C00C  FFF7         	movff	lcd_escreve_bf@str+1,tblptrh
  3184  00125C  6AF8               	clrf	tblptru,c
  3185  00125E  0E05               	movlw	(high __ramtop+-1)
  3186  001260  64F7               	cpfsgt	tblptrh,c
  3187  001262  D003               	bra	u1417
  3188  001264  0008               	tblrd		*
  3189  001266  50F5               	movf	tablat,w,c
  3190  001268  D005               	bra	u1410
  3191  00126A                     u1417:
  3192  00126A  CFF6 FFE1          	movff	tblptrl,fsr1l
  3193  00126E  CFF7 FFE2          	movff	tblptrh,fsr1h
  3194  001272  50E7               	movf	indf1,w,c
  3195  001274                     u1410:
  3196  001274  6E08               	movwf	lcd_envia_byte@dado,c
  3197  001276  0E01               	movlw	1
  3198  001278  EC4B  F00A         	call	_lcd_envia_byte
  3199                           
  3200                           ;../Bibliotecas/LCD4b.c: 100:         str++;
  3201  00127C  4A0B               	infsnz	lcd_escreve_bf@str,f,c
  3202  00127E  2A0C               	incf	lcd_escreve_bf@str+1,f,c
  3203  001280                     l1916:
  3204                           
  3205                           ;../Bibliotecas/LCD4b.c: 98:     while (*str){
  3206  001280  C00B  FFF6         	movff	lcd_escreve_bf@str,tblptrl
  3207  001284  C00C  FFF7         	movff	lcd_escreve_bf@str+1,tblptrh
  3208  001288  6AF8               	clrf	tblptru,c
  3209  00128A  0E05               	movlw	(high __ramtop+-1)
  3210  00128C  64F7               	cpfsgt	tblptrh,c
  3211  00128E  D003               	bra	u1427
  3212  001290  0008               	tblrd		*
  3213  001292  50F5               	movf	tablat,w,c
  3214  001294  D005               	bra	u1420
  3215  001296                     u1427:
  3216  001296  CFF6 FFE1          	movff	tblptrl,fsr1l
  3217  00129A  CFF7 FFE2          	movff	tblptrh,fsr1h
  3218  00129E  50E7               	movf	indf1,w,c
  3219  0012A0                     u1420:
  3220  0012A0  0900               	iorlw	0
  3221  0012A2  B4D8               	btfsc	status,2,c
  3222  0012A4  0012               	return	
  3223  0012A6  D7D6               	goto	l1912
  3224  0012A8                     __end_of_lcd_escreve_bf:
  3225                           	opt callstack 0
  3226                           
  3227 ;; *************** function _lcd_envia_byte *****************
  3228 ;; Defined at:
  3229 ;;		line 74 in file "../Bibliotecas/LCD4b.c"
  3230 ;; Parameters:    Size  Location     Type
  3231 ;;  nivel           1    wreg     unsigned char 
  3232 ;;  dado            1    7[COMRAM] unsigned char 
  3233 ;; Auto vars:     Size  Location     Type
  3234 ;;  nivel           1    8[COMRAM] unsigned char 
  3235 ;; Return value:  Size  Location     Type
  3236 ;;                  1    wreg      void 
  3237 ;; Registers used:
  3238 ;;		wreg, status,2, status,0, cstack
  3239 ;; Tracked objects:
  3240 ;;		On entry : 0/0
  3241 ;;		On exit  : 0/0
  3242 ;;		Unchanged: 0/0
  3243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3244 ;;      Params:         1       0       0       0       0       0       0
  3245 ;;      Locals:         1       0       0       0       0       0       0
  3246 ;;      Temps:          0       0       0       0       0       0       0
  3247 ;;      Totals:         2       0       0       0       0       0       0
  3248 ;;Total ram usage:        2 bytes
  3249 ;; Hardware stack levels used:    1
  3250 ;; Hardware stack levels required when called:    3
  3251 ;; This function calls:
  3252 ;;		_lcd_cmd
  3253 ;; This function is called by:
  3254 ;;		_lcd_escreve_bf
  3255 ;; This function uses a non-reentrant model
  3256 ;;
  3257                           
  3258                           	psect	text19
  3259  001496                     __ptext19:
  3260                           	opt callstack 0
  3261  001496                     _lcd_envia_byte:
  3262                           	opt callstack 26
  3263                           
  3264                           ;incstack = 0
  3265                           ;lcd_envia_byte@nivel stored from wreg
  3266  001496  6E09               	movwf	lcd_envia_byte@nivel,c
  3267                           
  3268                           ;../Bibliotecas/LCD4b.c: 74: void lcd_envia_byte(char nivel, char dado);../Bibliotecas/L
      +                          CD4b.c: 75: {;../Bibliotecas/LCD4b.c: 76:     PORTEbits.RE0 = nivel;
  3269  001498  B009               	btfsc	lcd_envia_byte@nivel,0,c
  3270  00149A  D002               	bra	u1365
  3271  00149C  9084               	bcf	3972,0,c	;volatile
  3272  00149E  D001               	bra	u1366
  3273  0014A0                     u1365:
  3274  0014A0  8084               	bsf	3972,0,c	;volatile
  3275  0014A2                     u1366:
  3276                           
  3277                           ;../Bibliotecas/LCD4b.c: 77:     _delay((unsigned long)((100)*(8000000/4000000.0)));
  3278  0014A2  0E42               	movlw	66
  3279  0014A4                     u1547:
  3280  0014A4  2EE8               	decfsz	wreg,f,c
  3281  0014A6  D7FE               	bra	u1547
  3282  0014A8  D000               	nop2	
  3283                           
  3284                           ;../Bibliotecas/LCD4b.c: 78:     PORTEbits.RE1 = 0;
  3285  0014AA  9284               	bcf	3972,1,c	;volatile
  3286                           
  3287                           ;../Bibliotecas/LCD4b.c: 79:     lcd_cmd(dado);
  3288  0014AC  5008               	movf	lcd_envia_byte@dado,w,c
  3289  0014AE  EC6F  F007         	call	_lcd_cmd
  3290  0014B2  0012               	return		;funcret
  3291  0014B4                     __end_of_lcd_envia_byte:
  3292                           	opt callstack 0
  3293                           
  3294 ;; *************** function _lcd_cmd *****************
  3295 ;; Defined at:
  3296 ;;		line 48 in file "../Bibliotecas/LCD4b.c"
  3297 ;; Parameters:    Size  Location     Type
  3298 ;;  cmd             1    wreg     unsigned char 
  3299 ;; Auto vars:     Size  Location     Type
  3300 ;;  cmd             1    6[COMRAM] unsigned char 
  3301 ;; Return value:  Size  Location     Type
  3302 ;;                  1    wreg      void 
  3303 ;; Registers used:
  3304 ;;		wreg, status,2, status,0, cstack
  3305 ;; Tracked objects:
  3306 ;;		On entry : 0/0
  3307 ;;		On exit  : 0/0
  3308 ;;		Unchanged: 0/0
  3309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3310 ;;      Params:         0       0       0       0       0       0       0
  3311 ;;      Locals:         1       0       0       0       0       0       0
  3312 ;;      Temps:          1       0       0       0       0       0       0
  3313 ;;      Totals:         2       0       0       0       0       0       0
  3314 ;;Total ram usage:        2 bytes
  3315 ;; Hardware stack levels used:    1
  3316 ;; Hardware stack levels required when called:    2
  3317 ;; This function calls:
  3318 ;;		_set_bit
  3319 ;; This function is called by:
  3320 ;;		_lcd_ini
  3321 ;;		_lcd_envia_byte
  3322 ;; This function uses a non-reentrant model
  3323 ;;
  3324                           
  3325                           	psect	text20
  3326  000EDE                     __ptext20:
  3327                           	opt callstack 0
  3328  000EDE                     _lcd_cmd:
  3329                           	opt callstack 27
  3330                           
  3331                           ;incstack = 0
  3332                           ;lcd_cmd@cmd stored from wreg
  3333  000EDE  6E07               	movwf	lcd_cmd@cmd,c
  3334                           
  3335                           ;../Bibliotecas/LCD4b.c: 48: void lcd_cmd(char cmd);../Bibliotecas/LCD4b.c: 49: {;../Bib
      +                          liotecas/LCD4b.c: 52:     PORTDbits.RD4 = set_bit(cmd,0b00010000);
  3336  000EE0  0E10               	movlw	16
  3337  000EE2  6E04               	movwf	set_bit@comp,c
  3338  000EE4  5007               	movf	lcd_cmd@cmd,w,c
  3339  000EE6  EC5A  F00A         	call	_set_bit
  3340  000EEA  6E06               	movwf	??_lcd_cmd& (0+255),c
  3341  000EEC  3A06               	swapf	??_lcd_cmd,f,c
  3342  000EEE  5083               	movf	3971,w,c	;volatile
  3343  000EF0  1806               	xorwf	??_lcd_cmd,w,c
  3344  000EF2  0BEF               	andlw	-17
  3345  000EF4  1806               	xorwf	??_lcd_cmd,w,c
  3346  000EF6  6E83               	movwf	3971,c	;volatile
  3347                           
  3348                           ;../Bibliotecas/LCD4b.c: 53:     PORTDbits.RD5 = set_bit(cmd,0b00100000);
  3349  000EF8  0E20               	movlw	32
  3350  000EFA  6E04               	movwf	set_bit@comp,c
  3351  000EFC  5007               	movf	lcd_cmd@cmd,w,c
  3352  000EFE  EC5A  F00A         	call	_set_bit
  3353  000F02  6E06               	movwf	??_lcd_cmd& (0+255),c
  3354  000F04  3A06               	swapf	??_lcd_cmd,f,c
  3355  000F06  4606               	rlncf	??_lcd_cmd,f,c
  3356  000F08  5083               	movf	3971,w,c	;volatile
  3357  000F0A  1806               	xorwf	??_lcd_cmd,w,c
  3358  000F0C  0BDF               	andlw	-33
  3359  000F0E  1806               	xorwf	??_lcd_cmd,w,c
  3360  000F10  6E83               	movwf	3971,c	;volatile
  3361                           
  3362                           ;../Bibliotecas/LCD4b.c: 54:     PORTDbits.RD6 = set_bit(cmd,0b01000000);
  3363  000F12  0E40               	movlw	64
  3364  000F14  6E04               	movwf	set_bit@comp,c
  3365  000F16  5007               	movf	lcd_cmd@cmd,w,c
  3366  000F18  EC5A  F00A         	call	_set_bit
  3367  000F1C  6E06               	movwf	??_lcd_cmd& (0+255),c
  3368  000F1E  3A06               	swapf	??_lcd_cmd,f,c
  3369  000F20  4606               	rlncf	??_lcd_cmd,f,c
  3370  000F22  4606               	rlncf	??_lcd_cmd,f,c
  3371  000F24  5083               	movf	3971,w,c	;volatile
  3372  000F26  1806               	xorwf	??_lcd_cmd,w,c
  3373  000F28  0BBF               	andlw	-65
  3374  000F2A  1806               	xorwf	??_lcd_cmd,w,c
  3375  000F2C  6E83               	movwf	3971,c	;volatile
  3376                           
  3377                           ;../Bibliotecas/LCD4b.c: 55:     PORTDbits.RD7 = set_bit(cmd,0b10000000);
  3378  000F2E  0E80               	movlw	128
  3379  000F30  6E04               	movwf	set_bit@comp,c
  3380  000F32  5007               	movf	lcd_cmd@cmd,w,c
  3381  000F34  EC5A  F00A         	call	_set_bit
  3382  000F38  6E06               	movwf	??_lcd_cmd& (0+255),c
  3383  000F3A  3206               	rrcf	??_lcd_cmd,f,c
  3384  000F3C  3206               	rrcf	??_lcd_cmd,f,c
  3385  000F3E  5083               	movf	3971,w,c	;volatile
  3386  000F40  1806               	xorwf	??_lcd_cmd,w,c
  3387  000F42  0B7F               	andlw	-129
  3388  000F44  1806               	xorwf	??_lcd_cmd,w,c
  3389  000F46  6E83               	movwf	3971,c	;volatile
  3390                           
  3391                           ;../Bibliotecas/LCD4b.c: 57:     PORTEbits.RE1 = 1;
  3392  000F48  8284               	bsf	3972,1,c	;volatile
  3393                           
  3394                           ;../Bibliotecas/LCD4b.c: 58:     PORTEbits.RE1 = 0;
  3395  000F4A  9284               	bcf	3972,1,c	;volatile
  3396                           
  3397                           ;../Bibliotecas/LCD4b.c: 60:     _delay((unsigned long)((100)*(8000000/4000000.0)));
  3398  000F4C  0E42               	movlw	66
  3399  000F4E                     u1557:
  3400  000F4E  2EE8               	decfsz	wreg,f,c
  3401  000F50  D7FE               	bra	u1557
  3402  000F52  D000               	nop2	
  3403                           
  3404                           ;../Bibliotecas/LCD4b.c: 64:     PORTDbits.RD4 = set_bit(cmd,0b00000001);
  3405  000F54  0E01               	movlw	1
  3406  000F56  6E04               	movwf	set_bit@comp,c
  3407  000F58  5007               	movf	lcd_cmd@cmd,w,c
  3408  000F5A  EC5A  F00A         	call	_set_bit
  3409  000F5E  6E06               	movwf	??_lcd_cmd& (0+255),c
  3410  000F60  3A06               	swapf	??_lcd_cmd,f,c
  3411  000F62  5083               	movf	3971,w,c	;volatile
  3412  000F64  1806               	xorwf	??_lcd_cmd,w,c
  3413  000F66  0BEF               	andlw	-17
  3414  000F68  1806               	xorwf	??_lcd_cmd,w,c
  3415  000F6A  6E83               	movwf	3971,c	;volatile
  3416                           
  3417                           ;../Bibliotecas/LCD4b.c: 65:     PORTDbits.RD5 = set_bit(cmd,0b00000010);
  3418  000F6C  0E02               	movlw	2
  3419  000F6E  6E04               	movwf	set_bit@comp,c
  3420  000F70  5007               	movf	lcd_cmd@cmd,w,c
  3421  000F72  EC5A  F00A         	call	_set_bit
  3422  000F76  6E06               	movwf	??_lcd_cmd& (0+255),c
  3423  000F78  3A06               	swapf	??_lcd_cmd,f,c
  3424  000F7A  4606               	rlncf	??_lcd_cmd,f,c
  3425  000F7C  5083               	movf	3971,w,c	;volatile
  3426  000F7E  1806               	xorwf	??_lcd_cmd,w,c
  3427  000F80  0BDF               	andlw	-33
  3428  000F82  1806               	xorwf	??_lcd_cmd,w,c
  3429  000F84  6E83               	movwf	3971,c	;volatile
  3430                           
  3431                           ;../Bibliotecas/LCD4b.c: 66:     PORTDbits.RD6 = set_bit(cmd,0b00000100);
  3432  000F86  0E04               	movlw	4
  3433  000F88  6E04               	movwf	set_bit@comp,c
  3434  000F8A  5007               	movf	lcd_cmd@cmd,w,c
  3435  000F8C  EC5A  F00A         	call	_set_bit
  3436  000F90  6E06               	movwf	??_lcd_cmd& (0+255),c
  3437  000F92  3A06               	swapf	??_lcd_cmd,f,c
  3438  000F94  4606               	rlncf	??_lcd_cmd,f,c
  3439  000F96  4606               	rlncf	??_lcd_cmd,f,c
  3440  000F98  5083               	movf	3971,w,c	;volatile
  3441  000F9A  1806               	xorwf	??_lcd_cmd,w,c
  3442  000F9C  0BBF               	andlw	-65
  3443  000F9E  1806               	xorwf	??_lcd_cmd,w,c
  3444  000FA0  6E83               	movwf	3971,c	;volatile
  3445                           
  3446                           ;../Bibliotecas/LCD4b.c: 67:     PORTDbits.RD7 = set_bit(cmd,0b00001000);
  3447  000FA2  0E08               	movlw	8
  3448  000FA4  6E04               	movwf	set_bit@comp,c
  3449  000FA6  5007               	movf	lcd_cmd@cmd,w,c
  3450  000FA8  EC5A  F00A         	call	_set_bit
  3451  000FAC  6E06               	movwf	??_lcd_cmd& (0+255),c
  3452  000FAE  3206               	rrcf	??_lcd_cmd,f,c
  3453  000FB0  3206               	rrcf	??_lcd_cmd,f,c
  3454  000FB2  5083               	movf	3971,w,c	;volatile
  3455  000FB4  1806               	xorwf	??_lcd_cmd,w,c
  3456  000FB6  0B7F               	andlw	-129
  3457  000FB8  1806               	xorwf	??_lcd_cmd,w,c
  3458  000FBA  6E83               	movwf	3971,c	;volatile
  3459                           
  3460                           ;../Bibliotecas/LCD4b.c: 69:     PORTEbits.RE1 = 1;
  3461  000FBC  8284               	bsf	3972,1,c	;volatile
  3462                           
  3463                           ;../Bibliotecas/LCD4b.c: 70:     PORTEbits.RE1 = 0;
  3464  000FBE  9284               	bcf	3972,1,c	;volatile
  3465  000FC0  0012               	return		;funcret
  3466  000FC2                     __end_of_lcd_cmd:
  3467                           	opt callstack 0
  3468                           
  3469 ;; *************** function _set_bit *****************
  3470 ;; Defined at:
  3471 ;;		line 38 in file "../Bibliotecas/LCD4b.c"
  3472 ;; Parameters:    Size  Location     Type
  3473 ;;  cmd             1    wreg     unsigned char 
  3474 ;;  comp            1    3[COMRAM] unsigned char 
  3475 ;; Auto vars:     Size  Location     Type
  3476 ;;  cmd             1    4[COMRAM] unsigned char 
  3477 ;; Return value:  Size  Location     Type
  3478 ;;                  1    wreg      unsigned char 
  3479 ;; Registers used:
  3480 ;;		wreg, status,2, status,0
  3481 ;; Tracked objects:
  3482 ;;		On entry : 0/0
  3483 ;;		On exit  : 0/0
  3484 ;;		Unchanged: 0/0
  3485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3486 ;;      Params:         1       0       0       0       0       0       0
  3487 ;;      Locals:         1       0       0       0       0       0       0
  3488 ;;      Temps:          0       0       0       0       0       0       0
  3489 ;;      Totals:         2       0       0       0       0       0       0
  3490 ;;Total ram usage:        2 bytes
  3491 ;; Hardware stack levels used:    1
  3492 ;; Hardware stack levels required when called:    1
  3493 ;; This function calls:
  3494 ;;		Nothing
  3495 ;; This function is called by:
  3496 ;;		_lcd_cmd
  3497 ;; This function uses a non-reentrant model
  3498 ;;
  3499                           
  3500                           	psect	text21
  3501  0014B4                     __ptext21:
  3502                           	opt callstack 0
  3503  0014B4                     _set_bit:
  3504                           	opt callstack 27
  3505                           
  3506                           ;incstack = 0
  3507                           ;set_bit@cmd stored from wreg
  3508  0014B4  6E05               	movwf	set_bit@cmd,c
  3509                           
  3510                           ;../Bibliotecas/LCD4b.c: 38: char set_bit(char cmd, char comp);../Bibliotecas/LCD4b.c: 3
      +                          9: {;../Bibliotecas/LCD4b.c: 41:     if ((cmd & comp) >= 1)
  3511  0014B6  5005               	movf	set_bit@cmd,w,c
  3512  0014B8  1404               	andwf	set_bit@comp,w,c
  3513  0014BA  0900               	iorlw	0
  3514  0014BC  B4D8               	btfsc	status,2,c
  3515  0014BE  D002               	goto	l1622
  3516                           
  3517                           ;../Bibliotecas/LCD4b.c: 42:         return 1;
  3518  0014C0  0E01               	movlw	1
  3519  0014C2  0012               	return	
  3520  0014C4                     l1622:
  3521                           
  3522                           ;../Bibliotecas/LCD4b.c: 44:         return 0;
  3523  0014C4  0E00               	movlw	0
  3524  0014C6  0012               	return		;funcret
  3525  0014C8                     __end_of_set_bit:
  3526                           	opt callstack 0
  3527                           
  3528 ;; *************** function _int_TMR0 *****************
  3529 ;; Defined at:
  3530 ;;		line 11 in file "EX14.c"
  3531 ;; Parameters:    Size  Location     Type
  3532 ;;		None
  3533 ;; Auto vars:     Size  Location     Type
  3534 ;;		None
  3535 ;; Return value:  Size  Location     Type
  3536 ;;                  1    wreg      void 
  3537 ;; Registers used:
  3538 ;;		wreg, status,2, status,0
  3539 ;; Tracked objects:
  3540 ;;		On entry : 0/0
  3541 ;;		On exit  : 0/0
  3542 ;;		Unchanged: 0/0
  3543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3544 ;;      Params:         0       0       0       0       0       0       0
  3545 ;;      Locals:         0       0       0       0       0       0       0
  3546 ;;      Temps:          3       0       0       0       0       0       0
  3547 ;;      Totals:         3       0       0       0       0       0       0
  3548 ;;Total ram usage:        3 bytes
  3549 ;; Hardware stack levels used:    1
  3550 ;; This function calls:
  3551 ;;		Nothing
  3552 ;; This function is called by:
  3553 ;;		Interrupt level 1
  3554 ;; This function uses a non-reentrant model
  3555 ;;
  3556                           
  3557                           	psect	intcodelo
  3558  000018                     __pintcodelo:
  3559                           	opt callstack 0
  3560  000018                     _int_TMR0:
  3561                           	opt callstack 22
  3562                           
  3563                           ;incstack = 0
  3564  000018  807B               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  3565  00001A  CFD8 F001          	movff	status,??_int_TMR0
  3566  00001E  CFE8 F002          	movff	wreg,??_int_TMR0+1
  3567  000022  CFE0 F003          	movff	bsr,??_int_TMR0+2
  3568                           
  3569                           ;EX14.c: 13:     if (TMR0IF)
  3570  000026  A4F2               	btfss	4082,2,c	;volatile
  3571  000028  D00E               	goto	i1l31
  3572                           
  3573                           ;EX14.c: 14:     {;EX14.c: 15:      conta++;
  3574  00002A  4A79               	infsnz	_conta,f,c
  3575  00002C  2A7A               	incf	_conta+1,f,c
  3576                           
  3577                           ;EX14.c: 16:      if (conta>=100) conta = 0;
  3578  00002E  BE7A               	btfsc	_conta+1,7,c
  3579  000030  D00A               	goto	i1l31
  3580  000032  507A               	movf	_conta+1,w,c
  3581  000034  E104               	bnz	i1u72_20
  3582  000036  0E64               	movlw	100
  3583  000038  5C79               	subwf	_conta,w,c
  3584  00003A  A0D8               	btfss	status,0,c
  3585  00003C  D004               	goto	i1l31
  3586  00003E                     i1u72_20:
  3587  00003E  0E00               	movlw	0
  3588  000040  6E7A               	movwf	_conta+1,c
  3589  000042  0E00               	movlw	0
  3590  000044  6E79               	movwf	_conta,c
  3591  000046                     i1l31:
  3592                           
  3593                           ;EX14.c: 18:     TMR0 = 251;
  3594  000046  0E00               	movlw	0
  3595  000048  6ED7               	movwf	4055,c	;volatile
  3596  00004A  0EFB               	movlw	251
  3597  00004C  6ED6               	movwf	4054,c	;volatile
  3598                           
  3599                           ;EX14.c: 19:     TMR0IF = 0;
  3600  00004E  94F2               	bcf	4082,2,c	;volatile
  3601  000050  C003  FFE0         	movff	??_int_TMR0+2,bsr
  3602  000054  C002  FFE8         	movff	??_int_TMR0+1,wreg
  3603  000058  C001  FFD8         	movff	??_int_TMR0,status
  3604  00005C  907B               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  3605  00005E  0010               	retfie	
  3606  000060                     __end_of_int_TMR0:
  3607                           	opt callstack 0
  3608                           
  3609                           	psect	rparam
  3610  0000                     
  3611                           	psect	temp
  3612  00007B                     btemp:
  3613                           	opt callstack 0
  3614  00007B                     	ds	1
  3615  0000                     int$flags	set	btemp
  3616  0000                     wtemp8	set	btemp+1
  3617  0000                     ttemp5	set	btemp+1
  3618  0000                     ttemp6	set	btemp+4
  3619  0000                     ttemp7	set	btemp+8
  3620                           tosu	equ	0xFFF
  3621                           tosh	equ	0xFFE
  3622                           tosl	equ	0xFFD
  3623                           stkptr	equ	0xFFC
  3624                           pclatu	equ	0xFFB
  3625                           pclath	equ	0xFFA
  3626                           pcl	equ	0xFF9
  3627                           tblptru	equ	0xFF8
  3628                           tblptrh	equ	0xFF7
  3629                           tblptrl	equ	0xFF6
  3630                           tablat	equ	0xFF5
  3631                           prodh	equ	0xFF4
  3632                           prodl	equ	0xFF3
  3633                           indf0	equ	0xFEF
  3634                           postinc0	equ	0xFEE
  3635                           postdec0	equ	0xFED
  3636                           preinc0	equ	0xFEC
  3637                           plusw0	equ	0xFEB
  3638                           fsr0h	equ	0xFEA
  3639                           fsr0l	equ	0xFE9
  3640                           wreg	equ	0xFE8
  3641                           indf1	equ	0xFE7
  3642                           postinc1	equ	0xFE6
  3643                           postdec1	equ	0xFE5
  3644                           preinc1	equ	0xFE4
  3645                           plusw1	equ	0xFE3
  3646                           fsr1h	equ	0xFE2
  3647                           fsr1l	equ	0xFE1
  3648                           bsr	equ	0xFE0
  3649                           indf2	equ	0xFDF
  3650                           postinc2	equ	0xFDE
  3651                           postdec2	equ	0xFDD
  3652                           preinc2	equ	0xFDC
  3653                           plusw2	equ	0xFDB
  3654                           fsr2h	equ	0xFDA
  3655                           fsr2l	equ	0xFD9
  3656                           status	equ	0xFD8


Data Sizes:
    Strings     25
    Constant    0
    Data        0
    BSS         58
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    112     122
    BANK0           128      2      50
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_3(CODE[5]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    S975_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_3(CODE[5]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_3(CODE[5]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 5
		 -> STR_3(CODE[5]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    lcd_escreve_bf@str	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), STR_2(CODE[13]), STR_1(CODE[7]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _atoi->_isspace
    _lcd_ini->_lcd_cmd
    _lcd_escreve_bf->_lcd_envia_byte
    _lcd_envia_byte->_lcd_cmd
    _lcd_cmd->_set_bit

Critical Paths under _int_TMR0 in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _int_TMR0 in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _int_TMR0 in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _int_TMR0 in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _int_TMR0 in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _int_TMR0 in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _int_TMR0 in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   10803
                                              0 BANK0      2     2      0
                     _lcd_escreve_bf
                            _lcd_ini
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             16    10      6    8292
                                             96 COMRAM    16    10      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    7939
                                             88 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           46    40      6    7566
                                             66 COMRAM    22    16      6
                               _atoi
                               _dtoa
                              _fputc
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                36    26     10    4358
                                             30 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    2709
                                             19 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     166
                                              3 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1235
                                             12 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     834
                                              3 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                             21 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     448
                                              3 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     452
                                              3 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (4) _atoi                                                15    13      2    1244
                                             10 COMRAM    15    13      2
                             ___wmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (5) _isspace                                              7     5      2     207
                                              3 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              6     4      2     237
                                              3 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     403
                                              3 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _lcd_ini                                              2     2      0     874
                                              7 COMRAM     2     2      0
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (1) _lcd_escreve_bf                                       5     2      3    1637
                                              9 COMRAM     5     2      3
                     _lcd_envia_byte
 ---------------------------------------------------------------------------------
 (2) _lcd_envia_byte                                       2     1      1    1024
                                              7 COMRAM     2     1      1
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (2) _lcd_cmd                                              2     2      0     828
                                              5 COMRAM     2     2      0
                            _set_bit
 ---------------------------------------------------------------------------------
 (3) _set_bit                                              2     1      1     652
                                              3 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _int_TMR0                                             3     3      0       0
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _lcd_escreve_bf
     _lcd_envia_byte
       _lcd_cmd
         _set_bit
   _lcd_ini
     _lcd_cmd
       _set_bit
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _atoi
           ___wmul
           _isdigit
           _isspace
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
                 _putch
             _strlen
         _fputc
           _putch
         _isdigit

 _int_TMR0 (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      2      32       5       39.1%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     70      7A       1       96.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      AC      15        0.0%
DATA                 0      0      AC       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Thu Apr 04 14:57:28 2019

                     bsr 000FE0      ___wmul@multiplicand 0006              __CFG_BORV$3 000000  
           __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000  
           __CFG_CP3$OFF 000000              __CFG_OSC$HS 000000                      l111 1134  
                    l122 0962                      l124 096A                      l856 13E6  
                    l887 0DB0             __CFG_CPB$OFF 000000             __CFG_CPD$OFF 000000  
                    u910 0BC4                      u750 1076                      u840 13CC  
                    u850 1418                      u770 10BE                      u860 141A  
                    u970 0E3C                      u891 0B8C                      _abs 13BE  
                    _pad 1106                      wreg 000FE8             __CFG_LVP$OFF 000000  
           __CFG_WDT$OFF 000000                     ?_abs 0016                     l1500 1156  
                   l1504 1182                     l1610 137E                     l1530 0B5E  
                   l1700 0CD6                     l1460 107E                     l1622 14C4  
                   l1710 0CF4                     l1542 0BAC                     l1470 1390  
                   l1712 0D1C                     l1544 0BC0                     l1536 0B86  
                   l1480 142E                     l1632 0946                     l1800 0758  
                   l1706 0CE6                     l1562 0C58                     l1554 0C1C  
                   l1474 13A6                     l1490 111E                     l1650 0994  
                   l1802 0766                     l1716 0D50                     l1708 0CEE  
                   l1660 0A8C                     l1910 1248                     l1558 0C32  
                   l1590 0E80                     l1582 0E24                     l1574 0DE6  
                   l1478 142A                     l1494 112C                     l1646 0984  
                   l1912 1254                     l1584 0E38                     l1496 113E  
                   l1680 0AF0                     l1824 089A                     l1760 0660  
                   l1906 123A                     l1690 0C8C                     l1594 0E96  
                   l1578 0E0A                     l1818 085E                     l1762 0662  
                   l1834 08BC                     l1916 1280                     l1692 0C90  
                   l1684 0B08                     l1828 08A4                     l1780 0682  
                   l1772 067A                     l1764 0672                     l1860 12DE  
                   l1598 0EBC                     l1880 11C0                     l1784 068C  
                   l1776 067E                     l1768 0676                     l1786 06CE  
                   l1858 12BA                     l1798 073A                     ?_pad 0014  
                   l1998 1002                     STR_1 060E                     STR_2 0601  
                   STR_3 0615                     u1010 137A                     u1100 0A9A  
                   u1030 0918                     u1120 0ABC                     u1040 091A  
                   u1121 0ABA                     u1210 0D80                     u1130 0ACA  
                   u1220 0D82                     u1140 0ACE                     u1300 079E  
                   u1070 0958                     u1310 07A0                     u1160 0ADA  
                   u1320 07AC                     u1410 1274                     u1090 097E  
                   u1420 12A0                     u1340 07E0                     u1190 0CD2  
                   u1417 126A                     u1450 1024                     u1427 1296  
                   u1507 11F2                     u1365 14A0                     u1517 1204  
                   u1366 14A2                     u1527 1216                     u1456 1026  
                   u1537 1224                     u1547 14A4                     u1467 100E  
                   u1557 0F4E                     u1477 11B2                     u1487 11CC  
                   u1497 11E4                     i1l31 0046                     _TMR0 000FD6  
           __CFG_PWRT$ON 000000                     abs@a 0016                     _dbuf 0080  
                   _atoi 0C7A                     _main 0FC2                     _dtoa 08F0  
                   _prec 0075                     _nout 0071                     pad@i 001B  
                   pad@p 0018                     fsr1h 000FE2                     fsr2h 000FDA  
                   indf1 000FE7                     indf2 000FDF                     fsr1l 000FE1  
                   pad@w 001D                     fsr2l 000FD9                     btemp 007B  
                   prodh 000FF4                     prodl 000FF3                     start 0060  
          __CFG_IESO$OFF 000000            __CFG_MCLRE$ON 000000             ___param_bank 000000  
                  ??_abs 0018                    ??_pad 001A          __end_of___aodiv 0C7A  
                  ?_atoi 000B                    ?_main 0001                    ?_dtoa 001F  
        __end_of___aomod 0EDE                    _T0CON 000FD5             vfpfcnvrt@fmt 0045  
                  _PORTD 000F83                    _TRISD 000F95            __CFG_WRT0$OFF 000000  
          __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000  
         __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000  
         __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000          __end_of_lcd_cmd 0FC2  
        __end_of_lcd_ini 122C            __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000  
          __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000                    _flags 0077  
                  _conta 0079                    _fputc 1066                    _fputs 1386  
        __end_of_isdigit 1420                    atoi@n 0018                    pad@fp 0014  
                  atoi@s 000B                    _width 0073                    _putch 14C8  
                  dtoa@d 0021                    dtoa@i 0041                    dtoa@n 0039  
                  dtoa@p 0033                    dtoa@s 0037                    dtoa@w 0035  
        __end_of_isspace 1386           __CFG_BOREN$OFF 000000          __end_of_set_bit 14C8  
                  tablat 000FF5                    ttemp5 007C                    ttemp6 007F  
                  ttemp7 0083                    status 000FD8                    wtemp8 007C  
        __end_of_sprintf 1348          __initialization 144A             __end_of_atoi 0DBA  
           __end_of_main 1066             __end_of_dtoa 0B32                   ??_atoi 000D  
                 ??_main 00B0                   ??_dtoa 0029            __activetblptr 000002  
                 _ADCON1 000FC1                   ?_fputc 0004                   ?_fputs 000D  
                 ?_putch 0001                   _INTCON 000FF2            vfpfcnvrt@done 0055  
                 _TMR0IF 007F92           __CFG_XINST$OFF 000000             vfprintf@cfmt 005F  
              ??___aodiv 0014                ??___aomod 0014                   ___wmul 1470  
         __CFG_STVREN$ON 000000         __end_of_int_TMR0 0060         ??_lcd_escreve_bf 000D  
                 clear_0 1450                   clear_1 145C         ??_lcd_envia_byte 0009  
                 pad@buf 0016                ??_lcd_cmd 0006                   dtoa@fp 001F  
              ??_lcd_ini 0008                   _strlen 1420                   fputc@c 0004  
                 fputs@c 0011                   fputs@i 0012                   fputs@s 000D  
              ??_isdigit 0006             __mediumconst 0000                ??_isspace 0006  
              ??_set_bit 0005                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8                   putch@c 0001         __end_of_vfprintf 12FA  
              ??_sprintf 0067               __accesstop 0080  __end_of__initialization 1462  
        __CFG_PBADEN$OFF 000000            ___rparam_used 000001           __pcstackCOMRAM 0001  
          __end_of_fputc 1106            __end_of_fputs 13BE            __end_of_putch 14CA  
                ??_fputc 0008                  ??_fputs 0011                  ??_putch 0004  
             __pbssBANK0 0080                  ?___wmul 0004                  ?_strlen 0004  
     __size_of_vfpfcnvrt 02D4                  i1u72_20 003E                ?_int_TMR0 0001  
                __Hparam 0000                  __Lparam 0000                  ___aodiv 0B32  
                ___aomod 0DBA          __size_of___wmul 0026                ?_vfprintf 0059  
            set_bit@comp 0004             __psmallconst 0600                  __pcinit 144A  
                __ramtop 0600                  __ptext0 0FC2                  __ptext1 12FA  
                __ptext2 12A8                  __ptext3 061C                  __ptext4 08F0  
                __ptext5 1106                  __ptext6 1420                  __ptext7 1386  
                __ptext8 1066                  __ptext9 14C8                  _lcd_cmd 0EDE  
                _lcd_ini 119C          __size_of_strlen 002A             __size_of_abs 0032  
           __size_of_pad 0096                  _isdigit 13F0                  _isspace 1348  
                _set_bit 14B4                  atoi@neg 0011                  _sprintf 12FA  
   end_of_initialization 1462               ??_int_TMR0 0001       lcd_envia_byte@dado 0008  
                fputc@fp 0006            __Lmediumconst 0000                  fputs@fp 000F  
      __end_of_vfpfcnvrt 08F0                  postdec2 000FDD                  postinc0 000FEE  
                postinc1 000FE6                  postinc2 000FDE               ??_vfprintf 005F  
                strlen@a 0006                  strlen@s 0004                _PORTBbits 000F81  
              _PORTDbits 000F83                _PORTEbits 000F84                _TRISBbits 000F93  
              _TRISEbits 000F96               lcd_cmd@cmd 0007              vfpfcnvrt@ap 0047  
            vfpfcnvrt@fp 0043              vfpfcnvrt@ll 004D           __end_of___wmul 1496  
         __end_of_strlen 144A      start_initialization 144A              __end_of_abs 13F0  
            __end_of_pad 119C              vfprintf@fmt 005B                 ??___wmul 0008  
       __CFG_LPT1OSC$OFF 000000                 ??_strlen 0006              __pbssCOMRAM 0071  
          __pcstackBANK0 00B0         ___aodiv@dividend 0004  __size_of_lcd_escreve_bf 007C  
__size_of_lcd_envia_byte 001E        __size_of_int_TMR0 0048        __CFG_CCP2MX$PORTC 000000  
               ?___aodiv 0004                 ?___aomod 0004        lcd_escreve_bf@end 000D  
      lcd_escreve_bf@col 000A        lcd_escreve_bf@lin 000E         ___aodiv@quotient 0016  
      lcd_escreve_bf@str 000B                _bufferLCD 00A0              __pintcodelo 0018  
               ?_lcd_cmd 0001        __size_of_vfprintf 0052                 ?_lcd_ini 0001  
            __smallconst 0600                 ?_isdigit 0004                 ?_isspace 0004  
               ?_set_bit 0004               set_bit@cmd 0005                 ?_sprintf 0061  
         __size_of_fputc 00A0           __size_of_fputs 0038           __size_of_putch 0002  
         ___wmul@product 0008         __CFG_WDTPS$32768 000000                _vfpfcnvrt 061C  
      ___wmul@multiplier 0004                 __Hrparam 0000               vfprintf@ap 005D  
               __Lrparam 0000               vfprintf@fp 0059         __size_of___aodiv 0148  
       __size_of___aomod 0124               ?_vfpfcnvrt 0043          ___aodiv@divisor 000C  
        ___aodiv@counter 0014         __size_of_lcd_cmd 00E4         __size_of_lcd_ini 0090  
             sprintf@fmt 0063                 _atoi$953 0013                 _atoi$954 0017  
               _atoi$955 0015         __size_of_isdigit 0030                 _dtoa$481 0031  
         _lcd_escreve_bf 122C         __size_of_isspace 003E                 __ptext10 13BE  
               __ptext11 0DBA                 __ptext20 0EDE                 __ptext12 0B32  
               __ptext21 14B4                 __ptext13 0C7A                 __ptext14 1348  
               __ptext15 13F0                 __ptext16 1470                 __ptext17 119C  
               __ptext18 122C                 __ptext19 1496         __size_of_set_bit 0014  
         _lcd_envia_byte 1496         __size_of_sprintf 004E                 _int_TMR0 0018  
          __size_of_atoi 0140            __size_of_main 00A4            __size_of_dtoa 0242  
               int$flags 007B                 lcd_ini@i 0009                 _vfprintf 12A8  
            _isspace$971 000A         ___aomod@dividend 0004   __end_of_lcd_escreve_bf 12A8  
 __end_of_lcd_envia_byte 14B4      lcd_envia_byte@nivel 0009                 isdigit@c 0004  
               intlevel1 0000                sprintf@ap 0069                 isspace@c 0004  
        ___aomod@divisor 000C              ??_vfpfcnvrt 0049          ___aomod@counter 0014  
          _vfpfcnvrt$496 0057                 sprintf@f 006B                 sprintf@s 0061  
        ?_lcd_escreve_bf 000A          ?_lcd_envia_byte 0008             ___aodiv@sign 0015  
           ___aomod@sign 0015  
